
HW1_UART_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b188  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ba8  0800b350  0800b350  0001b350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cef8  0800cef8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cef8  0800cef8  0001cef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf00  0800cf00  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf00  0800cf00  0001cf00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf04  0800cf04  0001cf04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800cf08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  2000007c  0800cf84  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  0800cf84  00020988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025ea7  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043cf  00000000  00000000  00045f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002248  00000000  00000000  0004a328  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002038  00000000  00000000  0004c570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002dd81  00000000  00000000  0004e5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ba9d  00000000  00000000  0007c329  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00112f9a  00000000  00000000  00097dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001aad60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009920  00000000  00000000  001aaddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000007c 	.word	0x2000007c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800b338 	.word	0x0800b338

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000080 	.word	0x20000080
 8000204:	0800b338 	.word	0x0800b338

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__io_putchar>:
 set to 'Yes') calls __io_putchar() */
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFF);
 8000510:	1d39      	adds	r1, r7, #4
 8000512:	23ff      	movs	r3, #255	; 0xff
 8000514:	2201      	movs	r2, #1
 8000516:	4804      	ldr	r0, [pc, #16]	; (8000528 <__io_putchar+0x20>)
 8000518:	f008 f992 	bl	8008840 <HAL_UART_Transmit>
//HAL_UART_Transmit(UART_HandleTypeDef* huart, uint8_t pData, uint16_t Size, uint32_t Timeout);
  return ch;
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000644 	.word	0x20000644

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f002 fa83 	bl	8002a3a <HAL_Init>
  /* USER CODE BEGIN Init */
    
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f8b0 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
    
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f001 f82c 	bl	8001594 <MX_GPIO_Init>
  MX_ADC3_Init();
 800053c:	f000 f96a 	bl	8000814 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8000540:	f000 f9ba 	bl	80008b8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000544:	f000 ffd6 	bl	80014f4 <MX_FMC_Init>
  MX_I2C1_Init();
 8000548:	f000 f9e8 	bl	800091c <MX_I2C1_Init>
  MX_I2C3_Init();
 800054c:	f000 fa26 	bl	800099c <MX_I2C3_Init>
  MX_LTDC_Init();
 8000550:	f000 fa64 	bl	8000a1c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000554:	f000 fb18 	bl	8000b88 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000558:	f000 fb42 	bl	8000be0 <MX_RTC_Init>
  MX_SAI2_Init();
 800055c:	f000 fbe6 	bl	8000d2c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000560:	f000 fc8c 	bl	8000e7c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000564:	f000 fcba 	bl	8000edc <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8000568:	f000 fce8 	bl	8000f3c <MX_TIM1_Init>
  MX_TIM2_Init();
 800056c:	f000 fd92 	bl	8001094 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000570:	f000 fe06 	bl	8001180 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000574:	f000 fe7c 	bl	8001270 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000578:	f000 fef2 	bl	8001360 <MX_TIM8_Init>
  MX_TIM12_Init();
 800057c:	f000 ff44 	bl	8001408 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000580:	f000 ff88 	bl	8001494 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    BSP_LCD_Init();
 8000584:	f009 fb94 	bl	8009cb0 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);     
 8000588:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800058c:	2000      	movs	r0, #0
 800058e:	f009 fc27 	bl	8009de0 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(0); 
 8000592:	2000      	movs	r0, #0
 8000594:	f009 fc84 	bl	8009ea0 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000598:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800059c:	f009 fcf2 	bl	8009f84 <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font24);
 80005a0:	4832      	ldr	r0, [pc, #200]	; (800066c <main+0x140>)
 80005a2:	f009 fcbf 	bl	8009f24 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80005a6:	f04f 30ff 	mov.w	r0, #4294967295
 80005aa:	f009 fc89 	bl	8009ec0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80005ae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80005b2:	f009 fc9d 	bl	8009ef0 <BSP_LCD_SetBackColor>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    // Initializes the program
    printf("START RUNNING\n");
 80005b6:	482e      	ldr	r0, [pc, #184]	; (8000670 <main+0x144>)
 80005b8:	f00a fab2 	bl	800ab20 <puts>
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // "added" changes while external interruption happened
    if(added == 1) {
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <main+0x148>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d134      	bne.n	800062e <main+0x102>
    	switch(mode) {
 80005c4:	4b2c      	ldr	r3, [pc, #176]	; (8000678 <main+0x14c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b02      	cmp	r3, #2
 80005ca:	d00e      	beq.n	80005ea <main+0xbe>
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d018      	beq.n	8000602 <main+0xd6>
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d121      	bne.n	8000618 <main+0xec>
        	case 1:
        	delay_time = 200;
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <main+0x150>)
 80005d6:	22c8      	movs	r2, #200	; 0xc8
 80005d8:	601a      	str	r2, [r3, #0]
    			printf("MODE 1, LED FLASH = 5Hz\n");
 80005da:	4829      	ldr	r0, [pc, #164]	; (8000680 <main+0x154>)
 80005dc:	f00a faa0 	bl	800ab20 <puts>
    			BSP_LCD_DisplayStringAtLine(1, (uint8_t *)"MODE 1, LED FLASH = 5Hz");
 80005e0:	4927      	ldr	r1, [pc, #156]	; (8000680 <main+0x154>)
 80005e2:	2001      	movs	r0, #1
 80005e4:	f009 fdfe 	bl	800a1e4 <BSP_LCD_DisplayStringAtLine>
    			break;
 80005e8:	e01e      	b.n	8000628 <main+0xfc>
        	case 2:
    			delay_time = 1000;
 80005ea:	4b24      	ldr	r3, [pc, #144]	; (800067c <main+0x150>)
 80005ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005f0:	601a      	str	r2, [r3, #0]
    			printf("MODE 2, LED FLASH = 1Hz\n");
 80005f2:	4824      	ldr	r0, [pc, #144]	; (8000684 <main+0x158>)
 80005f4:	f00a fa94 	bl	800ab20 <puts>
    			BSP_LCD_DisplayStringAtLine(1, (uint8_t *)"MODE 2, LED FLASH = 1Hz");
 80005f8:	4922      	ldr	r1, [pc, #136]	; (8000684 <main+0x158>)
 80005fa:	2001      	movs	r0, #1
 80005fc:	f009 fdf2 	bl	800a1e4 <BSP_LCD_DisplayStringAtLine>
    			break;
 8000600:	e012      	b.n	8000628 <main+0xfc>
        	case 3:
    			delay_time = 100000;
 8000602:	4b1e      	ldr	r3, [pc, #120]	; (800067c <main+0x150>)
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <main+0x15c>)
 8000606:	601a      	str	r2, [r3, #0]
    			printf("MODE 3, LED FLASH = 0Hz\n");
 8000608:	4820      	ldr	r0, [pc, #128]	; (800068c <main+0x160>)
 800060a:	f00a fa89 	bl	800ab20 <puts>
    			BSP_LCD_DisplayStringAtLine(1, (uint8_t *)"MODE 3, LED FLASH = 0Hz");
 800060e:	491f      	ldr	r1, [pc, #124]	; (800068c <main+0x160>)
 8000610:	2001      	movs	r0, #1
 8000612:	f009 fde7 	bl	800a1e4 <BSP_LCD_DisplayStringAtLine>
    			break;
 8000616:	e007      	b.n	8000628 <main+0xfc>
        	default:
        		printf("YOU GOT A TROUBLE!\n");
 8000618:	481d      	ldr	r0, [pc, #116]	; (8000690 <main+0x164>)
 800061a:	f00a fa81 	bl	800ab20 <puts>
        		BSP_LCD_DisplayStringAtLine(1, (uint8_t *)"YOU GOT A TROUBLE!");
 800061e:	491c      	ldr	r1, [pc, #112]	; (8000690 <main+0x164>)
 8000620:	2001      	movs	r0, #1
 8000622:	f009 fddf 	bl	800a1e4 <BSP_LCD_DisplayStringAtLine>
        		break;
 8000626:	bf00      	nop
    	}
        added = 0;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <main+0x148>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
    }

    if((delay_time != 0) && (delay_time <= 1000)) {
 800062e:	4b13      	ldr	r3, [pc, #76]	; (800067c <main+0x150>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d00e      	beq.n	8000654 <main+0x128>
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <main+0x150>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800063e:	dc09      	bgt.n	8000654 <main+0x128>
        HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8000640:	2102      	movs	r1, #2
 8000642:	4814      	ldr	r0, [pc, #80]	; (8000694 <main+0x168>)
 8000644:	f003 fccd 	bl	8003fe2 <HAL_GPIO_TogglePin>
        HAL_Delay(delay_time);
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <main+0x150>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fa21 	bl	8002a94 <HAL_Delay>
 8000652:	e009      	b.n	8000668 <main+0x13c>
    }
    else if(delay_time == 100000) {
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <main+0x150>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <main+0x15c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d1ae      	bne.n	80005bc <main+0x90>
    	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2102      	movs	r1, #2
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <main+0x168>)
 8000664:	f003 fca4 	bl	8003fb0 <HAL_GPIO_WritePin>
    if(added == 1) {
 8000668:	e7a8      	b.n	80005bc <main+0x90>
 800066a:	bf00      	nop
 800066c:	2000000c 	.word	0x2000000c
 8000670:	0800b350 	.word	0x0800b350
 8000674:	200000a0 	.word	0x200000a0
 8000678:	20000098 	.word	0x20000098
 800067c:	2000009c 	.word	0x2000009c
 8000680:	0800b360 	.word	0x0800b360
 8000684:	0800b378 	.word	0x0800b378
 8000688:	000186a0 	.word	0x000186a0
 800068c:	0800b390 	.word	0x0800b390
 8000690:	0800b3a8 	.word	0x0800b3a8
 8000694:	40022000 	.word	0x40022000

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b4      	sub	sp, #208	; 0xd0
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006a2:	2230      	movs	r2, #48	; 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f00a f9d6 	bl	800aa58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2284      	movs	r2, #132	; 0x84
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f00a f9c7 	bl	800aa58 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ca:	f004 f969 	bl	80049a0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b4e      	ldr	r3, [pc, #312]	; (8000808 <SystemClock_Config+0x170>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a4d      	ldr	r2, [pc, #308]	; (8000808 <SystemClock_Config+0x170>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b4b      	ldr	r3, [pc, #300]	; (8000808 <SystemClock_Config+0x170>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e6:	4b49      	ldr	r3, [pc, #292]	; (800080c <SystemClock_Config+0x174>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a48      	ldr	r2, [pc, #288]	; (800080c <SystemClock_Config+0x174>)
 80006ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	4b46      	ldr	r3, [pc, #280]	; (800080c <SystemClock_Config+0x174>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006fe:	2309      	movs	r3, #9
 8000700:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000718:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000720:	2319      	movs	r3, #25
 8000722:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000726:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800072a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000734:	2309      	movs	r3, #9
 8000736:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800073e:	4618      	mov	r0, r3
 8000740:	f004 fa50 	bl	8004be4 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800074a:	f001 f9cb 	bl	8001ae4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074e:	f004 f937 	bl	80049c0 <HAL_PWREx_EnableOverDrive>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000758:	f001 f9c4 	bl	8001ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000772:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800077e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000782:	2106      	movs	r1, #6
 8000784:	4618      	mov	r0, r3
 8000786:	f004 fcd1 	bl	800512c <HAL_RCC_ClockConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000790:	f001 f9a8 	bl	8001ae4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <SystemClock_Config+0x178>)
 8000796:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000798:	2364      	movs	r3, #100	; 0x64
 800079a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80007a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80007ae:	2305      	movs	r3, #5
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80007b6:	2303      	movs	r3, #3
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80007c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80007ce:	2300      	movs	r3, #0
 80007d0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007d2:	2300      	movs	r3, #0
 80007d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007da:	2300      	movs	r3, #0
 80007dc:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80007de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	4618      	mov	r0, r3
 80007f2:	f004 fe9f 	bl	8005534 <HAL_RCCEx_PeriphCLKConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x168>
  {
    Error_Handler();
 80007fc:	f001 f972 	bl	8001ae4 <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	37d0      	adds	r7, #208	; 0xd0
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000
 8000810:	01b14068 	.word	0x01b14068

08000814 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_ADC3_Init+0x98>)
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <MX_ADC3_Init+0x9c>)
 800082a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_ADC3_Init+0x98>)
 800082e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000832:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_ADC3_Init+0x98>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_ADC3_Init+0x98>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_ADC3_Init+0x98>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_ADC3_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_ADC3_Init+0x98>)
 8000850:	2200      	movs	r2, #0
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_ADC3_Init+0x98>)
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <MX_ADC3_Init+0xa0>)
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_ADC3_Init+0x98>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_ADC3_Init+0x98>)
 8000862:	2201      	movs	r2, #1
 8000864:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_ADC3_Init+0x98>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_ADC3_Init+0x98>)
 8000870:	2201      	movs	r2, #1
 8000872:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_ADC3_Init+0x98>)
 8000876:	f002 f92f 	bl	8002ad8 <HAL_ADC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000880:	f001 f930 	bl	8001ae4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000884:	2304      	movs	r3, #4
 8000886:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000888:	2301      	movs	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_ADC3_Init+0x98>)
 8000896:	f002 f963 	bl	8002b60 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80008a0:	f001 f920 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200005fc 	.word	0x200005fc
 80008b0:	40012200 	.word	0x40012200
 80008b4:	0f000001 	.word	0x0f000001

080008b8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <MX_DMA2D_Init+0x60>)
 80008c0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_DMA2D_Init+0x5c>)
 80008ee:	f002 fe19 	bl	8003524 <HAL_DMA2D_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008f8:	f001 f8f4 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008fc:	2101      	movs	r1, #1
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_DMA2D_Init+0x5c>)
 8000900:	f003 f87e 	bl	8003a00 <HAL_DMA2D_ConfigLayer>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800090a:	f001 f8eb 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000724 	.word	0x20000724
 8000918:	4002b000 	.word	0x4002b000

0800091c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_I2C1_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_I2C1_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_I2C1_Init+0x74>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <MX_I2C1_Init+0x7c>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_I2C1_Init+0x74>)
 8000934:	2201      	movs	r2, #1
 8000936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <MX_I2C1_Init+0x74>)
 8000958:	f003 fb82 	bl	8004060 <HAL_I2C_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000962:	f001 f8bf 	bl	8001ae4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <MX_I2C1_Init+0x74>)
 800096a:	f003 fc09 	bl	8004180 <HAL_I2CEx_ConfigAnalogFilter>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000974:	f001 f8b6 	bl	8001ae4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_I2C1_Init+0x74>)
 800097c:	f003 fc4b 	bl	8004216 <HAL_I2CEx_ConfigDigitalFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000986:	f001 f8ad 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000404 	.word	0x20000404
 8000994:	40005400 	.word	0x40005400
 8000998:	00c0eaff 	.word	0x00c0eaff

0800099c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <MX_I2C3_Init+0x78>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <MX_I2C3_Init+0x7c>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009d6:	480e      	ldr	r0, [pc, #56]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009d8:	f003 fb42 	bl	8004060 <HAL_I2C_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009e2:	f001 f87f 	bl	8001ae4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4809      	ldr	r0, [pc, #36]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009ea:	f003 fbc9 	bl	8004180 <HAL_I2CEx_ConfigAnalogFilter>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009f4:	f001 f876 	bl	8001ae4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_I2C3_Init+0x74>)
 80009fc:	f003 fc0b 	bl	8004216 <HAL_I2CEx_ConfigDigitalFilter>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a06:	f001 f86d 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200002a8 	.word	0x200002a8
 8000a14:	40005c00 	.word	0x40005c00
 8000a18:	00c0eaff 	.word	0x00c0eaff

08000a1c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09a      	sub	sp, #104	; 0x68
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a26:	2234      	movs	r2, #52	; 0x34
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f00a f814 	bl	800aa58 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2234      	movs	r2, #52	; 0x34
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00a f80e 	bl	800aa58 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a3c:	4b50      	ldr	r3, [pc, #320]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a3e:	4a51      	ldr	r2, [pc, #324]	; (8000b84 <MX_LTDC_Init+0x168>)
 8000a40:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a42:	4b4f      	ldr	r3, [pc, #316]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a48:	4b4d      	ldr	r3, [pc, #308]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a4e:	4b4c      	ldr	r3, [pc, #304]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a54:	4b4a      	ldr	r3, [pc, #296]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000a5a:	4b49      	ldr	r3, [pc, #292]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a5c:	2228      	movs	r2, #40	; 0x28
 8000a5e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000a60:	4b47      	ldr	r3, [pc, #284]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a62:	2209      	movs	r2, #9
 8000a64:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000a66:	4b46      	ldr	r3, [pc, #280]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a68:	2235      	movs	r2, #53	; 0x35
 8000a6a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000a6c:	4b44      	ldr	r3, [pc, #272]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a6e:	220b      	movs	r2, #11
 8000a70:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000a72:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a74:	f240 2215 	movw	r2, #533	; 0x215
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a7c:	f240 121b 	movw	r2, #283	; 0x11b
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000a82:	4b3f      	ldr	r3, [pc, #252]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a84:	f240 2235 	movw	r2, #565	; 0x235
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000a8a:	4b3d      	ldr	r3, [pc, #244]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a8c:	f240 121d 	movw	r2, #285	; 0x11d
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a92:	4b3b      	ldr	r3, [pc, #236]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a9a:	4b39      	ldr	r3, [pc, #228]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000aaa:	4835      	ldr	r0, [pc, #212]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000aac:	f003 fc00 	bl	80042b0 <HAL_LTDC_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000ab6:	f001 f815 	bl	8001ae4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000abe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000ac8:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000acc:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000ad2:	23ff      	movs	r3, #255	; 0xff
 8000ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ada:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ade:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000ae4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000ae8:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000aea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000aee:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000af0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000af4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4619      	mov	r1, r3
 8000b10:	481b      	ldr	r0, [pc, #108]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000b12:	f003 fd5f 	bl	80045d4 <HAL_LTDC_ConfigLayer>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000b1c:	f000 ffe2 	bl	8001ae4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b3c:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b3e:	2305      	movs	r3, #5
 8000b40:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_LTDC_Init+0x164>)
 8000b68:	f003 fd34 	bl	80045d4 <HAL_LTDC_ConfigLayer>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000b72:	f000 ffb7 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3768      	adds	r7, #104	; 0x68
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000554 	.word	0x20000554
 8000b84:	40016800 	.word	0x40016800

08000b88 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <MX_QUADSPI_Init+0x54>)
 8000b90:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_QUADSPI_Init+0x50>)
 8000bc4:	f003 ff4c 	bl	8004a60 <HAL_QSPI_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000bce:	f000 ff89 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000818 	.word	0x20000818
 8000bdc:	a0001000 	.word	0xa0001000

08000be0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b092      	sub	sp, #72	; 0x48
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
 8000bf6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	222c      	movs	r2, #44	; 0x2c
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f009 ff28 	bl	800aa58 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c08:	4b46      	ldr	r3, [pc, #280]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c0a:	4a47      	ldr	r2, [pc, #284]	; (8000d28 <MX_RTC_Init+0x148>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c0e:	4b45      	ldr	r3, [pc, #276]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c14:	4b43      	ldr	r3, [pc, #268]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c16:	227f      	movs	r2, #127	; 0x7f
 8000c18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c1a:	4b42      	ldr	r3, [pc, #264]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c20:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c26:	4b3f      	ldr	r3, [pc, #252]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c2c:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c32:	483c      	ldr	r0, [pc, #240]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c34:	f005 f9a0 	bl	8005f78 <HAL_RTC_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000c3e:	f000 ff51 	bl	8001ae4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c60:	2201      	movs	r2, #1
 8000c62:	4619      	mov	r1, r3
 8000c64:	482f      	ldr	r0, [pc, #188]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c66:	f005 fa03 	bl	8006070 <HAL_RTC_SetTime>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000c70:	f000 ff38 	bl	8001ae4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c90:	2201      	movs	r2, #1
 8000c92:	4619      	mov	r1, r3
 8000c94:	4823      	ldr	r0, [pc, #140]	; (8000d24 <MX_RTC_Init+0x144>)
 8000c96:	f005 faa9 	bl	80061ec <HAL_RTC_SetDate>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000ca0:	f000 ff20 	bl	8001ae4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <MX_RTC_Init+0x144>)
 8000cdc:	f005 fb2e 	bl	800633c <HAL_RTC_SetAlarm>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000ce6:	f000 fefd 	bl	8001ae4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480b      	ldr	r0, [pc, #44]	; (8000d24 <MX_RTC_Init+0x144>)
 8000cf8:	f005 fb20 	bl	800633c <HAL_RTC_SetAlarm>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000d02:	f000 feef 	bl	8001ae4 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d06:	2202      	movs	r2, #2
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <MX_RTC_Init+0x144>)
 8000d0c:	f005 fca0 	bl	8006650 <HAL_RTCEx_SetTimeStamp>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000d16:	f000 fee5 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	3748      	adds	r7, #72	; 0x48
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200006c4 	.word	0x200006c4
 8000d28:	40002800 	.word	0x40002800

08000d2c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d30:	4b4d      	ldr	r3, [pc, #308]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d32:	4a4e      	ldr	r2, [pc, #312]	; (8000e6c <MX_SAI2_Init+0x140>)
 8000d34:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d36:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d3c:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d42:	4b49      	ldr	r3, [pc, #292]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d48:	4b47      	ldr	r3, [pc, #284]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d4e:	4b46      	ldr	r3, [pc, #280]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d54:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d5a:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d60:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d66:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d6c:	4b3e      	ldr	r3, [pc, #248]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d6e:	4a40      	ldr	r2, [pc, #256]	; (8000e70 <MX_SAI2_Init+0x144>)
 8000d70:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d72:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d78:	4b3b      	ldr	r3, [pc, #236]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d84:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d8a:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d8c:	2208      	movs	r2, #8
 8000d8e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d90:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d96:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000da2:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000da8:	4b2f      	ldr	r3, [pc, #188]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000dae:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000db4:	4b2c      	ldr	r3, [pc, #176]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000dba:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000dc0:	4829      	ldr	r0, [pc, #164]	; (8000e68 <MX_SAI2_Init+0x13c>)
 8000dc2:	f005 fc9b 	bl	80066fc <HAL_SAI_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000dcc:	f000 fe8a 	bl	8001ae4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000dd0:	4b28      	ldr	r3, [pc, #160]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000dd2:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <MX_SAI2_Init+0x14c>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dd6:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ddc:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000dde:	2203      	movs	r2, #3
 8000de0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000de4:	2240      	movs	r2, #64	; 0x40
 8000de6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e20:	2208      	movs	r2, #8
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e54:	4807      	ldr	r0, [pc, #28]	; (8000e74 <MX_SAI2_Init+0x148>)
 8000e56:	f005 fc51 	bl	80066fc <HAL_SAI_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000e60:	f000 fe40 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000380 	.word	0x20000380
 8000e6c:	40015c04 	.word	0x40015c04
 8000e70:	0002ee00 	.word	0x0002ee00
 8000e74:	20000224 	.word	0x20000224
 8000e78:	40015c24 	.word	0x40015c24

08000e7c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <MX_SDMMC1_SD_Init+0x58>)
 8000e82:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <MX_SDMMC1_SD_Init+0x5c>)
 8000e84:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_SDMMC1_SD_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MX_SDMMC1_SD_Init+0x58>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_SDMMC1_SD_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_SDMMC1_SD_Init+0x58>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <MX_SDMMC1_SD_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_SDMMC1_SD_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000eaa:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <MX_SDMMC1_SD_Init+0x58>)
 8000eac:	f005 fdce 	bl	8006a4c <HAL_SD_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000eb6:	f000 fe15 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000eba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_SDMMC1_SD_Init+0x58>)
 8000ec0:	f006 f800 	bl	8006ec4 <HAL_SD_ConfigWideBusOperation>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8000eca:	f000 fe0b 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000450 	.word	0x20000450
 8000ed8:	40012c00 	.word	0x40012c00

08000edc <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000ee2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000ee6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f26:	f006 fb85 	bl	8007634 <HAL_SPDIFRX_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000f30:	f000 fdd8 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000334 	.word	0x20000334

08000f3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09a      	sub	sp, #104	; 0x68
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	222c      	movs	r2, #44	; 0x2c
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f009 fd6e 	bl	800aa58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f7c:	4b43      	ldr	r3, [pc, #268]	; (800108c <MX_TIM1_Init+0x150>)
 8000f7e:	4a44      	ldr	r2, [pc, #272]	; (8001090 <MX_TIM1_Init+0x154>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f82:	4b42      	ldr	r3, [pc, #264]	; (800108c <MX_TIM1_Init+0x150>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b40      	ldr	r3, [pc, #256]	; (800108c <MX_TIM1_Init+0x150>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f8e:	4b3f      	ldr	r3, [pc, #252]	; (800108c <MX_TIM1_Init+0x150>)
 8000f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <MX_TIM1_Init+0x150>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f9c:	4b3b      	ldr	r3, [pc, #236]	; (800108c <MX_TIM1_Init+0x150>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	; (800108c <MX_TIM1_Init+0x150>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fa8:	4838      	ldr	r0, [pc, #224]	; (800108c <MX_TIM1_Init+0x150>)
 8000faa:	f006 fb9f 	bl	80076ec <HAL_TIM_Base_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fb4:	f000 fd96 	bl	8001ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4831      	ldr	r0, [pc, #196]	; (800108c <MX_TIM1_Init+0x150>)
 8000fc6:	f006 fe49 	bl	8007c5c <HAL_TIM_ConfigClockSource>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fd0:	f000 fd88 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000fd4:	482d      	ldr	r0, [pc, #180]	; (800108c <MX_TIM1_Init+0x150>)
 8000fd6:	f006 fbdf 	bl	8007798 <HAL_TIM_PWM_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000fe0:	f000 fd80 	bl	8001ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4825      	ldr	r0, [pc, #148]	; (800108c <MX_TIM1_Init+0x150>)
 8000ff8:	f007 faaa 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001002:	f000 fd6f 	bl	8001ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001006:	2360      	movs	r3, #96	; 0x60
 8001008:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100e:	2300      	movs	r3, #0
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001012:	2300      	movs	r3, #0
 8001014:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <MX_TIM1_Init+0x150>)
 800102c:	f006 fcfe 	bl	8007a2c <HAL_TIM_PWM_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001036:	f000 fd55 	bl	8001ae4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800104e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001052:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800105c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800106a:	1d3b      	adds	r3, r7, #4
 800106c:	4619      	mov	r1, r3
 800106e:	4807      	ldr	r0, [pc, #28]	; (800108c <MX_TIM1_Init+0x150>)
 8001070:	f007 fafc 	bl	800866c <HAL_TIMEx_ConfigBreakDeadTime>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800107a:	f000 fd33 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <MX_TIM1_Init+0x150>)
 8001080:	f001 f8fc 	bl	800227c <HAL_TIM_MspPostInit>

}
 8001084:	bf00      	nop
 8001086:	3768      	adds	r7, #104	; 0x68
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200006e4 	.word	0x200006e4
 8001090:	40010000 	.word	0x40010000

08001094 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c6:	4b2d      	ldr	r3, [pc, #180]	; (800117c <MX_TIM2_Init+0xe8>)
 80010c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <MX_TIM2_Init+0xe8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <MX_TIM2_Init+0xe8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <MX_TIM2_Init+0xe8>)
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b26      	ldr	r3, [pc, #152]	; (800117c <MX_TIM2_Init+0xe8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <MX_TIM2_Init+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ee:	4823      	ldr	r0, [pc, #140]	; (800117c <MX_TIM2_Init+0xe8>)
 80010f0:	f006 fafc 	bl	80076ec <HAL_TIM_Base_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010fa:	f000 fcf3 	bl	8001ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001108:	4619      	mov	r1, r3
 800110a:	481c      	ldr	r0, [pc, #112]	; (800117c <MX_TIM2_Init+0xe8>)
 800110c:	f006 fda6 	bl	8007c5c <HAL_TIM_ConfigClockSource>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001116:	f000 fce5 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800111a:	4818      	ldr	r0, [pc, #96]	; (800117c <MX_TIM2_Init+0xe8>)
 800111c:	f006 fb3c 	bl	8007798 <HAL_TIM_PWM_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001126:	f000 fcdd 	bl	8001ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	4619      	mov	r1, r3
 8001138:	4810      	ldr	r0, [pc, #64]	; (800117c <MX_TIM2_Init+0xe8>)
 800113a:	f007 fa09 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001144:	f000 fcce 	bl	8001ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001148:	2360      	movs	r3, #96	; 0x60
 800114a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	4807      	ldr	r0, [pc, #28]	; (800117c <MX_TIM2_Init+0xe8>)
 8001160:	f006 fc64 	bl	8007a2c <HAL_TIM_PWM_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800116a:	f000 fcbb 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800116e:	4803      	ldr	r0, [pc, #12]	; (800117c <MX_TIM2_Init+0xe8>)
 8001170:	f001 f884 	bl	800227c <HAL_TIM_MspPostInit>

}
 8001174:	bf00      	nop
 8001176:	3738      	adds	r7, #56	; 0x38
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000764 	.word	0x20000764

08001180 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08e      	sub	sp, #56	; 0x38
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a0:	463b      	mov	r3, r7
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <MX_TIM3_Init+0xe8>)
 80011b4:	4a2d      	ldr	r2, [pc, #180]	; (800126c <MX_TIM3_Init+0xec>)
 80011b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <MX_TIM3_Init+0xe8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <MX_TIM3_Init+0xe8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <MX_TIM3_Init+0xe8>)
 80011c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_TIM3_Init+0xe8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <MX_TIM3_Init+0xe8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011d8:	4823      	ldr	r0, [pc, #140]	; (8001268 <MX_TIM3_Init+0xe8>)
 80011da:	f006 fa87 	bl	80076ec <HAL_TIM_Base_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011e4:	f000 fc7e 	bl	8001ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f2:	4619      	mov	r1, r3
 80011f4:	481c      	ldr	r0, [pc, #112]	; (8001268 <MX_TIM3_Init+0xe8>)
 80011f6:	f006 fd31 	bl	8007c5c <HAL_TIM_ConfigClockSource>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001200:	f000 fc70 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001204:	4818      	ldr	r0, [pc, #96]	; (8001268 <MX_TIM3_Init+0xe8>)
 8001206:	f006 fac7 	bl	8007798 <HAL_TIM_PWM_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001210:	f000 fc68 	bl	8001ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4811      	ldr	r0, [pc, #68]	; (8001268 <MX_TIM3_Init+0xe8>)
 8001224:	f007 f994 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800122e:	f000 fc59 	bl	8001ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001232:	2360      	movs	r3, #96	; 0x60
 8001234:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	4619      	mov	r1, r3
 8001248:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_TIM3_Init+0xe8>)
 800124a:	f006 fbef 	bl	8007a2c <HAL_TIM_PWM_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001254:	f000 fc46 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <MX_TIM3_Init+0xe8>)
 800125a:	f001 f80f 	bl	800227c <HAL_TIM_MspPostInit>

}
 800125e:	bf00      	nop
 8001260:	3738      	adds	r7, #56	; 0x38
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000514 	.word	0x20000514
 800126c:	40000400 	.word	0x40000400

08001270 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	; 0x38
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
 800129e:	615a      	str	r2, [r3, #20]
 80012a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <MX_TIM5_Init+0xe8>)
 80012a4:	4a2d      	ldr	r2, [pc, #180]	; (800135c <MX_TIM5_Init+0xec>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <MX_TIM5_Init+0xe8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <MX_TIM5_Init+0xe8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <MX_TIM5_Init+0xe8>)
 80012b6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <MX_TIM5_Init+0xe8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <MX_TIM5_Init+0xe8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012c8:	4823      	ldr	r0, [pc, #140]	; (8001358 <MX_TIM5_Init+0xe8>)
 80012ca:	f006 fa0f 	bl	80076ec <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80012d4:	f000 fc06 	bl	8001ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e2:	4619      	mov	r1, r3
 80012e4:	481c      	ldr	r0, [pc, #112]	; (8001358 <MX_TIM5_Init+0xe8>)
 80012e6:	f006 fcb9 	bl	8007c5c <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80012f0:	f000 fbf8 	bl	8001ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80012f4:	4818      	ldr	r0, [pc, #96]	; (8001358 <MX_TIM5_Init+0xe8>)
 80012f6:	f006 fa4f 	bl	8007798 <HAL_TIM_PWM_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001300:	f000 fbf0 	bl	8001ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4811      	ldr	r0, [pc, #68]	; (8001358 <MX_TIM5_Init+0xe8>)
 8001314:	f007 f91c 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800131e:	f000 fbe1 	bl	8001ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001322:	2360      	movs	r3, #96	; 0x60
 8001324:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	220c      	movs	r2, #12
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM5_Init+0xe8>)
 800133a:	f006 fb77 	bl	8007a2c <HAL_TIM_PWM_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001344:	f000 fbce 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM5_Init+0xe8>)
 800134a:	f000 ff97 	bl	800227c <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3738      	adds	r7, #56	; 0x38
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200004d4 	.word	0x200004d4
 800135c:	40000c00 	.word	0x40000c00

08001360 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <MX_TIM8_Init+0xa0>)
 8001380:	4a20      	ldr	r2, [pc, #128]	; (8001404 <MX_TIM8_Init+0xa4>)
 8001382:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <MX_TIM8_Init+0xa0>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_TIM8_Init+0xa0>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_TIM8_Init+0xa0>)
 8001392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001396:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_TIM8_Init+0xa0>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_TIM8_Init+0xa0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_TIM8_Init+0xa0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013aa:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_TIM8_Init+0xa0>)
 80013ac:	f006 f99e 	bl	80076ec <HAL_TIM_Base_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80013b6:	f000 fb95 	bl	8001ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4619      	mov	r1, r3
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <MX_TIM8_Init+0xa0>)
 80013c8:	f006 fc48 	bl	8007c5c <HAL_TIM_ConfigClockSource>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80013d2:	f000 fb87 	bl	8001ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4806      	ldr	r0, [pc, #24]	; (8001400 <MX_TIM8_Init+0xa0>)
 80013e8:	f007 f8b2 	bl	8008550 <HAL_TIMEx_MasterConfigSynchronization>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80013f2:	f000 fb77 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	3720      	adds	r7, #32
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200002f4 	.word	0x200002f4
 8001404:	40010400 	.word	0x40010400

08001408 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
 800141c:	615a      	str	r2, [r3, #20]
 800141e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_TIM12_Init+0x84>)
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <MX_TIM12_Init+0x88>)
 8001424:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <MX_TIM12_Init+0x84>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_TIM12_Init+0x84>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_TIM12_Init+0x84>)
 8001434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001438:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_TIM12_Init+0x84>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_TIM12_Init+0x84>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001446:	4811      	ldr	r0, [pc, #68]	; (800148c <MX_TIM12_Init+0x84>)
 8001448:	f006 f9a6 	bl	8007798 <HAL_TIM_PWM_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001452:	f000 fb47 	bl	8001ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001456:	2360      	movs	r3, #96	; 0x60
 8001458:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2200      	movs	r2, #0
 800146a:	4619      	mov	r1, r3
 800146c:	4807      	ldr	r0, [pc, #28]	; (800148c <MX_TIM12_Init+0x84>)
 800146e:	f006 fadd 	bl	8007a2c <HAL_TIM_PWM_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001478:	f000 fb34 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <MX_TIM12_Init+0x84>)
 800147e:	f000 fefd 	bl	800227c <HAL_TIM_MspPostInit>

}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200007a4 	.word	0x200007a4
 8001490:	40001800 	.word	0x40001800

08001494 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MX_USART1_UART_Init+0x58>)
 800149a:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <MX_USART1_UART_Init+0x5c>)
 800149c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <MX_USART1_UART_Init+0x58>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <MX_USART1_UART_Init+0x58>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_USART1_UART_Init+0x58>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <MX_USART1_UART_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <MX_USART1_UART_Init+0x58>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <MX_USART1_UART_Init+0x58>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <MX_USART1_UART_Init+0x58>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <MX_USART1_UART_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <MX_USART1_UART_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_USART1_UART_Init+0x58>)
 80014d8:	f007 f964 	bl	80087a4 <HAL_UART_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014e2:	f000 faff 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000644 	.word	0x20000644
 80014f0:	40011000 	.word	0x40011000

080014f4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800150c:	4b1f      	ldr	r3, [pc, #124]	; (800158c <MX_FMC_Init+0x98>)
 800150e:	4a20      	ldr	r2, [pc, #128]	; (8001590 <MX_FMC_Init+0x9c>)
 8001510:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001512:	4b1e      	ldr	r3, [pc, #120]	; (800158c <MX_FMC_Init+0x98>)
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <MX_FMC_Init+0x98>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_FMC_Init+0x98>)
 8001520:	2204      	movs	r2, #4
 8001522:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <MX_FMC_Init+0x98>)
 8001526:	2210      	movs	r2, #16
 8001528:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_FMC_Init+0x98>)
 800152c:	2240      	movs	r2, #64	; 0x40
 800152e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_FMC_Init+0x98>)
 8001532:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001536:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_FMC_Init+0x98>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_FMC_Init+0x98>)
 8001540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001544:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_FMC_Init+0x98>)
 8001548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_FMC_Init+0x98>)
 8001550:	2200      	movs	r2, #0
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001554:	2302      	movs	r3, #2
 8001556:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001558:	2307      	movs	r3, #7
 800155a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800155c:	2304      	movs	r3, #4
 800155e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001560:	2307      	movs	r3, #7
 8001562:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001564:	2303      	movs	r3, #3
 8001566:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001568:	2302      	movs	r3, #2
 800156a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_FMC_Init+0x98>)
 8001576:	f005 ffdd 	bl	8007534 <HAL_SDRAM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001580:	f000 fab0 	bl	8001ae4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001584:	bf00      	nop
 8001586:	3720      	adds	r7, #32
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200007e4 	.word	0x200007e4
 8001590:	a0000140 	.word	0xa0000140

08001594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b090      	sub	sp, #64	; 0x40
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015aa:	4bae      	ldr	r3, [pc, #696]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4aad      	ldr	r2, [pc, #692]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4bab      	ldr	r3, [pc, #684]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c2:	4ba8      	ldr	r3, [pc, #672]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4aa7      	ldr	r2, [pc, #668]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80015c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4ba5      	ldr	r3, [pc, #660]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4ba2      	ldr	r3, [pc, #648]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4aa1      	ldr	r2, [pc, #644]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b9f      	ldr	r3, [pc, #636]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	623b      	str	r3, [r7, #32]
 80015f0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	4b9c      	ldr	r3, [pc, #624]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a9b      	ldr	r2, [pc, #620]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b99      	ldr	r3, [pc, #612]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	61fb      	str	r3, [r7, #28]
 8001608:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800160a:	4b96      	ldr	r3, [pc, #600]	; (8001864 <MX_GPIO_Init+0x2d0>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a95      	ldr	r2, [pc, #596]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b93      	ldr	r3, [pc, #588]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	61bb      	str	r3, [r7, #24]
 8001620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b90      	ldr	r3, [pc, #576]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a8f      	ldr	r2, [pc, #572]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b8d      	ldr	r3, [pc, #564]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800163a:	4b8a      	ldr	r3, [pc, #552]	; (8001864 <MX_GPIO_Init+0x2d0>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a89      	ldr	r2, [pc, #548]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001640:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b87      	ldr	r3, [pc, #540]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001652:	4b84      	ldr	r3, [pc, #528]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a83      	ldr	r2, [pc, #524]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b81      	ldr	r3, [pc, #516]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800166a:	4b7e      	ldr	r3, [pc, #504]	; (8001864 <MX_GPIO_Init+0x2d0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a7d      	ldr	r2, [pc, #500]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001670:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b7b      	ldr	r3, [pc, #492]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001682:	4b78      	ldr	r3, [pc, #480]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a77      	ldr	r2, [pc, #476]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001688:	f043 0320 	orr.w	r3, r3, #32
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b75      	ldr	r3, [pc, #468]	; (8001864 <MX_GPIO_Init+0x2d0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169a:	4b72      	ldr	r3, [pc, #456]	; (8001864 <MX_GPIO_Init+0x2d0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a71      	ldr	r2, [pc, #452]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80016a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b6f      	ldr	r3, [pc, #444]	; (8001864 <MX_GPIO_Init+0x2d0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2120      	movs	r1, #32
 80016b6:	486c      	ldr	r0, [pc, #432]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80016b8:	f002 fc7a 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	210e      	movs	r1, #14
 80016c0:	486a      	ldr	r0, [pc, #424]	; (800186c <MX_GPIO_Init+0x2d8>)
 80016c2:	f002 fc75 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80016c6:	2201      	movs	r2, #1
 80016c8:	2108      	movs	r1, #8
 80016ca:	4869      	ldr	r0, [pc, #420]	; (8001870 <MX_GPIO_Init+0x2dc>)
 80016cc:	f002 fc70 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d6:	4865      	ldr	r0, [pc, #404]	; (800186c <MX_GPIO_Init+0x2d8>)
 80016d8:	f002 fc6a 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e2:	4864      	ldr	r0, [pc, #400]	; (8001874 <MX_GPIO_Init+0x2e0>)
 80016e4:	f002 fc64 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	21c8      	movs	r1, #200	; 0xc8
 80016ec:	4862      	ldr	r0, [pc, #392]	; (8001878 <MX_GPIO_Init+0x2e4>)
 80016ee:	f002 fc5f 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80016f2:	2308      	movs	r3, #8
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	485d      	ldr	r0, [pc, #372]	; (800187c <MX_GPIO_Init+0x2e8>)
 8001706:	f002 faa9 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800170a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800171c:	230b      	movs	r3, #11
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001720:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001724:	4619      	mov	r1, r3
 8001726:	4854      	ldr	r0, [pc, #336]	; (8001878 <MX_GPIO_Init+0x2e4>)
 8001728:	f002 fa98 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800172c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800173e:	230a      	movs	r3, #10
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001746:	4619      	mov	r1, r3
 8001748:	484d      	ldr	r0, [pc, #308]	; (8001880 <MX_GPIO_Init+0x2ec>)
 800174a:	f002 fa87 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800174e:	2360      	movs	r3, #96	; 0x60
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800175e:	230d      	movs	r3, #13
 8001760:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001766:	4619      	mov	r1, r3
 8001768:	4844      	ldr	r0, [pc, #272]	; (800187c <MX_GPIO_Init+0x2e8>)
 800176a:	f002 fa77 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001780:	4619      	mov	r1, r3
 8001782:	4840      	ldr	r0, [pc, #256]	; (8001884 <MX_GPIO_Init+0x2f0>)
 8001784:	f002 fa6a 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001788:	2340      	movs	r3, #64	; 0x40
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800178c:	4b3e      	ldr	r3, [pc, #248]	; (8001888 <MX_GPIO_Init+0x2f4>)
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001798:	4619      	mov	r1, r3
 800179a:	4833      	ldr	r0, [pc, #204]	; (8001868 <MX_GPIO_Init+0x2d4>)
 800179c:	f002 fa5e 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80017a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017b2:	230a      	movs	r3, #10
 80017b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ba:	4619      	mov	r1, r3
 80017bc:	4833      	ldr	r0, [pc, #204]	; (800188c <MX_GPIO_Init+0x2f8>)
 80017be:	f002 fa4d 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80017c2:	2320      	movs	r3, #32
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	2300      	movs	r3, #0
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d6:	4619      	mov	r1, r3
 80017d8:	4823      	ldr	r0, [pc, #140]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80017da:	f002 fa3f 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80017de:	2308      	movs	r3, #8
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80017ee:	230d      	movs	r3, #13
 80017f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f6:	4619      	mov	r1, r3
 80017f8:	481b      	ldr	r0, [pc, #108]	; (8001868 <MX_GPIO_Init+0x2d4>)
 80017fa:	f002 fa2f 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 80017fe:	f241 030e 	movw	r3, #4110	; 0x100e
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001814:	4619      	mov	r1, r3
 8001816:	4815      	ldr	r0, [pc, #84]	; (800186c <MX_GPIO_Init+0x2d8>)
 8001818:	f002 fa20 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800181c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800182e:	4619      	mov	r1, r3
 8001830:	4817      	ldr	r0, [pc, #92]	; (8001890 <MX_GPIO_Init+0x2fc>)
 8001832:	f002 fa13 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001836:	2308      	movs	r3, #8
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184a:	4619      	mov	r1, r3
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <MX_GPIO_Init+0x2dc>)
 800184e:	f002 fa05 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	e017      	b.n	8001894 <MX_GPIO_Init+0x300>
 8001864:	40023800 	.word	0x40023800
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40022000 	.word	0x40022000
 8001870:	40022800 	.word	0x40022800
 8001874:	40021c00 	.word	0x40021c00
 8001878:	40021800 	.word	0x40021800
 800187c:	40021000 	.word	0x40021000
 8001880:	40020400 	.word	0x40020400
 8001884:	40022400 	.word	0x40022400
 8001888:	10120000 	.word	0x10120000
 800188c:	40020000 	.word	0x40020000
 8001890:	40020800 	.word	0x40020800
 8001894:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001896:	230d      	movs	r3, #13
 8001898:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800189e:	4619      	mov	r1, r3
 80018a0:	487e      	ldr	r0, [pc, #504]	; (8001a9c <MX_GPIO_Init+0x508>)
 80018a2:	f002 f9db 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018a6:	2310      	movs	r3, #16
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b6:	4619      	mov	r1, r3
 80018b8:	4879      	ldr	r0, [pc, #484]	; (8001aa0 <MX_GPIO_Init+0x50c>)
 80018ba:	f002 f9cf 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80018be:	f248 0304 	movw	r3, #32772	; 0x8004
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d0:	4619      	mov	r1, r3
 80018d2:	4874      	ldr	r0, [pc, #464]	; (8001aa4 <MX_GPIO_Init+0x510>)
 80018d4:	f002 f9c2 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80018d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ee:	4619      	mov	r1, r3
 80018f0:	486c      	ldr	r0, [pc, #432]	; (8001aa4 <MX_GPIO_Init+0x510>)
 80018f2:	f002 f9b3 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80018f6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001908:	230d      	movs	r3, #13
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800190c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	4864      	ldr	r0, [pc, #400]	; (8001aa4 <MX_GPIO_Init+0x510>)
 8001914:	f002 f9a2 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800191e:	4b62      	ldr	r3, [pc, #392]	; (8001aa8 <MX_GPIO_Init+0x514>)
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001926:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192a:	4619      	mov	r1, r3
 800192c:	485f      	ldr	r0, [pc, #380]	; (8001aac <MX_GPIO_Init+0x518>)
 800192e:	f002 f995 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001938:	4b5d      	ldr	r3, [pc, #372]	; (8001ab0 <MX_GPIO_Init+0x51c>)
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	4859      	ldr	r0, [pc, #356]	; (8001aac <MX_GPIO_Init+0x518>)
 8001948:	f002 f988 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800194c:	23c0      	movs	r3, #192	; 0xc0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800195c:	2308      	movs	r3, #8
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	4853      	ldr	r0, [pc, #332]	; (8001ab4 <MX_GPIO_Init+0x520>)
 8001968:	f002 f978 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800196c:	2310      	movs	r3, #16
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800197c:	230a      	movs	r3, #10
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001984:	4619      	mov	r1, r3
 8001986:	4847      	ldr	r0, [pc, #284]	; (8001aa4 <MX_GPIO_Init+0x510>)
 8001988:	f002 f968 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800198c:	23c8      	movs	r3, #200	; 0xc8
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800199c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a0:	4619      	mov	r1, r3
 80019a2:	483e      	ldr	r0, [pc, #248]	; (8001a9c <MX_GPIO_Init+0x508>)
 80019a4:	f002 f95a 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80019a8:	2305      	movs	r3, #5
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019b8:	230a      	movs	r3, #10
 80019ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c0:	4619      	mov	r1, r3
 80019c2:	483c      	ldr	r0, [pc, #240]	; (8001ab4 <MX_GPIO_Init+0x520>)
 80019c4:	f002 f94a 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019c8:	2332      	movs	r3, #50	; 0x32
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019d8:	230b      	movs	r3, #11
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e0:	4619      	mov	r1, r3
 80019e2:	4834      	ldr	r0, [pc, #208]	; (8001ab4 <MX_GPIO_Init+0x520>)
 80019e4:	f002 f93a 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80019e8:	2304      	movs	r3, #4
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80019f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f8:	4619      	mov	r1, r3
 80019fa:	4828      	ldr	r0, [pc, #160]	; (8001a9c <MX_GPIO_Init+0x508>)
 80019fc:	f002 f92e 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001a00:	2386      	movs	r3, #134	; 0x86
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a10:	230b      	movs	r3, #11
 8001a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4827      	ldr	r0, [pc, #156]	; (8001ab8 <MX_GPIO_Init+0x524>)
 8001a1c:	f002 f91e 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001a20:	2350      	movs	r3, #80	; 0x50
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a30:	230d      	movs	r3, #13
 8001a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a38:	4619      	mov	r1, r3
 8001a3a:	481f      	ldr	r0, [pc, #124]	; (8001ab8 <MX_GPIO_Init+0x524>)
 8001a3c:	f002 f90e 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001a40:	2328      	movs	r3, #40	; 0x28
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a50:	230a      	movs	r3, #10
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4817      	ldr	r0, [pc, #92]	; (8001ab8 <MX_GPIO_Init+0x524>)
 8001a5c:	f002 f8fe 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001a60:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a72:	2305      	movs	r3, #5
 8001a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480f      	ldr	r0, [pc, #60]	; (8001abc <MX_GPIO_Init+0x528>)
 8001a7e:	f002 f8ed 	bl	8003c5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2101      	movs	r1, #1
 8001a86:	2028      	movs	r0, #40	; 0x28
 8001a88:	f001 fb66 	bl	8003158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a8c:	2028      	movs	r0, #40	; 0x28
 8001a8e:	f001 fb7f 	bl	8003190 <HAL_NVIC_EnableIRQ>

}
 8001a92:	bf00      	nop
 8001a94:	3740      	adds	r7, #64	; 0x40
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40021c00 	.word	0x40021c00
 8001aa8:	10210000 	.word	0x10210000
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	10120000 	.word	0x10120000
 8001ab4:	40020800 	.word	0x40020800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020400 	.word	0x40020400

08001ac0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d101      	bne.n	8001ad6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ad2:	f000 ffbf 	bl	8002a54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40001000 	.word	0x40001000

08001ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_MspInit+0x4c>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	210f      	movs	r1, #15
 8001b2e:	f06f 0001 	mvn.w	r0, #1
 8001b32:	f001 fb11 	bl	8003158 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800

08001b44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <HAL_ADC_MspInit+0xa4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d13c      	bne.n	8001be0 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_ADC_MspInit+0xa8>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a20      	ldr	r2, [pc, #128]	; (8001bec <HAL_ADC_MspInit+0xa8>)
 8001b6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <HAL_ADC_MspInit+0xa8>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_ADC_MspInit+0xa8>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a1a      	ldr	r2, [pc, #104]	; (8001bec <HAL_ADC_MspInit+0xa8>)
 8001b84:	f043 0320 	orr.w	r3, r3, #32
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_ADC_MspInit+0xa8>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_ADC_MspInit+0xa8>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_ADC_MspInit+0xa8>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_ADC_MspInit+0xa8>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001bae:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001bb2:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480b      	ldr	r0, [pc, #44]	; (8001bf0 <HAL_ADC_MspInit+0xac>)
 8001bc4:	f002 f84a 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <HAL_ADC_MspInit+0xb0>)
 8001bdc:	f002 f83e 	bl	8003c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001be0:	bf00      	nop
 8001be2:	3728      	adds	r7, #40	; 0x28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40012200 	.word	0x40012200
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40021400 	.word	0x40021400
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0d      	ldr	r2, [pc, #52]	; (8001c3c <HAL_DMA2D_MspInit+0x44>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d113      	bne.n	8001c32 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_DMA2D_MspInit+0x48>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_DMA2D_MspInit+0x48>)
 8001c10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_DMA2D_MspInit+0x48>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	205a      	movs	r0, #90	; 0x5a
 8001c28:	f001 fa96 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001c2c:	205a      	movs	r0, #90	; 0x5a
 8001c2e:	f001 faaf 	bl	8003190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	4002b000 	.word	0x4002b000
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	; 0x30
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2f      	ldr	r2, [pc, #188]	; (8001d20 <HAL_I2C_MspInit+0xdc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d129      	bne.n	8001cba <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a2e      	ldr	r2, [pc, #184]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001c7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c84:	2312      	movs	r3, #18
 8001c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c90:	2304      	movs	r3, #4
 8001c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c94:	f107 031c 	add.w	r3, r7, #28
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4823      	ldr	r0, [pc, #140]	; (8001d28 <HAL_I2C_MspInit+0xe4>)
 8001c9c:	f001 ffde 	bl	8003c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001ca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001caa:	6413      	str	r3, [r2, #64]	; 0x40
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cb8:	e02d      	b.n	8001d16 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_I2C_MspInit+0xe8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d128      	bne.n	8001d16 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc4:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cce:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd0:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001cdc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce2:	2312      	movs	r3, #18
 8001ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <HAL_I2C_MspInit+0xec>)
 8001cfa:	f001 ffaf 	bl	8003c5c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_I2C_MspInit+0xe0>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
}
 8001d16:	bf00      	nop
 8001d18:	3730      	adds	r7, #48	; 0x30
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40005400 	.word	0x40005400
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40005c00 	.word	0x40005c00
 8001d30:	40021c00 	.word	0x40021c00

08001d34 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08e      	sub	sp, #56	; 0x38
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a55      	ldr	r2, [pc, #340]	; (8001ea8 <HAL_LTDC_MspInit+0x174>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	f040 80a3 	bne.w	8001e9e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d58:	4b54      	ldr	r3, [pc, #336]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	4a53      	ldr	r2, [pc, #332]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001d5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d62:	6453      	str	r3, [r2, #68]	; 0x44
 8001d64:	4b51      	ldr	r3, [pc, #324]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d70:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a4d      	ldr	r2, [pc, #308]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d88:	4b48      	ldr	r3, [pc, #288]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4a47      	ldr	r2, [pc, #284]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d92:	6313      	str	r3, [r2, #48]	; 0x30
 8001d94:	4b45      	ldr	r3, [pc, #276]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	61bb      	str	r3, [r7, #24]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001da0:	4b42      	ldr	r3, [pc, #264]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4a41      	ldr	r2, [pc, #260]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001daa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dac:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001db8:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4a3b      	ldr	r2, [pc, #236]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001dd0:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	4a35      	ldr	r2, [pc, #212]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6313      	str	r3, [r2, #48]	; 0x30
 8001ddc:	4b33      	ldr	r3, [pc, #204]	; (8001eac <HAL_LTDC_MspInit+0x178>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001de8:	2310      	movs	r3, #16
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001df8:	230e      	movs	r3, #14
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	482b      	ldr	r0, [pc, #172]	; (8001eb0 <HAL_LTDC_MspInit+0x17c>)
 8001e04:	f001 ff2a 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001e08:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e1a:	230e      	movs	r3, #14
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	4619      	mov	r1, r3
 8001e24:	4823      	ldr	r0, [pc, #140]	; (8001eb4 <HAL_LTDC_MspInit+0x180>)
 8001e26:	f001 ff19 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001e2a:	23f7      	movs	r3, #247	; 0xf7
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e3a:	230e      	movs	r3, #14
 8001e3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e42:	4619      	mov	r1, r3
 8001e44:	481c      	ldr	r0, [pc, #112]	; (8001eb8 <HAL_LTDC_MspInit+0x184>)
 8001e46:	f001 ff09 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e5c:	2309      	movs	r3, #9
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001e60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e64:	4619      	mov	r1, r3
 8001e66:	4815      	ldr	r0, [pc, #84]	; (8001ebc <HAL_LTDC_MspInit+0x188>)
 8001e68:	f001 fef8 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001e6c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e7e:	230e      	movs	r3, #14
 8001e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e86:	4619      	mov	r1, r3
 8001e88:	480d      	ldr	r0, [pc, #52]	; (8001ec0 <HAL_LTDC_MspInit+0x18c>)
 8001e8a:	f001 fee7 	bl	8003c5c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	2058      	movs	r0, #88	; 0x58
 8001e94:	f001 f960 	bl	8003158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001e98:	2058      	movs	r0, #88	; 0x58
 8001e9a:	f001 f979 	bl	8003190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3738      	adds	r7, #56	; 0x38
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40016800 	.word	0x40016800
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40022400 	.word	0x40022400
 8001eb8:	40022800 	.word	0x40022800
 8001ebc:	40021800 	.word	0x40021800
 8001ec0:	40022000 	.word	0x40022000

08001ec4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a3b      	ldr	r2, [pc, #236]	; (8001fd0 <HAL_QSPI_MspInit+0x10c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d170      	bne.n	8001fc8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	4a3a      	ldr	r2, [pc, #232]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	6393      	str	r3, [r2, #56]	; 0x38
 8001ef2:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001efe:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a34      	ldr	r2, [pc, #208]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001f04:	f043 0310 	orr.w	r3, r3, #16
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a2e      	ldr	r2, [pc, #184]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2e:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a28      	ldr	r2, [pc, #160]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <HAL_QSPI_MspInit+0x110>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001f46:	2304      	movs	r3, #4
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f52:	2303      	movs	r3, #3
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f56:	2309      	movs	r3, #9
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481d      	ldr	r0, [pc, #116]	; (8001fd8 <HAL_QSPI_MspInit+0x114>)
 8001f62:	f001 fe7b 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001f66:	2340      	movs	r3, #64	; 0x40
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f76:	230a      	movs	r3, #10
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4816      	ldr	r0, [pc, #88]	; (8001fdc <HAL_QSPI_MspInit+0x118>)
 8001f82:	f001 fe6b 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f86:	2304      	movs	r3, #4
 8001f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f96:	2309      	movs	r3, #9
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	480e      	ldr	r0, [pc, #56]	; (8001fdc <HAL_QSPI_MspInit+0x118>)
 8001fa2:	f001 fe5b 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001fa6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001fb8:	2309      	movs	r3, #9
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <HAL_QSPI_MspInit+0x11c>)
 8001fc4:	f001 fe4a 	bl	8003c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001fc8:	bf00      	nop
 8001fca:	3730      	adds	r7, #48	; 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	a0001000 	.word	0xa0001000
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	40020c00 	.word	0x40020c00

08001fe4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_RTC_MspInit+0x2c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d105      	bne.n	8002002 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_RTC_MspInit+0x30>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a06      	ldr	r2, [pc, #24]	; (8002014 <HAL_RTC_MspInit+0x30>)
 8001ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40002800 	.word	0x40002800
 8002014:	40023800 	.word	0x40023800

08002018 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a25      	ldr	r2, [pc, #148]	; (80020cc <HAL_SD_MspInit+0xb4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d144      	bne.n	80020c4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800203a:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_SD_MspInit+0xb8>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <HAL_SD_MspInit+0xb8>)
 8002040:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_SD_MspInit+0xb8>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <HAL_SD_MspInit+0xb8>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <HAL_SD_MspInit+0xb8>)
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <HAL_SD_MspInit+0xb8>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <HAL_SD_MspInit+0xb8>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_SD_MspInit+0xb8>)
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_SD_MspInit+0xb8>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002082:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002086:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002094:	230c      	movs	r3, #12
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	480d      	ldr	r0, [pc, #52]	; (80020d4 <HAL_SD_MspInit+0xbc>)
 80020a0:	f001 fddc 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80020a4:	2304      	movs	r3, #4
 80020a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020b4:	230c      	movs	r3, #12
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <HAL_SD_MspInit+0xc0>)
 80020c0:	f001 fdcc 	bl	8003c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	; 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40012c00 	.word	0x40012c00
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40020800 	.word	0x40020800
 80020d8:	40020c00 	.word	0x40020c00

080020dc <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80020fc:	d127      	bne.n	800214e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_SPDIFRX_MspInit+0x7c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <HAL_SPDIFRX_MspInit+0x7c>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_SPDIFRX_MspInit+0x7c>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_SPDIFRX_MspInit+0x7c>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_SPDIFRX_MspInit+0x7c>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_SPDIFRX_MspInit+0x7c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800213e:	2308      	movs	r3, #8
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <HAL_SPDIFRX_MspInit+0x80>)
 800214a:	f001 fd87 	bl	8003c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40020c00 	.word	0x40020c00

08002160 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a2e      	ldr	r2, [pc, #184]	; (8002228 <HAL_TIM_Base_MspInit+0xc8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d10c      	bne.n	800218c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002172:	4b2e      	ldr	r3, [pc, #184]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a2d      	ldr	r2, [pc, #180]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b2b      	ldr	r3, [pc, #172]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800218a:	e046      	b.n	800221a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d10c      	bne.n	80021b0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002196:	4b25      	ldr	r3, [pc, #148]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a24      	ldr	r2, [pc, #144]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]
}
 80021ae:	e034      	b.n	800221a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1e      	ldr	r2, [pc, #120]	; (8002230 <HAL_TIM_Base_MspInit+0xd0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d10c      	bne.n	80021d4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ba:	4b1c      	ldr	r3, [pc, #112]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a1b      	ldr	r2, [pc, #108]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
}
 80021d2:	e022      	b.n	800221a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_TIM_Base_MspInit+0xd4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10c      	bne.n	80021f8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 0308 	and.w	r3, r3, #8
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
}
 80021f6:	e010      	b.n	800221a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0e      	ldr	r2, [pc, #56]	; (8002238 <HAL_TIM_Base_MspInit+0xd8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d10b      	bne.n	800221a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6453      	str	r3, [r2, #68]	; 0x44
 800220e:	4b07      	ldr	r3, [pc, #28]	; (800222c <HAL_TIM_Base_MspInit+0xcc>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
}
 800221a:	bf00      	nop
 800221c:	3724      	adds	r7, #36	; 0x24
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40010000 	.word	0x40010000
 800222c:	40023800 	.word	0x40023800
 8002230:	40000400 	.word	0x40000400
 8002234:	40000c00 	.word	0x40000c00
 8002238:	40010400 	.word	0x40010400

0800223c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <HAL_TIM_PWM_MspInit+0x38>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10b      	bne.n	8002266 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a09      	ldr	r2, [pc, #36]	; (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 8002254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HAL_TIM_PWM_MspInit+0x3c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40001800 	.word	0x40001800
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_TIM_MspPostInit+0x178>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d11d      	bne.n	80022da <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	4b56      	ldr	r3, [pc, #344]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a55      	ldr	r2, [pc, #340]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80022b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022c8:	2301      	movs	r3, #1
 80022ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80022cc:	f107 031c 	add.w	r3, r7, #28
 80022d0:	4619      	mov	r1, r3
 80022d2:	484a      	ldr	r0, [pc, #296]	; (80023fc <HAL_TIM_MspPostInit+0x180>)
 80022d4:	f001 fcc2 	bl	8003c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80022d8:	e087      	b.n	80023ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d11d      	bne.n	8002320 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b44      	ldr	r3, [pc, #272]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	4a43      	ldr	r2, [pc, #268]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6313      	str	r3, [r2, #48]	; 0x30
 80022f0:	4b41      	ldr	r3, [pc, #260]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80022fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800230e:	2301      	movs	r3, #1
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	4838      	ldr	r0, [pc, #224]	; (80023fc <HAL_TIM_MspPostInit+0x180>)
 800231a:	f001 fc9f 	bl	8003c5c <HAL_GPIO_Init>
}
 800231e:	e064      	b.n	80023ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a36      	ldr	r2, [pc, #216]	; (8002400 <HAL_TIM_MspPostInit+0x184>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d11c      	bne.n	8002364 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232a:	4b33      	ldr	r3, [pc, #204]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a32      	ldr	r2, [pc, #200]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002342:	2310      	movs	r3, #16
 8002344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2300      	movs	r3, #0
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002352:	2302      	movs	r3, #2
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	4829      	ldr	r0, [pc, #164]	; (8002404 <HAL_TIM_MspPostInit+0x188>)
 800235e:	f001 fc7d 	bl	8003c5c <HAL_GPIO_Init>
}
 8002362:	e042      	b.n	80023ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a27      	ldr	r2, [pc, #156]	; (8002408 <HAL_TIM_MspPostInit+0x18c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d11c      	bne.n	80023a8 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800236e:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002386:	2301      	movs	r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002396:	2302      	movs	r3, #2
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4619      	mov	r1, r3
 80023a0:	481a      	ldr	r0, [pc, #104]	; (800240c <HAL_TIM_MspPostInit+0x190>)
 80023a2:	f001 fc5b 	bl	8003c5c <HAL_GPIO_Init>
}
 80023a6:	e020      	b.n	80023ea <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a18      	ldr	r2, [pc, #96]	; (8002410 <HAL_TIM_MspPostInit+0x194>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d11b      	bne.n	80023ea <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_TIM_MspPostInit+0x17c>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80023ca:	2340      	movs	r3, #64	; 0x40
 80023cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80023da:	2309      	movs	r3, #9
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 031c 	add.w	r3, r7, #28
 80023e2:	4619      	mov	r1, r3
 80023e4:	480b      	ldr	r0, [pc, #44]	; (8002414 <HAL_TIM_MspPostInit+0x198>)
 80023e6:	f001 fc39 	bl	8003c5c <HAL_GPIO_Init>
}
 80023ea:	bf00      	nop
 80023ec:	3730      	adds	r7, #48	; 0x30
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40010000 	.word	0x40010000
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000
 8002400:	40000400 	.word	0x40000400
 8002404:	40020400 	.word	0x40020400
 8002408:	40000c00 	.word	0x40000c00
 800240c:	40022000 	.word	0x40022000
 8002410:	40001800 	.word	0x40001800
 8002414:	40021c00 	.word	0x40021c00

08002418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	; 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a25      	ldr	r2, [pc, #148]	; (80024cc <HAL_UART_MspInit+0xb4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d144      	bne.n	80024c4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800243a:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_UART_MspInit+0xb8>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <HAL_UART_MspInit+0xb8>)
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	6453      	str	r3, [r2, #68]	; 0x44
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <HAL_UART_MspInit+0xb8>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002452:	4b1f      	ldr	r3, [pc, #124]	; (80024d0 <HAL_UART_MspInit+0xb8>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4a1e      	ldr	r2, [pc, #120]	; (80024d0 <HAL_UART_MspInit+0xb8>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6313      	str	r3, [r2, #48]	; 0x30
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <HAL_UART_MspInit+0xb8>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_UART_MspInit+0xb8>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <HAL_UART_MspInit+0xb8>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <HAL_UART_MspInit+0xb8>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002492:	2307      	movs	r3, #7
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <HAL_UART_MspInit+0xbc>)
 800249e:	f001 fbdd 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80024a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	2300      	movs	r3, #0
 80024b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024b4:	2307      	movs	r3, #7
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4619      	mov	r1, r3
 80024be:	4806      	ldr	r0, [pc, #24]	; (80024d8 <HAL_UART_MspInit+0xc0>)
 80024c0:	f001 fbcc 	bl	8003c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024c4:	bf00      	nop
 80024c6:	3728      	adds	r7, #40	; 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40011000 	.word	0x40011000
 80024d0:	40023800 	.word	0x40023800
 80024d4:	40020400 	.word	0x40020400
 80024d8:	40020000 	.word	0x40020000

080024dc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80024f0:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <HAL_FMC_MspInit+0x100>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d16d      	bne.n	80025d4 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80024f8:	4b38      	ldr	r3, [pc, #224]	; (80025dc <HAL_FMC_MspInit+0x100>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_FMC_MspInit+0x104>)
 8002500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002502:	4a37      	ldr	r2, [pc, #220]	; (80025e0 <HAL_FMC_MspInit+0x104>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	6393      	str	r3, [r2, #56]	; 0x38
 800250a:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <HAL_FMC_MspInit+0x104>)
 800250c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002516:	f64f 7383 	movw	r3, #65411	; 0xff83
 800251a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251c:	2302      	movs	r3, #2
 800251e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002524:	2303      	movs	r3, #3
 8002526:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002528:	230c      	movs	r3, #12
 800252a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	4619      	mov	r1, r3
 8002530:	482c      	ldr	r0, [pc, #176]	; (80025e4 <HAL_FMC_MspInit+0x108>)
 8002532:	f001 fb93 	bl	8003c5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002536:	f248 1333 	movw	r3, #33075	; 0x8133
 800253a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002548:	230c      	movs	r3, #12
 800254a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	4619      	mov	r1, r3
 8002550:	4825      	ldr	r0, [pc, #148]	; (80025e8 <HAL_FMC_MspInit+0x10c>)
 8002552:	f001 fb83 	bl	8003c5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002556:	f24c 7303 	movw	r3, #50947	; 0xc703
 800255a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002568:	230c      	movs	r3, #12
 800256a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	4619      	mov	r1, r3
 8002570:	481e      	ldr	r0, [pc, #120]	; (80025ec <HAL_FMC_MspInit+0x110>)
 8002572:	f001 fb73 	bl	8003c5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002576:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800257a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002588:	230c      	movs	r3, #12
 800258a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	4619      	mov	r1, r3
 8002590:	4817      	ldr	r0, [pc, #92]	; (80025f0 <HAL_FMC_MspInit+0x114>)
 8002592:	f001 fb63 	bl	8003c5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002596:	2328      	movs	r3, #40	; 0x28
 8002598:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a2:	2303      	movs	r3, #3
 80025a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025a6:	230c      	movs	r3, #12
 80025a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	4811      	ldr	r0, [pc, #68]	; (80025f4 <HAL_FMC_MspInit+0x118>)
 80025b0:	f001 fb54 	bl	8003c5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80025b4:	2308      	movs	r3, #8
 80025b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	2303      	movs	r3, #3
 80025c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025c4:	230c      	movs	r3, #12
 80025c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	4619      	mov	r1, r3
 80025cc:	480a      	ldr	r0, [pc, #40]	; (80025f8 <HAL_FMC_MspInit+0x11c>)
 80025ce:	f001 fb45 	bl	8003c5c <HAL_GPIO_Init>
 80025d2:	e000      	b.n	80025d6 <HAL_FMC_MspInit+0xfa>
    return;
 80025d4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	200000a4 	.word	0x200000a4
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40021800 	.word	0x40021800
 80025ec:	40020c00 	.word	0x40020c00
 80025f0:	40021400 	.word	0x40021400
 80025f4:	40021c00 	.word	0x40021c00
 80025f8:	40020800 	.word	0x40020800

080025fc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002604:	f7ff ff6a 	bl	80024dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a2b      	ldr	r2, [pc, #172]	; (80026cc <HAL_SAI_MspInit+0xbc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d124      	bne.n	800266c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002622:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_SAI_MspInit+0xc0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10b      	bne.n	8002642 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800262a:	4b2a      	ldr	r3, [pc, #168]	; (80026d4 <HAL_SAI_MspInit+0xc4>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <HAL_SAI_MspInit+0xc4>)
 8002630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002634:	6453      	str	r3, [r2, #68]	; 0x44
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_SAI_MspInit+0xc4>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <HAL_SAI_MspInit+0xc0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	4a21      	ldr	r2, [pc, #132]	; (80026d0 <HAL_SAI_MspInit+0xc0>)
 800264a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800264c:	23f0      	movs	r3, #240	; 0xf0
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800265c:	230a      	movs	r3, #10
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4619      	mov	r1, r3
 8002666:	481c      	ldr	r0, [pc, #112]	; (80026d8 <HAL_SAI_MspInit+0xc8>)
 8002668:	f001 faf8 	bl	8003c5c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_SAI_MspInit+0xcc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d125      	bne.n	80026c2 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_SAI_MspInit+0xc0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10b      	bne.n	8002696 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_SAI_MspInit+0xc4>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <HAL_SAI_MspInit+0xc4>)
 8002684:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002688:	6453      	str	r3, [r2, #68]	; 0x44
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <HAL_SAI_MspInit+0xc4>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_SAI_MspInit+0xc0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <HAL_SAI_MspInit+0xc0>)
 800269e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80026a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80026b2:	230a      	movs	r3, #10
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	4619      	mov	r1, r3
 80026bc:	4808      	ldr	r0, [pc, #32]	; (80026e0 <HAL_SAI_MspInit+0xd0>)
 80026be:	f001 facd 	bl	8003c5c <HAL_GPIO_Init>

    }
}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	; 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40015c04 	.word	0x40015c04
 80026d0:	200000a8 	.word	0x200000a8
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40015c24 	.word	0x40015c24
 80026e0:	40021800 	.word	0x40021800

080026e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08c      	sub	sp, #48	; 0x30
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	2036      	movs	r0, #54	; 0x36
 80026fa:	f000 fd2d 	bl	8003158 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026fe:	2036      	movs	r0, #54	; 0x36
 8002700:	f000 fd46 	bl	8003190 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002704:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_InitTick+0xa0>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <HAL_InitTick+0xa0>)
 800270a:	f043 0310 	orr.w	r3, r3, #16
 800270e:	6413      	str	r3, [r2, #64]	; 0x40
 8002710:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_InitTick+0xa0>)
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800271c:	f107 0210 	add.w	r2, r7, #16
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f002 fed2 	bl	80054d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800272c:	f002 fea8 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 8002730:	4603      	mov	r3, r0
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	4a13      	ldr	r2, [pc, #76]	; (8002788 <HAL_InitTick+0xa4>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0c9b      	lsrs	r3, r3, #18
 8002740:	3b01      	subs	r3, #1
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_InitTick+0xa8>)
 8002746:	4a12      	ldr	r2, [pc, #72]	; (8002790 <HAL_InitTick+0xac>)
 8002748:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_InitTick+0xa8>)
 800274c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002750:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002752:	4a0e      	ldr	r2, [pc, #56]	; (800278c <HAL_InitTick+0xa8>)
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_InitTick+0xa8>)
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_InitTick+0xa8>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002764:	4809      	ldr	r0, [pc, #36]	; (800278c <HAL_InitTick+0xa8>)
 8002766:	f004 ffc1 	bl	80076ec <HAL_TIM_Base_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002770:	4806      	ldr	r0, [pc, #24]	; (800278c <HAL_InitTick+0xa8>)
 8002772:	f004 ffe7 	bl	8007744 <HAL_TIM_Base_Start_IT>
 8002776:	4603      	mov	r3, r0
 8002778:	e000      	b.n	800277c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
}
 800277c:	4618      	mov	r0, r3
 800277e:	3730      	adds	r7, #48	; 0x30
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	431bde83 	.word	0x431bde83
 800278c:	20000864 	.word	0x20000864
 8002790:	40001000 	.word	0x40001000

08002794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a6:	e7fe      	b.n	80027a6 <HardFault_Handler+0x4>

080027a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ac:	e7fe      	b.n	80027ac <MemManage_Handler+0x4>

080027ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <BusFault_Handler+0x4>

080027b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <UsageFault_Handler+0x4>

080027ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80027f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80027fc:	f001 fc0c 	bl	8004018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_Delay(300);
 8002800:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002804:	f000 f946 	bl	8002a94 <HAL_Delay>
  mode = mode + 1;
 8002808:	4b09      	ldr	r3, [pc, #36]	; (8002830 <EXTI15_10_IRQHandler+0x3c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <EXTI15_10_IRQHandler+0x3c>)
 8002810:	6013      	str	r3, [r2, #0]
  if(mode > 3) {
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <EXTI15_10_IRQHandler+0x3c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b03      	cmp	r3, #3
 8002818:	dd02      	ble.n	8002820 <EXTI15_10_IRQHandler+0x2c>
      mode = 1;
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <EXTI15_10_IRQHandler+0x3c>)
 800281c:	2201      	movs	r2, #1
 800281e:	601a      	str	r2, [r3, #0]
  }
  added = added + 1;
 8002820:	4b04      	ldr	r3, [pc, #16]	; (8002834 <EXTI15_10_IRQHandler+0x40>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	4a03      	ldr	r2, [pc, #12]	; (8002834 <EXTI15_10_IRQHandler+0x40>)
 8002828:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000098 	.word	0x20000098
 8002834:	200000a0 	.word	0x200000a0

08002838 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <TIM6_DAC_IRQHandler+0x10>)
 800283e:	f004 ffd6 	bl	80077ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000864 	.word	0x20000864

0800284c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <LTDC_IRQHandler+0x10>)
 8002852:	f001 fdfd 	bl	8004450 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000554 	.word	0x20000554

08002860 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <DMA2D_IRQHandler+0x10>)
 8002866:	f000 ffbb 	bl	80037e0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000724 	.word	0x20000724

08002874 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	e00a      	b.n	800289c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002886:	f3af 8000 	nop.w
 800288a:	4601      	mov	r1, r0
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	60ba      	str	r2, [r7, #8]
 8002892:	b2ca      	uxtb	r2, r1
 8002894:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3301      	adds	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	dbf0      	blt.n	8002886 <_read+0x12>
	}

return len;
 80028a4:	687b      	ldr	r3, [r7, #4]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e009      	b.n	80028d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	60ba      	str	r2, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fd fe1d 	bl	8000508 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	429a      	cmp	r2, r3
 80028da:	dbf1      	blt.n	80028c0 <_write+0x12>
	}
	return len;
 80028dc:	687b      	ldr	r3, [r7, #4]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <_close>:

int _close(int file)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
	return -1;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800290e:	605a      	str	r2, [r3, #4]
	return 0;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_isatty>:

int _isatty(int file)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
	return 1;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
	return 0;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <_sbrk+0x5c>)
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <_sbrk+0x60>)
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002964:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <_sbrk+0x64>)
 800296e:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <_sbrk+0x68>)
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	429a      	cmp	r2, r3
 800297e:	d207      	bcs.n	8002990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002980:	f008 f840 	bl	800aa04 <__errno>
 8002984:	4602      	mov	r2, r0
 8002986:	230c      	movs	r3, #12
 8002988:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	e009      	b.n	80029a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <_sbrk+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <_sbrk+0x64>)
 80029a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20050000 	.word	0x20050000
 80029b0:	00000400 	.word	0x00000400
 80029b4:	200000ac 	.word	0x200000ac
 80029b8:	20000988 	.word	0x20000988

080029bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <SystemInit+0x28>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	4a07      	ldr	r2, [pc, #28]	; (80029e4 <SystemInit+0x28>)
 80029c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <SystemInit+0x28>)
 80029d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d6:	609a      	str	r2, [r3, #8]
#endif
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ee:	e003      	b.n	80029f8 <LoopCopyDataInit>

080029f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029f6:	3104      	adds	r1, #4

080029f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029f8:	480b      	ldr	r0, [pc, #44]	; (8002a28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a00:	d3f6      	bcc.n	80029f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002a02:	4a0b      	ldr	r2, [pc, #44]	; (8002a30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a04:	e002      	b.n	8002a0c <LoopFillZerobss>

08002a06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a08:	f842 3b04 	str.w	r3, [r2], #4

08002a0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a10:	d3f9      	bcc.n	8002a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a12:	f7ff ffd3 	bl	80029bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a16:	f007 fffb 	bl	800aa10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a1a:	f7fd fd87 	bl	800052c <main>
  bx  lr    
 8002a1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a20:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002a24:	0800cf08 	.word	0x0800cf08
  ldr  r0, =_sdata
 8002a28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a2c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002a30:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002a34:	20000988 	.word	0x20000988

08002a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a38:	e7fe      	b.n	8002a38 <ADC_IRQHandler>

08002a3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3e:	2003      	movs	r0, #3
 8002a40:	f000 fb7f 	bl	8003142 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7ff fe4d 	bl	80026e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002a4a:	f7ff f853 	bl	8001af4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_IncTick+0x20>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_IncTick+0x24>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <HAL_IncTick+0x24>)
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000008 	.word	0x20000008
 8002a78:	200008a4 	.word	0x200008a4

08002a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_GetTick+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	200008a4 	.word	0x200008a4

08002a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff ffee 	bl	8002a7c <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d005      	beq.n	8002aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aae:	4b09      	ldr	r3, [pc, #36]	; (8002ad4 <HAL_Delay+0x40>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aba:	bf00      	nop
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d8f7      	bhi.n	8002abc <HAL_Delay+0x28>
  {
  }
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000008 	.word	0x20000008

08002ad8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e031      	b.n	8002b52 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff f824 	bl	8001b44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d116      	bne.n	8002b44 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_ADC_Init+0x84>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	f043 0202 	orr.w	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f964 	bl	8002df4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f023 0303 	bic.w	r3, r3, #3
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
 8002b42:	e001      	b.n	8002b48 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	ffffeefd 	.word	0xffffeefd

08002b60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1c>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e12a      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x272>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b09      	cmp	r3, #9
 8002b8a:	d93a      	bls.n	8002c02 <HAL_ADC_ConfigChannel+0xa2>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b94:	d035      	beq.n	8002c02 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68d9      	ldr	r1, [r3, #12]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	3b1e      	subs	r3, #30
 8002bac:	2207      	movs	r2, #7
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	400a      	ands	r2, r1
 8002bba:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a87      	ldr	r2, [pc, #540]	; (8002de0 <HAL_ADC_ConfigChannel+0x280>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10a      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68d9      	ldr	r1, [r3, #12]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	061a      	lsls	r2, r3, #24
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bda:	e035      	b.n	8002c48 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68d9      	ldr	r1, [r3, #12]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	4618      	mov	r0, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4403      	add	r3, r0
 8002bf4:	3b1e      	subs	r3, #30
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c00:	e022      	b.n	8002c48 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6919      	ldr	r1, [r3, #16]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	2207      	movs	r2, #7
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	400a      	ands	r2, r1
 8002c24:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6919      	ldr	r1, [r3, #16]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	4603      	mov	r3, r0
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4403      	add	r3, r0
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b06      	cmp	r3, #6
 8002c4e:	d824      	bhi.n	8002c9a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	3b05      	subs	r3, #5
 8002c62:	221f      	movs	r2, #31
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	400a      	ands	r2, r1
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	4618      	mov	r0, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	3b05      	subs	r3, #5
 8002c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	635a      	str	r2, [r3, #52]	; 0x34
 8002c98:	e04c      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b0c      	cmp	r3, #12
 8002ca0:	d824      	bhi.n	8002cec <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b23      	subs	r3, #35	; 0x23
 8002cb4:	221f      	movs	r2, #31
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	400a      	ands	r2, r1
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	3b23      	subs	r3, #35	; 0x23
 8002cde:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cea:	e023      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b41      	subs	r3, #65	; 0x41
 8002cfe:	221f      	movs	r2, #31
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43da      	mvns	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3b41      	subs	r3, #65	; 0x41
 8002d28:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a2a      	ldr	r2, [pc, #168]	; (8002de4 <HAL_ADC_ConfigChannel+0x284>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d10a      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x1f4>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d46:	d105      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <HAL_ADC_ConfigChannel+0x288>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	4a26      	ldr	r2, [pc, #152]	; (8002de8 <HAL_ADC_ConfigChannel+0x288>)
 8002d4e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d52:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HAL_ADC_ConfigChannel+0x284>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d109      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x212>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b12      	cmp	r3, #18
 8002d64:	d105      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <HAL_ADC_ConfigChannel+0x288>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <HAL_ADC_ConfigChannel+0x288>)
 8002d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d70:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1b      	ldr	r2, [pc, #108]	; (8002de4 <HAL_ADC_ConfigChannel+0x284>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d125      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x268>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <HAL_ADC_ConfigChannel+0x280>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d003      	beq.n	8002d8e <HAL_ADC_ConfigChannel+0x22e>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b11      	cmp	r3, #17
 8002d8c:	d11c      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_ADC_ConfigChannel+0x288>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <HAL_ADC_ConfigChannel+0x288>)
 8002d94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d98:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HAL_ADC_ConfigChannel+0x280>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d111      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_ADC_ConfigChannel+0x28c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a11      	ldr	r2, [pc, #68]	; (8002df0 <HAL_ADC_ConfigChannel+0x290>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	0c9a      	lsrs	r2, r3, #18
 8002db0:	4613      	mov	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dba:	e002      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f9      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	10000012 	.word	0x10000012
 8002de4:	40012000 	.word	0x40012000
 8002de8:	40012300 	.word	0x40012300
 8002dec:	20000000 	.word	0x20000000
 8002df0:	431bde83 	.word	0x431bde83

08002df4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002dfc:	4b78      	ldr	r3, [pc, #480]	; (8002fe0 <ADC_Init+0x1ec>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a77      	ldr	r2, [pc, #476]	; (8002fe0 <ADC_Init+0x1ec>)
 8002e02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e06:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e08:	4b75      	ldr	r3, [pc, #468]	; (8002fe0 <ADC_Init+0x1ec>)
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4973      	ldr	r1, [pc, #460]	; (8002fe0 <ADC_Init+0x1ec>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6859      	ldr	r1, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	021a      	lsls	r2, r3, #8
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6899      	ldr	r1, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <ADC_Init+0x1f0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6899      	ldr	r1, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002eb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	e00f      	b.n	8002eee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002edc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002eec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0202 	bic.w	r2, r2, #2
 8002efc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6899      	ldr	r1, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	005a      	lsls	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d01b      	beq.n	8002f54 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6859      	ldr	r1, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	3b01      	subs	r3, #1
 8002f48:	035a      	lsls	r2, r3, #13
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	e007      	b.n	8002f64 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	051a      	lsls	r2, r3, #20
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fa6:	025a      	lsls	r2, r3, #9
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	029a      	lsls	r2, r3, #10
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	40012300 	.word	0x40012300
 8002fe4:	0f000001 	.word	0x0f000001

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <__NVIC_SetPriorityGrouping+0x40>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8003012:	4313      	orrs	r3, r2
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	; (8003028 <__NVIC_SetPriorityGrouping+0x40>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00
 800302c:	05fa0000 	.word	0x05fa0000

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff4c 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800316a:	f7ff ff61 	bl	8003030 <__NVIC_GetPriorityGrouping>
 800316e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	6978      	ldr	r0, [r7, #20]
 8003176:	f7ff ffb1 	bl	80030dc <NVIC_EncodePriority>
 800317a:	4602      	mov	r2, r0
 800317c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff ff80 	bl	8003088 <__NVIC_SetPriority>
}
 8003188:	bf00      	nop
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ff54 	bl	800304c <__NVIC_EnableIRQ>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031b8:	f7ff fc60 	bl	8002a7c <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e099      	b.n	80032fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0201 	bic.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e8:	e00f      	b.n	800320a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ea:	f7ff fc47 	bl	8002a7c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b05      	cmp	r3, #5
 80031f6:	d908      	bls.n	800320a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2220      	movs	r2, #32
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2203      	movs	r2, #3
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e078      	b.n	80032fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e8      	bne.n	80031ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4b38      	ldr	r3, [pc, #224]	; (8003304 <HAL_DMA_Init+0x158>)
 8003224:	4013      	ands	r3, r2
 8003226:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003236:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800324e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2b04      	cmp	r3, #4
 8003262:	d107      	bne.n	8003274 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	4313      	orrs	r3, r2
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f023 0307 	bic.w	r3, r3, #7
 800328a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	4313      	orrs	r3, r2
 8003294:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b04      	cmp	r3, #4
 800329c:	d117      	bne.n	80032ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00e      	beq.n	80032ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f8bd 	bl	8003430 <DMA_CheckFifoParam>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2240      	movs	r2, #64	; 0x40
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032ca:	2301      	movs	r3, #1
 80032cc:	e016      	b.n	80032fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f874 	bl	80033c4 <DMA_CalcBaseAndBitshift>
 80032dc:	4603      	mov	r3, r0
 80032de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	223f      	movs	r2, #63	; 0x3f
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	f010803f 	.word	0xf010803f

08003308 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e050      	b.n	80033bc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d101      	bne.n	800332a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
 8003328:	e048      	b.n	80033bc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0201 	bic.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2200      	movs	r2, #0
 8003348:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2200      	movs	r2, #0
 8003360:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2221      	movs	r2, #33	; 0x21
 8003368:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f82a 	bl	80033c4 <DMA_CalcBaseAndBitshift>
 8003370:	4603      	mov	r3, r0
 8003372:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	223f      	movs	r2, #63	; 0x3f
 800337a:	409a      	lsls	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	3b10      	subs	r3, #16
 80033d4:	4a13      	ldr	r2, [pc, #76]	; (8003424 <DMA_CalcBaseAndBitshift+0x60>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033de:	4a12      	ldr	r2, [pc, #72]	; (8003428 <DMA_CalcBaseAndBitshift+0x64>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d908      	bls.n	8003404 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <DMA_CalcBaseAndBitshift+0x68>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	1d1a      	adds	r2, r3, #4
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	659a      	str	r2, [r3, #88]	; 0x58
 8003402:	e006      	b.n	8003412 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	4b08      	ldr	r3, [pc, #32]	; (800342c <DMA_CalcBaseAndBitshift+0x68>)
 800340c:	4013      	ands	r3, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	aaaaaaab 	.word	0xaaaaaaab
 8003428:	0800b3d4 	.word	0x0800b3d4
 800342c:	fffffc00 	.word	0xfffffc00

08003430 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11f      	bne.n	800348a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d855      	bhi.n	80034fc <DMA_CheckFifoParam+0xcc>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <DMA_CheckFifoParam+0x28>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	08003469 	.word	0x08003469
 800345c:	0800347b 	.word	0x0800347b
 8003460:	08003469 	.word	0x08003469
 8003464:	080034fd 	.word	0x080034fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d045      	beq.n	8003500 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003478:	e042      	b.n	8003500 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003482:	d13f      	bne.n	8003504 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003488:	e03c      	b.n	8003504 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003492:	d121      	bne.n	80034d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d836      	bhi.n	8003508 <DMA_CheckFifoParam+0xd8>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <DMA_CheckFifoParam+0x70>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034b7 	.word	0x080034b7
 80034a8:	080034b1 	.word	0x080034b1
 80034ac:	080034c9 	.word	0x080034c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      break;
 80034b4:	e02f      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d024      	beq.n	800350c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c6:	e021      	b.n	800350c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034d0:	d11e      	bne.n	8003510 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034d6:	e01b      	b.n	8003510 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d902      	bls.n	80034e4 <DMA_CheckFifoParam+0xb4>
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d003      	beq.n	80034ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034e2:	e018      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	73fb      	strb	r3, [r7, #15]
      break;
 80034e8:	e015      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00e      	beq.n	8003514 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	73fb      	strb	r3, [r7, #15]
      break;
 80034fa:	e00b      	b.n	8003514 <DMA_CheckFifoParam+0xe4>
      break;
 80034fc:	bf00      	nop
 80034fe:	e00a      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
      break;
 8003500:	bf00      	nop
 8003502:	e008      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
      break;
 8003504:	bf00      	nop
 8003506:	e006      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
      break;
 8003508:	bf00      	nop
 800350a:	e004      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
      break;
 800350c:	bf00      	nop
 800350e:	e002      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
      break;   
 8003510:	bf00      	nop
 8003512:	e000      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
      break;
 8003514:	bf00      	nop
    }
  } 
  
  return status; 
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e039      	b.n	80035aa <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe fb54 	bl	8001bf8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003574:	f023 0107 	bic.w	r1, r3, #7
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <HAL_DMA2D_Init+0x90>)
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68d1      	ldr	r1, [r2, #12]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	430b      	orrs	r3, r1
 8003598:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	ffffc000 	.word	0xffffc000

080035b8 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_DMA2D_Start+0x1c>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e018      	b.n	8003606 <HAL_DMA2D_Start+0x4e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fa98 	bl	8003b24 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0201 	orr.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d056      	beq.n	80036d8 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800362a:	f7ff fa27 	bl	8002a7c <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003630:	e04b      	b.n	80036ca <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003640:	2b00      	cmp	r3, #0
 8003642:	d023      	beq.n	800368c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	f043 0202 	orr.w	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2221      	movs	r2, #33	; 0x21
 8003676:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2204      	movs	r2, #4
 800367c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0a5      	b.n	80037d8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d01a      	beq.n	80036ca <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003694:	f7ff f9f2 	bl	8002a7c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d302      	bcc.n	80036aa <HAL_DMA2D_PollForTransfer+0x9c>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10f      	bne.n	80036ca <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	f043 0220 	orr.w	r2, r3, #32
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2203      	movs	r2, #3
 80036ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e086      	b.n	80037d8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0ac      	beq.n	8003632 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d061      	beq.n	80037be <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80036fa:	f7ff f9bf 	bl	8002a7c <HAL_GetTick>
 80036fe:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003700:	e056      	b.n	80037b0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003710:	2b00      	cmp	r3, #0
 8003712:	d02e      	beq.n	8003772 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	f043 0204 	orr.w	r2, r3, #4
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f003 0320 	and.w	r3, r3, #32
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	f043 0202 	orr.w	r2, r3, #2
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2229      	movs	r2, #41	; 0x29
 800375c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2204      	movs	r2, #4
 8003762:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e032      	b.n	80037d8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d01a      	beq.n	80037b0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800377a:	f7ff f97f 	bl	8002a7c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <HAL_DMA2D_PollForTransfer+0x182>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10f      	bne.n	80037b0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003794:	f043 0220 	orr.w	r2, r3, #32
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2203      	movs	r2, #3
 80037a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e013      	b.n	80037d8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0a1      	beq.n	8003702 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2212      	movs	r2, #18
 80037c4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d026      	beq.n	8003850 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d021      	beq.n	8003850 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800381a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2201      	movs	r2, #1
 800382e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2204      	movs	r2, #4
 8003834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	d026      	beq.n	80038a8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d021      	beq.n	80038a8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003872:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2220      	movs	r2, #32
 800387a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003880:	f043 0202 	orr.w	r2, r3, #2
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2204      	movs	r2, #4
 800388c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d026      	beq.n	8003900 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d021      	beq.n	8003900 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2208      	movs	r2, #8
 80038d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	f043 0204 	orr.w	r2, r3, #4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2204      	movs	r2, #4
 80038e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d013      	beq.n	8003932 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00e      	beq.n	8003932 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003922:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2204      	movs	r2, #4
 800392a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f853 	bl	80039d8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d024      	beq.n	8003986 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003942:	2b00      	cmp	r3, #0
 8003944:	d01f      	beq.n	8003986 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003954:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2202      	movs	r2, #2
 800395c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01f      	beq.n	80039d0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01a      	beq.n	80039d0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039a8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2210      	movs	r2, #16
 80039b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f80e 	bl	80039ec <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_DMA2D_ConfigLayer+0x20>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e079      	b.n	8003b14 <HAL_DMA2D_ConfigLayer+0x114>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	3318      	adds	r3, #24
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003a4a:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <HAL_DMA2D_ConfigLayer+0x120>)
 8003a4c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b0a      	cmp	r3, #10
 8003a54:	d003      	beq.n	8003a5e <HAL_DMA2D_ConfigLayer+0x5e>
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b09      	cmp	r3, #9
 8003a5c:	d107      	bne.n	8003a6e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e005      	b.n	8003a7a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	061b      	lsls	r3, r3, #24
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d120      	bne.n	8003ac2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	ea02 0103 	and.w	r1, r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b0a      	cmp	r3, #10
 8003aa8:	d003      	beq.n	8003ab2 <HAL_DMA2D_ConfigLayer+0xb2>
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	d127      	bne.n	8003b02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28
 8003ac0:	e01f      	b.n	8003b02 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	ea02 0103 	and.w	r1, r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b0a      	cmp	r3, #10
 8003aea:	d003      	beq.n	8003af4 <HAL_DMA2D_ConfigLayer+0xf4>
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b09      	cmp	r3, #9
 8003af2:	d106      	bne.n	8003b02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b00:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	ff03000f 	.word	0xff03000f

08003b24 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b08b      	sub	sp, #44	; 0x2c
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b38:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	041a      	lsls	r2, r3, #16
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	431a      	orrs	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b5c:	d174      	bne.n	8003c48 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b64:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b6c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003b74:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d108      	bne.n	8003b96 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
 8003b94:	e053      	b.n	8003c3e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d106      	bne.n	8003bac <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8003baa:	e048      	b.n	8003c3e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d111      	bne.n	8003bd8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	0cdb      	lsrs	r3, r3, #19
 8003bb8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	0a9b      	lsrs	r3, r3, #10
 8003bbe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	08db      	lsrs	r3, r3, #3
 8003bc4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	02db      	lsls	r3, r3, #11
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd6:	e032      	b.n	8003c3e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d117      	bne.n	8003c10 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	0fdb      	lsrs	r3, r3, #31
 8003be4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	0cdb      	lsrs	r3, r3, #19
 8003bea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	0adb      	lsrs	r3, r3, #11
 8003bf0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	08db      	lsrs	r3, r3, #3
 8003bf6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	029b      	lsls	r3, r3, #10
 8003c00:	431a      	orrs	r2, r3
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	03db      	lsls	r3, r3, #15
 8003c06:	4313      	orrs	r3, r2
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0e:	e016      	b.n	8003c3e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	0f1b      	lsrs	r3, r3, #28
 8003c14:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	0d1b      	lsrs	r3, r3, #20
 8003c1a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	0b1b      	lsrs	r3, r3, #12
 8003c20:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	011a      	lsls	r2, r3, #4
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	431a      	orrs	r2, r3
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	031b      	lsls	r3, r3, #12
 8003c36:	4313      	orrs	r3, r2
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003c46:	e003      	b.n	8003c50 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	60da      	str	r2, [r3, #12]
}
 8003c50:	bf00      	nop
 8003c52:	372c      	adds	r7, #44	; 0x2c
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	e175      	b.n	8003f68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	fa02 f303 	lsl.w	r3, r2, r3
 8003c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	f040 8164 	bne.w	8003f62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d00b      	beq.n	8003cba <HAL_GPIO_Init+0x5e>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d007      	beq.n	8003cba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cae:	2b11      	cmp	r3, #17
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b12      	cmp	r3, #18
 8003cb8:	d130      	bne.n	8003d1c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 0201 	and.w	r2, r3, #1
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	2203      	movs	r2, #3
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x100>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b12      	cmp	r3, #18
 8003d5a:	d123      	bne.n	8003da4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	08da      	lsrs	r2, r3, #3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3208      	adds	r2, #8
 8003d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	220f      	movs	r2, #15
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	08da      	lsrs	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	3208      	adds	r2, #8
 8003d9e:	69b9      	ldr	r1, [r7, #24]
 8003da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	2203      	movs	r2, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0203 	and.w	r2, r3, #3
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80be 	beq.w	8003f62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de6:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <HAL_GPIO_Init+0x320>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	4a64      	ldr	r2, [pc, #400]	; (8003f7c <HAL_GPIO_Init+0x320>)
 8003dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df0:	6453      	str	r3, [r2, #68]	; 0x44
 8003df2:	4b62      	ldr	r3, [pc, #392]	; (8003f7c <HAL_GPIO_Init+0x320>)
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003dfe:	4a60      	ldr	r2, [pc, #384]	; (8003f80 <HAL_GPIO_Init+0x324>)
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	3302      	adds	r3, #2
 8003e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	220f      	movs	r2, #15
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a57      	ldr	r2, [pc, #348]	; (8003f84 <HAL_GPIO_Init+0x328>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d037      	beq.n	8003e9a <HAL_GPIO_Init+0x23e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a56      	ldr	r2, [pc, #344]	; (8003f88 <HAL_GPIO_Init+0x32c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d031      	beq.n	8003e96 <HAL_GPIO_Init+0x23a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a55      	ldr	r2, [pc, #340]	; (8003f8c <HAL_GPIO_Init+0x330>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d02b      	beq.n	8003e92 <HAL_GPIO_Init+0x236>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a54      	ldr	r2, [pc, #336]	; (8003f90 <HAL_GPIO_Init+0x334>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d025      	beq.n	8003e8e <HAL_GPIO_Init+0x232>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a53      	ldr	r2, [pc, #332]	; (8003f94 <HAL_GPIO_Init+0x338>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01f      	beq.n	8003e8a <HAL_GPIO_Init+0x22e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a52      	ldr	r2, [pc, #328]	; (8003f98 <HAL_GPIO_Init+0x33c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d019      	beq.n	8003e86 <HAL_GPIO_Init+0x22a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a51      	ldr	r2, [pc, #324]	; (8003f9c <HAL_GPIO_Init+0x340>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_GPIO_Init+0x226>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a50      	ldr	r2, [pc, #320]	; (8003fa0 <HAL_GPIO_Init+0x344>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00d      	beq.n	8003e7e <HAL_GPIO_Init+0x222>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a4f      	ldr	r2, [pc, #316]	; (8003fa4 <HAL_GPIO_Init+0x348>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d007      	beq.n	8003e7a <HAL_GPIO_Init+0x21e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a4e      	ldr	r2, [pc, #312]	; (8003fa8 <HAL_GPIO_Init+0x34c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_GPIO_Init+0x21a>
 8003e72:	2309      	movs	r3, #9
 8003e74:	e012      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e76:	230a      	movs	r3, #10
 8003e78:	e010      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	e00e      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e7e:	2307      	movs	r3, #7
 8003e80:	e00c      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e82:	2306      	movs	r3, #6
 8003e84:	e00a      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e86:	2305      	movs	r3, #5
 8003e88:	e008      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	e006      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e004      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e002      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	f002 0203 	and.w	r2, r2, #3
 8003ea2:	0092      	lsls	r2, r2, #2
 8003ea4:	4093      	lsls	r3, r2
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003eac:	4934      	ldr	r1, [pc, #208]	; (8003f80 <HAL_GPIO_Init+0x324>)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eba:	4b3c      	ldr	r3, [pc, #240]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ede:	4a33      	ldr	r2, [pc, #204]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ee4:	4b31      	ldr	r3, [pc, #196]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f08:	4a28      	ldr	r2, [pc, #160]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f0e:	4b27      	ldr	r3, [pc, #156]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f32:	4a1e      	ldr	r2, [pc, #120]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f38:	4b1c      	ldr	r3, [pc, #112]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f5c:	4a13      	ldr	r2, [pc, #76]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3301      	adds	r3, #1
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	f67f ae86 	bls.w	8003c7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f70:	bf00      	nop
 8003f72:	3724      	adds	r7, #36	; 0x24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	40013800 	.word	0x40013800
 8003f84:	40020000 	.word	0x40020000
 8003f88:	40020400 	.word	0x40020400
 8003f8c:	40020800 	.word	0x40020800
 8003f90:	40020c00 	.word	0x40020c00
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40021400 	.word	0x40021400
 8003f9c:	40021800 	.word	0x40021800
 8003fa0:	40021c00 	.word	0x40021c00
 8003fa4:	40022000 	.word	0x40022000
 8003fa8:	40022400 	.word	0x40022400
 8003fac:	40013c00 	.word	0x40013c00

08003fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fc0:	787b      	ldrb	r3, [r7, #1]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003fcc:	e003      	b.n	8003fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003fce:	887b      	ldrh	r3, [r7, #2]
 8003fd0:	041a      	lsls	r2, r3, #16
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	619a      	str	r2, [r3, #24]
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	460b      	mov	r3, r1
 8003fec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695a      	ldr	r2, [r3, #20]
 8003ff2:	887b      	ldrh	r3, [r7, #2]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d004      	beq.n	8004004 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ffa:	887b      	ldrh	r3, [r7, #2]
 8003ffc:	041a      	lsls	r2, r3, #16
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8004002:	e002      	b.n	800400a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004004:	887a      	ldrh	r2, [r7, #2]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	619a      	str	r2, [r3, #24]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800402e:	4a05      	ldr	r2, [pc, #20]	; (8004044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f806 	bl	8004048 <HAL_GPIO_EXTI_Callback>
  }
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40013c00 	.word	0x40013c00

08004048 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e07f      	b.n	8004172 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fd fddc 	bl	8001c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2224      	movs	r2, #36	; 0x24
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d107      	bne.n	80040da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	e006      	b.n	80040e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d104      	bne.n	80040fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6859      	ldr	r1, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_I2C_Init+0x11c>)
 8004106:	430b      	orrs	r3, r1
 8004108:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004118:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	ea42 0103 	orr.w	r1, r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	021a      	lsls	r2, r3, #8
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69d9      	ldr	r1, [r3, #28]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1a      	ldr	r2, [r3, #32]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2220      	movs	r2, #32
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	02008000 	.word	0x02008000

08004180 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b20      	cmp	r3, #32
 8004194:	d138      	bne.n	8004208 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e032      	b.n	800420a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	; 0x24
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6819      	ldr	r1, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004208:	2302      	movs	r3, #2
  }
}
 800420a:	4618      	mov	r0, r3
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b20      	cmp	r3, #32
 800422a:	d139      	bne.n	80042a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004232:	2b01      	cmp	r3, #1
 8004234:	d101      	bne.n	800423a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004236:	2302      	movs	r3, #2
 8004238:	e033      	b.n	80042a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2224      	movs	r2, #36	; 0x24
 8004246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004268:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e000      	b.n	80042a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e0bf      	b.n	8004442 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fd fd2c 	bl	8001d34 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80042f2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6999      	ldr	r1, [r3, #24]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004308:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6899      	ldr	r1, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4b4a      	ldr	r3, [pc, #296]	; (800444c <HAL_LTDC_Init+0x19c>)
 8004324:	400b      	ands	r3, r1
 8004326:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6899      	ldr	r1, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699a      	ldr	r2, [r3, #24]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68d9      	ldr	r1, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b3e      	ldr	r3, [pc, #248]	; (800444c <HAL_LTDC_Init+0x19c>)
 8004352:	400b      	ands	r3, r1
 8004354:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	041b      	lsls	r3, r3, #16
 800435c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68d9      	ldr	r1, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1a      	ldr	r2, [r3, #32]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6919      	ldr	r1, [r3, #16]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b33      	ldr	r3, [pc, #204]	; (800444c <HAL_LTDC_Init+0x19c>)
 8004380:	400b      	ands	r3, r1
 8004382:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6919      	ldr	r1, [r3, #16]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6959      	ldr	r1, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b27      	ldr	r3, [pc, #156]	; (800444c <HAL_LTDC_Init+0x19c>)
 80043ae:	400b      	ands	r3, r1
 80043b0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	041b      	lsls	r3, r3, #16
 80043b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6959      	ldr	r1, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80043e0:	041b      	lsls	r3, r3, #16
 80043e2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0206 	orr.w	r2, r2, #6
 800441e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699a      	ldr	r2, [r3, #24]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 0201 	orr.w	r2, r2, #1
 800442e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	f000f800 	.word	0xf000f800

08004450 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004466:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d023      	beq.n	80044ba <HAL_LTDC_IRQHandler+0x6a>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01e      	beq.n	80044ba <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0204 	bic.w	r2, r2, #4
 800448a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2204      	movs	r2, #4
 8004492:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800449a:	f043 0201 	orr.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2204      	movs	r2, #4
 80044a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f86f 	bl	8004598 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d023      	beq.n	800450c <HAL_LTDC_IRQHandler+0xbc>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01e      	beq.n	800450c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0202 	bic.w	r2, r2, #2
 80044dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2202      	movs	r2, #2
 80044e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044ec:	f043 0202 	orr.w	r2, r3, #2
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2204      	movs	r2, #4
 80044fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f846 	bl	8004598 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01b      	beq.n	800454e <HAL_LTDC_IRQHandler+0xfe>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d016      	beq.n	800454e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f82f 	bl	80045ac <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01b      	beq.n	8004590 <HAL_LTDC_IRQHandler+0x140>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0208 	bic.w	r2, r2, #8
 8004570:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2208      	movs	r2, #8
 8004578:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f818 	bl	80045c0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_LTDC_ConfigLayer+0x1a>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e02c      	b.n	8004648 <HAL_LTDC_ConfigLayer+0x74>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2202      	movs	r2, #2
 80045fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2134      	movs	r1, #52	; 0x34
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	4413      	add	r3, r2
 800460a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	4614      	mov	r4, r2
 8004612:	461d      	mov	r5, r3
 8004614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800461a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800461c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800461e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f81f 	bl	800466c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2201      	movs	r2, #1
 8004634:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bdb0      	pop	{r4, r5, r7, pc}

08004650 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800465e:	b2db      	uxtb	r3, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	0c1b      	lsrs	r3, r3, #16
 8004684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004688:	4413      	add	r3, r2
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	01db      	lsls	r3, r3, #7
 8004698:	4413      	add	r3, r2
 800469a:	3384      	adds	r3, #132	; 0x84
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	6812      	ldr	r2, [r2, #0]
 80046a2:	4611      	mov	r1, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	01d2      	lsls	r2, r2, #7
 80046a8:	440a      	add	r2, r1
 80046aa:	3284      	adds	r2, #132	; 0x84
 80046ac:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80046b0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c2:	4413      	add	r3, r2
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	01db      	lsls	r3, r3, #7
 80046d0:	440b      	add	r3, r1
 80046d2:	3384      	adds	r3, #132	; 0x84
 80046d4:	4619      	mov	r1, r3
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4313      	orrs	r3, r2
 80046da:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046ea:	4413      	add	r3, r2
 80046ec:	041b      	lsls	r3, r3, #16
 80046ee:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	01db      	lsls	r3, r3, #7
 80046fa:	4413      	add	r3, r2
 80046fc:	3384      	adds	r3, #132	; 0x84
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4611      	mov	r1, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	01d2      	lsls	r2, r2, #7
 800470a:	440a      	add	r2, r1
 800470c:	3284      	adds	r2, #132	; 0x84
 800470e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004712:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004722:	4413      	add	r3, r2
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4619      	mov	r1, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	01db      	lsls	r3, r3, #7
 8004730:	440b      	add	r3, r1
 8004732:	3384      	adds	r3, #132	; 0x84
 8004734:	4619      	mov	r1, r3
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4313      	orrs	r3, r2
 800473a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	01db      	lsls	r3, r3, #7
 8004746:	4413      	add	r3, r2
 8004748:	3384      	adds	r3, #132	; 0x84
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	4611      	mov	r1, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	01d2      	lsls	r2, r2, #7
 8004756:	440a      	add	r2, r1
 8004758:	3284      	adds	r2, #132	; 0x84
 800475a:	f023 0307 	bic.w	r3, r3, #7
 800475e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	01db      	lsls	r3, r3, #7
 800476a:	4413      	add	r3, r2
 800476c:	3384      	adds	r3, #132	; 0x84
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004786:	041b      	lsls	r3, r3, #16
 8004788:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	061b      	lsls	r3, r3, #24
 8004790:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	01db      	lsls	r3, r3, #7
 800479c:	4413      	add	r3, r2
 800479e:	3384      	adds	r3, #132	; 0x84
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	01db      	lsls	r3, r3, #7
 80047ac:	4413      	add	r3, r2
 80047ae:	3384      	adds	r3, #132	; 0x84
 80047b0:	461a      	mov	r2, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047bc:	461a      	mov	r2, r3
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	01db      	lsls	r3, r3, #7
 80047d0:	440b      	add	r3, r1
 80047d2:	3384      	adds	r3, #132	; 0x84
 80047d4:	4619      	mov	r1, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	01db      	lsls	r3, r3, #7
 80047e6:	4413      	add	r3, r2
 80047e8:	3384      	adds	r3, #132	; 0x84
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	4611      	mov	r1, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	01d2      	lsls	r2, r2, #7
 80047f6:	440a      	add	r2, r1
 80047f8:	3284      	adds	r2, #132	; 0x84
 80047fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047fe:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	461a      	mov	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	01db      	lsls	r3, r3, #7
 800480a:	4413      	add	r3, r2
 800480c:	3384      	adds	r3, #132	; 0x84
 800480e:	461a      	mov	r2, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	01db      	lsls	r3, r3, #7
 8004820:	4413      	add	r3, r2
 8004822:	3384      	adds	r3, #132	; 0x84
 8004824:	69da      	ldr	r2, [r3, #28]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4619      	mov	r1, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	01db      	lsls	r3, r3, #7
 8004830:	440b      	add	r3, r1
 8004832:	3384      	adds	r3, #132	; 0x84
 8004834:	4619      	mov	r1, r3
 8004836:	4b58      	ldr	r3, [pc, #352]	; (8004998 <LTDC_SetConfig+0x32c>)
 8004838:	4013      	ands	r3, r2
 800483a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	68f9      	ldr	r1, [r7, #12]
 8004846:	6809      	ldr	r1, [r1, #0]
 8004848:	4608      	mov	r0, r1
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	01c9      	lsls	r1, r1, #7
 800484e:	4401      	add	r1, r0
 8004850:	3184      	adds	r1, #132	; 0x84
 8004852:	4313      	orrs	r3, r2
 8004854:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	01db      	lsls	r3, r3, #7
 8004860:	4413      	add	r3, r2
 8004862:	3384      	adds	r3, #132	; 0x84
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	01db      	lsls	r3, r3, #7
 8004870:	4413      	add	r3, r2
 8004872:	3384      	adds	r3, #132	; 0x84
 8004874:	461a      	mov	r2, r3
 8004876:	2300      	movs	r3, #0
 8004878:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	01db      	lsls	r3, r3, #7
 8004884:	4413      	add	r3, r2
 8004886:	3384      	adds	r3, #132	; 0x84
 8004888:	461a      	mov	r2, r3
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8004898:	2304      	movs	r3, #4
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	e01b      	b.n	80048d6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d102      	bne.n	80048ac <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80048a6:	2303      	movs	r3, #3
 80048a8:	61fb      	str	r3, [r7, #28]
 80048aa:	e014      	b.n	80048d6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d00b      	beq.n	80048cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d007      	beq.n	80048cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d003      	beq.n	80048cc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80048c8:	2b07      	cmp	r3, #7
 80048ca:	d102      	bne.n	80048d2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80048cc:	2302      	movs	r3, #2
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e001      	b.n	80048d6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80048d2:	2301      	movs	r3, #1
 80048d4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	01db      	lsls	r3, r3, #7
 80048e0:	4413      	add	r3, r2
 80048e2:	3384      	adds	r3, #132	; 0x84
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	4611      	mov	r1, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	01d2      	lsls	r2, r2, #7
 80048f0:	440a      	add	r2, r1
 80048f2:	3284      	adds	r2, #132	; 0x84
 80048f4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80048f8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	041a      	lsls	r2, r3, #16
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	1acb      	subs	r3, r1, r3
 8004910:	69f9      	ldr	r1, [r7, #28]
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	3303      	adds	r3, #3
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	6809      	ldr	r1, [r1, #0]
 800491c:	4608      	mov	r0, r1
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	01c9      	lsls	r1, r1, #7
 8004922:	4401      	add	r1, r0
 8004924:	3184      	adds	r1, #132	; 0x84
 8004926:	4313      	orrs	r3, r2
 8004928:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	01db      	lsls	r3, r3, #7
 8004934:	4413      	add	r3, r2
 8004936:	3384      	adds	r3, #132	; 0x84
 8004938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4619      	mov	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	01db      	lsls	r3, r3, #7
 8004944:	440b      	add	r3, r1
 8004946:	3384      	adds	r3, #132	; 0x84
 8004948:	4619      	mov	r1, r3
 800494a:	4b14      	ldr	r3, [pc, #80]	; (800499c <LTDC_SetConfig+0x330>)
 800494c:	4013      	ands	r3, r2
 800494e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	01db      	lsls	r3, r3, #7
 800495a:	4413      	add	r3, r2
 800495c:	3384      	adds	r3, #132	; 0x84
 800495e:	461a      	mov	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	01db      	lsls	r3, r3, #7
 8004970:	4413      	add	r3, r2
 8004972:	3384      	adds	r3, #132	; 0x84
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	4611      	mov	r1, r2
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	01d2      	lsls	r2, r2, #7
 8004980:	440a      	add	r2, r1
 8004982:	3284      	adds	r2, #132	; 0x84
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	6013      	str	r3, [r2, #0]
}
 800498a:	bf00      	nop
 800498c:	3724      	adds	r7, #36	; 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	fffff8f8 	.word	0xfffff8f8
 800499c:	fffff800 	.word	0xfffff800

080049a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a04      	ldr	r2, [pc, #16]	; (80049bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ae:	6013      	str	r3, [r2, #0]
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40007000 	.word	0x40007000

080049c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80049ca:	4b23      	ldr	r3, [pc, #140]	; (8004a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80049d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d4:	6413      	str	r3, [r2, #64]	; 0x40
 80049d6:	4b20      	ldr	r3, [pc, #128]	; (8004a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80049e2:	4b1e      	ldr	r3, [pc, #120]	; (8004a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049ee:	f7fe f845 	bl	8002a7c <HAL_GetTick>
 80049f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049f4:	e009      	b.n	8004a0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049f6:	f7fe f841 	bl	8002a7c <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a04:	d901      	bls.n	8004a0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e022      	b.n	8004a50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a0a:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a16:	d1ee      	bne.n	80049f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a18:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a0f      	ldr	r2, [pc, #60]	; (8004a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a24:	f7fe f82a 	bl	8002a7c <HAL_GetTick>
 8004a28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a2a:	e009      	b.n	8004a40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a2c:	f7fe f826 	bl	8002a7c <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a3a:	d901      	bls.n	8004a40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e007      	b.n	8004a50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a4c:	d1ee      	bne.n	8004a2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	40007000 	.word	0x40007000

08004a60 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004a68:	f7fe f808 	bl	8002a7c <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e067      	b.n	8004b48 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7fd fa19 	bl	8001ec4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004a92:	f241 3188 	movw	r1, #5000	; 0x1388
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f85e 	bl	8004b58 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	021a      	lsls	r2, r3, #8
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2120      	movs	r1, #32
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f856 	bl	8004b74 <QSPI_WaitFlagStateUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004acc:	7afb      	ldrb	r3, [r7, #11]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d135      	bne.n	8004b3e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <HAL_QSPI_Init+0xf0>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6852      	ldr	r2, [r2, #4]
 8004ae0:	0611      	lsls	r1, r2, #24
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	68d2      	ldr	r2, [r2, #12]
 8004ae6:	4311      	orrs	r1, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	69d2      	ldr	r2, [r2, #28]
 8004aec:	4311      	orrs	r1, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6a12      	ldr	r2, [r2, #32]
 8004af2:	4311      	orrs	r1, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <HAL_QSPI_Init+0xf4>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6912      	ldr	r2, [r2, #16]
 8004b0a:	0411      	lsls	r1, r2, #16
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6952      	ldr	r2, [r2, #20]
 8004b10:	4311      	orrs	r1, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6992      	ldr	r2, [r2, #24]
 8004b16:	4311      	orrs	r1, r2
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004b46:	7afb      	ldrb	r3, [r7, #11]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	00ffff2f 	.word	0x00ffff2f
 8004b54:	ffe0f8fe 	.word	0xffe0f8fe

08004b58 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	649a      	str	r2, [r3, #72]	; 0x48
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	603b      	str	r3, [r7, #0]
 8004b80:	4613      	mov	r3, r2
 8004b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004b84:	e01a      	b.n	8004bbc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d016      	beq.n	8004bbc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8e:	f7fd ff75 	bl	8002a7c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb0:	f043 0201 	orr.w	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e00e      	b.n	8004bda <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bf14      	ite	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	2300      	moveq	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d1d6      	bne.n	8004b86 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
	...

08004be4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004bec:	2300      	movs	r3, #0
 8004bee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e291      	b.n	800511e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f000 8087 	beq.w	8004d16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c08:	4b96      	ldr	r3, [pc, #600]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 030c 	and.w	r3, r3, #12
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d00c      	beq.n	8004c2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c14:	4b93      	ldr	r3, [pc, #588]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d112      	bne.n	8004c46 <HAL_RCC_OscConfig+0x62>
 8004c20:	4b90      	ldr	r3, [pc, #576]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2c:	d10b      	bne.n	8004c46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2e:	4b8d      	ldr	r3, [pc, #564]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d06c      	beq.n	8004d14 <HAL_RCC_OscConfig+0x130>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d168      	bne.n	8004d14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e26b      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4e:	d106      	bne.n	8004c5e <HAL_RCC_OscConfig+0x7a>
 8004c50:	4b84      	ldr	r3, [pc, #528]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a83      	ldr	r2, [pc, #524]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	e02e      	b.n	8004cbc <HAL_RCC_OscConfig+0xd8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x9c>
 8004c66:	4b7f      	ldr	r3, [pc, #508]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a7e      	ldr	r2, [pc, #504]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	4b7c      	ldr	r3, [pc, #496]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a7b      	ldr	r2, [pc, #492]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e01d      	b.n	8004cbc <HAL_RCC_OscConfig+0xd8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c88:	d10c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0xc0>
 8004c8a:	4b76      	ldr	r3, [pc, #472]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a75      	ldr	r2, [pc, #468]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	4b73      	ldr	r3, [pc, #460]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a72      	ldr	r2, [pc, #456]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e00b      	b.n	8004cbc <HAL_RCC_OscConfig+0xd8>
 8004ca4:	4b6f      	ldr	r3, [pc, #444]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a6e      	ldr	r2, [pc, #440]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	4b6c      	ldr	r3, [pc, #432]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a6b      	ldr	r2, [pc, #428]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d013      	beq.n	8004cec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fd feda 	bl	8002a7c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ccc:	f7fd fed6 	bl	8002a7c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	; 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e21f      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cde:	4b61      	ldr	r3, [pc, #388]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0xe8>
 8004cea:	e014      	b.n	8004d16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fd fec6 	bl	8002a7c <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fd fec2 	bl	8002a7c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e20b      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d06:	4b57      	ldr	r3, [pc, #348]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x110>
 8004d12:	e000      	b.n	8004d16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d069      	beq.n	8004df6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d22:	4b50      	ldr	r3, [pc, #320]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 030c 	and.w	r3, r3, #12
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d2e:	4b4d      	ldr	r3, [pc, #308]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d11c      	bne.n	8004d74 <HAL_RCC_OscConfig+0x190>
 8004d3a:	4b4a      	ldr	r3, [pc, #296]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d116      	bne.n	8004d74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d46:	4b47      	ldr	r3, [pc, #284]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <HAL_RCC_OscConfig+0x17a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d001      	beq.n	8004d5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e1df      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d5e:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	493d      	ldr	r1, [pc, #244]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d72:	e040      	b.n	8004df6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d023      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d7c:	4b39      	ldr	r3, [pc, #228]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a38      	ldr	r2, [pc, #224]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004d82:	f043 0301 	orr.w	r3, r3, #1
 8004d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fd fe78 	bl	8002a7c <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d90:	f7fd fe74 	bl	8002a7c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e1bd      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da2:	4b30      	ldr	r3, [pc, #192]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dae:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	4929      	ldr	r1, [pc, #164]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	600b      	str	r3, [r1, #0]
 8004dc2:	e018      	b.n	8004df6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dc4:	4b27      	ldr	r3, [pc, #156]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a26      	ldr	r2, [pc, #152]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7fd fe54 	bl	8002a7c <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd8:	f7fd fe50 	bl	8002a7c <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e199      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dea:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d038      	beq.n	8004e74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d019      	beq.n	8004e3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e0a:	4b16      	ldr	r3, [pc, #88]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e16:	f7fd fe31 	bl	8002a7c <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e1e:	f7fd fe2d 	bl	8002a7c <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e176      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCC_OscConfig+0x23a>
 8004e3c:	e01a      	b.n	8004e74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e3e:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e42:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <HAL_RCC_OscConfig+0x280>)
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4a:	f7fd fe17 	bl	8002a7c <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e52:	f7fd fe13 	bl	8002a7c <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d903      	bls.n	8004e68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e15c      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
 8004e64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e68:	4b91      	ldr	r3, [pc, #580]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ee      	bne.n	8004e52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80a4 	beq.w	8004fca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e82:	4b8b      	ldr	r3, [pc, #556]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10d      	bne.n	8004eaa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e8e:	4b88      	ldr	r3, [pc, #544]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	4a87      	ldr	r2, [pc, #540]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e98:	6413      	str	r3, [r2, #64]	; 0x40
 8004e9a:	4b85      	ldr	r3, [pc, #532]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	60bb      	str	r3, [r7, #8]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eaa:	4b82      	ldr	r3, [pc, #520]	; (80050b4 <HAL_RCC_OscConfig+0x4d0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d118      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004eb6:	4b7f      	ldr	r3, [pc, #508]	; (80050b4 <HAL_RCC_OscConfig+0x4d0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a7e      	ldr	r2, [pc, #504]	; (80050b4 <HAL_RCC_OscConfig+0x4d0>)
 8004ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ec2:	f7fd fddb 	bl	8002a7c <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eca:	f7fd fdd7 	bl	8002a7c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b64      	cmp	r3, #100	; 0x64
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e120      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004edc:	4b75      	ldr	r3, [pc, #468]	; (80050b4 <HAL_RCC_OscConfig+0x4d0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d106      	bne.n	8004efe <HAL_RCC_OscConfig+0x31a>
 8004ef0:	4b6f      	ldr	r3, [pc, #444]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef4:	4a6e      	ldr	r2, [pc, #440]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6713      	str	r3, [r2, #112]	; 0x70
 8004efc:	e02d      	b.n	8004f5a <HAL_RCC_OscConfig+0x376>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCC_OscConfig+0x33c>
 8004f06:	4b6a      	ldr	r3, [pc, #424]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	4a69      	ldr	r2, [pc, #420]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f0c:	f023 0301 	bic.w	r3, r3, #1
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70
 8004f12:	4b67      	ldr	r3, [pc, #412]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	4a66      	ldr	r2, [pc, #408]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f18:	f023 0304 	bic.w	r3, r3, #4
 8004f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f1e:	e01c      	b.n	8004f5a <HAL_RCC_OscConfig+0x376>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	2b05      	cmp	r3, #5
 8004f26:	d10c      	bne.n	8004f42 <HAL_RCC_OscConfig+0x35e>
 8004f28:	4b61      	ldr	r3, [pc, #388]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	4a60      	ldr	r2, [pc, #384]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f2e:	f043 0304 	orr.w	r3, r3, #4
 8004f32:	6713      	str	r3, [r2, #112]	; 0x70
 8004f34:	4b5e      	ldr	r3, [pc, #376]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	4a5d      	ldr	r2, [pc, #372]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f40:	e00b      	b.n	8004f5a <HAL_RCC_OscConfig+0x376>
 8004f42:	4b5b      	ldr	r3, [pc, #364]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	4a5a      	ldr	r2, [pc, #360]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4e:	4b58      	ldr	r3, [pc, #352]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a57      	ldr	r2, [pc, #348]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d015      	beq.n	8004f8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f62:	f7fd fd8b 	bl	8002a7c <HAL_GetTick>
 8004f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f68:	e00a      	b.n	8004f80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6a:	f7fd fd87 	bl	8002a7c <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e0ce      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f80:	4b4b      	ldr	r3, [pc, #300]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0ee      	beq.n	8004f6a <HAL_RCC_OscConfig+0x386>
 8004f8c:	e014      	b.n	8004fb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f8e:	f7fd fd75 	bl	8002a7c <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f94:	e00a      	b.n	8004fac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f96:	f7fd fd71 	bl	8002a7c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e0b8      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fac:	4b40      	ldr	r3, [pc, #256]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1ee      	bne.n	8004f96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d105      	bne.n	8004fca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fbe:	4b3c      	ldr	r3, [pc, #240]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	4a3b      	ldr	r2, [pc, #236]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80a4 	beq.w	800511c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fd4:	4b36      	ldr	r3, [pc, #216]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 030c 	and.w	r3, r3, #12
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d06b      	beq.n	80050b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d149      	bne.n	800507c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fe8:	4b31      	ldr	r3, [pc, #196]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a30      	ldr	r2, [pc, #192]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8004fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fd fd42 	bl	8002a7c <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ffc:	f7fd fd3e 	bl	8002a7c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e087      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500e:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69da      	ldr	r2, [r3, #28]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	019b      	lsls	r3, r3, #6
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	085b      	lsrs	r3, r3, #1
 8005032:	3b01      	subs	r3, #1
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	061b      	lsls	r3, r3, #24
 800503e:	4313      	orrs	r3, r2
 8005040:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8005042:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005046:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 800504e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005054:	f7fd fd12 	bl	8002a7c <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505c:	f7fd fd0e 	bl	8002a7c <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e057      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x478>
 800507a:	e04f      	b.n	800511c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800507c:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a0b      	ldr	r2, [pc, #44]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 8005082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fd fcf8 	bl	8002a7c <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005090:	f7fd fcf4 	bl	8002a7c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e03d      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a2:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <HAL_RCC_OscConfig+0x4cc>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f0      	bne.n	8005090 <HAL_RCC_OscConfig+0x4ac>
 80050ae:	e035      	b.n	800511c <HAL_RCC_OscConfig+0x538>
 80050b0:	40023800 	.word	0x40023800
 80050b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <HAL_RCC_OscConfig+0x544>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d028      	beq.n	8005118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d121      	bne.n	8005118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050de:	429a      	cmp	r2, r3
 80050e0:	d11a      	bne.n	8005118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050e8:	4013      	ands	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d111      	bne.n	8005118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	3b01      	subs	r3, #1
 8005102:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d107      	bne.n	8005118 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d001      	beq.n	800511c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40023800 	.word	0x40023800

0800512c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0d0      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005144:	4b6a      	ldr	r3, [pc, #424]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 030f 	and.w	r3, r3, #15
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d910      	bls.n	8005174 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4b67      	ldr	r3, [pc, #412]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 020f 	bic.w	r2, r3, #15
 800515a:	4965      	ldr	r1, [pc, #404]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	4b63      	ldr	r3, [pc, #396]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0b8      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800518c:	4b59      	ldr	r3, [pc, #356]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	4a58      	ldr	r2, [pc, #352]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005196:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051a4:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4a52      	ldr	r2, [pc, #328]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b0:	4b50      	ldr	r3, [pc, #320]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	494d      	ldr	r1, [pc, #308]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051be:	4313      	orrs	r3, r2
 80051c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d040      	beq.n	8005250 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d107      	bne.n	80051e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d6:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d115      	bne.n	800520e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e07f      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d107      	bne.n	80051fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ee:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e073      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fe:	4b3d      	ldr	r3, [pc, #244]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e06b      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800520e:	4b39      	ldr	r3, [pc, #228]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f023 0203 	bic.w	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	4936      	ldr	r1, [pc, #216]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 800521c:	4313      	orrs	r3, r2
 800521e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005220:	f7fd fc2c 	bl	8002a7c <HAL_GetTick>
 8005224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005226:	e00a      	b.n	800523e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005228:	f7fd fc28 	bl	8002a7c <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	f241 3288 	movw	r2, #5000	; 0x1388
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e053      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523e:	4b2d      	ldr	r3, [pc, #180]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 020c 	and.w	r2, r3, #12
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	429a      	cmp	r2, r3
 800524e:	d1eb      	bne.n	8005228 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005250:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d210      	bcs.n	8005280 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 020f 	bic.w	r2, r3, #15
 8005266:	4922      	ldr	r1, [pc, #136]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800526e:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e032      	b.n	80052e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800528c:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4916      	ldr	r1, [pc, #88]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052aa:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	490e      	ldr	r1, [pc, #56]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052be:	f000 f821 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 80052c2:	4601      	mov	r1, r0
 80052c4:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	091b      	lsrs	r3, r3, #4
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <HAL_RCC_ClockConfig+0x1cc>)
 80052d0:	5cd3      	ldrb	r3, [r2, r3]
 80052d2:	fa21 f303 	lsr.w	r3, r1, r3
 80052d6:	4a09      	ldr	r2, [pc, #36]	; (80052fc <HAL_RCC_ClockConfig+0x1d0>)
 80052d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052da:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_RCC_ClockConfig+0x1d4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fd fa00 	bl	80026e4 <HAL_InitTick>

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40023c00 	.word	0x40023c00
 80052f4:	40023800 	.word	0x40023800
 80052f8:	0800b3bc 	.word	0x0800b3bc
 80052fc:	20000000 	.word	0x20000000
 8005300:	20000004 	.word	0x20000004

08005304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	607b      	str	r3, [r7, #4]
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	2300      	movs	r3, #0
 8005314:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800531a:	4b50      	ldr	r3, [pc, #320]	; (800545c <HAL_RCC_GetSysClockFreq+0x158>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b04      	cmp	r3, #4
 8005324:	d007      	beq.n	8005336 <HAL_RCC_GetSysClockFreq+0x32>
 8005326:	2b08      	cmp	r3, #8
 8005328:	d008      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x38>
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 808d 	bne.w	800544a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005330:	4b4b      	ldr	r3, [pc, #300]	; (8005460 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005332:	60bb      	str	r3, [r7, #8]
      break;
 8005334:	e08c      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005336:	4b4b      	ldr	r3, [pc, #300]	; (8005464 <HAL_RCC_GetSysClockFreq+0x160>)
 8005338:	60bb      	str	r3, [r7, #8]
      break;
 800533a:	e089      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800533c:	4b47      	ldr	r3, [pc, #284]	; (800545c <HAL_RCC_GetSysClockFreq+0x158>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005344:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005346:	4b45      	ldr	r3, [pc, #276]	; (800545c <HAL_RCC_GetSysClockFreq+0x158>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d023      	beq.n	800539a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005352:	4b42      	ldr	r3, [pc, #264]	; (800545c <HAL_RCC_GetSysClockFreq+0x158>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	099b      	lsrs	r3, r3, #6
 8005358:	f04f 0400 	mov.w	r4, #0
 800535c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	ea03 0501 	and.w	r5, r3, r1
 8005368:	ea04 0602 	and.w	r6, r4, r2
 800536c:	4a3d      	ldr	r2, [pc, #244]	; (8005464 <HAL_RCC_GetSysClockFreq+0x160>)
 800536e:	fb02 f106 	mul.w	r1, r2, r6
 8005372:	2200      	movs	r2, #0
 8005374:	fb02 f205 	mul.w	r2, r2, r5
 8005378:	440a      	add	r2, r1
 800537a:	493a      	ldr	r1, [pc, #232]	; (8005464 <HAL_RCC_GetSysClockFreq+0x160>)
 800537c:	fba5 0101 	umull	r0, r1, r5, r1
 8005380:	1853      	adds	r3, r2, r1
 8005382:	4619      	mov	r1, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f04f 0400 	mov.w	r4, #0
 800538a:	461a      	mov	r2, r3
 800538c:	4623      	mov	r3, r4
 800538e:	f7fa ff3b 	bl	8000208 <__aeabi_uldivmod>
 8005392:	4603      	mov	r3, r0
 8005394:	460c      	mov	r4, r1
 8005396:	60fb      	str	r3, [r7, #12]
 8005398:	e049      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539a:	4b30      	ldr	r3, [pc, #192]	; (800545c <HAL_RCC_GetSysClockFreq+0x158>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	099b      	lsrs	r3, r3, #6
 80053a0:	f04f 0400 	mov.w	r4, #0
 80053a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	ea03 0501 	and.w	r5, r3, r1
 80053b0:	ea04 0602 	and.w	r6, r4, r2
 80053b4:	4629      	mov	r1, r5
 80053b6:	4632      	mov	r2, r6
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	f04f 0400 	mov.w	r4, #0
 80053c0:	0154      	lsls	r4, r2, #5
 80053c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053c6:	014b      	lsls	r3, r1, #5
 80053c8:	4619      	mov	r1, r3
 80053ca:	4622      	mov	r2, r4
 80053cc:	1b49      	subs	r1, r1, r5
 80053ce:	eb62 0206 	sbc.w	r2, r2, r6
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	f04f 0400 	mov.w	r4, #0
 80053da:	0194      	lsls	r4, r2, #6
 80053dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053e0:	018b      	lsls	r3, r1, #6
 80053e2:	1a5b      	subs	r3, r3, r1
 80053e4:	eb64 0402 	sbc.w	r4, r4, r2
 80053e8:	f04f 0100 	mov.w	r1, #0
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	00e2      	lsls	r2, r4, #3
 80053f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053f6:	00d9      	lsls	r1, r3, #3
 80053f8:	460b      	mov	r3, r1
 80053fa:	4614      	mov	r4, r2
 80053fc:	195b      	adds	r3, r3, r5
 80053fe:	eb44 0406 	adc.w	r4, r4, r6
 8005402:	f04f 0100 	mov.w	r1, #0
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	02a2      	lsls	r2, r4, #10
 800540c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005410:	0299      	lsls	r1, r3, #10
 8005412:	460b      	mov	r3, r1
 8005414:	4614      	mov	r4, r2
 8005416:	4618      	mov	r0, r3
 8005418:	4621      	mov	r1, r4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f04f 0400 	mov.w	r4, #0
 8005420:	461a      	mov	r2, r3
 8005422:	4623      	mov	r3, r4
 8005424:	f7fa fef0 	bl	8000208 <__aeabi_uldivmod>
 8005428:	4603      	mov	r3, r0
 800542a:	460c      	mov	r4, r1
 800542c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800542e:	4b0b      	ldr	r3, [pc, #44]	; (800545c <HAL_RCC_GetSysClockFreq+0x158>)
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	0c1b      	lsrs	r3, r3, #16
 8005434:	f003 0303 	and.w	r3, r3, #3
 8005438:	3301      	adds	r3, #1
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	fbb2 f3f3 	udiv	r3, r2, r3
 8005446:	60bb      	str	r3, [r7, #8]
      break;
 8005448:	e002      	b.n	8005450 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCC_GetSysClockFreq+0x15c>)
 800544c:	60bb      	str	r3, [r7, #8]
      break;
 800544e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005450:	68bb      	ldr	r3, [r7, #8]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800545a:	bf00      	nop
 800545c:	40023800 	.word	0x40023800
 8005460:	00f42400 	.word	0x00f42400
 8005464:	017d7840 	.word	0x017d7840

08005468 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <HAL_RCC_GetHCLKFreq+0x14>)
 800546e:	681b      	ldr	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000000 	.word	0x20000000

08005480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005484:	f7ff fff0 	bl	8005468 <HAL_RCC_GetHCLKFreq>
 8005488:	4601      	mov	r1, r0
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	0a9b      	lsrs	r3, r3, #10
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	4a03      	ldr	r2, [pc, #12]	; (80054a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005496:	5cd3      	ldrb	r3, [r2, r3]
 8005498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800549c:	4618      	mov	r0, r3
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40023800 	.word	0x40023800
 80054a4:	0800b3cc 	.word	0x0800b3cc

080054a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054ac:	f7ff ffdc 	bl	8005468 <HAL_RCC_GetHCLKFreq>
 80054b0:	4601      	mov	r1, r0
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	0b5b      	lsrs	r3, r3, #13
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	4a03      	ldr	r2, [pc, #12]	; (80054cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054be:	5cd3      	ldrb	r3, [r2, r3]
 80054c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40023800 	.word	0x40023800
 80054cc:	0800b3cc 	.word	0x0800b3cc

080054d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	220f      	movs	r2, #15
 80054de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054e0:	4b12      	ldr	r3, [pc, #72]	; (800552c <HAL_RCC_GetClockConfig+0x5c>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 0203 	and.w	r2, r3, #3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <HAL_RCC_GetClockConfig+0x5c>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054f8:	4b0c      	ldr	r3, [pc, #48]	; (800552c <HAL_RCC_GetClockConfig+0x5c>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005504:	4b09      	ldr	r3, [pc, #36]	; (800552c <HAL_RCC_GetClockConfig+0x5c>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	08db      	lsrs	r3, r3, #3
 800550a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <HAL_RCC_GetClockConfig+0x60>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 020f 	and.w	r2, r3, #15
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	601a      	str	r2, [r3, #0]
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40023800 	.word	0x40023800
 8005530:	40023c00 	.word	0x40023c00

08005534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b088      	sub	sp, #32
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d012      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800555c:	4b69      	ldr	r3, [pc, #420]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a68      	ldr	r2, [pc, #416]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005562:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005566:	6093      	str	r3, [r2, #8]
 8005568:	4b66      	ldr	r3, [pc, #408]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005570:	4964      	ldr	r1, [pc, #400]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800557e:	2301      	movs	r3, #1
 8005580:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d017      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800558e:	4b5d      	ldr	r3, [pc, #372]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559c:	4959      	ldr	r1, [pc, #356]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ac:	d101      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055ae:	2301      	movs	r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055ba:	2301      	movs	r3, #1
 80055bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d017      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055ca:	4b4e      	ldr	r3, [pc, #312]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	494a      	ldr	r1, [pc, #296]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055e8:	d101      	bne.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80055ea:	2301      	movs	r3, #1
 80055ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80055f6:	2301      	movs	r3, #1
 80055f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005606:	2301      	movs	r3, #1
 8005608:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 808b 	beq.w	800572e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005618:	4b3a      	ldr	r3, [pc, #232]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	4a39      	ldr	r2, [pc, #228]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005622:	6413      	str	r3, [r2, #64]	; 0x40
 8005624:	4b37      	ldr	r3, [pc, #220]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005630:	4b35      	ldr	r3, [pc, #212]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a34      	ldr	r2, [pc, #208]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563c:	f7fd fa1e 	bl	8002a7c <HAL_GetTick>
 8005640:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005644:	f7fd fa1a 	bl	8002a7c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b64      	cmp	r3, #100	; 0x64
 8005650:	d901      	bls.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e355      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005656:	4b2c      	ldr	r3, [pc, #176]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d0f0      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005662:	4b28      	ldr	r3, [pc, #160]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d035      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	429a      	cmp	r2, r3
 800567e:	d02e      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005680:	4b20      	ldr	r3, [pc, #128]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005688:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800568a:	4b1e      	ldr	r3, [pc, #120]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568e:	4a1d      	ldr	r2, [pc, #116]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005694:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005696:	4b1b      	ldr	r3, [pc, #108]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	4a1a      	ldr	r2, [pc, #104]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800569c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056a2:	4a18      	ldr	r2, [pc, #96]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056a8:	4b16      	ldr	r3, [pc, #88]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d114      	bne.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b4:	f7fd f9e2 	bl	8002a7c <HAL_GetTick>
 80056b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ba:	e00a      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056bc:	f7fd f9de 	bl	8002a7c <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d901      	bls.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	e317      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d2:	4b0c      	ldr	r3, [pc, #48]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d0ee      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ea:	d111      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80056f8:	4b04      	ldr	r3, [pc, #16]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80056fa:	400b      	ands	r3, r1
 80056fc:	4901      	ldr	r1, [pc, #4]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	608b      	str	r3, [r1, #8]
 8005702:	e00b      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005704:	40023800 	.word	0x40023800
 8005708:	40007000 	.word	0x40007000
 800570c:	0ffffcff 	.word	0x0ffffcff
 8005710:	4bb0      	ldr	r3, [pc, #704]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4aaf      	ldr	r2, [pc, #700]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005716:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800571a:	6093      	str	r3, [r2, #8]
 800571c:	4bad      	ldr	r3, [pc, #692]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800571e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005728:	49aa      	ldr	r1, [pc, #680]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800572a:	4313      	orrs	r3, r2
 800572c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0310 	and.w	r3, r3, #16
 8005736:	2b00      	cmp	r3, #0
 8005738:	d010      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800573a:	4ba6      	ldr	r3, [pc, #664]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800573c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005740:	4aa4      	ldr	r2, [pc, #656]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005746:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800574a:	4ba2      	ldr	r3, [pc, #648]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800574c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	499f      	ldr	r1, [pc, #636]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005768:	4b9a      	ldr	r3, [pc, #616]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800576a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005776:	4997      	ldr	r1, [pc, #604]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00a      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800578a:	4b92      	ldr	r3, [pc, #584]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005790:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005798:	498e      	ldr	r1, [pc, #568]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00a      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ac:	4b89      	ldr	r3, [pc, #548]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ba:	4986      	ldr	r1, [pc, #536]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057ce:	4b81      	ldr	r3, [pc, #516]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057dc:	497d      	ldr	r1, [pc, #500]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00a      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057f0:	4b78      	ldr	r3, [pc, #480]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80057f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f6:	f023 0203 	bic.w	r2, r3, #3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	4975      	ldr	r1, [pc, #468]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005812:	4b70      	ldr	r3, [pc, #448]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005818:	f023 020c 	bic.w	r2, r3, #12
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005820:	496c      	ldr	r1, [pc, #432]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00a      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005834:	4b67      	ldr	r3, [pc, #412]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005842:	4964      	ldr	r1, [pc, #400]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005844:	4313      	orrs	r3, r2
 8005846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005856:	4b5f      	ldr	r3, [pc, #380]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005864:	495b      	ldr	r1, [pc, #364]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005878:	4b56      	ldr	r3, [pc, #344]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	4953      	ldr	r1, [pc, #332]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800589a:	4b4e      	ldr	r3, [pc, #312]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a8:	494a      	ldr	r1, [pc, #296]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058bc:	4b45      	ldr	r3, [pc, #276]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ca:	4942      	ldr	r1, [pc, #264]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80058de:	4b3d      	ldr	r3, [pc, #244]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ec:	4939      	ldr	r1, [pc, #228]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005900:	4b34      	ldr	r3, [pc, #208]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800590e:	4931      	ldr	r1, [pc, #196]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d011      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005922:	4b2c      	ldr	r3, [pc, #176]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005928:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005930:	4928      	ldr	r1, [pc, #160]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005940:	d101      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005942:	2301      	movs	r3, #1
 8005944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005952:	2301      	movs	r3, #1
 8005954:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005962:	4b1c      	ldr	r3, [pc, #112]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005968:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005970:	4918      	ldr	r1, [pc, #96]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00b      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005984:	4b13      	ldr	r3, [pc, #76]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005994:	490f      	ldr	r1, [pc, #60]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d005      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059aa:	f040 80d8 	bne.w	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059ae:	4b09      	ldr	r3, [pc, #36]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a08      	ldr	r2, [pc, #32]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80059b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ba:	f7fd f85f 	bl	8002a7c <HAL_GetTick>
 80059be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059c0:	e00a      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059c2:	f7fd f85b 	bl	8002a7c <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b64      	cmp	r3, #100	; 0x64
 80059ce:	d903      	bls.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e196      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80059d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059d8:	4b6c      	ldr	r3, [pc, #432]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ee      	bne.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d021      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d11d      	bne.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059f8:	4b64      	ldr	r3, [pc, #400]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80059fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059fe:	0c1b      	lsrs	r3, r3, #16
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a06:	4b61      	ldr	r3, [pc, #388]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0c:	0e1b      	lsrs	r3, r3, #24
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	019a      	lsls	r2, r3, #6
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	041b      	lsls	r3, r3, #16
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	061b      	lsls	r3, r3, #24
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	071b      	lsls	r3, r3, #28
 8005a2c:	4957      	ldr	r1, [pc, #348]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a48:	d00a      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d02e      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a5e:	d129      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a60:	4b4a      	ldr	r3, [pc, #296]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	f003 0303 	and.w	r3, r3, #3
 8005a6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a6e:	4b47      	ldr	r3, [pc, #284]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a74:	0f1b      	lsrs	r3, r3, #28
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	019a      	lsls	r2, r3, #6
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	061b      	lsls	r3, r3, #24
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	071b      	lsls	r3, r3, #28
 8005a94:	493d      	ldr	r1, [pc, #244]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a9c:	4b3b      	ldr	r3, [pc, #236]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa2:	f023 021f 	bic.w	r2, r3, #31
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4937      	ldr	r1, [pc, #220]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01d      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ac0:	4b32      	ldr	r3, [pc, #200]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ac6:	0e1b      	lsrs	r3, r3, #24
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ace:	4b2f      	ldr	r3, [pc, #188]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad4:	0f1b      	lsrs	r3, r3, #28
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	019a      	lsls	r2, r3, #6
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	041b      	lsls	r3, r3, #16
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	061b      	lsls	r3, r3, #24
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	071b      	lsls	r3, r3, #28
 8005af4:	4925      	ldr	r1, [pc, #148]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d011      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	019a      	lsls	r2, r3, #6
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	061b      	lsls	r3, r3, #24
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	071b      	lsls	r3, r3, #28
 8005b24:	4919      	ldr	r1, [pc, #100]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b2c:	4b17      	ldr	r3, [pc, #92]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a16      	ldr	r2, [pc, #88]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b38:	f7fc ffa0 	bl	8002a7c <HAL_GetTick>
 8005b3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b40:	f7fc ff9c 	bl	8002a7c <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b64      	cmp	r3, #100	; 0x64
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e0d7      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b52:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	f040 80cd 	bne.w	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b66:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b72:	f7fc ff83 	bl	8002a7c <HAL_GetTick>
 8005b76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b78:	e00a      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b7a:	f7fc ff7f 	bl	8002a7c <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b64      	cmp	r3, #100	; 0x64
 8005b86:	d903      	bls.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e0ba      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005b8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b90:	4b5e      	ldr	r3, [pc, #376]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b9c:	d0ed      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d02e      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d12a      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bc6:	4b51      	ldr	r3, [pc, #324]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bcc:	0c1b      	lsrs	r3, r3, #16
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bd4:	4b4d      	ldr	r3, [pc, #308]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bda:	0f1b      	lsrs	r3, r3, #28
 8005bdc:	f003 0307 	and.w	r3, r3, #7
 8005be0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	019a      	lsls	r2, r3, #6
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	041b      	lsls	r3, r3, #16
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	061b      	lsls	r3, r3, #24
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	071b      	lsls	r3, r3, #28
 8005bfa:	4944      	ldr	r1, [pc, #272]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c02:	4b42      	ldr	r3, [pc, #264]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	3b01      	subs	r3, #1
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	493d      	ldr	r1, [pc, #244]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d022      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c30:	d11d      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c32:	4b36      	ldr	r3, [pc, #216]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c38:	0e1b      	lsrs	r3, r3, #24
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c40:	4b32      	ldr	r3, [pc, #200]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c46:	0f1b      	lsrs	r3, r3, #28
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	019a      	lsls	r2, r3, #6
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	041b      	lsls	r3, r3, #16
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	061b      	lsls	r3, r3, #24
 8005c60:	431a      	orrs	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	071b      	lsls	r3, r3, #28
 8005c66:	4929      	ldr	r1, [pc, #164]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d028      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c7a:	4b24      	ldr	r3, [pc, #144]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c80:	0e1b      	lsrs	r3, r3, #24
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c88:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	0c1b      	lsrs	r3, r3, #16
 8005c90:	f003 0303 	and.w	r3, r3, #3
 8005c94:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	019a      	lsls	r2, r3, #6
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	061b      	lsls	r3, r3, #24
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	071b      	lsls	r3, r3, #28
 8005cae:	4917      	ldr	r1, [pc, #92]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005cb6:	4b15      	ldr	r3, [pc, #84]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	4911      	ldr	r1, [pc, #68]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ccc:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0e      	ldr	r2, [pc, #56]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd8:	f7fc fed0 	bl	8002a7c <HAL_GetTick>
 8005cdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ce0:	f7fc fecc 	bl	8002a7c <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	; 0x64
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e007      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cf2:	4b06      	ldr	r3, [pc, #24]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfe:	d1ef      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	40023800 	.word	0x40023800

08005d10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d2e:	f040 8086 	bne.w	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005d32:	4b8d      	ldr	r3, [pc, #564]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d38:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005d40:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d48:	d03e      	beq.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8005d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d4e:	d073      	beq.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d000      	beq.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005d54:	e074      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005d56:	4b84      	ldr	r3, [pc, #528]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d108      	bne.n	8005d74 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d62:	4b81      	ldr	r3, [pc, #516]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d6a:	4a80      	ldr	r2, [pc, #512]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	e007      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005d74:	4b7c      	ldr	r3, [pc, #496]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d7c:	4a7c      	ldr	r2, [pc, #496]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d82:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005d84:	4b78      	ldr	r3, [pc, #480]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d8a:	0e1b      	lsrs	r3, r3, #24
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005d92:	4b75      	ldr	r3, [pc, #468]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d98:	099b      	lsrs	r3, r3, #6
 8005d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	fb02 f203 	mul.w	r2, r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005daa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005dac:	4b6e      	ldr	r3, [pc, #440]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	3301      	adds	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
        break;
 8005dc6:	e03b      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005dc8:	4b67      	ldr	r3, [pc, #412]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d108      	bne.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005dd4:	4b64      	ldr	r3, [pc, #400]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ddc:	4a63      	ldr	r2, [pc, #396]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	e007      	b.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005de6:	4b60      	ldr	r3, [pc, #384]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dee:	4a60      	ldr	r2, [pc, #384]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005df6:	4b5c      	ldr	r3, [pc, #368]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dfc:	0e1b      	lsrs	r3, r3, #24
 8005dfe:	f003 030f 	and.w	r3, r3, #15
 8005e02:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005e04:	4b58      	ldr	r3, [pc, #352]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0a:	099b      	lsrs	r3, r3, #6
 8005e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	fb02 f203 	mul.w	r2, r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005e1e:	4b52      	ldr	r3, [pc, #328]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	3301      	adds	r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e34:	617b      	str	r3, [r7, #20]
        break;
 8005e36:	e003      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005e38:	4b4e      	ldr	r3, [pc, #312]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005e3a:	617b      	str	r3, [r7, #20]
        break;
 8005e3c:	e000      	b.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8005e3e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e46:	f040 8086 	bne.w	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005e4a:	4b47      	ldr	r3, [pc, #284]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e50:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005e58:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e60:	d03e      	beq.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005e62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e66:	d073      	beq.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d000      	beq.n	8005e6e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005e6c:	e074      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005e6e:	4b3e      	ldr	r3, [pc, #248]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d108      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005e7a:	4b3b      	ldr	r3, [pc, #236]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e82:	4a3a      	ldr	r2, [pc, #232]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e88:	613b      	str	r3, [r7, #16]
 8005e8a:	e007      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005e8c:	4b36      	ldr	r3, [pc, #216]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e94:	4a36      	ldr	r2, [pc, #216]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005e9c:	4b32      	ldr	r3, [pc, #200]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea2:	0e1b      	lsrs	r3, r3, #24
 8005ea4:	f003 030f 	and.w	r3, r3, #15
 8005ea8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb0:	099b      	lsrs	r3, r3, #6
 8005eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	fb02 f203 	mul.w	r2, r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005ec4:	4b28      	ldr	r3, [pc, #160]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eca:	0a1b      	lsrs	r3, r3, #8
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	617b      	str	r3, [r7, #20]
        break;
 8005ede:	e03b      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005ee0:	4b21      	ldr	r3, [pc, #132]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d108      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eec:	4b1e      	ldr	r3, [pc, #120]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ef4:	4a1d      	ldr	r2, [pc, #116]	; (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	e007      	b.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005efe:	4b1a      	ldr	r3, [pc, #104]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f06:	4a1a      	ldr	r2, [pc, #104]	; (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005f0e:	4b16      	ldr	r3, [pc, #88]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f14:	0e1b      	lsrs	r3, r3, #24
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005f1c:	4b12      	ldr	r3, [pc, #72]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f22:	099b      	lsrs	r3, r3, #6
 8005f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	fb02 f203 	mul.w	r2, r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f34:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	3301      	adds	r3, #1
 8005f42:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
        break;
 8005f4e:	e003      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005f50:	4b08      	ldr	r3, [pc, #32]	; (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005f52:	617b      	str	r3, [r7, #20]
        break;
 8005f54:	e000      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8005f56:	bf00      	nop

  return frequency;
 8005f58:	697b      	ldr	r3, [r7, #20]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	00f42400 	.word	0x00f42400
 8005f70:	017d7840 	.word	0x017d7840
 8005f74:	00bb8000 	.word	0x00bb8000

08005f78 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e06b      	b.n	8006062 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	7f5b      	ldrb	r3, [r3, #29]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d105      	bne.n	8005fa0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7fc f822 	bl	8001fe4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	22ca      	movs	r2, #202	; 0xca
 8005fac:	625a      	str	r2, [r3, #36]	; 0x24
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2253      	movs	r2, #83	; 0x53
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fb00 	bl	80065bc <RTC_EnterInitMode>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	22ff      	movs	r2, #255	; 0xff
 8005fc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2204      	movs	r2, #4
 8005fce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e046      	b.n	8006062 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6899      	ldr	r1, [r3, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4b23      	ldr	r3, [pc, #140]	; (800606c <HAL_RTC_Init+0xf4>)
 8005fe0:	400b      	ands	r3, r1
 8005fe2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6899      	ldr	r1, [r3, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68d2      	ldr	r2, [r2, #12]
 800600a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6919      	ldr	r1, [r3, #16]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	041a      	lsls	r2, r3, #16
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800602e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0208 	bic.w	r2, r2, #8
 800603e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	22ff      	movs	r2, #255	; 0xff
 8006058:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006060:	2300      	movs	r3, #0
  }
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	ff8fffbf 	.word	0xff8fffbf

08006070 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006070:	b590      	push	{r4, r7, lr}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	7f1b      	ldrb	r3, [r3, #28]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d101      	bne.n	800608c <HAL_RTC_SetTime+0x1c>
 8006088:	2302      	movs	r3, #2
 800608a:	e0a8      	b.n	80061de <HAL_RTC_SetTime+0x16e>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2202      	movs	r2, #2
 8006096:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d126      	bne.n	80060ec <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2200      	movs	r2, #0
 80060b0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 faac 	bl	8006614 <RTC_ByteToBcd2>
 80060bc:	4603      	mov	r3, r0
 80060be:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	785b      	ldrb	r3, [r3, #1]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 faa5 	bl	8006614 <RTC_ByteToBcd2>
 80060ca:	4603      	mov	r3, r0
 80060cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80060ce:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	789b      	ldrb	r3, [r3, #2]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fa9d 	bl	8006614 <RTC_ByteToBcd2>
 80060da:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80060dc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	7b1b      	ldrb	r3, [r3, #12]
 80060e4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	e018      	b.n	800611e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d102      	bne.n	8006100 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2200      	movs	r2, #0
 80060fe:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800610c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8006112:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	7b1b      	ldrb	r3, [r3, #12]
 8006118:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	22ca      	movs	r2, #202	; 0xca
 8006124:	625a      	str	r2, [r3, #36]	; 0x24
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2253      	movs	r2, #83	; 0x53
 800612c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 fa44 	bl	80065bc <RTC_EnterInitMode>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00b      	beq.n	8006152 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	22ff      	movs	r2, #255	; 0xff
 8006140:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2204      	movs	r2, #4
 8006146:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e045      	b.n	80061de <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	6979      	ldr	r1, [r7, #20]
 8006158:	4b23      	ldr	r3, [pc, #140]	; (80061e8 <HAL_RTC_SetTime+0x178>)
 800615a:	400b      	ands	r3, r1
 800615c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800616c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6899      	ldr	r1, [r3, #8]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	431a      	orrs	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68da      	ldr	r2, [r3, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006194:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d111      	bne.n	80061c8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f9e1 	bl	800656c <HAL_RTC_WaitForSynchro>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	22ff      	movs	r2, #255	; 0xff
 80061b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2204      	movs	r2, #4
 80061bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e00a      	b.n	80061de <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	22ff      	movs	r2, #255	; 0xff
 80061ce:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2201      	movs	r2, #1
 80061d4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80061dc:	2300      	movs	r3, #0
  }
}
 80061de:	4618      	mov	r0, r3
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd90      	pop	{r4, r7, pc}
 80061e6:	bf00      	nop
 80061e8:	007f7f7f 	.word	0x007f7f7f

080061ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061ec:	b590      	push	{r4, r7, lr}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	7f1b      	ldrb	r3, [r3, #28]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d101      	bne.n	8006208 <HAL_RTC_SetDate+0x1c>
 8006204:	2302      	movs	r3, #2
 8006206:	e092      	b.n	800632e <HAL_RTC_SetDate+0x142>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2201      	movs	r2, #1
 800620c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2202      	movs	r2, #2
 8006212:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10e      	bne.n	8006238 <HAL_RTC_SetDate+0x4c>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	f003 0310 	and.w	r3, r3, #16
 8006222:	2b00      	cmp	r3, #0
 8006224:	d008      	beq.n	8006238 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	f023 0310 	bic.w	r3, r3, #16
 800622e:	b2db      	uxtb	r3, r3
 8006230:	330a      	adds	r3, #10
 8006232:	b2da      	uxtb	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d11c      	bne.n	8006278 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	78db      	ldrb	r3, [r3, #3]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f9e6 	bl	8006614 <RTC_ByteToBcd2>
 8006248:	4603      	mov	r3, r0
 800624a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	4618      	mov	r0, r3
 8006252:	f000 f9df 	bl	8006614 <RTC_ByteToBcd2>
 8006256:	4603      	mov	r3, r0
 8006258:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800625a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	789b      	ldrb	r3, [r3, #2]
 8006260:	4618      	mov	r0, r3
 8006262:	f000 f9d7 	bl	8006614 <RTC_ByteToBcd2>
 8006266:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8006268:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	e00e      	b.n	8006296 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	78db      	ldrb	r3, [r3, #3]
 800627c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	785b      	ldrb	r3, [r3, #1]
 8006282:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006284:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800628a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	22ca      	movs	r2, #202	; 0xca
 800629c:	625a      	str	r2, [r3, #36]	; 0x24
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2253      	movs	r2, #83	; 0x53
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f988 	bl	80065bc <RTC_EnterInitMode>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00b      	beq.n	80062ca <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	22ff      	movs	r2, #255	; 0xff
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2204      	movs	r2, #4
 80062be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e031      	b.n	800632e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	6979      	ldr	r1, [r7, #20]
 80062d0:	4b19      	ldr	r3, [pc, #100]	; (8006338 <HAL_RTC_SetDate+0x14c>)
 80062d2:	400b      	ands	r3, r1
 80062d4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062e4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d111      	bne.n	8006318 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f939 	bl	800656c <HAL_RTC_WaitForSynchro>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	22ff      	movs	r2, #255	; 0xff
 8006306:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2204      	movs	r2, #4
 800630c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e00a      	b.n	800632e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	22ff      	movs	r2, #255	; 0xff
 800631e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800632c:	2300      	movs	r3, #0
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	bd90      	pop	{r4, r7, pc}
 8006336:	bf00      	nop
 8006338:	00ffff3f 	.word	0x00ffff3f

0800633c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b089      	sub	sp, #36	; 0x24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	7f1b      	ldrb	r3, [r3, #28]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_RTC_SetAlarm+0x24>
 800635c:	2302      	movs	r3, #2
 800635e:	e101      	b.n	8006564 <HAL_RTC_SetAlarm+0x228>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2201      	movs	r2, #1
 8006364:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2202      	movs	r2, #2
 800636a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d137      	bne.n	80063e2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2200      	movs	r2, #0
 8006384:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f942 	bl	8006614 <RTC_ByteToBcd2>
 8006390:	4603      	mov	r3, r0
 8006392:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 f93b 	bl	8006614 <RTC_ByteToBcd2>
 800639e:	4603      	mov	r3, r0
 80063a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80063a2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	789b      	ldrb	r3, [r3, #2]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 f933 	bl	8006614 <RTC_ByteToBcd2>
 80063ae:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80063b0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	7b1b      	ldrb	r3, [r3, #12]
 80063b8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80063ba:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 f925 	bl	8006614 <RTC_ByteToBcd2>
 80063ca:	4603      	mov	r3, r0
 80063cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80063ce:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80063d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80063dc:	4313      	orrs	r3, r2
 80063de:	61fb      	str	r3, [r7, #28]
 80063e0:	e023      	b.n	800642a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d102      	bne.n	80063f6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2200      	movs	r2, #0
 80063f4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	785b      	ldrb	r3, [r3, #1]
 8006400:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006402:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8006408:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	7b1b      	ldrb	r3, [r3, #12]
 800640e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8006410:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006418:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800641a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8006420:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8006426:	4313      	orrs	r3, r2
 8006428:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	4313      	orrs	r3, r2
 8006434:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	22ca      	movs	r2, #202	; 0xca
 800643c:	625a      	str	r2, [r3, #36]	; 0x24
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2253      	movs	r2, #83	; 0x53
 8006444:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800644e:	d13f      	bne.n	80064d0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689a      	ldr	r2, [r3, #8]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800645e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800646e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006470:	f7fc fb04 	bl	8002a7c <HAL_GetTick>
 8006474:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8006476:	e013      	b.n	80064a0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006478:	f7fc fb00 	bl	8002a7c <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006486:	d90b      	bls.n	80064a0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	22ff      	movs	r2, #255	; 0xff
 800648e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2203      	movs	r2, #3
 8006494:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e061      	b.n	8006564 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d0e4      	beq.n	8006478 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064cc:	609a      	str	r2, [r3, #8]
 80064ce:	e03e      	b.n	800654e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80064de:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ee:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064f0:	f7fc fac4 	bl	8002a7c <HAL_GetTick>
 80064f4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80064f6:	e013      	b.n	8006520 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80064f8:	f7fc fac0 	bl	8002a7c <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006506:	d90b      	bls.n	8006520 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	22ff      	movs	r2, #255	; 0xff
 800650e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2203      	movs	r2, #3
 8006514:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e021      	b.n	8006564 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0e4      	beq.n	80064f8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800654c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	22ff      	movs	r2, #255	; 0xff
 8006554:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3724      	adds	r7, #36	; 0x24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd90      	pop	{r4, r7, pc}

0800656c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006586:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006588:	f7fc fa78 	bl	8002a7c <HAL_GetTick>
 800658c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800658e:	e009      	b.n	80065a4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006590:	f7fc fa74 	bl	8002a7c <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800659e:	d901      	bls.n	80065a4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e007      	b.n	80065b4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0ee      	beq.n	8006590 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d119      	bne.n	800660a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f04f 32ff 	mov.w	r2, #4294967295
 80065de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80065e0:	f7fc fa4c 	bl	8002a7c <HAL_GetTick>
 80065e4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80065e6:	e009      	b.n	80065fc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80065e8:	f7fc fa48 	bl	8002a7c <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065f6:	d901      	bls.n	80065fc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e007      	b.n	800660c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0ee      	beq.n	80065e8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8006622:	e005      	b.n	8006630 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	3b0a      	subs	r3, #10
 800662e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	2b09      	cmp	r3, #9
 8006634:	d8f6      	bhi.n	8006624 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	b2da      	uxtb	r2, r3
 800663e:	79fb      	ldrb	r3, [r7, #7]
 8006640:	4313      	orrs	r3, r2
 8006642:	b2db      	uxtb	r3, r3
}
 8006644:	4618      	mov	r0, r3
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	7f1b      	ldrb	r3, [r3, #28]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_RTCEx_SetTimeStamp+0x1c>
 8006668:	2302      	movs	r3, #2
 800666a:	e03e      	b.n	80066ea <HAL_RTCEx_SetTimeStamp+0x9a>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2201      	movs	r2, #1
 8006670:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2202      	movs	r2, #2
 8006676:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	4b1e      	ldr	r3, [pc, #120]	; (80066f8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8006680:	4013      	ands	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	22ca      	movs	r2, #202	; 0xca
 8006692:	625a      	str	r2, [r3, #36]	; 0x24
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2253      	movs	r2, #83	; 0x53
 800669a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0206 	bic.w	r2, r2, #6
 80066aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066d2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	22ff      	movs	r2, #255	; 0xff
 80066da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	fffff7f7 	.word	0xfffff7f7

080066fc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006704:	2300      	movs	r3, #0
 8006706:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e149      	b.n	80069ae <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d106      	bne.n	8006734 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fb ff6e 	bl	8002610 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f94f 	bl	80069e0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d007      	beq.n	800675a <HAL_SAI_Init+0x5e>
 800674a:	2b01      	cmp	r3, #1
 800674c:	d302      	bcc.n	8006754 <HAL_SAI_Init+0x58>
 800674e:	2b02      	cmp	r3, #2
 8006750:	d006      	beq.n	8006760 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8006752:	e008      	b.n	8006766 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8006754:	2300      	movs	r3, #0
 8006756:	61fb      	str	r3, [r7, #28]
      break;
 8006758:	e005      	b.n	8006766 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800675a:	2310      	movs	r3, #16
 800675c:	61fb      	str	r3, [r7, #28]
      break;
 800675e:	e002      	b.n	8006766 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006760:	2320      	movs	r3, #32
 8006762:	61fb      	str	r3, [r7, #28]
      break;
 8006764:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	2b03      	cmp	r3, #3
 800676c:	d81d      	bhi.n	80067aa <HAL_SAI_Init+0xae>
 800676e:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <HAL_SAI_Init+0x78>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	08006785 	.word	0x08006785
 8006778:	0800678b 	.word	0x0800678b
 800677c:	08006793 	.word	0x08006793
 8006780:	0800679b 	.word	0x0800679b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]
      }
      break;
 8006788:	e010      	b.n	80067ac <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800678a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800678e:	617b      	str	r3, [r7, #20]
      }
      break;
 8006790:	e00c      	b.n	80067ac <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8006792:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006796:	617b      	str	r3, [r7, #20]
      }
      break;
 8006798:	e008      	b.n	80067ac <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800679a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800679e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f043 0301 	orr.w	r3, r3, #1
 80067a6:	61fb      	str	r3, [r7, #28]
      }
      break;
 80067a8:	e000      	b.n	80067ac <HAL_SAI_Init+0xb0>
  default:
    break;
 80067aa:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a81      	ldr	r2, [pc, #516]	; (80069b8 <HAL_SAI_Init+0x2bc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d004      	beq.n	80067c0 <HAL_SAI_Init+0xc4>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a80      	ldr	r2, [pc, #512]	; (80069bc <HAL_SAI_Init+0x2c0>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d103      	bne.n	80067c8 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 80067c0:	4a7f      	ldr	r2, [pc, #508]	; (80069c0 <HAL_SAI_Init+0x2c4>)
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	e002      	b.n	80067ce <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80067c8:	4a7e      	ldr	r2, [pc, #504]	; (80069c4 <HAL_SAI_Init+0x2c8>)
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d043      	beq.n	800685e <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a76      	ldr	r2, [pc, #472]	; (80069b8 <HAL_SAI_Init+0x2bc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d004      	beq.n	80067ee <HAL_SAI_Init+0xf2>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a74      	ldr	r2, [pc, #464]	; (80069bc <HAL_SAI_Init+0x2c0>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d104      	bne.n	80067f8 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80067ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80067f2:	f7ff fa8d 	bl	8005d10 <HAL_RCCEx_GetPeriphCLKFreq>
 80067f6:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a72      	ldr	r2, [pc, #456]	; (80069c8 <HAL_SAI_Init+0x2cc>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d004      	beq.n	800680c <HAL_SAI_Init+0x110>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a71      	ldr	r2, [pc, #452]	; (80069cc <HAL_SAI_Init+0x2d0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d104      	bne.n	8006816 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800680c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006810:	f7ff fa7e 	bl	8005d10 <HAL_RCCEx_GetPeriphCLKFreq>
 8006814:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	461a      	mov	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	025b      	lsls	r3, r3, #9
 8006828:	fbb2 f3f3 	udiv	r3, r2, r3
 800682c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4a67      	ldr	r2, [pc, #412]	; (80069d0 <HAL_SAI_Init+0x2d4>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	08da      	lsrs	r2, r3, #3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800683c:	68f9      	ldr	r1, [r7, #12]
 800683e:	4b64      	ldr	r3, [pc, #400]	; (80069d0 <HAL_SAI_Init+0x2d4>)
 8006840:	fba3 2301 	umull	r2, r3, r3, r1
 8006844:	08da      	lsrs	r2, r3, #3
 8006846:	4613      	mov	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	1aca      	subs	r2, r1, r3
 8006850:	2a08      	cmp	r2, #8
 8006852:	d904      	bls.n	800685e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_SAI_Init+0x172>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d109      	bne.n	8006882 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <HAL_SAI_Init+0x17e>
 8006876:	2300      	movs	r3, #0
 8006878:	e001      	b.n	800687e <HAL_SAI_Init+0x182>
 800687a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800687e:	61bb      	str	r3, [r7, #24]
 8006880:	e008      	b.n	8006894 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006886:	2b01      	cmp	r3, #1
 8006888:	d102      	bne.n	8006890 <HAL_SAI_Init+0x194>
 800688a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800688e:	e000      	b.n	8006892 <HAL_SAI_Init+0x196>
 8006890:	2300      	movs	r3, #0
 8006892:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6819      	ldr	r1, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	4b4d      	ldr	r3, [pc, #308]	; (80069d4 <HAL_SAI_Init+0x2d8>)
 80068a0:	400b      	ands	r3, r1
 80068a2:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	6819      	ldr	r1, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80068b8:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	431a      	orrs	r2, r3
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80068cc:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80068d8:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	051b      	lsls	r3, r3, #20
 80068e0:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6859      	ldr	r1, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	4b38      	ldr	r3, [pc, #224]	; (80069d8 <HAL_SAI_Init+0x2dc>)
 80068f6:	400b      	ands	r3, r1
 80068f8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6859      	ldr	r1, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699a      	ldr	r2, [r3, #24]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6899      	ldr	r1, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b2e      	ldr	r3, [pc, #184]	; (80069dc <HAL_SAI_Init+0x2e0>)
 8006924:	400b      	ands	r3, r1
 8006926:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6899      	ldr	r1, [r3, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006938:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800693e:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8006944:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694a:	3b01      	subs	r3, #1
 800694c:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800694e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68d9      	ldr	r1, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006966:	400b      	ands	r3, r1
 8006968:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68d9      	ldr	r1, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006978:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800697e:	041b      	lsls	r3, r3, #16
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006986:	3b01      	subs	r3, #1
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3720      	adds	r7, #32
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40015804 	.word	0x40015804
 80069bc:	40015824 	.word	0x40015824
 80069c0:	40015800 	.word	0x40015800
 80069c4:	40015c00 	.word	0x40015c00
 80069c8:	40015c04 	.word	0x40015c04
 80069cc:	40015c24 	.word	0x40015c24
 80069d0:	cccccccd 	.word	0xcccccccd
 80069d4:	ff05c010 	.word	0xff05c010
 80069d8:	ffff1ff0 	.word	0xffff1ff0
 80069dc:	fff88000 	.word	0xfff88000

080069e0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80069e0:	b490      	push	{r4, r7}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80069e8:	4b16      	ldr	r3, [pc, #88]	; (8006a44 <SAI_Disable+0x64>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a16      	ldr	r2, [pc, #88]	; (8006a48 <SAI_Disable+0x68>)
 80069ee:	fba2 2303 	umull	r2, r3, r2, r3
 80069f2:	0b1b      	lsrs	r3, r3, #12
 80069f4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a08:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006a0a:	4623      	mov	r3, r4
 8006a0c:	1e5c      	subs	r4, r3, #1
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006a22:	2303      	movs	r3, #3
 8006a24:	73fb      	strb	r3, [r7, #15]
      break;
 8006a26:	e006      	b.n	8006a36 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e9      	bne.n	8006a0a <SAI_Disable+0x2a>

  return status;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc90      	pop	{r4, r7}
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000000 	.word	0x20000000
 8006a48:	95cbec1b 	.word	0x95cbec1b

08006a4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e022      	b.n	8006aa4 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d105      	bne.n	8006a76 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7fb fad1 	bl	8002018 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2203      	movs	r2, #3
 8006a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f814 	bl	8006aac <HAL_SD_InitCard>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e00a      	b.n	8006aa4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006aac:	b5b0      	push	{r4, r5, r7, lr}
 8006aae:	b08e      	sub	sp, #56	; 0x38
 8006ab0:	af04      	add	r7, sp, #16
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006ac8:	2376      	movs	r3, #118	; 0x76
 8006aca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681d      	ldr	r5, [r3, #0]
 8006ad0:	466c      	mov	r4, sp
 8006ad2:	f107 0314 	add.w	r3, r7, #20
 8006ad6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ada:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ade:	f107 0308 	add.w	r3, r7, #8
 8006ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f002 fc59 	bl	800939c <SDMMC_Init>
 8006aea:	4603      	mov	r3, r0
 8006aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e03b      	b.n	8006b74 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b0a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f002 fc7c 	bl	800940e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b24:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fb16 	bl	8007158 <SD_PowerON>
 8006b2c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e013      	b.n	8006b74 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fa35 	bl	8006fbc <SD_InitCard>
 8006b52:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00b      	beq.n	8006b72 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3728      	adds	r7, #40	; 0x28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bdb0      	pop	{r4, r5, r7, pc}

08006b7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b8a:	0f9b      	lsrs	r3, r3, #30
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b96:	0e9b      	lsrs	r3, r3, #26
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba8:	0e1b      	lsrs	r3, r3, #24
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bba:	0c1b      	lsrs	r3, r3, #16
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bc6:	0a1b      	lsrs	r3, r3, #8
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bdc:	0d1b      	lsrs	r3, r3, #20
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be8:	0c1b      	lsrs	r3, r3, #16
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bfa:	0bdb      	lsrs	r3, r3, #15
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c0c:	0b9b      	lsrs	r3, r3, #14
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c1e:	0b5b      	lsrs	r3, r3, #13
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c30:	0b1b      	lsrs	r3, r3, #12
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d163      	bne.n	8006d14 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c50:	009a      	lsls	r2, r3, #2
 8006c52:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006c56:	4013      	ands	r3, r2
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006c5c:	0f92      	lsrs	r2, r2, #30
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c68:	0edb      	lsrs	r3, r3, #27
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c7a:	0e1b      	lsrs	r3, r3, #24
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c8c:	0d5b      	lsrs	r3, r3, #21
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c9e:	0c9b      	lsrs	r3, r3, #18
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb0:	0bdb      	lsrs	r3, r3, #15
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f003 0307 	and.w	r3, r3, #7
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	7e1b      	ldrb	r3, [r3, #24]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	f003 0307 	and.w	r3, r3, #7
 8006cd2:	3302      	adds	r3, #2
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006cde:	fb02 f203 	mul.w	r2, r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	7a1b      	ldrb	r3, [r3, #8]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	409a      	lsls	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006d00:	0a52      	lsrs	r2, r2, #9
 8006d02:	fb02 f203 	mul.w	r2, r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d10:	661a      	str	r2, [r3, #96]	; 0x60
 8006d12:	e031      	b.n	8006d78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d11d      	bne.n	8006d58 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2a:	0c1b      	lsrs	r3, r3, #16
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	3301      	adds	r3, #1
 8006d38:	029a      	lsls	r2, r3, #10
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d4c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	661a      	str	r2, [r3, #96]	; 0x60
 8006d56:	e00f      	b.n	8006d78 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a58      	ldr	r2, [pc, #352]	; (8006ec0 <HAL_SD_GetCardCSD+0x344>)
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e09d      	b.n	8006eb4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7c:	0b9b      	lsrs	r3, r3, #14
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	b2da      	uxtb	r2, r3
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d8e:	09db      	lsrs	r3, r3, #7
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db0:	0fdb      	lsrs	r3, r3, #31
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbc:	0f5b      	lsrs	r3, r3, #29
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	f003 0303 	and.w	r3, r3, #3
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	0e9b      	lsrs	r3, r3, #26
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de0:	0d9b      	lsrs	r3, r3, #22
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	0d5b      	lsrs	r3, r3, #21
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0e:	0c1b      	lsrs	r3, r3, #16
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e22:	0bdb      	lsrs	r3, r3, #15
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e36:	0b9b      	lsrs	r3, r3, #14
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	0b5b      	lsrs	r3, r3, #13
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	b2da      	uxtb	r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5e:	0b1b      	lsrs	r3, r3, #12
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e72:	0a9b      	lsrs	r3, r3, #10
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	0a1b      	lsrs	r3, r3, #8
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	004005ff 	.word	0x004005ff

08006ec4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006ec4:	b5b0      	push	{r4, r5, r7, lr}
 8006ec6:	b08e      	sub	sp, #56	; 0x38
 8006ec8:	af04      	add	r7, sp, #16
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2203      	movs	r2, #3
 8006ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d02e      	beq.n	8006f3c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee4:	d106      	bne.n	8006ef4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ef2:	e029      	b.n	8006f48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efa:	d10a      	bne.n	8006f12 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f9b9 	bl	8007274 <SD_WideBus_Enable>
 8006f02:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	639a      	str	r2, [r3, #56]	; 0x38
 8006f10:	e01a      	b.n	8006f48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f9f6 	bl	800730a <SD_WideBus_Disable>
 8006f1e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
 8006f2c:	e00c      	b.n	8006f48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	639a      	str	r2, [r3, #56]	; 0x38
 8006f3a:	e005      	b.n	8006f48 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d009      	beq.n	8006f64 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006f56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e024      	b.n	8006fae <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681d      	ldr	r5, [r3, #0]
 8006f8a:	466c      	mov	r4, sp
 8006f8c:	f107 0318 	add.w	r3, r7, #24
 8006f90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f98:	f107 030c 	add.w	r3, r7, #12
 8006f9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	f002 f9fc 	bl	800939c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3728      	adds	r7, #40	; 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	004005ff 	.word	0x004005ff

08006fbc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006fbc:	b5b0      	push	{r4, r5, r7, lr}
 8006fbe:	b094      	sub	sp, #80	; 0x50
 8006fc0:	af04      	add	r7, sp, #16
 8006fc2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f002 fa2d 	bl	800942c <SDMMC_GetPowerState>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fd8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006fdc:	e0b7      	b.n	800714e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d02f      	beq.n	8007046 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f002 fbad 	bl	800974a <SDMMC_CmdSendCID>
 8006ff0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <SD_InitCard+0x40>
    {
      return errorstate;
 8006ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffa:	e0a8      	b.n	800714e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2100      	movs	r1, #0
 8007002:	4618      	mov	r0, r3
 8007004:	f002 fa57 	bl	80094b6 <SDMMC_GetResponse>
 8007008:	4602      	mov	r2, r0
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2104      	movs	r1, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f002 fa4e 	bl	80094b6 <SDMMC_GetResponse>
 800701a:	4602      	mov	r2, r0
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2108      	movs	r1, #8
 8007026:	4618      	mov	r0, r3
 8007028:	f002 fa45 	bl	80094b6 <SDMMC_GetResponse>
 800702c:	4602      	mov	r2, r0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	210c      	movs	r1, #12
 8007038:	4618      	mov	r0, r3
 800703a:	f002 fa3c 	bl	80094b6 <SDMMC_GetResponse>
 800703e:	4602      	mov	r2, r0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	2b03      	cmp	r3, #3
 800704c:	d00d      	beq.n	800706a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f107 020e 	add.w	r2, r7, #14
 8007056:	4611      	mov	r1, r2
 8007058:	4618      	mov	r0, r3
 800705a:	f002 fbb3 	bl	80097c4 <SDMMC_CmdSetRelAdd>
 800705e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <SD_InitCard+0xae>
    {
      return errorstate;
 8007066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007068:	e071      	b.n	800714e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706e:	2b03      	cmp	r3, #3
 8007070:	d036      	beq.n	80070e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007072:	89fb      	ldrh	r3, [r7, #14]
 8007074:	461a      	mov	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	4619      	mov	r1, r3
 8007086:	4610      	mov	r0, r2
 8007088:	f002 fb7d 	bl	8009786 <SDMMC_CmdSendCSD>
 800708c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800708e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007096:	e05a      	b.n	800714e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f002 fa09 	bl	80094b6 <SDMMC_GetResponse>
 80070a4:	4602      	mov	r2, r0
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2104      	movs	r1, #4
 80070b0:	4618      	mov	r0, r3
 80070b2:	f002 fa00 	bl	80094b6 <SDMMC_GetResponse>
 80070b6:	4602      	mov	r2, r0
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2108      	movs	r1, #8
 80070c2:	4618      	mov	r0, r3
 80070c4:	f002 f9f7 	bl	80094b6 <SDMMC_GetResponse>
 80070c8:	4602      	mov	r2, r0
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	210c      	movs	r1, #12
 80070d4:	4618      	mov	r0, r3
 80070d6:	f002 f9ee 	bl	80094b6 <SDMMC_GetResponse>
 80070da:	4602      	mov	r2, r0
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2104      	movs	r1, #4
 80070e6:	4618      	mov	r0, r3
 80070e8:	f002 f9e5 	bl	80094b6 <SDMMC_GetResponse>
 80070ec:	4603      	mov	r3, r0
 80070ee:	0d1a      	lsrs	r2, r3, #20
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80070f4:	f107 0310 	add.w	r3, r7, #16
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff fd3e 	bl	8006b7c <HAL_SD_GetCardCSD>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007106:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800710a:	e020      	b.n	800714e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6819      	ldr	r1, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007114:	041b      	lsls	r3, r3, #16
 8007116:	f04f 0400 	mov.w	r4, #0
 800711a:	461a      	mov	r2, r3
 800711c:	4623      	mov	r3, r4
 800711e:	4608      	mov	r0, r1
 8007120:	f002 fa2a 	bl	8009578 <SDMMC_CmdSelDesel>
 8007124:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <SD_InitCard+0x174>
  {
    return errorstate;
 800712c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712e:	e00e      	b.n	800714e <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681d      	ldr	r5, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	466c      	mov	r4, sp
 8007138:	f103 0210 	add.w	r2, r3, #16
 800713c:	ca07      	ldmia	r2, {r0, r1, r2}
 800713e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007142:	3304      	adds	r3, #4
 8007144:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007146:	4628      	mov	r0, r5
 8007148:	f002 f928 	bl	800939c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3740      	adds	r7, #64	; 0x40
 8007152:	46bd      	mov	sp, r7
 8007154:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007158 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	2300      	movs	r3, #0
 800716a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f002 fa24 	bl	80095be <SDMMC_CmdGoIdleState>
 8007176:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <SD_PowerON+0x2a>
  {
    return errorstate;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	e072      	b.n	8007268 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f002 fa37 	bl	80095fa <SDMMC_CmdOperCond>
 800718c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00d      	beq.n	80071b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f002 fa0d 	bl	80095be <SDMMC_CmdGoIdleState>
 80071a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	e05b      	b.n	8007268 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d137      	bne.n	800722e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f002 fa37 	bl	8009638 <SDMMC_CmdAppCommand>
 80071ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d02d      	beq.n	800722e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071d6:	e047      	b.n	8007268 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2100      	movs	r1, #0
 80071de:	4618      	mov	r0, r3
 80071e0:	f002 fa2a 	bl	8009638 <SDMMC_CmdAppCommand>
 80071e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	e03b      	b.n	8007268 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	491e      	ldr	r1, [pc, #120]	; (8007270 <SD_PowerON+0x118>)
 80071f6:	4618      	mov	r0, r3
 80071f8:	f002 fa40 	bl	800967c <SDMMC_CmdAppOperCommand>
 80071fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007204:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007208:	e02e      	b.n	8007268 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2100      	movs	r1, #0
 8007210:	4618      	mov	r0, r3
 8007212:	f002 f950 	bl	80094b6 <SDMMC_GetResponse>
 8007216:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	0fdb      	lsrs	r3, r3, #31
 800721c:	2b01      	cmp	r3, #1
 800721e:	d101      	bne.n	8007224 <SD_PowerON+0xcc>
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <SD_PowerON+0xce>
 8007224:	2300      	movs	r3, #0
 8007226:	613b      	str	r3, [r7, #16]

    count++;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	3301      	adds	r3, #1
 800722c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007234:	4293      	cmp	r3, r2
 8007236:	d802      	bhi.n	800723e <SD_PowerON+0xe6>
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0cc      	beq.n	80071d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007244:	4293      	cmp	r3, r2
 8007246:	d902      	bls.n	800724e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800724c:	e00c      	b.n	8007268 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	645a      	str	r2, [r3, #68]	; 0x44
 800725e:	e002      	b.n	8007266 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	c1100000 	.word	0xc1100000

08007274 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]
 8007280:	2300      	movs	r3, #0
 8007282:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2100      	movs	r1, #0
 800728a:	4618      	mov	r0, r3
 800728c:	f002 f913 	bl	80094b6 <SDMMC_GetResponse>
 8007290:	4603      	mov	r3, r0
 8007292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800729a:	d102      	bne.n	80072a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800729c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072a0:	e02f      	b.n	8007302 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072a2:	f107 030c 	add.w	r3, r7, #12
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f879 	bl	80073a0 <SD_FindSCR>
 80072ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	e023      	b.n	8007302 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01c      	beq.n	80072fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072cc:	041b      	lsls	r3, r3, #16
 80072ce:	4619      	mov	r1, r3
 80072d0:	4610      	mov	r0, r2
 80072d2:	f002 f9b1 	bl	8009638 <SDMMC_CmdAppCommand>
 80072d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	e00f      	b.n	8007302 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2102      	movs	r1, #2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f002 f9eb 	bl	80096c4 <SDMMC_CmdBusWidth>
 80072ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	e003      	b.n	8007302 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80072fa:	2300      	movs	r3, #0
 80072fc:	e001      	b.n	8007302 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80072fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b086      	sub	sp, #24
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	2300      	movs	r3, #0
 8007318:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f002 f8c8 	bl	80094b6 <SDMMC_GetResponse>
 8007326:	4603      	mov	r3, r0
 8007328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800732c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007330:	d102      	bne.n	8007338 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007336:	e02f      	b.n	8007398 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007338:	f107 030c 	add.w	r3, r7, #12
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f82e 	bl	80073a0 <SD_FindSCR>
 8007344:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	e023      	b.n	8007398 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01c      	beq.n	8007394 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007362:	041b      	lsls	r3, r3, #16
 8007364:	4619      	mov	r1, r3
 8007366:	4610      	mov	r0, r2
 8007368:	f002 f966 	bl	8009638 <SDMMC_CmdAppCommand>
 800736c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	e00f      	b.n	8007398 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2100      	movs	r1, #0
 800737e:	4618      	mov	r0, r3
 8007380:	f002 f9a0 	bl	80096c4 <SDMMC_CmdBusWidth>
 8007384:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	e003      	b.n	8007398 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007390:	2300      	movs	r3, #0
 8007392:	e001      	b.n	8007398 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007394:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80073a0:	b590      	push	{r4, r7, lr}
 80073a2:	b08f      	sub	sp, #60	; 0x3c
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073aa:	f7fb fb67 	bl	8002a7c <HAL_GetTick>
 80073ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80073b4:	2300      	movs	r3, #0
 80073b6:	60bb      	str	r3, [r7, #8]
 80073b8:	2300      	movs	r3, #0
 80073ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2108      	movs	r1, #8
 80073c6:	4618      	mov	r0, r3
 80073c8:	f002 f8b4 	bl	8009534 <SDMMC_CmdBlockLength>
 80073cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	e0a9      	b.n	800752c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e0:	041b      	lsls	r3, r3, #16
 80073e2:	4619      	mov	r1, r3
 80073e4:	4610      	mov	r0, r2
 80073e6:	f002 f927 	bl	8009638 <SDMMC_CmdAppCommand>
 80073ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	e09a      	b.n	800752c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295
 80073fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80073fc:	2308      	movs	r3, #8
 80073fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007400:	2330      	movs	r3, #48	; 0x30
 8007402:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007404:	2302      	movs	r3, #2
 8007406:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007408:	2300      	movs	r3, #0
 800740a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800740c:	2301      	movs	r3, #1
 800740e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f107 0210 	add.w	r2, r7, #16
 8007418:	4611      	mov	r1, r2
 800741a:	4618      	mov	r0, r3
 800741c:	f002 f85e 	bl	80094dc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4618      	mov	r0, r3
 8007426:	f002 f96f 	bl	8009708 <SDMMC_CmdSendSCR>
 800742a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800742c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d022      	beq.n	8007478 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007434:	e07a      	b.n	800752c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00e      	beq.n	8007462 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6819      	ldr	r1, [r3, #0]
 8007448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	f107 0208 	add.w	r2, r7, #8
 8007450:	18d4      	adds	r4, r2, r3
 8007452:	4608      	mov	r0, r1
 8007454:	f001 ffce 	bl	80093f4 <SDMMC_ReadFIFO>
 8007458:	4603      	mov	r3, r0
 800745a:	6023      	str	r3, [r4, #0]
      index++;
 800745c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745e:	3301      	adds	r3, #1
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007462:	f7fb fb0b 	bl	8002a7c <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007470:	d102      	bne.n	8007478 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007472:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007476:	e059      	b.n	800752c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800747e:	f240 432a 	movw	r3, #1066	; 0x42a
 8007482:	4013      	ands	r3, r2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0d6      	beq.n	8007436 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748e:	f003 0308 	and.w	r3, r3, #8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2208      	movs	r2, #8
 800749c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800749e:	2308      	movs	r3, #8
 80074a0:	e044      	b.n	800752c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a8:	f003 0302 	and.w	r3, r3, #2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2202      	movs	r2, #2
 80074b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80074b8:	2302      	movs	r3, #2
 80074ba:	e037      	b.n	800752c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2220      	movs	r2, #32
 80074d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80074d2:	2320      	movs	r3, #32
 80074d4:	e02a      	b.n	800752c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f240 523a 	movw	r2, #1338	; 0x53a
 80074de:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	061a      	lsls	r2, r3, #24
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	0a1b      	lsrs	r3, r3, #8
 80074f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	0e1b      	lsrs	r3, r3, #24
 80074fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	601a      	str	r2, [r3, #0]
    scr++;
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	3304      	adds	r3, #4
 8007506:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	061a      	lsls	r2, r3, #24
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007514:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800751e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	0e1b      	lsrs	r3, r3, #24
 8007524:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	373c      	adds	r7, #60	; 0x3c
 8007530:	46bd      	mov	sp, r7
 8007532:	bd90      	pop	{r4, r7, pc}

08007534 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e025      	b.n	8007594 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7fb f84d 	bl	80025fc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2202      	movs	r2, #2
 8007566:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3304      	adds	r3, #4
 8007572:	4619      	mov	r1, r3
 8007574:	4610      	mov	r0, r2
 8007576:	f001 fdeb 	bl	8009150 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	461a      	mov	r2, r3
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	f001 fe55 	bl	8009234 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d101      	bne.n	80075b8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80075b4:	2302      	movs	r3, #2
 80075b6:	e018      	b.n	80075ea <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 feb3 	bl	8009334 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d104      	bne.n	80075e0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2205      	movs	r2, #5
 80075da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80075de:	e003      	b.n	80075e8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b02      	cmp	r3, #2
 8007606:	d101      	bne.n	800760c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007608:	2302      	movs	r3, #2
 800760a:	e00e      	b.n	800762a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	4618      	mov	r0, r3
 800761c:	f001 feab 	bl	8009376 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3708      	adds	r7, #8
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d101      	bne.n	8007646 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e04c      	b.n	80076e0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7fa fd3e 	bl	80020dc <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0203 	bic.w	r2, r2, #3
 8007676:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4b19      	ldr	r3, [pc, #100]	; (80076e8 <HAL_SPDIFRX_Init+0xb4>)
 8007684:	4013      	ands	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007690:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8007696:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800769c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80076a2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80076a8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80076ae:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80076b4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80076ba:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80076c0:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	fff88407 	.word	0xfff88407

080076ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e01d      	b.n	800773a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fa fd24 	bl	8002160 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3304      	adds	r3, #4
 8007728:	4619      	mov	r1, r3
 800772a:	4610      	mov	r0, r2
 800772c:	f000 fb78 	bl	8007e20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0201 	orr.w	r2, r2, #1
 800775a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	689a      	ldr	r2, [r3, #8]
 8007762:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <HAL_TIM_Base_Start_IT+0x50>)
 8007764:	4013      	ands	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b06      	cmp	r3, #6
 800776c:	d00b      	beq.n	8007786 <HAL_TIM_Base_Start_IT+0x42>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007774:	d007      	beq.n	8007786 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0201 	orr.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	00010007 	.word	0x00010007

08007798 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e01d      	b.n	80077e6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7fa fd3c 	bl	800223c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f000 fb22 	bl	8007e20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b02      	cmp	r3, #2
 8007802:	d122      	bne.n	800784a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b02      	cmp	r3, #2
 8007810:	d11b      	bne.n	800784a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f06f 0202 	mvn.w	r2, #2
 800781a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	f003 0303 	and.w	r3, r3, #3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fad7 	bl	8007de4 <HAL_TIM_IC_CaptureCallback>
 8007836:	e005      	b.n	8007844 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fac9 	bl	8007dd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fada 	bl	8007df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b04      	cmp	r3, #4
 8007856:	d122      	bne.n	800789e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	2b04      	cmp	r3, #4
 8007864:	d11b      	bne.n	800789e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f06f 0204 	mvn.w	r2, #4
 800786e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2202      	movs	r2, #2
 8007874:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007880:	2b00      	cmp	r3, #0
 8007882:	d003      	beq.n	800788c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 faad 	bl	8007de4 <HAL_TIM_IC_CaptureCallback>
 800788a:	e005      	b.n	8007898 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa9f 	bl	8007dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fab0 	bl	8007df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d122      	bne.n	80078f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f003 0308 	and.w	r3, r3, #8
 80078b6:	2b08      	cmp	r3, #8
 80078b8:	d11b      	bne.n	80078f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f06f 0208 	mvn.w	r2, #8
 80078c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2204      	movs	r2, #4
 80078c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f003 0303 	and.w	r3, r3, #3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fa83 	bl	8007de4 <HAL_TIM_IC_CaptureCallback>
 80078de:	e005      	b.n	80078ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fa75 	bl	8007dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa86 	bl	8007df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b10      	cmp	r3, #16
 80078fe:	d122      	bne.n	8007946 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f003 0310 	and.w	r3, r3, #16
 800790a:	2b10      	cmp	r3, #16
 800790c:	d11b      	bne.n	8007946 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f06f 0210 	mvn.w	r2, #16
 8007916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2208      	movs	r2, #8
 800791c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fa59 	bl	8007de4 <HAL_TIM_IC_CaptureCallback>
 8007932:	e005      	b.n	8007940 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fa4b 	bl	8007dd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fa5c 	bl	8007df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b01      	cmp	r3, #1
 8007952:	d10e      	bne.n	8007972 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b01      	cmp	r3, #1
 8007960:	d107      	bne.n	8007972 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f06f 0201 	mvn.w	r2, #1
 800796a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7fa f8a7 	bl	8001ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800797c:	2b80      	cmp	r3, #128	; 0x80
 800797e:	d10e      	bne.n	800799e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798a:	2b80      	cmp	r3, #128	; 0x80
 800798c:	d107      	bne.n	800799e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 feef 	bl	800877c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ac:	d10e      	bne.n	80079cc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b8:	2b80      	cmp	r3, #128	; 0x80
 80079ba:	d107      	bne.n	80079cc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fee2 	bl	8008790 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d6:	2b40      	cmp	r3, #64	; 0x40
 80079d8:	d10e      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e4:	2b40      	cmp	r3, #64	; 0x40
 80079e6:	d107      	bne.n	80079f8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fa0a 	bl	8007e0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d10e      	bne.n	8007a24 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0320 	and.w	r3, r3, #32
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d107      	bne.n	8007a24 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0220 	mvn.w	r2, #32
 8007a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fea2 	bl	8008768 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a24:	bf00      	nop
 8007a26:	3708      	adds	r7, #8
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e105      	b.n	8007c52 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2202      	movs	r2, #2
 8007a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b14      	cmp	r3, #20
 8007a5a:	f200 80f0 	bhi.w	8007c3e <HAL_TIM_PWM_ConfigChannel+0x212>
 8007a5e:	a201      	add	r2, pc, #4	; (adr r2, 8007a64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a64:	08007ab9 	.word	0x08007ab9
 8007a68:	08007c3f 	.word	0x08007c3f
 8007a6c:	08007c3f 	.word	0x08007c3f
 8007a70:	08007c3f 	.word	0x08007c3f
 8007a74:	08007af9 	.word	0x08007af9
 8007a78:	08007c3f 	.word	0x08007c3f
 8007a7c:	08007c3f 	.word	0x08007c3f
 8007a80:	08007c3f 	.word	0x08007c3f
 8007a84:	08007b3b 	.word	0x08007b3b
 8007a88:	08007c3f 	.word	0x08007c3f
 8007a8c:	08007c3f 	.word	0x08007c3f
 8007a90:	08007c3f 	.word	0x08007c3f
 8007a94:	08007b7b 	.word	0x08007b7b
 8007a98:	08007c3f 	.word	0x08007c3f
 8007a9c:	08007c3f 	.word	0x08007c3f
 8007aa0:	08007c3f 	.word	0x08007c3f
 8007aa4:	08007bbd 	.word	0x08007bbd
 8007aa8:	08007c3f 	.word	0x08007c3f
 8007aac:	08007c3f 	.word	0x08007c3f
 8007ab0:	08007c3f 	.word	0x08007c3f
 8007ab4:	08007bfd 	.word	0x08007bfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fa4e 	bl	8007f60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	699a      	ldr	r2, [r3, #24]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0208 	orr.w	r2, r2, #8
 8007ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	699a      	ldr	r2, [r3, #24]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0204 	bic.w	r2, r2, #4
 8007ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6999      	ldr	r1, [r3, #24]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	691a      	ldr	r2, [r3, #16]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	619a      	str	r2, [r3, #24]
      break;
 8007af6:	e0a3      	b.n	8007c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68b9      	ldr	r1, [r7, #8]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 faa0 	bl	8008044 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	699a      	ldr	r2, [r3, #24]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699a      	ldr	r2, [r3, #24]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6999      	ldr	r1, [r3, #24]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	021a      	lsls	r2, r3, #8
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	619a      	str	r2, [r3, #24]
      break;
 8007b38:	e082      	b.n	8007c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 faf7 	bl	8008134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	69da      	ldr	r2, [r3, #28]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f042 0208 	orr.w	r2, r2, #8
 8007b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69da      	ldr	r2, [r3, #28]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0204 	bic.w	r2, r2, #4
 8007b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	69d9      	ldr	r1, [r3, #28]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	691a      	ldr	r2, [r3, #16]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	61da      	str	r2, [r3, #28]
      break;
 8007b78:	e062      	b.n	8007c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68b9      	ldr	r1, [r7, #8]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 fb4d 	bl	8008220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69da      	ldr	r2, [r3, #28]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	69da      	ldr	r2, [r3, #28]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69d9      	ldr	r1, [r3, #28]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	021a      	lsls	r2, r3, #8
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	61da      	str	r2, [r3, #28]
      break;
 8007bba:	e041      	b.n	8007c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fb84 	bl	80082d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 0208 	orr.w	r2, r2, #8
 8007bd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 0204 	bic.w	r2, r2, #4
 8007be6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007bfa:	e021      	b.n	8007c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fbb6 	bl	8008374 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	021a      	lsls	r2, r3, #8
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c3c:	e000      	b.n	8007c40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007c3e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop

08007c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <HAL_TIM_ConfigClockSource+0x18>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e0a6      	b.n	8007dc2 <HAL_TIM_ConfigClockSource+0x166>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2202      	movs	r2, #2
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4b4f      	ldr	r3, [pc, #316]	; (8007dcc <HAL_TIM_ConfigClockSource+0x170>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b40      	cmp	r3, #64	; 0x40
 8007caa:	d067      	beq.n	8007d7c <HAL_TIM_ConfigClockSource+0x120>
 8007cac:	2b40      	cmp	r3, #64	; 0x40
 8007cae:	d80b      	bhi.n	8007cc8 <HAL_TIM_ConfigClockSource+0x6c>
 8007cb0:	2b10      	cmp	r3, #16
 8007cb2:	d073      	beq.n	8007d9c <HAL_TIM_ConfigClockSource+0x140>
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d802      	bhi.n	8007cbe <HAL_TIM_ConfigClockSource+0x62>
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d06f      	beq.n	8007d9c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007cbc:	e078      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cbe:	2b20      	cmp	r3, #32
 8007cc0:	d06c      	beq.n	8007d9c <HAL_TIM_ConfigClockSource+0x140>
 8007cc2:	2b30      	cmp	r3, #48	; 0x30
 8007cc4:	d06a      	beq.n	8007d9c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007cc6:	e073      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cc8:	2b70      	cmp	r3, #112	; 0x70
 8007cca:	d00d      	beq.n	8007ce8 <HAL_TIM_ConfigClockSource+0x8c>
 8007ccc:	2b70      	cmp	r3, #112	; 0x70
 8007cce:	d804      	bhi.n	8007cda <HAL_TIM_ConfigClockSource+0x7e>
 8007cd0:	2b50      	cmp	r3, #80	; 0x50
 8007cd2:	d033      	beq.n	8007d3c <HAL_TIM_ConfigClockSource+0xe0>
 8007cd4:	2b60      	cmp	r3, #96	; 0x60
 8007cd6:	d041      	beq.n	8007d5c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007cd8:	e06a      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cde:	d066      	beq.n	8007dae <HAL_TIM_ConfigClockSource+0x152>
 8007ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce4:	d017      	beq.n	8007d16 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007ce6:	e063      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6818      	ldr	r0, [r3, #0]
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	6899      	ldr	r1, [r3, #8]
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f000 fc0a 	bl	8008510 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d0a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	609a      	str	r2, [r3, #8]
      break;
 8007d14:	e04c      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	6899      	ldr	r1, [r3, #8]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f000 fbf3 	bl	8008510 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d38:	609a      	str	r2, [r3, #8]
      break;
 8007d3a:	e039      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	6859      	ldr	r1, [r3, #4]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	f000 fb67 	bl	800841c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2150      	movs	r1, #80	; 0x50
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 fbc0 	bl	80084da <TIM_ITRx_SetConfig>
      break;
 8007d5a:	e029      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	6859      	ldr	r1, [r3, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	f000 fb86 	bl	800847a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2160      	movs	r1, #96	; 0x60
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 fbb0 	bl	80084da <TIM_ITRx_SetConfig>
      break;
 8007d7a:	e019      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	6859      	ldr	r1, [r3, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	f000 fb47 	bl	800841c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2140      	movs	r1, #64	; 0x40
 8007d94:	4618      	mov	r0, r3
 8007d96:	f000 fba0 	bl	80084da <TIM_ITRx_SetConfig>
      break;
 8007d9a:	e009      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4619      	mov	r1, r3
 8007da6:	4610      	mov	r0, r2
 8007da8:	f000 fb97 	bl	80084da <TIM_ITRx_SetConfig>
      break;
 8007dac:	e000      	b.n	8007db0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	fffeff88 	.word	0xfffeff88

08007dd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a40      	ldr	r2, [pc, #256]	; (8007f34 <TIM_Base_SetConfig+0x114>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d013      	beq.n	8007e60 <TIM_Base_SetConfig+0x40>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e3e:	d00f      	beq.n	8007e60 <TIM_Base_SetConfig+0x40>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a3d      	ldr	r2, [pc, #244]	; (8007f38 <TIM_Base_SetConfig+0x118>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d00b      	beq.n	8007e60 <TIM_Base_SetConfig+0x40>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a3c      	ldr	r2, [pc, #240]	; (8007f3c <TIM_Base_SetConfig+0x11c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d007      	beq.n	8007e60 <TIM_Base_SetConfig+0x40>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a3b      	ldr	r2, [pc, #236]	; (8007f40 <TIM_Base_SetConfig+0x120>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d003      	beq.n	8007e60 <TIM_Base_SetConfig+0x40>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a3a      	ldr	r2, [pc, #232]	; (8007f44 <TIM_Base_SetConfig+0x124>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d108      	bne.n	8007e72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a2f      	ldr	r2, [pc, #188]	; (8007f34 <TIM_Base_SetConfig+0x114>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d02b      	beq.n	8007ed2 <TIM_Base_SetConfig+0xb2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e80:	d027      	beq.n	8007ed2 <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a2c      	ldr	r2, [pc, #176]	; (8007f38 <TIM_Base_SetConfig+0x118>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d023      	beq.n	8007ed2 <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a2b      	ldr	r2, [pc, #172]	; (8007f3c <TIM_Base_SetConfig+0x11c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d01f      	beq.n	8007ed2 <TIM_Base_SetConfig+0xb2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2a      	ldr	r2, [pc, #168]	; (8007f40 <TIM_Base_SetConfig+0x120>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d01b      	beq.n	8007ed2 <TIM_Base_SetConfig+0xb2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a29      	ldr	r2, [pc, #164]	; (8007f44 <TIM_Base_SetConfig+0x124>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d017      	beq.n	8007ed2 <TIM_Base_SetConfig+0xb2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a28      	ldr	r2, [pc, #160]	; (8007f48 <TIM_Base_SetConfig+0x128>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d013      	beq.n	8007ed2 <TIM_Base_SetConfig+0xb2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a27      	ldr	r2, [pc, #156]	; (8007f4c <TIM_Base_SetConfig+0x12c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00f      	beq.n	8007ed2 <TIM_Base_SetConfig+0xb2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a26      	ldr	r2, [pc, #152]	; (8007f50 <TIM_Base_SetConfig+0x130>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00b      	beq.n	8007ed2 <TIM_Base_SetConfig+0xb2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a25      	ldr	r2, [pc, #148]	; (8007f54 <TIM_Base_SetConfig+0x134>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d007      	beq.n	8007ed2 <TIM_Base_SetConfig+0xb2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a24      	ldr	r2, [pc, #144]	; (8007f58 <TIM_Base_SetConfig+0x138>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d003      	beq.n	8007ed2 <TIM_Base_SetConfig+0xb2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a23      	ldr	r2, [pc, #140]	; (8007f5c <TIM_Base_SetConfig+0x13c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d108      	bne.n	8007ee4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a0a      	ldr	r2, [pc, #40]	; (8007f34 <TIM_Base_SetConfig+0x114>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d003      	beq.n	8007f18 <TIM_Base_SetConfig+0xf8>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a0c      	ldr	r2, [pc, #48]	; (8007f44 <TIM_Base_SetConfig+0x124>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d103      	bne.n	8007f20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	691a      	ldr	r2, [r3, #16]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	615a      	str	r2, [r3, #20]
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	40010000 	.word	0x40010000
 8007f38:	40000400 	.word	0x40000400
 8007f3c:	40000800 	.word	0x40000800
 8007f40:	40000c00 	.word	0x40000c00
 8007f44:	40010400 	.word	0x40010400
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	40014400 	.word	0x40014400
 8007f50:	40014800 	.word	0x40014800
 8007f54:	40001800 	.word	0x40001800
 8007f58:	40001c00 	.word	0x40001c00
 8007f5c:	40002000 	.word	0x40002000

08007f60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b087      	sub	sp, #28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
 8007f6e:	f023 0201 	bic.w	r2, r3, #1
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	699b      	ldr	r3, [r3, #24]
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	4b2b      	ldr	r3, [pc, #172]	; (8008038 <TIM_OC1_SetConfig+0xd8>)
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f023 0302 	bic.w	r3, r3, #2
 8007fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a21      	ldr	r2, [pc, #132]	; (800803c <TIM_OC1_SetConfig+0xdc>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d003      	beq.n	8007fc4 <TIM_OC1_SetConfig+0x64>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a20      	ldr	r2, [pc, #128]	; (8008040 <TIM_OC1_SetConfig+0xe0>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d10c      	bne.n	8007fde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f023 0308 	bic.w	r3, r3, #8
 8007fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	f023 0304 	bic.w	r3, r3, #4
 8007fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a16      	ldr	r2, [pc, #88]	; (800803c <TIM_OC1_SetConfig+0xdc>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d003      	beq.n	8007fee <TIM_OC1_SetConfig+0x8e>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a15      	ldr	r2, [pc, #84]	; (8008040 <TIM_OC1_SetConfig+0xe0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d111      	bne.n	8008012 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	4313      	orrs	r3, r2
 8008010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	621a      	str	r2, [r3, #32]
}
 800802c:	bf00      	nop
 800802e:	371c      	adds	r7, #28
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr
 8008038:	fffeff8f 	.word	0xfffeff8f
 800803c:	40010000 	.word	0x40010000
 8008040:	40010400 	.word	0x40010400

08008044 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008044:	b480      	push	{r7}
 8008046:	b087      	sub	sp, #28
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	f023 0210 	bic.w	r2, r3, #16
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	4b2e      	ldr	r3, [pc, #184]	; (8008128 <TIM_OC2_SetConfig+0xe4>)
 8008070:	4013      	ands	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800807a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f023 0320 	bic.w	r3, r3, #32
 800808e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	011b      	lsls	r3, r3, #4
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	4313      	orrs	r3, r2
 800809a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a23      	ldr	r2, [pc, #140]	; (800812c <TIM_OC2_SetConfig+0xe8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_OC2_SetConfig+0x68>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a22      	ldr	r2, [pc, #136]	; (8008130 <TIM_OC2_SetConfig+0xec>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d10d      	bne.n	80080c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	011b      	lsls	r3, r3, #4
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a18      	ldr	r2, [pc, #96]	; (800812c <TIM_OC2_SetConfig+0xe8>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d003      	beq.n	80080d8 <TIM_OC2_SetConfig+0x94>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a17      	ldr	r2, [pc, #92]	; (8008130 <TIM_OC2_SetConfig+0xec>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d113      	bne.n	8008100 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	feff8fff 	.word	0xfeff8fff
 800812c:	40010000 	.word	0x40010000
 8008130:	40010400 	.word	0x40010400

08008134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	4b2d      	ldr	r3, [pc, #180]	; (8008214 <TIM_OC3_SetConfig+0xe0>)
 8008160:	4013      	ands	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0303 	bic.w	r3, r3, #3
 800816a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800817c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a22      	ldr	r2, [pc, #136]	; (8008218 <TIM_OC3_SetConfig+0xe4>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d003      	beq.n	800819a <TIM_OC3_SetConfig+0x66>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a21      	ldr	r2, [pc, #132]	; (800821c <TIM_OC3_SetConfig+0xe8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d10d      	bne.n	80081b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	021b      	lsls	r3, r3, #8
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a17      	ldr	r2, [pc, #92]	; (8008218 <TIM_OC3_SetConfig+0xe4>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d003      	beq.n	80081c6 <TIM_OC3_SetConfig+0x92>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a16      	ldr	r2, [pc, #88]	; (800821c <TIM_OC3_SetConfig+0xe8>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d113      	bne.n	80081ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685a      	ldr	r2, [r3, #4]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	621a      	str	r2, [r3, #32]
}
 8008208:	bf00      	nop
 800820a:	371c      	adds	r7, #28
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	fffeff8f 	.word	0xfffeff8f
 8008218:	40010000 	.word	0x40010000
 800821c:	40010400 	.word	0x40010400

08008220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	4b1e      	ldr	r3, [pc, #120]	; (80082c4 <TIM_OC4_SetConfig+0xa4>)
 800824c:	4013      	ands	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	4313      	orrs	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800826a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	031b      	lsls	r3, r3, #12
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a13      	ldr	r2, [pc, #76]	; (80082c8 <TIM_OC4_SetConfig+0xa8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d003      	beq.n	8008288 <TIM_OC4_SetConfig+0x68>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a12      	ldr	r2, [pc, #72]	; (80082cc <TIM_OC4_SetConfig+0xac>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d109      	bne.n	800829c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800828e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	019b      	lsls	r3, r3, #6
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	621a      	str	r2, [r3, #32]
}
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	feff8fff 	.word	0xfeff8fff
 80082c8:	40010000 	.word	0x40010000
 80082cc:	40010400 	.word	0x40010400

080082d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	4b1b      	ldr	r3, [pc, #108]	; (8008368 <TIM_OC5_SetConfig+0x98>)
 80082fc:	4013      	ands	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	4313      	orrs	r3, r2
 8008308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008310:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	041b      	lsls	r3, r3, #16
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a12      	ldr	r2, [pc, #72]	; (800836c <TIM_OC5_SetConfig+0x9c>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d003      	beq.n	800832e <TIM_OC5_SetConfig+0x5e>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a11      	ldr	r2, [pc, #68]	; (8008370 <TIM_OC5_SetConfig+0xa0>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d109      	bne.n	8008342 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008334:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	4313      	orrs	r3, r2
 8008340:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	621a      	str	r2, [r3, #32]
}
 800835c:	bf00      	nop
 800835e:	371c      	adds	r7, #28
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	fffeff8f 	.word	0xfffeff8f
 800836c:	40010000 	.word	0x40010000
 8008370:	40010400 	.word	0x40010400

08008374 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800839a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	4b1c      	ldr	r3, [pc, #112]	; (8008410 <TIM_OC6_SetConfig+0x9c>)
 80083a0:	4013      	ands	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	021b      	lsls	r3, r3, #8
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	051b      	lsls	r3, r3, #20
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a13      	ldr	r2, [pc, #76]	; (8008414 <TIM_OC6_SetConfig+0xa0>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d003      	beq.n	80083d4 <TIM_OC6_SetConfig+0x60>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a12      	ldr	r2, [pc, #72]	; (8008418 <TIM_OC6_SetConfig+0xa4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d109      	bne.n	80083e8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	029b      	lsls	r3, r3, #10
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	621a      	str	r2, [r3, #32]
}
 8008402:	bf00      	nop
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	feff8fff 	.word	0xfeff8fff
 8008414:	40010000 	.word	0x40010000
 8008418:	40010400 	.word	0x40010400

0800841c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	f023 0201 	bic.w	r2, r3, #1
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	011b      	lsls	r3, r3, #4
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	4313      	orrs	r3, r2
 8008450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f023 030a 	bic.w	r3, r3, #10
 8008458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	693a      	ldr	r2, [r7, #16]
 8008466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	621a      	str	r2, [r3, #32]
}
 800846e:	bf00      	nop
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr

0800847a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800847a:	b480      	push	{r7}
 800847c:	b087      	sub	sp, #28
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	f023 0210 	bic.w	r2, r3, #16
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	031b      	lsls	r3, r3, #12
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	011b      	lsls	r3, r3, #4
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	4313      	orrs	r3, r2
 80084c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	621a      	str	r2, [r3, #32]
}
 80084ce:	bf00      	nop
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084da:	b480      	push	{r7}
 80084dc:	b085      	sub	sp, #20
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f043 0307 	orr.w	r3, r3, #7
 80084fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	609a      	str	r2, [r3, #8]
}
 8008504:	bf00      	nop
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
 800851c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800852a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	021a      	lsls	r2, r3, #8
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	431a      	orrs	r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	4313      	orrs	r3, r2
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	609a      	str	r2, [r3, #8]
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008564:	2302      	movs	r3, #2
 8008566:	e06d      	b.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2202      	movs	r2, #2
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a30      	ldr	r2, [pc, #192]	; (8008650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d004      	beq.n	800859c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a2f      	ldr	r2, [pc, #188]	; (8008654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d108      	bne.n	80085ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a20      	ldr	r2, [pc, #128]	; (8008650 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d022      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085da:	d01d      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a1d      	ldr	r2, [pc, #116]	; (8008658 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d018      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a1c      	ldr	r2, [pc, #112]	; (800865c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d013      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a1a      	ldr	r2, [pc, #104]	; (8008660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00e      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a15      	ldr	r2, [pc, #84]	; (8008654 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d009      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a16      	ldr	r2, [pc, #88]	; (8008664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d004      	beq.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a15      	ldr	r2, [pc, #84]	; (8008668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d10c      	bne.n	8008632 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800861e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	4313      	orrs	r3, r2
 8008628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	40010000 	.word	0x40010000
 8008654:	40010400 	.word	0x40010400
 8008658:	40000400 	.word	0x40000400
 800865c:	40000800 	.word	0x40000800
 8008660:	40000c00 	.word	0x40000c00
 8008664:	40014000 	.word	0x40014000
 8008668:	40001800 	.word	0x40001800

0800866c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008680:	2b01      	cmp	r3, #1
 8008682:	d101      	bne.n	8008688 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008684:	2302      	movs	r3, #2
 8008686:	e065      	b.n	8008754 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	4313      	orrs	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	041b      	lsls	r3, r3, #16
 80086fe:	4313      	orrs	r3, r2
 8008700:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a16      	ldr	r2, [pc, #88]	; (8008760 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d004      	beq.n	8008716 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a14      	ldr	r2, [pc, #80]	; (8008764 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d115      	bne.n	8008742 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	051b      	lsls	r3, r3, #20
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	4313      	orrs	r3, r2
 8008732:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	40010000 	.word	0x40010000
 8008764:	40010400 	.word	0x40010400

08008768 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e040      	b.n	8008838 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d106      	bne.n	80087cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f7f9 fe26 	bl	8002418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2224      	movs	r2, #36	; 0x24
 80087d0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0201 	bic.w	r2, r2, #1
 80087e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f8be 	bl	8008964 <UART_SetConfig>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d101      	bne.n	80087f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e022      	b.n	8008838 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fb5c 	bl	8008eb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800880e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800881e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0201 	orr.w	r2, r2, #1
 800882e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fbe3 	bl	8008ffc <UART_CheckIdleState>
 8008836:	4603      	mov	r3, r0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	; 0x28
 8008844:	af02      	add	r7, sp, #8
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	603b      	str	r3, [r7, #0]
 800884c:	4613      	mov	r3, r2
 800884e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008854:	2b20      	cmp	r3, #32
 8008856:	d17f      	bne.n	8008958 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d002      	beq.n	8008864 <HAL_UART_Transmit+0x24>
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008864:	2301      	movs	r3, #1
 8008866:	e078      	b.n	800895a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800886e:	2b01      	cmp	r3, #1
 8008870:	d101      	bne.n	8008876 <HAL_UART_Transmit+0x36>
 8008872:	2302      	movs	r3, #2
 8008874:	e071      	b.n	800895a <HAL_UART_Transmit+0x11a>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2200      	movs	r2, #0
 8008882:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2221      	movs	r2, #33	; 0x21
 8008888:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800888a:	f7fa f8f7 	bl	8002a7c <HAL_GetTick>
 800888e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	88fa      	ldrh	r2, [r7, #6]
 8008894:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	88fa      	ldrh	r2, [r7, #6]
 800889c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a8:	d108      	bne.n	80088bc <HAL_UART_Transmit+0x7c>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d104      	bne.n	80088bc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80088b2:	2300      	movs	r3, #0
 80088b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	61bb      	str	r3, [r7, #24]
 80088ba:	e003      	b.n	80088c4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088c0:	2300      	movs	r3, #0
 80088c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80088cc:	e02c      	b.n	8008928 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2200      	movs	r2, #0
 80088d6:	2180      	movs	r1, #128	; 0x80
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fbbe 	bl	800905a <UART_WaitOnFlagUntilTimeout>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e038      	b.n	800895a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10b      	bne.n	8008906 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	3302      	adds	r3, #2
 8008902:	61bb      	str	r3, [r7, #24]
 8008904:	e007      	b.n	8008916 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	781a      	ldrb	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	3301      	adds	r3, #1
 8008914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800891c:	b29b      	uxth	r3, r3
 800891e:	3b01      	subs	r3, #1
 8008920:	b29a      	uxth	r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800892e:	b29b      	uxth	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1cc      	bne.n	80088ce <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2200      	movs	r2, #0
 800893c:	2140      	movs	r1, #64	; 0x40
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 fb8b 	bl	800905a <UART_WaitOnFlagUntilTimeout>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e005      	b.n	800895a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2220      	movs	r2, #32
 8008952:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	e000      	b.n	800895a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008958:	2302      	movs	r3, #2
  }
}
 800895a:	4618      	mov	r0, r3
 800895c:	3720      	adds	r7, #32
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800896c:	2300      	movs	r3, #0
 800896e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	431a      	orrs	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	431a      	orrs	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	4313      	orrs	r3, r2
 800898a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	4bb1      	ldr	r3, [pc, #708]	; (8008c58 <UART_SetConfig+0x2f4>)
 8008994:	4013      	ands	r3, r2
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6812      	ldr	r2, [r2, #0]
 800899a:	6939      	ldr	r1, [r7, #16]
 800899c:	430b      	orrs	r3, r1
 800899e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68da      	ldr	r2, [r3, #12]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a9f      	ldr	r2, [pc, #636]	; (8008c5c <UART_SetConfig+0x2f8>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d121      	bne.n	8008a28 <UART_SetConfig+0xc4>
 80089e4:	4b9e      	ldr	r3, [pc, #632]	; (8008c60 <UART_SetConfig+0x2fc>)
 80089e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ea:	f003 0303 	and.w	r3, r3, #3
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d816      	bhi.n	8008a20 <UART_SetConfig+0xbc>
 80089f2:	a201      	add	r2, pc, #4	; (adr r2, 80089f8 <UART_SetConfig+0x94>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a09 	.word	0x08008a09
 80089fc:	08008a15 	.word	0x08008a15
 8008a00:	08008a0f 	.word	0x08008a0f
 8008a04:	08008a1b 	.word	0x08008a1b
 8008a08:	2301      	movs	r3, #1
 8008a0a:	77fb      	strb	r3, [r7, #31]
 8008a0c:	e151      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008a0e:	2302      	movs	r3, #2
 8008a10:	77fb      	strb	r3, [r7, #31]
 8008a12:	e14e      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008a14:	2304      	movs	r3, #4
 8008a16:	77fb      	strb	r3, [r7, #31]
 8008a18:	e14b      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008a1a:	2308      	movs	r3, #8
 8008a1c:	77fb      	strb	r3, [r7, #31]
 8008a1e:	e148      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008a20:	2310      	movs	r3, #16
 8008a22:	77fb      	strb	r3, [r7, #31]
 8008a24:	bf00      	nop
 8008a26:	e144      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a8d      	ldr	r2, [pc, #564]	; (8008c64 <UART_SetConfig+0x300>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d134      	bne.n	8008a9c <UART_SetConfig+0x138>
 8008a32:	4b8b      	ldr	r3, [pc, #556]	; (8008c60 <UART_SetConfig+0x2fc>)
 8008a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a38:	f003 030c 	and.w	r3, r3, #12
 8008a3c:	2b0c      	cmp	r3, #12
 8008a3e:	d829      	bhi.n	8008a94 <UART_SetConfig+0x130>
 8008a40:	a201      	add	r2, pc, #4	; (adr r2, 8008a48 <UART_SetConfig+0xe4>)
 8008a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a46:	bf00      	nop
 8008a48:	08008a7d 	.word	0x08008a7d
 8008a4c:	08008a95 	.word	0x08008a95
 8008a50:	08008a95 	.word	0x08008a95
 8008a54:	08008a95 	.word	0x08008a95
 8008a58:	08008a89 	.word	0x08008a89
 8008a5c:	08008a95 	.word	0x08008a95
 8008a60:	08008a95 	.word	0x08008a95
 8008a64:	08008a95 	.word	0x08008a95
 8008a68:	08008a83 	.word	0x08008a83
 8008a6c:	08008a95 	.word	0x08008a95
 8008a70:	08008a95 	.word	0x08008a95
 8008a74:	08008a95 	.word	0x08008a95
 8008a78:	08008a8f 	.word	0x08008a8f
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	77fb      	strb	r3, [r7, #31]
 8008a80:	e117      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008a82:	2302      	movs	r3, #2
 8008a84:	77fb      	strb	r3, [r7, #31]
 8008a86:	e114      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008a88:	2304      	movs	r3, #4
 8008a8a:	77fb      	strb	r3, [r7, #31]
 8008a8c:	e111      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008a8e:	2308      	movs	r3, #8
 8008a90:	77fb      	strb	r3, [r7, #31]
 8008a92:	e10e      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008a94:	2310      	movs	r3, #16
 8008a96:	77fb      	strb	r3, [r7, #31]
 8008a98:	bf00      	nop
 8008a9a:	e10a      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a71      	ldr	r2, [pc, #452]	; (8008c68 <UART_SetConfig+0x304>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d120      	bne.n	8008ae8 <UART_SetConfig+0x184>
 8008aa6:	4b6e      	ldr	r3, [pc, #440]	; (8008c60 <UART_SetConfig+0x2fc>)
 8008aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ab0:	2b10      	cmp	r3, #16
 8008ab2:	d00f      	beq.n	8008ad4 <UART_SetConfig+0x170>
 8008ab4:	2b10      	cmp	r3, #16
 8008ab6:	d802      	bhi.n	8008abe <UART_SetConfig+0x15a>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d005      	beq.n	8008ac8 <UART_SetConfig+0x164>
 8008abc:	e010      	b.n	8008ae0 <UART_SetConfig+0x17c>
 8008abe:	2b20      	cmp	r3, #32
 8008ac0:	d005      	beq.n	8008ace <UART_SetConfig+0x16a>
 8008ac2:	2b30      	cmp	r3, #48	; 0x30
 8008ac4:	d009      	beq.n	8008ada <UART_SetConfig+0x176>
 8008ac6:	e00b      	b.n	8008ae0 <UART_SetConfig+0x17c>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	77fb      	strb	r3, [r7, #31]
 8008acc:	e0f1      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008ace:	2302      	movs	r3, #2
 8008ad0:	77fb      	strb	r3, [r7, #31]
 8008ad2:	e0ee      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	77fb      	strb	r3, [r7, #31]
 8008ad8:	e0eb      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008ada:	2308      	movs	r3, #8
 8008adc:	77fb      	strb	r3, [r7, #31]
 8008ade:	e0e8      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008ae0:	2310      	movs	r3, #16
 8008ae2:	77fb      	strb	r3, [r7, #31]
 8008ae4:	bf00      	nop
 8008ae6:	e0e4      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a5f      	ldr	r2, [pc, #380]	; (8008c6c <UART_SetConfig+0x308>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d120      	bne.n	8008b34 <UART_SetConfig+0x1d0>
 8008af2:	4b5b      	ldr	r3, [pc, #364]	; (8008c60 <UART_SetConfig+0x2fc>)
 8008af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008afc:	2b40      	cmp	r3, #64	; 0x40
 8008afe:	d00f      	beq.n	8008b20 <UART_SetConfig+0x1bc>
 8008b00:	2b40      	cmp	r3, #64	; 0x40
 8008b02:	d802      	bhi.n	8008b0a <UART_SetConfig+0x1a6>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <UART_SetConfig+0x1b0>
 8008b08:	e010      	b.n	8008b2c <UART_SetConfig+0x1c8>
 8008b0a:	2b80      	cmp	r3, #128	; 0x80
 8008b0c:	d005      	beq.n	8008b1a <UART_SetConfig+0x1b6>
 8008b0e:	2bc0      	cmp	r3, #192	; 0xc0
 8008b10:	d009      	beq.n	8008b26 <UART_SetConfig+0x1c2>
 8008b12:	e00b      	b.n	8008b2c <UART_SetConfig+0x1c8>
 8008b14:	2300      	movs	r3, #0
 8008b16:	77fb      	strb	r3, [r7, #31]
 8008b18:	e0cb      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	77fb      	strb	r3, [r7, #31]
 8008b1e:	e0c8      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008b20:	2304      	movs	r3, #4
 8008b22:	77fb      	strb	r3, [r7, #31]
 8008b24:	e0c5      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008b26:	2308      	movs	r3, #8
 8008b28:	77fb      	strb	r3, [r7, #31]
 8008b2a:	e0c2      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008b2c:	2310      	movs	r3, #16
 8008b2e:	77fb      	strb	r3, [r7, #31]
 8008b30:	bf00      	nop
 8008b32:	e0be      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a4d      	ldr	r2, [pc, #308]	; (8008c70 <UART_SetConfig+0x30c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d124      	bne.n	8008b88 <UART_SetConfig+0x224>
 8008b3e:	4b48      	ldr	r3, [pc, #288]	; (8008c60 <UART_SetConfig+0x2fc>)
 8008b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b4c:	d012      	beq.n	8008b74 <UART_SetConfig+0x210>
 8008b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b52:	d802      	bhi.n	8008b5a <UART_SetConfig+0x1f6>
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d007      	beq.n	8008b68 <UART_SetConfig+0x204>
 8008b58:	e012      	b.n	8008b80 <UART_SetConfig+0x21c>
 8008b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b5e:	d006      	beq.n	8008b6e <UART_SetConfig+0x20a>
 8008b60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b64:	d009      	beq.n	8008b7a <UART_SetConfig+0x216>
 8008b66:	e00b      	b.n	8008b80 <UART_SetConfig+0x21c>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	77fb      	strb	r3, [r7, #31]
 8008b6c:	e0a1      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008b6e:	2302      	movs	r3, #2
 8008b70:	77fb      	strb	r3, [r7, #31]
 8008b72:	e09e      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008b74:	2304      	movs	r3, #4
 8008b76:	77fb      	strb	r3, [r7, #31]
 8008b78:	e09b      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008b7a:	2308      	movs	r3, #8
 8008b7c:	77fb      	strb	r3, [r7, #31]
 8008b7e:	e098      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008b80:	2310      	movs	r3, #16
 8008b82:	77fb      	strb	r3, [r7, #31]
 8008b84:	bf00      	nop
 8008b86:	e094      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a39      	ldr	r2, [pc, #228]	; (8008c74 <UART_SetConfig+0x310>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d124      	bne.n	8008bdc <UART_SetConfig+0x278>
 8008b92:	4b33      	ldr	r3, [pc, #204]	; (8008c60 <UART_SetConfig+0x2fc>)
 8008b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ba0:	d012      	beq.n	8008bc8 <UART_SetConfig+0x264>
 8008ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ba6:	d802      	bhi.n	8008bae <UART_SetConfig+0x24a>
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d007      	beq.n	8008bbc <UART_SetConfig+0x258>
 8008bac:	e012      	b.n	8008bd4 <UART_SetConfig+0x270>
 8008bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bb2:	d006      	beq.n	8008bc2 <UART_SetConfig+0x25e>
 8008bb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bb8:	d009      	beq.n	8008bce <UART_SetConfig+0x26a>
 8008bba:	e00b      	b.n	8008bd4 <UART_SetConfig+0x270>
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	77fb      	strb	r3, [r7, #31]
 8008bc0:	e077      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	77fb      	strb	r3, [r7, #31]
 8008bc6:	e074      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008bc8:	2304      	movs	r3, #4
 8008bca:	77fb      	strb	r3, [r7, #31]
 8008bcc:	e071      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008bce:	2308      	movs	r3, #8
 8008bd0:	77fb      	strb	r3, [r7, #31]
 8008bd2:	e06e      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	77fb      	strb	r3, [r7, #31]
 8008bd8:	bf00      	nop
 8008bda:	e06a      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a25      	ldr	r2, [pc, #148]	; (8008c78 <UART_SetConfig+0x314>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d124      	bne.n	8008c30 <UART_SetConfig+0x2cc>
 8008be6:	4b1e      	ldr	r3, [pc, #120]	; (8008c60 <UART_SetConfig+0x2fc>)
 8008be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008bf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf4:	d012      	beq.n	8008c1c <UART_SetConfig+0x2b8>
 8008bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bfa:	d802      	bhi.n	8008c02 <UART_SetConfig+0x29e>
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d007      	beq.n	8008c10 <UART_SetConfig+0x2ac>
 8008c00:	e012      	b.n	8008c28 <UART_SetConfig+0x2c4>
 8008c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c06:	d006      	beq.n	8008c16 <UART_SetConfig+0x2b2>
 8008c08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c0c:	d009      	beq.n	8008c22 <UART_SetConfig+0x2be>
 8008c0e:	e00b      	b.n	8008c28 <UART_SetConfig+0x2c4>
 8008c10:	2300      	movs	r3, #0
 8008c12:	77fb      	strb	r3, [r7, #31]
 8008c14:	e04d      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008c16:	2302      	movs	r3, #2
 8008c18:	77fb      	strb	r3, [r7, #31]
 8008c1a:	e04a      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	77fb      	strb	r3, [r7, #31]
 8008c20:	e047      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008c22:	2308      	movs	r3, #8
 8008c24:	77fb      	strb	r3, [r7, #31]
 8008c26:	e044      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008c28:	2310      	movs	r3, #16
 8008c2a:	77fb      	strb	r3, [r7, #31]
 8008c2c:	bf00      	nop
 8008c2e:	e040      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a11      	ldr	r2, [pc, #68]	; (8008c7c <UART_SetConfig+0x318>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d139      	bne.n	8008cae <UART_SetConfig+0x34a>
 8008c3a:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <UART_SetConfig+0x2fc>)
 8008c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c48:	d027      	beq.n	8008c9a <UART_SetConfig+0x336>
 8008c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c4e:	d817      	bhi.n	8008c80 <UART_SetConfig+0x31c>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01c      	beq.n	8008c8e <UART_SetConfig+0x32a>
 8008c54:	e027      	b.n	8008ca6 <UART_SetConfig+0x342>
 8008c56:	bf00      	nop
 8008c58:	efff69f3 	.word	0xefff69f3
 8008c5c:	40011000 	.word	0x40011000
 8008c60:	40023800 	.word	0x40023800
 8008c64:	40004400 	.word	0x40004400
 8008c68:	40004800 	.word	0x40004800
 8008c6c:	40004c00 	.word	0x40004c00
 8008c70:	40005000 	.word	0x40005000
 8008c74:	40011400 	.word	0x40011400
 8008c78:	40007800 	.word	0x40007800
 8008c7c:	40007c00 	.word	0x40007c00
 8008c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c84:	d006      	beq.n	8008c94 <UART_SetConfig+0x330>
 8008c86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008c8a:	d009      	beq.n	8008ca0 <UART_SetConfig+0x33c>
 8008c8c:	e00b      	b.n	8008ca6 <UART_SetConfig+0x342>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	77fb      	strb	r3, [r7, #31]
 8008c92:	e00e      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008c94:	2302      	movs	r3, #2
 8008c96:	77fb      	strb	r3, [r7, #31]
 8008c98:	e00b      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008c9a:	2304      	movs	r3, #4
 8008c9c:	77fb      	strb	r3, [r7, #31]
 8008c9e:	e008      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008ca0:	2308      	movs	r3, #8
 8008ca2:	77fb      	strb	r3, [r7, #31]
 8008ca4:	e005      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008ca6:	2310      	movs	r3, #16
 8008ca8:	77fb      	strb	r3, [r7, #31]
 8008caa:	bf00      	nop
 8008cac:	e001      	b.n	8008cb2 <UART_SetConfig+0x34e>
 8008cae:	2310      	movs	r3, #16
 8008cb0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cba:	d17f      	bne.n	8008dbc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008cbc:	7ffb      	ldrb	r3, [r7, #31]
 8008cbe:	2b08      	cmp	r3, #8
 8008cc0:	d85c      	bhi.n	8008d7c <UART_SetConfig+0x418>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <UART_SetConfig+0x364>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008ced 	.word	0x08008ced
 8008ccc:	08008d0d 	.word	0x08008d0d
 8008cd0:	08008d2d 	.word	0x08008d2d
 8008cd4:	08008d7d 	.word	0x08008d7d
 8008cd8:	08008d45 	.word	0x08008d45
 8008cdc:	08008d7d 	.word	0x08008d7d
 8008ce0:	08008d7d 	.word	0x08008d7d
 8008ce4:	08008d7d 	.word	0x08008d7d
 8008ce8:	08008d65 	.word	0x08008d65
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cec:	f7fc fbc8 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 8008cf0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	005a      	lsls	r2, r3, #1
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	085b      	lsrs	r3, r3, #1
 8008cfc:	441a      	add	r2, r3
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	61bb      	str	r3, [r7, #24]
        break;
 8008d0a:	e03a      	b.n	8008d82 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d0c:	f7fc fbcc 	bl	80054a8 <HAL_RCC_GetPCLK2Freq>
 8008d10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	005a      	lsls	r2, r3, #1
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	085b      	lsrs	r3, r3, #1
 8008d1c:	441a      	add	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	61bb      	str	r3, [r7, #24]
        break;
 8008d2a:	e02a      	b.n	8008d82 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	085a      	lsrs	r2, r3, #1
 8008d32:	4b5f      	ldr	r3, [pc, #380]	; (8008eb0 <UART_SetConfig+0x54c>)
 8008d34:	4413      	add	r3, r2
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6852      	ldr	r2, [r2, #4]
 8008d3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	61bb      	str	r3, [r7, #24]
        break;
 8008d42:	e01e      	b.n	8008d82 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d44:	f7fc fade 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 8008d48:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	005a      	lsls	r2, r3, #1
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	085b      	lsrs	r3, r3, #1
 8008d54:	441a      	add	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	61bb      	str	r3, [r7, #24]
        break;
 8008d62:	e00e      	b.n	8008d82 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	085b      	lsrs	r3, r3, #1
 8008d6a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	61bb      	str	r3, [r7, #24]
        break;
 8008d7a:	e002      	b.n	8008d82 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	75fb      	strb	r3, [r7, #23]
        break;
 8008d80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	2b0f      	cmp	r3, #15
 8008d86:	d916      	bls.n	8008db6 <UART_SetConfig+0x452>
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d8e:	d212      	bcs.n	8008db6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	f023 030f 	bic.w	r3, r3, #15
 8008d98:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	085b      	lsrs	r3, r3, #1
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f003 0307 	and.w	r3, r3, #7
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	897b      	ldrh	r3, [r7, #10]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	897a      	ldrh	r2, [r7, #10]
 8008db2:	60da      	str	r2, [r3, #12]
 8008db4:	e070      	b.n	8008e98 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008db6:	2301      	movs	r3, #1
 8008db8:	75fb      	strb	r3, [r7, #23]
 8008dba:	e06d      	b.n	8008e98 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008dbc:	7ffb      	ldrb	r3, [r7, #31]
 8008dbe:	2b08      	cmp	r3, #8
 8008dc0:	d859      	bhi.n	8008e76 <UART_SetConfig+0x512>
 8008dc2:	a201      	add	r2, pc, #4	; (adr r2, 8008dc8 <UART_SetConfig+0x464>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008ded 	.word	0x08008ded
 8008dcc:	08008e0b 	.word	0x08008e0b
 8008dd0:	08008e29 	.word	0x08008e29
 8008dd4:	08008e77 	.word	0x08008e77
 8008dd8:	08008e41 	.word	0x08008e41
 8008ddc:	08008e77 	.word	0x08008e77
 8008de0:	08008e77 	.word	0x08008e77
 8008de4:	08008e77 	.word	0x08008e77
 8008de8:	08008e5f 	.word	0x08008e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dec:	f7fc fb48 	bl	8005480 <HAL_RCC_GetPCLK1Freq>
 8008df0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	085a      	lsrs	r2, r3, #1
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	441a      	add	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	61bb      	str	r3, [r7, #24]
        break;
 8008e08:	e038      	b.n	8008e7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e0a:	f7fc fb4d 	bl	80054a8 <HAL_RCC_GetPCLK2Freq>
 8008e0e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	085a      	lsrs	r2, r3, #1
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	441a      	add	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	61bb      	str	r3, [r7, #24]
        break;
 8008e26:	e029      	b.n	8008e7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	085a      	lsrs	r2, r3, #1
 8008e2e:	4b21      	ldr	r3, [pc, #132]	; (8008eb4 <UART_SetConfig+0x550>)
 8008e30:	4413      	add	r3, r2
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6852      	ldr	r2, [r2, #4]
 8008e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	61bb      	str	r3, [r7, #24]
        break;
 8008e3e:	e01d      	b.n	8008e7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e40:	f7fc fa60 	bl	8005304 <HAL_RCC_GetSysClockFreq>
 8008e44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	085a      	lsrs	r2, r3, #1
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	441a      	add	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	61bb      	str	r3, [r7, #24]
        break;
 8008e5c:	e00e      	b.n	8008e7c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	61bb      	str	r3, [r7, #24]
        break;
 8008e74:	e002      	b.n	8008e7c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	75fb      	strb	r3, [r7, #23]
        break;
 8008e7a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	2b0f      	cmp	r3, #15
 8008e80:	d908      	bls.n	8008e94 <UART_SetConfig+0x530>
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e88:	d204      	bcs.n	8008e94 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	60da      	str	r2, [r3, #12]
 8008e92:	e001      	b.n	8008e98 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3720      	adds	r7, #32
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	01e84800 	.word	0x01e84800
 8008eb4:	00f42400 	.word	0x00f42400

08008eb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00a      	beq.n	8008ee2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	f003 0308 	and.w	r3, r3, #8
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	f003 0310 	and.w	r3, r3, #16
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00a      	beq.n	8008f6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	430a      	orrs	r2, r1
 8008f68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6e:	f003 0320 	and.w	r3, r3, #32
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d01a      	beq.n	8008fce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	430a      	orrs	r2, r1
 8008fac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fb6:	d10a      	bne.n	8008fce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	430a      	orrs	r2, r1
 8008fee:	605a      	str	r2, [r3, #4]
  }
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af02      	add	r7, sp, #8
 8009002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800900a:	f7f9 fd37 	bl	8002a7c <HAL_GetTick>
 800900e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0308 	and.w	r3, r3, #8
 800901a:	2b08      	cmp	r3, #8
 800901c:	d10e      	bne.n	800903c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800901e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f814 	bl	800905a <UART_WaitOnFlagUntilTimeout>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e00a      	b.n	8009052 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2220      	movs	r2, #32
 8009040:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2220      	movs	r2, #32
 8009046:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	603b      	str	r3, [r7, #0]
 8009066:	4613      	mov	r3, r2
 8009068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800906a:	e05d      	b.n	8009128 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009072:	d059      	beq.n	8009128 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009074:	f7f9 fd02 	bl	8002a7c <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	69ba      	ldr	r2, [r7, #24]
 8009080:	429a      	cmp	r2, r3
 8009082:	d302      	bcc.n	800908a <UART_WaitOnFlagUntilTimeout+0x30>
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d11b      	bne.n	80090c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009098:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 0201 	bic.w	r2, r2, #1
 80090a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2220      	movs	r2, #32
 80090ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2220      	movs	r2, #32
 80090b4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e042      	b.n	8009148 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d02b      	beq.n	8009128 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	69db      	ldr	r3, [r3, #28]
 80090d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090de:	d123      	bne.n	8009128 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090e8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80090f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f022 0201 	bic.w	r2, r2, #1
 8009108:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2220      	movs	r2, #32
 800910e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2220      	movs	r2, #32
 8009114:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2220      	movs	r2, #32
 800911a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e00f      	b.n	8009148 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	69da      	ldr	r2, [r3, #28]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	4013      	ands	r3, r2
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	429a      	cmp	r2, r3
 8009136:	bf0c      	ite	eq
 8009138:	2301      	moveq	r3, #1
 800913a:	2300      	movne	r3, #0
 800913c:	b2db      	uxtb	r3, r3
 800913e:	461a      	mov	r2, r3
 8009140:	79fb      	ldrb	r3, [r7, #7]
 8009142:	429a      	cmp	r2, r3
 8009144:	d092      	beq.n	800906c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800915a:	2300      	movs	r3, #0
 800915c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b01      	cmp	r3, #1
 8009168:	d027      	beq.n	80091ba <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	4b2f      	ldr	r3, [pc, #188]	; (8009230 <FMC_SDRAM_Init+0xe0>)
 8009174:	4013      	ands	r3, r2
 8009176:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009180:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8009186:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800918c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8009192:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8009198:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800919e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80091a4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80091aa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	601a      	str	r2, [r3, #0]
 80091b8:	e032      	b.n	8009220 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091c6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80091d0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80091d6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	4b12      	ldr	r3, [pc, #72]	; (8009230 <FMC_SDRAM_Init+0xe0>)
 80091e8:	4013      	ands	r3, r2
 80091ea:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80091f4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80091fa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8009200:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8009206:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800920c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	4313      	orrs	r3, r2
 8009212:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	ffff8000 	.word	0xffff8000

08009234 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009234:	b480      	push	{r7}
 8009236:	b087      	sub	sp, #28
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d02e      	beq.n	80092ac <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800925a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	3b01      	subs	r3, #1
 8009268:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800926a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	3b01      	subs	r3, #1
 8009272:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009274:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	3b01      	subs	r3, #1
 800927c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800927e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	3b01      	subs	r3, #1
 8009286:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009288:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	3b01      	subs	r3, #1
 8009290:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009292:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	3b01      	subs	r3, #1
 800929a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800929c:	4313      	orrs	r3, r2
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	609a      	str	r2, [r3, #8]
 80092aa:	e039      	b.n	8009320 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	4b1e      	ldr	r3, [pc, #120]	; (8009330 <FMC_SDRAM_Timing_Init+0xfc>)
 80092b6:	4013      	ands	r3, r2
 80092b8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	3b01      	subs	r3, #1
 80092c0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80092ca:	4313      	orrs	r3, r2
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80092de:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80092ee:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	3b01      	subs	r3, #1
 80092f6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80092f8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	3b01      	subs	r3, #1
 8009300:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009302:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	3b01      	subs	r3, #1
 800930a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800930c:	4313      	orrs	r3, r2
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	4313      	orrs	r3, r2
 8009312:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	371c      	adds	r7, #28
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	ff0f0fff 	.word	0xff0f0fff

08009334 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800934c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	3b01      	subs	r3, #1
 8009354:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009356:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800935e:	4313      	orrs	r3, r2
 8009360:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	371c      	adds	r7, #28
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	695a      	ldr	r2, [r3, #20]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	431a      	orrs	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800939c:	b084      	sub	sp, #16
 800939e:	b480      	push	{r7}
 80093a0:	b085      	sub	sp, #20
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
 80093a6:	f107 001c 	add.w	r0, r7, #28
 80093aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80093b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80093b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80093b6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80093b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80093ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80093be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80093c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80093c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80093c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <SDMMC_Init+0x54>)
 80093d4:	4013      	ands	r3, r2
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	431a      	orrs	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	b004      	add	sp, #16
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	ffff8100 	.word	0xffff8100

080093f4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009402:	4618      	mov	r0, r3
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2203      	movs	r2, #3
 800941a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800941c:	2002      	movs	r0, #2
 800941e:	f7f9 fb39 	bl	8002a94 <HAL_Delay>
  
  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0303 	and.w	r3, r3, #3
}
 800943c:	4618      	mov	r0, r3
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009466:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800946c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009472:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	4313      	orrs	r3, r2
 8009478:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	4b06      	ldr	r3, [pc, #24]	; (8009498 <SDMMC_SendCommand+0x50>)
 8009480:	4013      	ands	r3, r2
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	431a      	orrs	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	fffff000 	.word	0xfffff000

0800949c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	b2db      	uxtb	r3, r3
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b085      	sub	sp, #20
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	3314      	adds	r3, #20
 80094c4:	461a      	mov	r2, r3
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	4413      	add	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
}  
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009502:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009508:	431a      	orrs	r2, r3
                       Data->DPSM);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800950e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	431a      	orrs	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009526:	2300      	movs	r3, #0

}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009542:	2310      	movs	r3, #16
 8009544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009546:	2340      	movs	r3, #64	; 0x40
 8009548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800954a:	2300      	movs	r3, #0
 800954c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800954e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009552:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009554:	f107 0308 	add.w	r3, r7, #8
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7ff ff74 	bl	8009448 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009560:	f241 3288 	movw	r2, #5000	; 0x1388
 8009564:	2110      	movs	r1, #16
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f976 	bl	8009858 <SDMMC_GetCmdResp1>
 800956c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800956e:	69fb      	ldr	r3, [r7, #28]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3720      	adds	r7, #32
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b08a      	sub	sp, #40	; 0x28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009588:	2307      	movs	r3, #7
 800958a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800958c:	2340      	movs	r3, #64	; 0x40
 800958e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009590:	2300      	movs	r3, #0
 8009592:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009598:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800959a:	f107 0310 	add.w	r3, r7, #16
 800959e:	4619      	mov	r1, r3
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7ff ff51 	bl	8009448 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80095a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80095aa:	2107      	movs	r1, #7
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f000 f953 	bl	8009858 <SDMMC_GetCmdResp1>
 80095b2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3728      	adds	r7, #40	; 0x28
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b088      	sub	sp, #32
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80095ce:	2300      	movs	r3, #0
 80095d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095dc:	f107 0308 	add.w	r3, r7, #8
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff ff30 	bl	8009448 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f90d 	bl	8009808 <SDMMC_GetCmdError>
 80095ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095f0:	69fb      	ldr	r3, [r7, #28]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3720      	adds	r7, #32
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b088      	sub	sp, #32
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009602:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009608:	2308      	movs	r3, #8
 800960a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800960c:	2340      	movs	r3, #64	; 0x40
 800960e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009610:	2300      	movs	r3, #0
 8009612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009618:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800961a:	f107 0308 	add.w	r3, r7, #8
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff ff11 	bl	8009448 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 faf6 	bl	8009c18 <SDMMC_GetCmdResp7>
 800962c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800962e:	69fb      	ldr	r3, [r7, #28]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3720      	adds	r7, #32
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009646:	2337      	movs	r3, #55	; 0x37
 8009648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800964a:	2340      	movs	r3, #64	; 0x40
 800964c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800964e:	2300      	movs	r3, #0
 8009650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009656:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009658:	f107 0308 	add.w	r3, r7, #8
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7ff fef2 	bl	8009448 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009664:	f241 3288 	movw	r2, #5000	; 0x1388
 8009668:	2137      	movs	r1, #55	; 0x37
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f8f4 	bl	8009858 <SDMMC_GetCmdResp1>
 8009670:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009672:	69fb      	ldr	r3, [r7, #28]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3720      	adds	r7, #32
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b088      	sub	sp, #32
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	4b0d      	ldr	r3, [pc, #52]	; (80096c0 <SDMMC_CmdAppOperCommand+0x44>)
 800968a:	4313      	orrs	r3, r2
 800968c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800968e:	2329      	movs	r3, #41	; 0x29
 8009690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009692:	2340      	movs	r3, #64	; 0x40
 8009694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009696:	2300      	movs	r3, #0
 8009698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800969a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800969e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096a0:	f107 0308 	add.w	r3, r7, #8
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7ff fece 	bl	8009448 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fa05 	bl	8009abc <SDMMC_GetCmdResp3>
 80096b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096b4:	69fb      	ldr	r3, [r7, #28]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3720      	adds	r7, #32
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	80100000 	.word	0x80100000

080096c4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80096d2:	2306      	movs	r3, #6
 80096d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096d6:	2340      	movs	r3, #64	; 0x40
 80096d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096da:	2300      	movs	r3, #0
 80096dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096e4:	f107 0308 	add.w	r3, r7, #8
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7ff feac 	bl	8009448 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80096f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096f4:	2106      	movs	r1, #6
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f8ae 	bl	8009858 <SDMMC_GetCmdResp1>
 80096fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096fe:	69fb      	ldr	r3, [r7, #28]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3720      	adds	r7, #32
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009710:	2300      	movs	r3, #0
 8009712:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009714:	2333      	movs	r3, #51	; 0x33
 8009716:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009718:	2340      	movs	r3, #64	; 0x40
 800971a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800971c:	2300      	movs	r3, #0
 800971e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009726:	f107 0308 	add.w	r3, r7, #8
 800972a:	4619      	mov	r1, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff fe8b 	bl	8009448 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009732:	f241 3288 	movw	r2, #5000	; 0x1388
 8009736:	2133      	movs	r1, #51	; 0x33
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f88d 	bl	8009858 <SDMMC_GetCmdResp1>
 800973e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009740:	69fb      	ldr	r3, [r7, #28]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3720      	adds	r7, #32
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b088      	sub	sp, #32
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009752:	2300      	movs	r3, #0
 8009754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009756:	2302      	movs	r3, #2
 8009758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800975a:	23c0      	movs	r3, #192	; 0xc0
 800975c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800975e:	2300      	movs	r3, #0
 8009760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009766:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009768:	f107 0308 	add.w	r3, r7, #8
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff fe6a 	bl	8009448 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f95b 	bl	8009a30 <SDMMC_GetCmdResp2>
 800977a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800977c:	69fb      	ldr	r3, [r7, #28]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b088      	sub	sp, #32
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009794:	2309      	movs	r3, #9
 8009796:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009798:	23c0      	movs	r3, #192	; 0xc0
 800979a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800979c:	2300      	movs	r3, #0
 800979e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097a6:	f107 0308 	add.w	r3, r7, #8
 80097aa:	4619      	mov	r1, r3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7ff fe4b 	bl	8009448 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 f93c 	bl	8009a30 <SDMMC_GetCmdResp2>
 80097b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ba:	69fb      	ldr	r3, [r7, #28]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3720      	adds	r7, #32
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80097ce:	2300      	movs	r3, #0
 80097d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80097d2:	2303      	movs	r3, #3
 80097d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097d6:	2340      	movs	r3, #64	; 0x40
 80097d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097da:	2300      	movs	r3, #0
 80097dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097e4:	f107 0308 	add.w	r3, r7, #8
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff fe2c 	bl	8009448 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	2103      	movs	r1, #3
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 f99b 	bl	8009b30 <SDMMC_GetCmdResp6>
 80097fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097fc:	69fb      	ldr	r3, [r7, #28]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3720      	adds	r7, #32
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009808:	b490      	push	{r4, r7}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009810:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <SDMMC_GetCmdError+0x48>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a0f      	ldr	r2, [pc, #60]	; (8009854 <SDMMC_GetCmdError+0x4c>)
 8009816:	fba2 2303 	umull	r2, r3, r2, r3
 800981a:	0a5b      	lsrs	r3, r3, #9
 800981c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009820:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009824:	4623      	mov	r3, r4
 8009826:	1e5c      	subs	r4, r3, #1
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800982c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009830:	e009      	b.n	8009846 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983a:	2b00      	cmp	r3, #0
 800983c:	d0f2      	beq.n	8009824 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	22c5      	movs	r2, #197	; 0xc5
 8009842:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bc90      	pop	{r4, r7}
 800984e:	4770      	bx	lr
 8009850:	20000000 	.word	0x20000000
 8009854:	10624dd3 	.word	0x10624dd3

08009858 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009858:	b590      	push	{r4, r7, lr}
 800985a:	b087      	sub	sp, #28
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	460b      	mov	r3, r1
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009866:	4b6f      	ldr	r3, [pc, #444]	; (8009a24 <SDMMC_GetCmdResp1+0x1cc>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a6f      	ldr	r2, [pc, #444]	; (8009a28 <SDMMC_GetCmdResp1+0x1d0>)
 800986c:	fba2 2303 	umull	r2, r3, r2, r3
 8009870:	0a5b      	lsrs	r3, r3, #9
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009878:	4623      	mov	r3, r4
 800987a:	1e5c      	subs	r4, r3, #1
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009884:	e0c9      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0f0      	beq.n	8009878 <SDMMC_GetCmdResp1+0x20>
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1eb      	bne.n	8009878 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d004      	beq.n	80098b6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2204      	movs	r2, #4
 80098b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80098b2:	2304      	movs	r3, #4
 80098b4:	e0b1      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d004      	beq.n	80098cc <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e0a6      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	22c5      	movs	r2, #197	; 0xc5
 80098d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f7ff fde2 	bl	800949c <SDMMC_GetCommandResponse>
 80098d8:	4603      	mov	r3, r0
 80098da:	461a      	mov	r2, r3
 80098dc:	7afb      	ldrb	r3, [r7, #11]
 80098de:	4293      	cmp	r3, r2
 80098e0:	d001      	beq.n	80098e6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e099      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80098e6:	2100      	movs	r1, #0
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f7ff fde4 	bl	80094b6 <SDMMC_GetResponse>
 80098ee:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	4b4e      	ldr	r3, [pc, #312]	; (8009a2c <SDMMC_GetCmdResp1+0x1d4>)
 80098f4:	4013      	ands	r3, r2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80098fa:	2300      	movs	r3, #0
 80098fc:	e08d      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	da02      	bge.n	800990a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009908:	e087      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d001      	beq.n	8009918 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009914:	2340      	movs	r3, #64	; 0x40
 8009916:	e080      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009922:	2380      	movs	r3, #128	; 0x80
 8009924:	e079      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009934:	e071      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009944:	e069      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009954:	e061      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009960:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009964:	e059      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009974:	e051      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009984:	e049      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009990:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009994:	e041      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80099a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099a4:	e039      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80099b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80099b4:	e031      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80099c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80099c4:	e029      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d002      	beq.n	80099d6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80099d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099d4:	e021      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80099e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80099e4:	e019      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80099f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80099f4:	e011      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009a00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a04:	e009      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009a10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009a14:	e001      	b.n	8009a1a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009a16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd90      	pop	{r4, r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000000 	.word	0x20000000
 8009a28:	10624dd3 	.word	0x10624dd3
 8009a2c:	fdffe008 	.word	0xfdffe008

08009a30 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009a30:	b490      	push	{r4, r7}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009a38:	4b1e      	ldr	r3, [pc, #120]	; (8009ab4 <SDMMC_GetCmdResp2+0x84>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a1e      	ldr	r2, [pc, #120]	; (8009ab8 <SDMMC_GetCmdResp2+0x88>)
 8009a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a42:	0a5b      	lsrs	r3, r3, #9
 8009a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009a4c:	4623      	mov	r3, r4
 8009a4e:	1e5c      	subs	r4, r3, #1
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d102      	bne.n	8009a5a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a58:	e026      	b.n	8009aa8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0f0      	beq.n	8009a4c <SDMMC_GetCmdResp2+0x1c>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1eb      	bne.n	8009a4c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a78:	f003 0304 	and.w	r3, r3, #4
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d004      	beq.n	8009a8a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2204      	movs	r2, #4
 8009a84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a86:	2304      	movs	r3, #4
 8009a88:	e00e      	b.n	8009aa8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8e:	f003 0301 	and.w	r3, r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d004      	beq.n	8009aa0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e003      	b.n	8009aa8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	22c5      	movs	r2, #197	; 0xc5
 8009aa4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009aa6:	2300      	movs	r3, #0
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bc90      	pop	{r4, r7}
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	20000000 	.word	0x20000000
 8009ab8:	10624dd3 	.word	0x10624dd3

08009abc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009abc:	b490      	push	{r4, r7}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ac4:	4b18      	ldr	r3, [pc, #96]	; (8009b28 <SDMMC_GetCmdResp3+0x6c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a18      	ldr	r2, [pc, #96]	; (8009b2c <SDMMC_GetCmdResp3+0x70>)
 8009aca:	fba2 2303 	umull	r2, r3, r2, r3
 8009ace:	0a5b      	lsrs	r3, r3, #9
 8009ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009ad8:	4623      	mov	r3, r4
 8009ada:	1e5c      	subs	r4, r3, #1
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d102      	bne.n	8009ae6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ae0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ae4:	e01b      	b.n	8009b1e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0f0      	beq.n	8009ad8 <SDMMC_GetCmdResp3+0x1c>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1eb      	bne.n	8009ad8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d004      	beq.n	8009b16 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2204      	movs	r2, #4
 8009b10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b12:	2304      	movs	r3, #4
 8009b14:	e003      	b.n	8009b1e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	22c5      	movs	r2, #197	; 0xc5
 8009b1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bc90      	pop	{r4, r7}
 8009b26:	4770      	bx	lr
 8009b28:	20000000 	.word	0x20000000
 8009b2c:	10624dd3 	.word	0x10624dd3

08009b30 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009b30:	b590      	push	{r4, r7, lr}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009b3e:	4b34      	ldr	r3, [pc, #208]	; (8009c10 <SDMMC_GetCmdResp6+0xe0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a34      	ldr	r2, [pc, #208]	; (8009c14 <SDMMC_GetCmdResp6+0xe4>)
 8009b44:	fba2 2303 	umull	r2, r3, r2, r3
 8009b48:	0a5b      	lsrs	r3, r3, #9
 8009b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b4e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009b52:	4623      	mov	r3, r4
 8009b54:	1e5c      	subs	r4, r3, #1
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d102      	bne.n	8009b60 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b5e:	e052      	b.n	8009c06 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b64:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d0f0      	beq.n	8009b52 <SDMMC_GetCmdResp6+0x22>
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1eb      	bne.n	8009b52 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b7e:	f003 0304 	and.w	r3, r3, #4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d004      	beq.n	8009b90 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2204      	movs	r2, #4
 8009b8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b8c:	2304      	movs	r3, #4
 8009b8e:	e03a      	b.n	8009c06 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d004      	beq.n	8009ba6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e02f      	b.n	8009c06 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f7ff fc78 	bl	800949c <SDMMC_GetCommandResponse>
 8009bac:	4603      	mov	r3, r0
 8009bae:	461a      	mov	r2, r3
 8009bb0:	7afb      	ldrb	r3, [r7, #11]
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d001      	beq.n	8009bba <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e025      	b.n	8009c06 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	22c5      	movs	r2, #197	; 0xc5
 8009bbe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff fc77 	bl	80094b6 <SDMMC_GetResponse>
 8009bc8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d106      	bne.n	8009be2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	0c1b      	lsrs	r3, r3, #16
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009bde:	2300      	movs	r3, #0
 8009be0:	e011      	b.n	8009c06 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009bf0:	e009      	b.n	8009c06 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c00:	e001      	b.n	8009c06 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	371c      	adds	r7, #28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd90      	pop	{r4, r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	20000000 	.word	0x20000000
 8009c14:	10624dd3 	.word	0x10624dd3

08009c18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009c18:	b490      	push	{r4, r7}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009c20:	4b21      	ldr	r3, [pc, #132]	; (8009ca8 <SDMMC_GetCmdResp7+0x90>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a21      	ldr	r2, [pc, #132]	; (8009cac <SDMMC_GetCmdResp7+0x94>)
 8009c26:	fba2 2303 	umull	r2, r3, r2, r3
 8009c2a:	0a5b      	lsrs	r3, r3, #9
 8009c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009c34:	4623      	mov	r3, r4
 8009c36:	1e5c      	subs	r4, r3, #1
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d102      	bne.n	8009c42 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c40:	e02c      	b.n	8009c9c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0f0      	beq.n	8009c34 <SDMMC_GetCmdResp7+0x1c>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1eb      	bne.n	8009c34 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c60:	f003 0304 	and.w	r3, r3, #4
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d004      	beq.n	8009c72 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2204      	movs	r2, #4
 8009c6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c6e:	2304      	movs	r3, #4
 8009c70:	e014      	b.n	8009c9c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d004      	beq.n	8009c88 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e009      	b.n	8009c9c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2240      	movs	r2, #64	; 0x40
 8009c98:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009c9a:	2300      	movs	r3, #0
  
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bc90      	pop	{r4, r7}
 8009ca4:	4770      	bx	lr
 8009ca6:	bf00      	nop
 8009ca8:	20000000 	.word	0x20000000
 8009cac:	10624dd3 	.word	0x10624dd3

08009cb0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8009cb4:	4b31      	ldr	r3, [pc, #196]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009cb6:	2228      	movs	r2, #40	; 0x28
 8009cb8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8009cba:	4b30      	ldr	r3, [pc, #192]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009cbc:	2209      	movs	r2, #9
 8009cbe:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8009cc0:	4b2e      	ldr	r3, [pc, #184]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009cc2:	2235      	movs	r2, #53	; 0x35
 8009cc4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8009cc6:	4b2d      	ldr	r3, [pc, #180]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009cc8:	220b      	movs	r2, #11
 8009cca:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8009ccc:	4b2b      	ldr	r3, [pc, #172]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009cce:	f240 121b 	movw	r2, #283	; 0x11b
 8009cd2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8009cd4:	4b29      	ldr	r3, [pc, #164]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009cd6:	f240 2215 	movw	r2, #533	; 0x215
 8009cda:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8009cdc:	4b27      	ldr	r3, [pc, #156]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009cde:	f240 121d 	movw	r2, #285	; 0x11d
 8009ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8009ce4:	4b25      	ldr	r3, [pc, #148]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009ce6:	f240 2235 	movw	r2, #565	; 0x235
 8009cea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8009cec:	2100      	movs	r1, #0
 8009cee:	4823      	ldr	r0, [pc, #140]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009cf0:	f000 fbb2 	bl	800a458 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8009cf4:	4b21      	ldr	r3, [pc, #132]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009cf6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009cfa:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8009cfc:	4b1f      	ldr	r3, [pc, #124]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009cfe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8009d02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8009d04:	4b1d      	ldr	r3, [pc, #116]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8009d0c:	4b1b      	ldr	r3, [pc, #108]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8009d14:	4b19      	ldr	r3, [pc, #100]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009d1c:	4b17      	ldr	r3, [pc, #92]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8009d22:	4b16      	ldr	r3, [pc, #88]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8009d28:	4b14      	ldr	r3, [pc, #80]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009d2e:	4b13      	ldr	r3, [pc, #76]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8009d34:	4b11      	ldr	r3, [pc, #68]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009d36:	4a12      	ldr	r2, [pc, #72]	; (8009d80 <BSP_LCD_Init+0xd0>)
 8009d38:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8009d3a:	4810      	ldr	r0, [pc, #64]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009d3c:	f7fa fc88 	bl	8004650 <HAL_LTDC_GetState>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d103      	bne.n	8009d4e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8009d46:	2100      	movs	r1, #0
 8009d48:	480c      	ldr	r0, [pc, #48]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009d4a:	f000 faab 	bl	800a2a4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8009d4e:	480b      	ldr	r0, [pc, #44]	; (8009d7c <BSP_LCD_Init+0xcc>)
 8009d50:	f7fa faae 	bl	80042b0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8009d54:	2201      	movs	r2, #1
 8009d56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d5a:	480a      	ldr	r0, [pc, #40]	; (8009d84 <BSP_LCD_Init+0xd4>)
 8009d5c:	f7fa f928 	bl	8003fb0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8009d60:	2201      	movs	r2, #1
 8009d62:	2108      	movs	r1, #8
 8009d64:	4808      	ldr	r0, [pc, #32]	; (8009d88 <BSP_LCD_Init+0xd8>)
 8009d66:	f7fa f923 	bl	8003fb0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8009d6a:	f000 fc95 	bl	800a698 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8009d6e:	4807      	ldr	r0, [pc, #28]	; (8009d8c <BSP_LCD_Init+0xdc>)
 8009d70:	f000 f8d8 	bl	8009f24 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	200008a8 	.word	0x200008a8
 8009d80:	40016800 	.word	0x40016800
 8009d84:	40022000 	.word	0x40022000
 8009d88:	40022800 	.word	0x40022800
 8009d8c:	2000000c 	.word	0x2000000c

08009d90 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8009d94:	4b06      	ldr	r3, [pc, #24]	; (8009db0 <BSP_LCD_GetXSize+0x20>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a06      	ldr	r2, [pc, #24]	; (8009db4 <BSP_LCD_GetXSize+0x24>)
 8009d9a:	2134      	movs	r1, #52	; 0x34
 8009d9c:	fb01 f303 	mul.w	r3, r1, r3
 8009da0:	4413      	add	r3, r2
 8009da2:	3360      	adds	r3, #96	; 0x60
 8009da4:	681b      	ldr	r3, [r3, #0]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr
 8009db0:	200000f0 	.word	0x200000f0
 8009db4:	200008a8 	.word	0x200008a8

08009db8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8009db8:	b480      	push	{r7}
 8009dba:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8009dbc:	4b06      	ldr	r3, [pc, #24]	; (8009dd8 <BSP_LCD_GetYSize+0x20>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a06      	ldr	r2, [pc, #24]	; (8009ddc <BSP_LCD_GetYSize+0x24>)
 8009dc2:	2134      	movs	r1, #52	; 0x34
 8009dc4:	fb01 f303 	mul.w	r3, r1, r3
 8009dc8:	4413      	add	r3, r2
 8009dca:	3364      	adds	r3, #100	; 0x64
 8009dcc:	681b      	ldr	r3, [r3, #0]
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	200000f0 	.word	0x200000f0
 8009ddc:	200008a8 	.word	0x200008a8

08009de0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b090      	sub	sp, #64	; 0x40
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	4603      	mov	r3, r0
 8009de8:	6039      	str	r1, [r7, #0]
 8009dea:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8009dec:	2300      	movs	r3, #0
 8009dee:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8009df0:	f7ff ffce 	bl	8009d90 <BSP_LCD_GetXSize>
 8009df4:	4603      	mov	r3, r0
 8009df6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8009dfc:	f7ff ffdc 	bl	8009db8 <BSP_LCD_GetYSize>
 8009e00:	4603      	mov	r3, r0
 8009e02:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009e04:	2300      	movs	r3, #0
 8009e06:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8009e0c:	23ff      	movs	r3, #255	; 0xff
 8009e0e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8009e10:	2300      	movs	r3, #0
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009e26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009e2c:	2307      	movs	r3, #7
 8009e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8009e30:	f7ff ffae 	bl	8009d90 <BSP_LCD_GetXSize>
 8009e34:	4603      	mov	r3, r0
 8009e36:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8009e38:	f7ff ffbe 	bl	8009db8 <BSP_LCD_GetYSize>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8009e40:	88fa      	ldrh	r2, [r7, #6]
 8009e42:	f107 030c 	add.w	r3, r7, #12
 8009e46:	4619      	mov	r1, r3
 8009e48:	4812      	ldr	r0, [pc, #72]	; (8009e94 <BSP_LCD_LayerDefaultInit+0xb4>)
 8009e4a:	f7fa fbc3 	bl	80045d4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8009e4e:	88fa      	ldrh	r2, [r7, #6]
 8009e50:	4911      	ldr	r1, [pc, #68]	; (8009e98 <BSP_LCD_LayerDefaultInit+0xb8>)
 8009e52:	4613      	mov	r3, r2
 8009e54:	005b      	lsls	r3, r3, #1
 8009e56:	4413      	add	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	440b      	add	r3, r1
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8009e62:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8009e64:	88fa      	ldrh	r2, [r7, #6]
 8009e66:	490c      	ldr	r1, [pc, #48]	; (8009e98 <BSP_LCD_LayerDefaultInit+0xb8>)
 8009e68:	4613      	mov	r3, r2
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	4413      	add	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	440b      	add	r3, r1
 8009e72:	3308      	adds	r3, #8
 8009e74:	4a09      	ldr	r2, [pc, #36]	; (8009e9c <BSP_LCD_LayerDefaultInit+0xbc>)
 8009e76:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8009e78:	88fa      	ldrh	r2, [r7, #6]
 8009e7a:	4907      	ldr	r1, [pc, #28]	; (8009e98 <BSP_LCD_LayerDefaultInit+0xb8>)
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	005b      	lsls	r3, r3, #1
 8009e80:	4413      	add	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	440b      	add	r3, r1
 8009e86:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8009e8a:	601a      	str	r2, [r3, #0]
}
 8009e8c:	bf00      	nop
 8009e8e:	3740      	adds	r7, #64	; 0x40
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	200008a8 	.word	0x200008a8
 8009e98:	200000f4 	.word	0x200000f4
 8009e9c:	2000000c 	.word	0x2000000c

08009ea0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8009ea8:	4a04      	ldr	r2, [pc, #16]	; (8009ebc <BSP_LCD_SelectLayer+0x1c>)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6013      	str	r3, [r2, #0]
} 
 8009eae:	bf00      	nop
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	200000f0 	.word	0x200000f0

08009ec0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8009ec8:	4b07      	ldr	r3, [pc, #28]	; (8009ee8 <BSP_LCD_SetTextColor+0x28>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	4907      	ldr	r1, [pc, #28]	; (8009eec <BSP_LCD_SetTextColor+0x2c>)
 8009ece:	4613      	mov	r3, r2
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	4413      	add	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	440b      	add	r3, r1
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	601a      	str	r2, [r3, #0]
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	200000f0 	.word	0x200000f0
 8009eec:	200000f4 	.word	0x200000f4

08009ef0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8009ef8:	4b08      	ldr	r3, [pc, #32]	; (8009f1c <BSP_LCD_SetBackColor+0x2c>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	4908      	ldr	r1, [pc, #32]	; (8009f20 <BSP_LCD_SetBackColor+0x30>)
 8009efe:	4613      	mov	r3, r2
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	4413      	add	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	440b      	add	r3, r1
 8009f08:	3304      	adds	r3, #4
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	601a      	str	r2, [r3, #0]
}
 8009f0e:	bf00      	nop
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	200000f0 	.word	0x200000f0
 8009f20:	200000f4 	.word	0x200000f4

08009f24 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8009f2c:	4b08      	ldr	r3, [pc, #32]	; (8009f50 <BSP_LCD_SetFont+0x2c>)
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	4908      	ldr	r1, [pc, #32]	; (8009f54 <BSP_LCD_SetFont+0x30>)
 8009f32:	4613      	mov	r3, r2
 8009f34:	005b      	lsls	r3, r3, #1
 8009f36:	4413      	add	r3, r2
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	440b      	add	r3, r1
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	601a      	str	r2, [r3, #0]
}
 8009f42:	bf00      	nop
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	200000f0 	.word	0x200000f0
 8009f54:	200000f4 	.word	0x200000f4

08009f58 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8009f5c:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <BSP_LCD_GetFont+0x24>)
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	4907      	ldr	r1, [pc, #28]	; (8009f80 <BSP_LCD_GetFont+0x28>)
 8009f62:	4613      	mov	r3, r2
 8009f64:	005b      	lsls	r3, r3, #1
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	681b      	ldr	r3, [r3, #0]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	200000f0 	.word	0x200000f0
 8009f80:	200000f4 	.word	0x200000f4

08009f84 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8009f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af02      	add	r7, sp, #8
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8009f8c:	4b0f      	ldr	r3, [pc, #60]	; (8009fcc <BSP_LCD_Clear+0x48>)
 8009f8e:	681c      	ldr	r4, [r3, #0]
 8009f90:	4b0e      	ldr	r3, [pc, #56]	; (8009fcc <BSP_LCD_Clear+0x48>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a0e      	ldr	r2, [pc, #56]	; (8009fd0 <BSP_LCD_Clear+0x4c>)
 8009f96:	2134      	movs	r1, #52	; 0x34
 8009f98:	fb01 f303 	mul.w	r3, r1, r3
 8009f9c:	4413      	add	r3, r2
 8009f9e:	335c      	adds	r3, #92	; 0x5c
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	461d      	mov	r5, r3
 8009fa4:	f7ff fef4 	bl	8009d90 <BSP_LCD_GetXSize>
 8009fa8:	4606      	mov	r6, r0
 8009faa:	f7ff ff05 	bl	8009db8 <BSP_LCD_GetYSize>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	4632      	mov	r2, r6
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 fb1e 	bl	800a600 <LL_FillBuffer>
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fcc:	200000f0 	.word	0x200000f0
 8009fd0:	200008a8 	.word	0x200008a8

08009fd4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8009fd4:	b590      	push	{r4, r7, lr}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	80fb      	strh	r3, [r7, #6]
 8009fde:	460b      	mov	r3, r1
 8009fe0:	80bb      	strh	r3, [r7, #4]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8009fe6:	4b1b      	ldr	r3, [pc, #108]	; (800a054 <BSP_LCD_DisplayChar+0x80>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	491b      	ldr	r1, [pc, #108]	; (800a058 <BSP_LCD_DisplayChar+0x84>)
 8009fec:	4613      	mov	r3, r2
 8009fee:	005b      	lsls	r3, r3, #1
 8009ff0:	4413      	add	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	440b      	add	r3, r1
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	6819      	ldr	r1, [r3, #0]
 8009ffc:	78fb      	ldrb	r3, [r7, #3]
 8009ffe:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800a002:	4b14      	ldr	r3, [pc, #80]	; (800a054 <BSP_LCD_DisplayChar+0x80>)
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	4c14      	ldr	r4, [pc, #80]	; (800a058 <BSP_LCD_DisplayChar+0x84>)
 800a008:	4613      	mov	r3, r2
 800a00a:	005b      	lsls	r3, r3, #1
 800a00c:	4413      	add	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4423      	add	r3, r4
 800a012:	3308      	adds	r3, #8
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800a018:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800a01c:	4b0d      	ldr	r3, [pc, #52]	; (800a054 <BSP_LCD_DisplayChar+0x80>)
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	4c0d      	ldr	r4, [pc, #52]	; (800a058 <BSP_LCD_DisplayChar+0x84>)
 800a022:	4613      	mov	r3, r2
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	4413      	add	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4423      	add	r3, r4
 800a02c:	3308      	adds	r3, #8
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	889b      	ldrh	r3, [r3, #4]
 800a032:	3307      	adds	r3, #7
 800a034:	2b00      	cmp	r3, #0
 800a036:	da00      	bge.n	800a03a <BSP_LCD_DisplayChar+0x66>
 800a038:	3307      	adds	r3, #7
 800a03a:	10db      	asrs	r3, r3, #3
 800a03c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800a040:	18ca      	adds	r2, r1, r3
 800a042:	88b9      	ldrh	r1, [r7, #4]
 800a044:	88fb      	ldrh	r3, [r7, #6]
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fa22 	bl	800a490 <DrawChar>
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	bd90      	pop	{r4, r7, pc}
 800a054:	200000f0 	.word	0x200000f0
 800a058:	200000f4 	.word	0x200000f4

0800a05c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800a05c:	b5b0      	push	{r4, r5, r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0
 800a062:	60ba      	str	r2, [r7, #8]
 800a064:	461a      	mov	r2, r3
 800a066:	4603      	mov	r3, r0
 800a068:	81fb      	strh	r3, [r7, #14]
 800a06a:	460b      	mov	r3, r1
 800a06c:	81bb      	strh	r3, [r7, #12]
 800a06e:	4613      	mov	r3, r2
 800a070:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800a072:	2301      	movs	r3, #1
 800a074:	83fb      	strh	r3, [r7, #30]
 800a076:	2300      	movs	r3, #0
 800a078:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800a07a:	2300      	movs	r3, #0
 800a07c:	61bb      	str	r3, [r7, #24]
 800a07e:	2300      	movs	r3, #0
 800a080:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800a086:	e002      	b.n	800a08e <BSP_LCD_DisplayStringAt+0x32>
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	3301      	adds	r3, #1
 800a08c:	61bb      	str	r3, [r7, #24]
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	617a      	str	r2, [r7, #20]
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1f6      	bne.n	800a088 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800a09a:	f7ff fe79 	bl	8009d90 <BSP_LCD_GetXSize>
 800a09e:	4b4f      	ldr	r3, [pc, #316]	; (800a1dc <BSP_LCD_DisplayStringAt+0x180>)
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	494f      	ldr	r1, [pc, #316]	; (800a1e0 <BSP_LCD_DisplayStringAt+0x184>)
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	440b      	add	r3, r1
 800a0ae:	3308      	adds	r3, #8
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	889b      	ldrh	r3, [r3, #4]
 800a0b4:	fbb0 f3f3 	udiv	r3, r0, r3
 800a0b8:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800a0ba:	79fb      	ldrb	r3, [r7, #7]
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	d01c      	beq.n	800a0fa <BSP_LCD_DisplayStringAt+0x9e>
 800a0c0:	2b03      	cmp	r3, #3
 800a0c2:	d017      	beq.n	800a0f4 <BSP_LCD_DisplayStringAt+0x98>
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d12e      	bne.n	800a126 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	69bb      	ldr	r3, [r7, #24]
 800a0cc:	1ad1      	subs	r1, r2, r3
 800a0ce:	4b43      	ldr	r3, [pc, #268]	; (800a1dc <BSP_LCD_DisplayStringAt+0x180>)
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	4843      	ldr	r0, [pc, #268]	; (800a1e0 <BSP_LCD_DisplayStringAt+0x184>)
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	005b      	lsls	r3, r3, #1
 800a0d8:	4413      	add	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4403      	add	r3, r0
 800a0de:	3308      	adds	r3, #8
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	889b      	ldrh	r3, [r3, #4]
 800a0e4:	fb03 f301 	mul.w	r3, r3, r1
 800a0e8:	085b      	lsrs	r3, r3, #1
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	89fb      	ldrh	r3, [r7, #14]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	83fb      	strh	r3, [r7, #30]
      break;
 800a0f2:	e01b      	b.n	800a12c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800a0f4:	89fb      	ldrh	r3, [r7, #14]
 800a0f6:	83fb      	strh	r3, [r7, #30]
      break;
 800a0f8:	e018      	b.n	800a12c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	b299      	uxth	r1, r3
 800a102:	4b36      	ldr	r3, [pc, #216]	; (800a1dc <BSP_LCD_DisplayStringAt+0x180>)
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	4836      	ldr	r0, [pc, #216]	; (800a1e0 <BSP_LCD_DisplayStringAt+0x184>)
 800a108:	4613      	mov	r3, r2
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	4413      	add	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4403      	add	r3, r0
 800a112:	3308      	adds	r3, #8
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	889b      	ldrh	r3, [r3, #4]
 800a118:	fb11 f303 	smulbb	r3, r1, r3
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	89fb      	ldrh	r3, [r7, #14]
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	83fb      	strh	r3, [r7, #30]
      break;
 800a124:	e002      	b.n	800a12c <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800a126:	89fb      	ldrh	r3, [r7, #14]
 800a128:	83fb      	strh	r3, [r7, #30]
      break;
 800a12a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800a12c:	8bfb      	ldrh	r3, [r7, #30]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d003      	beq.n	800a13a <BSP_LCD_DisplayStringAt+0xde>
 800a132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a136:	2b00      	cmp	r3, #0
 800a138:	da1d      	bge.n	800a176 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 800a13a:	2301      	movs	r3, #1
 800a13c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800a13e:	e01a      	b.n	800a176 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	781a      	ldrb	r2, [r3, #0]
 800a144:	89b9      	ldrh	r1, [r7, #12]
 800a146:	8bfb      	ldrh	r3, [r7, #30]
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff ff43 	bl	8009fd4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800a14e:	4b23      	ldr	r3, [pc, #140]	; (800a1dc <BSP_LCD_DisplayStringAt+0x180>)
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	4923      	ldr	r1, [pc, #140]	; (800a1e0 <BSP_LCD_DisplayStringAt+0x184>)
 800a154:	4613      	mov	r3, r2
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	4413      	add	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	440b      	add	r3, r1
 800a15e:	3308      	adds	r3, #8
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	889a      	ldrh	r2, [r3, #4]
 800a164:	8bfb      	ldrh	r3, [r7, #30]
 800a166:	4413      	add	r3, r2
 800a168:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	3301      	adds	r3, #1
 800a16e:	60bb      	str	r3, [r7, #8]
    i++;
 800a170:	8bbb      	ldrh	r3, [r7, #28]
 800a172:	3301      	adds	r3, #1
 800a174:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	bf14      	ite	ne
 800a17e:	2301      	movne	r3, #1
 800a180:	2300      	moveq	r3, #0
 800a182:	b2dc      	uxtb	r4, r3
 800a184:	f7ff fe04 	bl	8009d90 <BSP_LCD_GetXSize>
 800a188:	4605      	mov	r5, r0
 800a18a:	8bb9      	ldrh	r1, [r7, #28]
 800a18c:	4b13      	ldr	r3, [pc, #76]	; (800a1dc <BSP_LCD_DisplayStringAt+0x180>)
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	4813      	ldr	r0, [pc, #76]	; (800a1e0 <BSP_LCD_DisplayStringAt+0x184>)
 800a192:	4613      	mov	r3, r2
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4403      	add	r3, r0
 800a19c:	3308      	adds	r3, #8
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	889b      	ldrh	r3, [r3, #4]
 800a1a2:	fb03 f301 	mul.w	r3, r3, r1
 800a1a6:	1aeb      	subs	r3, r5, r3
 800a1a8:	b299      	uxth	r1, r3
 800a1aa:	4b0c      	ldr	r3, [pc, #48]	; (800a1dc <BSP_LCD_DisplayStringAt+0x180>)
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	480c      	ldr	r0, [pc, #48]	; (800a1e0 <BSP_LCD_DisplayStringAt+0x184>)
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	005b      	lsls	r3, r3, #1
 800a1b4:	4413      	add	r3, r2
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4403      	add	r3, r0
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	889b      	ldrh	r3, [r3, #4]
 800a1c0:	4299      	cmp	r1, r3
 800a1c2:	bf2c      	ite	cs
 800a1c4:	2301      	movcs	r3, #1
 800a1c6:	2300      	movcc	r3, #0
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	4023      	ands	r3, r4
 800a1cc:	b2db      	uxtb	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1b6      	bne.n	800a140 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 800a1d2:	bf00      	nop
 800a1d4:	3720      	adds	r7, #32
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	200000f0 	.word	0x200000f0
 800a1e0:	200000f4 	.word	0x200000f4

0800a1e4 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	6039      	str	r1, [r7, #0]
 800a1ee:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800a1f0:	f7ff feb2 	bl	8009f58 <BSP_LCD_GetFont>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	88db      	ldrh	r3, [r3, #6]
 800a1f8:	88fa      	ldrh	r2, [r7, #6]
 800a1fa:	fb12 f303 	smulbb	r3, r2, r3
 800a1fe:	b299      	uxth	r1, r3
 800a200:	2303      	movs	r3, #3
 800a202:	683a      	ldr	r2, [r7, #0]
 800a204:	2000      	movs	r0, #0
 800a206:	f7ff ff29 	bl	800a05c <BSP_LCD_DisplayStringAt>
}
 800a20a:	bf00      	nop
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800a214:	b5b0      	push	{r4, r5, r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	603a      	str	r2, [r7, #0]
 800a21e:	80fb      	strh	r3, [r7, #6]
 800a220:	460b      	mov	r3, r1
 800a222:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800a224:	4b1d      	ldr	r3, [pc, #116]	; (800a29c <BSP_LCD_DrawPixel+0x88>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a1d      	ldr	r2, [pc, #116]	; (800a2a0 <BSP_LCD_DrawPixel+0x8c>)
 800a22a:	2134      	movs	r1, #52	; 0x34
 800a22c:	fb01 f303 	mul.w	r3, r1, r3
 800a230:	4413      	add	r3, r2
 800a232:	3348      	adds	r3, #72	; 0x48
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b02      	cmp	r3, #2
 800a238:	d116      	bne.n	800a268 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800a23a:	4b18      	ldr	r3, [pc, #96]	; (800a29c <BSP_LCD_DrawPixel+0x88>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a18      	ldr	r2, [pc, #96]	; (800a2a0 <BSP_LCD_DrawPixel+0x8c>)
 800a240:	2134      	movs	r1, #52	; 0x34
 800a242:	fb01 f303 	mul.w	r3, r1, r3
 800a246:	4413      	add	r3, r2
 800a248:	335c      	adds	r3, #92	; 0x5c
 800a24a:	681c      	ldr	r4, [r3, #0]
 800a24c:	88bd      	ldrh	r5, [r7, #4]
 800a24e:	f7ff fd9f 	bl	8009d90 <BSP_LCD_GetXSize>
 800a252:	4603      	mov	r3, r0
 800a254:	fb03 f205 	mul.w	r2, r3, r5
 800a258:	88fb      	ldrh	r3, [r7, #6]
 800a25a:	4413      	add	r3, r2
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	4423      	add	r3, r4
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	b292      	uxth	r2, r2
 800a264:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800a266:	e015      	b.n	800a294 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800a268:	4b0c      	ldr	r3, [pc, #48]	; (800a29c <BSP_LCD_DrawPixel+0x88>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a0c      	ldr	r2, [pc, #48]	; (800a2a0 <BSP_LCD_DrawPixel+0x8c>)
 800a26e:	2134      	movs	r1, #52	; 0x34
 800a270:	fb01 f303 	mul.w	r3, r1, r3
 800a274:	4413      	add	r3, r2
 800a276:	335c      	adds	r3, #92	; 0x5c
 800a278:	681c      	ldr	r4, [r3, #0]
 800a27a:	88bd      	ldrh	r5, [r7, #4]
 800a27c:	f7ff fd88 	bl	8009d90 <BSP_LCD_GetXSize>
 800a280:	4603      	mov	r3, r0
 800a282:	fb03 f205 	mul.w	r2, r3, r5
 800a286:	88fb      	ldrh	r3, [r7, #6]
 800a288:	4413      	add	r3, r2
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4423      	add	r3, r4
 800a28e:	461a      	mov	r2, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	6013      	str	r3, [r2, #0]
}
 800a294:	bf00      	nop
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bdb0      	pop	{r4, r5, r7, pc}
 800a29c:	200000f0 	.word	0x200000f0
 800a2a0:	200008a8 	.word	0x200008a8

0800a2a4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b090      	sub	sp, #64	; 0x40
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800a2ae:	4b64      	ldr	r3, [pc, #400]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b2:	4a63      	ldr	r2, [pc, #396]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a2b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a2b8:	6453      	str	r3, [r2, #68]	; 0x44
 800a2ba:	4b61      	ldr	r3, [pc, #388]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a2c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800a2c6:	4b5e      	ldr	r3, [pc, #376]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ca:	4a5d      	ldr	r2, [pc, #372]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a2cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a2d0:	6313      	str	r3, [r2, #48]	; 0x30
 800a2d2:	4b5b      	ldr	r3, [pc, #364]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a2da:	627b      	str	r3, [r7, #36]	; 0x24
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a2de:	4b58      	ldr	r3, [pc, #352]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e2:	4a57      	ldr	r2, [pc, #348]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a2e4:	f043 0310 	orr.w	r3, r3, #16
 800a2e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a2ea:	4b55      	ldr	r3, [pc, #340]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ee:	f003 0310 	and.w	r3, r3, #16
 800a2f2:	623b      	str	r3, [r7, #32]
 800a2f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a2f6:	4b52      	ldr	r3, [pc, #328]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fa:	4a51      	ldr	r2, [pc, #324]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a2fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a300:	6313      	str	r3, [r2, #48]	; 0x30
 800a302:	4b4f      	ldr	r3, [pc, #316]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30a:	61fb      	str	r3, [r7, #28]
 800a30c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a30e:	4b4c      	ldr	r3, [pc, #304]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a312:	4a4b      	ldr	r2, [pc, #300]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a318:	6313      	str	r3, [r2, #48]	; 0x30
 800a31a:	4b49      	ldr	r3, [pc, #292]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a322:	61bb      	str	r3, [r7, #24]
 800a324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a326:	4b46      	ldr	r3, [pc, #280]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32a:	4a45      	ldr	r2, [pc, #276]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a32c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a330:	6313      	str	r3, [r2, #48]	; 0x30
 800a332:	4b43      	ldr	r3, [pc, #268]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a33a:	617b      	str	r3, [r7, #20]
 800a33c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800a33e:	4b40      	ldr	r3, [pc, #256]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a342:	4a3f      	ldr	r2, [pc, #252]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a348:	6313      	str	r3, [r2, #48]	; 0x30
 800a34a:	4b3d      	ldr	r3, [pc, #244]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a34e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a352:	613b      	str	r3, [r7, #16]
 800a354:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800a356:	4b3a      	ldr	r3, [pc, #232]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35a:	4a39      	ldr	r2, [pc, #228]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a35c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a360:	6313      	str	r3, [r2, #48]	; 0x30
 800a362:	4b37      	ldr	r3, [pc, #220]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800a36e:	4b34      	ldr	r3, [pc, #208]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a372:	4a33      	ldr	r2, [pc, #204]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a374:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a378:	6313      	str	r3, [r2, #48]	; 0x30
 800a37a:	4b31      	ldr	r3, [pc, #196]	; (800a440 <BSP_LCD_MspInit+0x19c>)
 800a37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a382:	60bb      	str	r3, [r7, #8]
 800a384:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800a386:	2310      	movs	r3, #16
 800a388:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a38a:	2302      	movs	r3, #2
 800a38c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800a38e:	2300      	movs	r3, #0
 800a390:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800a392:	2302      	movs	r3, #2
 800a394:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800a396:	230e      	movs	r3, #14
 800a398:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800a39a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a39e:	4619      	mov	r1, r3
 800a3a0:	4828      	ldr	r0, [pc, #160]	; (800a444 <BSP_LCD_MspInit+0x1a0>)
 800a3a2:	f7f9 fc5b 	bl	8003c5c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800a3a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800a3b0:	2309      	movs	r3, #9
 800a3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a3b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4823      	ldr	r0, [pc, #140]	; (800a448 <BSP_LCD_MspInit+0x1a4>)
 800a3bc:	f7f9 fc4e 	bl	8003c5c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800a3c0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800a3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800a3ca:	230e      	movs	r3, #14
 800a3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800a3ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	481d      	ldr	r0, [pc, #116]	; (800a44c <BSP_LCD_MspInit+0x1a8>)
 800a3d6:	f7f9 fc41 	bl	8003c5c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800a3da:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800a3de:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800a3e4:	230e      	movs	r3, #14
 800a3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800a3e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4818      	ldr	r0, [pc, #96]	; (800a450 <BSP_LCD_MspInit+0x1ac>)
 800a3f0:	f7f9 fc34 	bl	8003c5c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800a3f4:	23f7      	movs	r3, #247	; 0xf7
 800a3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800a3fc:	230e      	movs	r3, #14
 800a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800a400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a404:	4619      	mov	r1, r3
 800a406:	4813      	ldr	r0, [pc, #76]	; (800a454 <BSP_LCD_MspInit+0x1b0>)
 800a408:	f7f9 fc28 	bl	8003c5c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800a40c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a410:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800a412:	2301      	movs	r3, #1
 800a414:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800a416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a41a:	4619      	mov	r1, r3
 800a41c:	480b      	ldr	r0, [pc, #44]	; (800a44c <BSP_LCD_MspInit+0x1a8>)
 800a41e:	f7f9 fc1d 	bl	8003c5c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800a422:	2308      	movs	r3, #8
 800a424:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800a426:	2301      	movs	r3, #1
 800a428:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800a42a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a42e:	4619      	mov	r1, r3
 800a430:	4808      	ldr	r0, [pc, #32]	; (800a454 <BSP_LCD_MspInit+0x1b0>)
 800a432:	f7f9 fc13 	bl	8003c5c <HAL_GPIO_Init>
}
 800a436:	bf00      	nop
 800a438:	3740      	adds	r7, #64	; 0x40
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	40023800 	.word	0x40023800
 800a444:	40021000 	.word	0x40021000
 800a448:	40021800 	.word	0x40021800
 800a44c:	40022000 	.word	0x40022000
 800a450:	40022400 	.word	0x40022400
 800a454:	40022800 	.word	0x40022800

0800a458 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800a462:	4b0a      	ldr	r3, [pc, #40]	; (800a48c <BSP_LCD_ClockConfig+0x34>)
 800a464:	2208      	movs	r2, #8
 800a466:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800a468:	4b08      	ldr	r3, [pc, #32]	; (800a48c <BSP_LCD_ClockConfig+0x34>)
 800a46a:	22c0      	movs	r2, #192	; 0xc0
 800a46c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800a46e:	4b07      	ldr	r3, [pc, #28]	; (800a48c <BSP_LCD_ClockConfig+0x34>)
 800a470:	2205      	movs	r2, #5
 800a472:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800a474:	4b05      	ldr	r3, [pc, #20]	; (800a48c <BSP_LCD_ClockConfig+0x34>)
 800a476:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a47a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800a47c:	4803      	ldr	r0, [pc, #12]	; (800a48c <BSP_LCD_ClockConfig+0x34>)
 800a47e:	f7fb f859 	bl	8005534 <HAL_RCCEx_PeriphCLKConfig>
}
 800a482:	bf00      	nop
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	2000010c 	.word	0x2000010c

0800a490 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b088      	sub	sp, #32
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	603a      	str	r2, [r7, #0]
 800a49a:	80fb      	strh	r3, [r7, #6]
 800a49c:	460b      	mov	r3, r1
 800a49e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	61fb      	str	r3, [r7, #28]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800a4a8:	4b53      	ldr	r3, [pc, #332]	; (800a5f8 <DrawChar+0x168>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	4953      	ldr	r1, [pc, #332]	; (800a5fc <DrawChar+0x16c>)
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	440b      	add	r3, r1
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	88db      	ldrh	r3, [r3, #6]
 800a4be:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800a4c0:	4b4d      	ldr	r3, [pc, #308]	; (800a5f8 <DrawChar+0x168>)
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	494d      	ldr	r1, [pc, #308]	; (800a5fc <DrawChar+0x16c>)
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	005b      	lsls	r3, r3, #1
 800a4ca:	4413      	add	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	440b      	add	r3, r1
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	889b      	ldrh	r3, [r3, #4]
 800a4d6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800a4d8:	8a3b      	ldrh	r3, [r7, #16]
 800a4da:	3307      	adds	r3, #7
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	da00      	bge.n	800a4e2 <DrawChar+0x52>
 800a4e0:	3307      	adds	r3, #7
 800a4e2:	10db      	asrs	r3, r3, #3
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	00db      	lsls	r3, r3, #3
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	8a3b      	ldrh	r3, [r7, #16]
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61fb      	str	r3, [r7, #28]
 800a4f6:	e076      	b.n	800a5e6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800a4f8:	8a3b      	ldrh	r3, [r7, #16]
 800a4fa:	3307      	adds	r3, #7
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	da00      	bge.n	800a502 <DrawChar+0x72>
 800a500:	3307      	adds	r3, #7
 800a502:	10db      	asrs	r3, r3, #3
 800a504:	461a      	mov	r2, r3
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	fb03 f302 	mul.w	r3, r3, r2
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	4413      	add	r3, r2
 800a510:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800a512:	8a3b      	ldrh	r3, [r7, #16]
 800a514:	3307      	adds	r3, #7
 800a516:	2b00      	cmp	r3, #0
 800a518:	da00      	bge.n	800a51c <DrawChar+0x8c>
 800a51a:	3307      	adds	r3, #7
 800a51c:	10db      	asrs	r3, r3, #3
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d002      	beq.n	800a528 <DrawChar+0x98>
 800a522:	2b02      	cmp	r3, #2
 800a524:	d004      	beq.n	800a530 <DrawChar+0xa0>
 800a526:	e00c      	b.n	800a542 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	617b      	str	r3, [r7, #20]
      break;
 800a52e:	e016      	b.n	800a55e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	021b      	lsls	r3, r3, #8
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	3201      	adds	r2, #1
 800a53a:	7812      	ldrb	r2, [r2, #0]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	617b      	str	r3, [r7, #20]
      break;
 800a540:	e00d      	b.n	800a55e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	041a      	lsls	r2, r3, #16
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	3301      	adds	r3, #1
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	021b      	lsls	r3, r3, #8
 800a550:	4313      	orrs	r3, r2
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	3202      	adds	r2, #2
 800a556:	7812      	ldrb	r2, [r2, #0]
 800a558:	4313      	orrs	r3, r2
 800a55a:	617b      	str	r3, [r7, #20]
      break;
 800a55c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800a55e:	2300      	movs	r3, #0
 800a560:	61bb      	str	r3, [r7, #24]
 800a562:	e036      	b.n	800a5d2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800a564:	8a3a      	ldrh	r2, [r7, #16]
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	1ad2      	subs	r2, r2, r3
 800a56a:	7bfb      	ldrb	r3, [r7, #15]
 800a56c:	4413      	add	r3, r2
 800a56e:	3b01      	subs	r3, #1
 800a570:	2201      	movs	r2, #1
 800a572:	fa02 f303 	lsl.w	r3, r2, r3
 800a576:	461a      	mov	r2, r3
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	4013      	ands	r3, r2
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d012      	beq.n	800a5a6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	b29a      	uxth	r2, r3
 800a584:	88fb      	ldrh	r3, [r7, #6]
 800a586:	4413      	add	r3, r2
 800a588:	b298      	uxth	r0, r3
 800a58a:	4b1b      	ldr	r3, [pc, #108]	; (800a5f8 <DrawChar+0x168>)
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	491b      	ldr	r1, [pc, #108]	; (800a5fc <DrawChar+0x16c>)
 800a590:	4613      	mov	r3, r2
 800a592:	005b      	lsls	r3, r3, #1
 800a594:	4413      	add	r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	440b      	add	r3, r1
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	88bb      	ldrh	r3, [r7, #4]
 800a59e:	4619      	mov	r1, r3
 800a5a0:	f7ff fe38 	bl	800a214 <BSP_LCD_DrawPixel>
 800a5a4:	e012      	b.n	800a5cc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800a5a6:	69bb      	ldr	r3, [r7, #24]
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	88fb      	ldrh	r3, [r7, #6]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	b298      	uxth	r0, r3
 800a5b0:	4b11      	ldr	r3, [pc, #68]	; (800a5f8 <DrawChar+0x168>)
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	4911      	ldr	r1, [pc, #68]	; (800a5fc <DrawChar+0x16c>)
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	4413      	add	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	440b      	add	r3, r1
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	88bb      	ldrh	r3, [r7, #4]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	f7ff fe24 	bl	800a214 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	61bb      	str	r3, [r7, #24]
 800a5d2:	8a3b      	ldrh	r3, [r7, #16]
 800a5d4:	69ba      	ldr	r2, [r7, #24]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d3c4      	bcc.n	800a564 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800a5da:	88bb      	ldrh	r3, [r7, #4]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	61fb      	str	r3, [r7, #28]
 800a5e6:	8a7b      	ldrh	r3, [r7, #18]
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d384      	bcc.n	800a4f8 <DrawChar+0x68>
  }
}
 800a5ee:	bf00      	nop
 800a5f0:	3720      	adds	r7, #32
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	200000f0 	.word	0x200000f0
 800a5fc:	200000f4 	.word	0x200000f4

0800a600 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af02      	add	r7, sp, #8
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
 800a60c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800a60e:	4b1e      	ldr	r3, [pc, #120]	; (800a688 <LL_FillBuffer+0x88>)
 800a610:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a614:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800a616:	4b1d      	ldr	r3, [pc, #116]	; (800a68c <LL_FillBuffer+0x8c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a1d      	ldr	r2, [pc, #116]	; (800a690 <LL_FillBuffer+0x90>)
 800a61c:	2134      	movs	r1, #52	; 0x34
 800a61e:	fb01 f303 	mul.w	r3, r1, r3
 800a622:	4413      	add	r3, r2
 800a624:	3348      	adds	r3, #72	; 0x48
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d103      	bne.n	800a634 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800a62c:	4b16      	ldr	r3, [pc, #88]	; (800a688 <LL_FillBuffer+0x88>)
 800a62e:	2202      	movs	r2, #2
 800a630:	609a      	str	r2, [r3, #8]
 800a632:	e002      	b.n	800a63a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800a634:	4b14      	ldr	r3, [pc, #80]	; (800a688 <LL_FillBuffer+0x88>)
 800a636:	2200      	movs	r2, #0
 800a638:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800a63a:	4a13      	ldr	r2, [pc, #76]	; (800a688 <LL_FillBuffer+0x88>)
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800a640:	4b11      	ldr	r3, [pc, #68]	; (800a688 <LL_FillBuffer+0x88>)
 800a642:	4a14      	ldr	r2, [pc, #80]	; (800a694 <LL_FillBuffer+0x94>)
 800a644:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800a646:	4810      	ldr	r0, [pc, #64]	; (800a688 <LL_FillBuffer+0x88>)
 800a648:	f7f8 ff6c 	bl	8003524 <HAL_DMA2D_Init>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d115      	bne.n	800a67e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800a652:	68f9      	ldr	r1, [r7, #12]
 800a654:	480c      	ldr	r0, [pc, #48]	; (800a688 <LL_FillBuffer+0x88>)
 800a656:	f7f9 f9d3 	bl	8003a00 <HAL_DMA2D_ConfigLayer>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10e      	bne.n	800a67e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	69f9      	ldr	r1, [r7, #28]
 800a66a:	4807      	ldr	r0, [pc, #28]	; (800a688 <LL_FillBuffer+0x88>)
 800a66c:	f7f8 ffa4 	bl	80035b8 <HAL_DMA2D_Start>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d103      	bne.n	800a67e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800a676:	210a      	movs	r1, #10
 800a678:	4803      	ldr	r0, [pc, #12]	; (800a688 <LL_FillBuffer+0x88>)
 800a67a:	f7f8 ffc8 	bl	800360e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800a67e:	bf00      	nop
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	200000b0 	.word	0x200000b0
 800a68c:	200000f0 	.word	0x200000f0
 800a690:	200008a8 	.word	0x200008a8
 800a694:	4002b000 	.word	0x4002b000

0800a698 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800a698:	b580      	push	{r7, lr}
 800a69a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800a69c:	4b29      	ldr	r3, [pc, #164]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a69e:	4a2a      	ldr	r2, [pc, #168]	; (800a748 <BSP_SDRAM_Init+0xb0>)
 800a6a0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800a6a2:	4b2a      	ldr	r3, [pc, #168]	; (800a74c <BSP_SDRAM_Init+0xb4>)
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800a6a8:	4b28      	ldr	r3, [pc, #160]	; (800a74c <BSP_SDRAM_Init+0xb4>)
 800a6aa:	2207      	movs	r2, #7
 800a6ac:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800a6ae:	4b27      	ldr	r3, [pc, #156]	; (800a74c <BSP_SDRAM_Init+0xb4>)
 800a6b0:	2204      	movs	r2, #4
 800a6b2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800a6b4:	4b25      	ldr	r3, [pc, #148]	; (800a74c <BSP_SDRAM_Init+0xb4>)
 800a6b6:	2207      	movs	r2, #7
 800a6b8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800a6ba:	4b24      	ldr	r3, [pc, #144]	; (800a74c <BSP_SDRAM_Init+0xb4>)
 800a6bc:	2202      	movs	r2, #2
 800a6be:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800a6c0:	4b22      	ldr	r3, [pc, #136]	; (800a74c <BSP_SDRAM_Init+0xb4>)
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800a6c6:	4b21      	ldr	r3, [pc, #132]	; (800a74c <BSP_SDRAM_Init+0xb4>)
 800a6c8:	2202      	movs	r2, #2
 800a6ca:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800a6cc:	4b1d      	ldr	r3, [pc, #116]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a6d2:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800a6d8:	4b1a      	ldr	r3, [pc, #104]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a6da:	2204      	movs	r2, #4
 800a6dc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800a6de:	4b19      	ldr	r3, [pc, #100]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a6e0:	2210      	movs	r2, #16
 800a6e2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a6e4:	4b17      	ldr	r3, [pc, #92]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a6e6:	2240      	movs	r2, #64	; 0x40
 800a6e8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800a6ea:	4b16      	ldr	r3, [pc, #88]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a6ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6f0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a6f2:	4b14      	ldr	r3, [pc, #80]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800a6f8:	4b12      	ldr	r3, [pc, #72]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a6fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6fe:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800a700:	4b10      	ldr	r3, [pc, #64]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a706:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800a708:	4b0e      	ldr	r3, [pc, #56]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a70a:	2200      	movs	r2, #0
 800a70c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800a70e:	2100      	movs	r1, #0
 800a710:	480c      	ldr	r0, [pc, #48]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a712:	f000 f87f 	bl	800a814 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800a716:	490d      	ldr	r1, [pc, #52]	; (800a74c <BSP_SDRAM_Init+0xb4>)
 800a718:	480a      	ldr	r0, [pc, #40]	; (800a744 <BSP_SDRAM_Init+0xac>)
 800a71a:	f7fc ff0b 	bl	8007534 <HAL_SDRAM_Init>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800a724:	4b0a      	ldr	r3, [pc, #40]	; (800a750 <BSP_SDRAM_Init+0xb8>)
 800a726:	2201      	movs	r2, #1
 800a728:	701a      	strb	r2, [r3, #0]
 800a72a:	e002      	b.n	800a732 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800a72c:	4b08      	ldr	r3, [pc, #32]	; (800a750 <BSP_SDRAM_Init+0xb8>)
 800a72e:	2200      	movs	r2, #0
 800a730:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800a732:	f240 6003 	movw	r0, #1539	; 0x603
 800a736:	f000 f80d 	bl	800a754 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800a73a:	4b05      	ldr	r3, [pc, #20]	; (800a750 <BSP_SDRAM_Init+0xb8>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20000950 	.word	0x20000950
 800a748:	a0000140 	.word	0xa0000140
 800a74c:	20000190 	.word	0x20000190
 800a750:	20000014 	.word	0x20000014

0800a754 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800a760:	4b2a      	ldr	r3, [pc, #168]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a762:	2201      	movs	r2, #1
 800a764:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800a766:	4b29      	ldr	r3, [pc, #164]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a768:	2210      	movs	r2, #16
 800a76a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800a76c:	4b27      	ldr	r3, [pc, #156]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a76e:	2201      	movs	r2, #1
 800a770:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a772:	4b26      	ldr	r3, [pc, #152]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a774:	2200      	movs	r2, #0
 800a776:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800a778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a77c:	4923      	ldr	r1, [pc, #140]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a77e:	4824      	ldr	r0, [pc, #144]	; (800a810 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a780:	f7fc ff0c 	bl	800759c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800a784:	2001      	movs	r0, #1
 800a786:	f7f8 f985 	bl	8002a94 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800a78a:	4b20      	ldr	r3, [pc, #128]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a78c:	2202      	movs	r2, #2
 800a78e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800a790:	4b1e      	ldr	r3, [pc, #120]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a792:	2210      	movs	r2, #16
 800a794:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800a796:	4b1d      	ldr	r3, [pc, #116]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a798:	2201      	movs	r2, #1
 800a79a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a79c:	4b1b      	ldr	r3, [pc, #108]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800a7a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7a6:	4919      	ldr	r1, [pc, #100]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a7a8:	4819      	ldr	r0, [pc, #100]	; (800a810 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a7aa:	f7fc fef7 	bl	800759c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a7ae:	4b17      	ldr	r3, [pc, #92]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a7b0:	2203      	movs	r2, #3
 800a7b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800a7b4:	4b15      	ldr	r3, [pc, #84]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a7b6:	2210      	movs	r2, #16
 800a7b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800a7ba:	4b14      	ldr	r3, [pc, #80]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a7bc:	2208      	movs	r2, #8
 800a7be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a7c0:	4b12      	ldr	r3, [pc, #72]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800a7c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7ca:	4910      	ldr	r1, [pc, #64]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a7cc:	4810      	ldr	r0, [pc, #64]	; (800a810 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a7ce:	f7fc fee5 	bl	800759c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800a7d2:	f44f 7308 	mov.w	r3, #544	; 0x220
 800a7d6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800a7d8:	4b0c      	ldr	r3, [pc, #48]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a7da:	2204      	movs	r2, #4
 800a7dc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800a7de:	4b0b      	ldr	r3, [pc, #44]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a7e0:	2210      	movs	r2, #16
 800a7e2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800a7e4:	4b09      	ldr	r3, [pc, #36]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	4a07      	ldr	r2, [pc, #28]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a7ee:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800a7f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7f4:	4905      	ldr	r1, [pc, #20]	; (800a80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a7f6:	4806      	ldr	r0, [pc, #24]	; (800a810 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a7f8:	f7fc fed0 	bl	800759c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	4804      	ldr	r0, [pc, #16]	; (800a810 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a800:	f7fc fef7 	bl	80075f2 <HAL_SDRAM_ProgramRefreshRate>
}
 800a804:	bf00      	nop
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	200001ac 	.word	0x200001ac
 800a810:	20000950 	.word	0x20000950

0800a814 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800a814:	b580      	push	{r7, lr}
 800a816:	b090      	sub	sp, #64	; 0x40
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a81e:	4b70      	ldr	r3, [pc, #448]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a822:	4a6f      	ldr	r2, [pc, #444]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a824:	f043 0301 	orr.w	r3, r3, #1
 800a828:	6393      	str	r3, [r2, #56]	; 0x38
 800a82a:	4b6d      	ldr	r3, [pc, #436]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	62bb      	str	r3, [r7, #40]	; 0x28
 800a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800a836:	4b6a      	ldr	r3, [pc, #424]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83a:	4a69      	ldr	r2, [pc, #420]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a83c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a840:	6313      	str	r3, [r2, #48]	; 0x30
 800a842:	4b67      	ldr	r3, [pc, #412]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a84a:	627b      	str	r3, [r7, #36]	; 0x24
 800a84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a84e:	4b64      	ldr	r3, [pc, #400]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a852:	4a63      	ldr	r2, [pc, #396]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a854:	f043 0304 	orr.w	r3, r3, #4
 800a858:	6313      	str	r3, [r2, #48]	; 0x30
 800a85a:	4b61      	ldr	r3, [pc, #388]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85e:	f003 0304 	and.w	r3, r3, #4
 800a862:	623b      	str	r3, [r7, #32]
 800a864:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a866:	4b5e      	ldr	r3, [pc, #376]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86a:	4a5d      	ldr	r2, [pc, #372]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a86c:	f043 0308 	orr.w	r3, r3, #8
 800a870:	6313      	str	r3, [r2, #48]	; 0x30
 800a872:	4b5b      	ldr	r3, [pc, #364]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a876:	f003 0308 	and.w	r3, r3, #8
 800a87a:	61fb      	str	r3, [r7, #28]
 800a87c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a87e:	4b58      	ldr	r3, [pc, #352]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a882:	4a57      	ldr	r2, [pc, #348]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a884:	f043 0310 	orr.w	r3, r3, #16
 800a888:	6313      	str	r3, [r2, #48]	; 0x30
 800a88a:	4b55      	ldr	r3, [pc, #340]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88e:	f003 0310 	and.w	r3, r3, #16
 800a892:	61bb      	str	r3, [r7, #24]
 800a894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a896:	4b52      	ldr	r3, [pc, #328]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89a:	4a51      	ldr	r2, [pc, #324]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a89c:	f043 0320 	orr.w	r3, r3, #32
 800a8a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8a2:	4b4f      	ldr	r3, [pc, #316]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a6:	f003 0320 	and.w	r3, r3, #32
 800a8aa:	617b      	str	r3, [r7, #20]
 800a8ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a8ae:	4b4c      	ldr	r3, [pc, #304]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b2:	4a4b      	ldr	r2, [pc, #300]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a8b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a8ba:	4b49      	ldr	r3, [pc, #292]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c2:	613b      	str	r3, [r7, #16]
 800a8c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a8c6:	4b46      	ldr	r3, [pc, #280]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ca:	4a45      	ldr	r2, [pc, #276]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8d2:	4b43      	ldr	r3, [pc, #268]	; (800a9e0 <BSP_SDRAM_MspInit+0x1cc>)
 800a8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a8de:	2302      	movs	r3, #2
 800a8e0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800a8ea:	230c      	movs	r3, #12
 800a8ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800a8ee:	2308      	movs	r3, #8
 800a8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a8f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	483a      	ldr	r0, [pc, #232]	; (800a9e4 <BSP_SDRAM_MspInit+0x1d0>)
 800a8fa:	f7f9 f9af 	bl	8003c5c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800a8fe:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a902:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a908:	4619      	mov	r1, r3
 800a90a:	4837      	ldr	r0, [pc, #220]	; (800a9e8 <BSP_SDRAM_MspInit+0x1d4>)
 800a90c:	f7f9 f9a6 	bl	8003c5c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800a910:	f64f 7383 	movw	r3, #65411	; 0xff83
 800a914:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800a916:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a91a:	4619      	mov	r1, r3
 800a91c:	4833      	ldr	r0, [pc, #204]	; (800a9ec <BSP_SDRAM_MspInit+0x1d8>)
 800a91e:	f7f9 f99d 	bl	8003c5c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800a922:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a926:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800a928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a92c:	4619      	mov	r1, r3
 800a92e:	4830      	ldr	r0, [pc, #192]	; (800a9f0 <BSP_SDRAM_MspInit+0x1dc>)
 800a930:	f7f9 f994 	bl	8003c5c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800a934:	f248 1333 	movw	r3, #33075	; 0x8133
 800a938:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a93a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a93e:	4619      	mov	r1, r3
 800a940:	482c      	ldr	r0, [pc, #176]	; (800a9f4 <BSP_SDRAM_MspInit+0x1e0>)
 800a942:	f7f9 f98b 	bl	8003c5c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800a946:	2328      	movs	r3, #40	; 0x28
 800a948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800a94a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a94e:	4619      	mov	r1, r3
 800a950:	4829      	ldr	r0, [pc, #164]	; (800a9f8 <BSP_SDRAM_MspInit+0x1e4>)
 800a952:	f7f9 f983 	bl	8003c5c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800a956:	4b29      	ldr	r3, [pc, #164]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a958:	2200      	movs	r2, #0
 800a95a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800a95c:	4b27      	ldr	r3, [pc, #156]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a95e:	2280      	movs	r2, #128	; 0x80
 800a960:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800a962:	4b26      	ldr	r3, [pc, #152]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a964:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a968:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800a96a:	4b24      	ldr	r3, [pc, #144]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a96c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a970:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a972:	4b22      	ldr	r3, [pc, #136]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a974:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a978:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800a97a:	4b20      	ldr	r3, [pc, #128]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a97c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a980:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800a982:	4b1e      	ldr	r3, [pc, #120]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a984:	2200      	movs	r2, #0
 800a986:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800a988:	4b1c      	ldr	r3, [pc, #112]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a98a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a98e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800a990:	4b1a      	ldr	r3, [pc, #104]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a992:	2200      	movs	r2, #0
 800a994:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800a996:	4b19      	ldr	r3, [pc, #100]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a998:	2203      	movs	r2, #3
 800a99a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800a99c:	4b17      	ldr	r3, [pc, #92]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800a9a2:	4b16      	ldr	r3, [pc, #88]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800a9a8:	4b14      	ldr	r3, [pc, #80]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a9aa:	4a15      	ldr	r2, [pc, #84]	; (800aa00 <BSP_SDRAM_MspInit+0x1ec>)
 800a9ac:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a12      	ldr	r2, [pc, #72]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a9b2:	631a      	str	r2, [r3, #48]	; 0x30
 800a9b4:	4a11      	ldr	r2, [pc, #68]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800a9ba:	4810      	ldr	r0, [pc, #64]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a9bc:	f7f8 fca4 	bl	8003308 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800a9c0:	480e      	ldr	r0, [pc, #56]	; (800a9fc <BSP_SDRAM_MspInit+0x1e8>)
 800a9c2:	f7f8 fbf3 	bl	80031ac <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	210f      	movs	r1, #15
 800a9ca:	2038      	movs	r0, #56	; 0x38
 800a9cc:	f7f8 fbc4 	bl	8003158 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800a9d0:	2038      	movs	r0, #56	; 0x38
 800a9d2:	f7f8 fbdd 	bl	8003190 <HAL_NVIC_EnableIRQ>
}
 800a9d6:	bf00      	nop
 800a9d8:	3740      	adds	r7, #64	; 0x40
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	40023800 	.word	0x40023800
 800a9e4:	40020800 	.word	0x40020800
 800a9e8:	40020c00 	.word	0x40020c00
 800a9ec:	40021000 	.word	0x40021000
 800a9f0:	40021400 	.word	0x40021400
 800a9f4:	40021800 	.word	0x40021800
 800a9f8:	40021c00 	.word	0x40021c00
 800a9fc:	200001bc 	.word	0x200001bc
 800aa00:	40026410 	.word	0x40026410

0800aa04 <__errno>:
 800aa04:	4b01      	ldr	r3, [pc, #4]	; (800aa0c <__errno+0x8>)
 800aa06:	6818      	ldr	r0, [r3, #0]
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	20000018 	.word	0x20000018

0800aa10 <__libc_init_array>:
 800aa10:	b570      	push	{r4, r5, r6, lr}
 800aa12:	4e0d      	ldr	r6, [pc, #52]	; (800aa48 <__libc_init_array+0x38>)
 800aa14:	4c0d      	ldr	r4, [pc, #52]	; (800aa4c <__libc_init_array+0x3c>)
 800aa16:	1ba4      	subs	r4, r4, r6
 800aa18:	10a4      	asrs	r4, r4, #2
 800aa1a:	2500      	movs	r5, #0
 800aa1c:	42a5      	cmp	r5, r4
 800aa1e:	d109      	bne.n	800aa34 <__libc_init_array+0x24>
 800aa20:	4e0b      	ldr	r6, [pc, #44]	; (800aa50 <__libc_init_array+0x40>)
 800aa22:	4c0c      	ldr	r4, [pc, #48]	; (800aa54 <__libc_init_array+0x44>)
 800aa24:	f000 fc88 	bl	800b338 <_init>
 800aa28:	1ba4      	subs	r4, r4, r6
 800aa2a:	10a4      	asrs	r4, r4, #2
 800aa2c:	2500      	movs	r5, #0
 800aa2e:	42a5      	cmp	r5, r4
 800aa30:	d105      	bne.n	800aa3e <__libc_init_array+0x2e>
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa38:	4798      	blx	r3
 800aa3a:	3501      	adds	r5, #1
 800aa3c:	e7ee      	b.n	800aa1c <__libc_init_array+0xc>
 800aa3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aa42:	4798      	blx	r3
 800aa44:	3501      	adds	r5, #1
 800aa46:	e7f2      	b.n	800aa2e <__libc_init_array+0x1e>
 800aa48:	0800cf00 	.word	0x0800cf00
 800aa4c:	0800cf00 	.word	0x0800cf00
 800aa50:	0800cf00 	.word	0x0800cf00
 800aa54:	0800cf04 	.word	0x0800cf04

0800aa58 <memset>:
 800aa58:	4402      	add	r2, r0
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d100      	bne.n	800aa62 <memset+0xa>
 800aa60:	4770      	bx	lr
 800aa62:	f803 1b01 	strb.w	r1, [r3], #1
 800aa66:	e7f9      	b.n	800aa5c <memset+0x4>

0800aa68 <_puts_r>:
 800aa68:	b570      	push	{r4, r5, r6, lr}
 800aa6a:	460e      	mov	r6, r1
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	b118      	cbz	r0, 800aa78 <_puts_r+0x10>
 800aa70:	6983      	ldr	r3, [r0, #24]
 800aa72:	b90b      	cbnz	r3, 800aa78 <_puts_r+0x10>
 800aa74:	f000 fa0c 	bl	800ae90 <__sinit>
 800aa78:	69ab      	ldr	r3, [r5, #24]
 800aa7a:	68ac      	ldr	r4, [r5, #8]
 800aa7c:	b913      	cbnz	r3, 800aa84 <_puts_r+0x1c>
 800aa7e:	4628      	mov	r0, r5
 800aa80:	f000 fa06 	bl	800ae90 <__sinit>
 800aa84:	4b23      	ldr	r3, [pc, #140]	; (800ab14 <_puts_r+0xac>)
 800aa86:	429c      	cmp	r4, r3
 800aa88:	d117      	bne.n	800aaba <_puts_r+0x52>
 800aa8a:	686c      	ldr	r4, [r5, #4]
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	071b      	lsls	r3, r3, #28
 800aa90:	d51d      	bpl.n	800aace <_puts_r+0x66>
 800aa92:	6923      	ldr	r3, [r4, #16]
 800aa94:	b1db      	cbz	r3, 800aace <_puts_r+0x66>
 800aa96:	3e01      	subs	r6, #1
 800aa98:	68a3      	ldr	r3, [r4, #8]
 800aa9a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	60a3      	str	r3, [r4, #8]
 800aaa2:	b9e9      	cbnz	r1, 800aae0 <_puts_r+0x78>
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	da2e      	bge.n	800ab06 <_puts_r+0x9e>
 800aaa8:	4622      	mov	r2, r4
 800aaaa:	210a      	movs	r1, #10
 800aaac:	4628      	mov	r0, r5
 800aaae:	f000 f83f 	bl	800ab30 <__swbuf_r>
 800aab2:	3001      	adds	r0, #1
 800aab4:	d011      	beq.n	800aada <_puts_r+0x72>
 800aab6:	200a      	movs	r0, #10
 800aab8:	e011      	b.n	800aade <_puts_r+0x76>
 800aaba:	4b17      	ldr	r3, [pc, #92]	; (800ab18 <_puts_r+0xb0>)
 800aabc:	429c      	cmp	r4, r3
 800aabe:	d101      	bne.n	800aac4 <_puts_r+0x5c>
 800aac0:	68ac      	ldr	r4, [r5, #8]
 800aac2:	e7e3      	b.n	800aa8c <_puts_r+0x24>
 800aac4:	4b15      	ldr	r3, [pc, #84]	; (800ab1c <_puts_r+0xb4>)
 800aac6:	429c      	cmp	r4, r3
 800aac8:	bf08      	it	eq
 800aaca:	68ec      	ldreq	r4, [r5, #12]
 800aacc:	e7de      	b.n	800aa8c <_puts_r+0x24>
 800aace:	4621      	mov	r1, r4
 800aad0:	4628      	mov	r0, r5
 800aad2:	f000 f87f 	bl	800abd4 <__swsetup_r>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d0dd      	beq.n	800aa96 <_puts_r+0x2e>
 800aada:	f04f 30ff 	mov.w	r0, #4294967295
 800aade:	bd70      	pop	{r4, r5, r6, pc}
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	da04      	bge.n	800aaee <_puts_r+0x86>
 800aae4:	69a2      	ldr	r2, [r4, #24]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	dc06      	bgt.n	800aaf8 <_puts_r+0x90>
 800aaea:	290a      	cmp	r1, #10
 800aaec:	d004      	beq.n	800aaf8 <_puts_r+0x90>
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	1c5a      	adds	r2, r3, #1
 800aaf2:	6022      	str	r2, [r4, #0]
 800aaf4:	7019      	strb	r1, [r3, #0]
 800aaf6:	e7cf      	b.n	800aa98 <_puts_r+0x30>
 800aaf8:	4622      	mov	r2, r4
 800aafa:	4628      	mov	r0, r5
 800aafc:	f000 f818 	bl	800ab30 <__swbuf_r>
 800ab00:	3001      	adds	r0, #1
 800ab02:	d1c9      	bne.n	800aa98 <_puts_r+0x30>
 800ab04:	e7e9      	b.n	800aada <_puts_r+0x72>
 800ab06:	6823      	ldr	r3, [r4, #0]
 800ab08:	200a      	movs	r0, #10
 800ab0a:	1c5a      	adds	r2, r3, #1
 800ab0c:	6022      	str	r2, [r4, #0]
 800ab0e:	7018      	strb	r0, [r3, #0]
 800ab10:	e7e5      	b.n	800aade <_puts_r+0x76>
 800ab12:	bf00      	nop
 800ab14:	0800ceb8 	.word	0x0800ceb8
 800ab18:	0800ced8 	.word	0x0800ced8
 800ab1c:	0800ce98 	.word	0x0800ce98

0800ab20 <puts>:
 800ab20:	4b02      	ldr	r3, [pc, #8]	; (800ab2c <puts+0xc>)
 800ab22:	4601      	mov	r1, r0
 800ab24:	6818      	ldr	r0, [r3, #0]
 800ab26:	f7ff bf9f 	b.w	800aa68 <_puts_r>
 800ab2a:	bf00      	nop
 800ab2c:	20000018 	.word	0x20000018

0800ab30 <__swbuf_r>:
 800ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab32:	460e      	mov	r6, r1
 800ab34:	4614      	mov	r4, r2
 800ab36:	4605      	mov	r5, r0
 800ab38:	b118      	cbz	r0, 800ab42 <__swbuf_r+0x12>
 800ab3a:	6983      	ldr	r3, [r0, #24]
 800ab3c:	b90b      	cbnz	r3, 800ab42 <__swbuf_r+0x12>
 800ab3e:	f000 f9a7 	bl	800ae90 <__sinit>
 800ab42:	4b21      	ldr	r3, [pc, #132]	; (800abc8 <__swbuf_r+0x98>)
 800ab44:	429c      	cmp	r4, r3
 800ab46:	d12a      	bne.n	800ab9e <__swbuf_r+0x6e>
 800ab48:	686c      	ldr	r4, [r5, #4]
 800ab4a:	69a3      	ldr	r3, [r4, #24]
 800ab4c:	60a3      	str	r3, [r4, #8]
 800ab4e:	89a3      	ldrh	r3, [r4, #12]
 800ab50:	071a      	lsls	r2, r3, #28
 800ab52:	d52e      	bpl.n	800abb2 <__swbuf_r+0x82>
 800ab54:	6923      	ldr	r3, [r4, #16]
 800ab56:	b363      	cbz	r3, 800abb2 <__swbuf_r+0x82>
 800ab58:	6923      	ldr	r3, [r4, #16]
 800ab5a:	6820      	ldr	r0, [r4, #0]
 800ab5c:	1ac0      	subs	r0, r0, r3
 800ab5e:	6963      	ldr	r3, [r4, #20]
 800ab60:	b2f6      	uxtb	r6, r6
 800ab62:	4283      	cmp	r3, r0
 800ab64:	4637      	mov	r7, r6
 800ab66:	dc04      	bgt.n	800ab72 <__swbuf_r+0x42>
 800ab68:	4621      	mov	r1, r4
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	f000 f926 	bl	800adbc <_fflush_r>
 800ab70:	bb28      	cbnz	r0, 800abbe <__swbuf_r+0x8e>
 800ab72:	68a3      	ldr	r3, [r4, #8]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	60a3      	str	r3, [r4, #8]
 800ab78:	6823      	ldr	r3, [r4, #0]
 800ab7a:	1c5a      	adds	r2, r3, #1
 800ab7c:	6022      	str	r2, [r4, #0]
 800ab7e:	701e      	strb	r6, [r3, #0]
 800ab80:	6963      	ldr	r3, [r4, #20]
 800ab82:	3001      	adds	r0, #1
 800ab84:	4283      	cmp	r3, r0
 800ab86:	d004      	beq.n	800ab92 <__swbuf_r+0x62>
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	07db      	lsls	r3, r3, #31
 800ab8c:	d519      	bpl.n	800abc2 <__swbuf_r+0x92>
 800ab8e:	2e0a      	cmp	r6, #10
 800ab90:	d117      	bne.n	800abc2 <__swbuf_r+0x92>
 800ab92:	4621      	mov	r1, r4
 800ab94:	4628      	mov	r0, r5
 800ab96:	f000 f911 	bl	800adbc <_fflush_r>
 800ab9a:	b190      	cbz	r0, 800abc2 <__swbuf_r+0x92>
 800ab9c:	e00f      	b.n	800abbe <__swbuf_r+0x8e>
 800ab9e:	4b0b      	ldr	r3, [pc, #44]	; (800abcc <__swbuf_r+0x9c>)
 800aba0:	429c      	cmp	r4, r3
 800aba2:	d101      	bne.n	800aba8 <__swbuf_r+0x78>
 800aba4:	68ac      	ldr	r4, [r5, #8]
 800aba6:	e7d0      	b.n	800ab4a <__swbuf_r+0x1a>
 800aba8:	4b09      	ldr	r3, [pc, #36]	; (800abd0 <__swbuf_r+0xa0>)
 800abaa:	429c      	cmp	r4, r3
 800abac:	bf08      	it	eq
 800abae:	68ec      	ldreq	r4, [r5, #12]
 800abb0:	e7cb      	b.n	800ab4a <__swbuf_r+0x1a>
 800abb2:	4621      	mov	r1, r4
 800abb4:	4628      	mov	r0, r5
 800abb6:	f000 f80d 	bl	800abd4 <__swsetup_r>
 800abba:	2800      	cmp	r0, #0
 800abbc:	d0cc      	beq.n	800ab58 <__swbuf_r+0x28>
 800abbe:	f04f 37ff 	mov.w	r7, #4294967295
 800abc2:	4638      	mov	r0, r7
 800abc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abc6:	bf00      	nop
 800abc8:	0800ceb8 	.word	0x0800ceb8
 800abcc:	0800ced8 	.word	0x0800ced8
 800abd0:	0800ce98 	.word	0x0800ce98

0800abd4 <__swsetup_r>:
 800abd4:	4b32      	ldr	r3, [pc, #200]	; (800aca0 <__swsetup_r+0xcc>)
 800abd6:	b570      	push	{r4, r5, r6, lr}
 800abd8:	681d      	ldr	r5, [r3, #0]
 800abda:	4606      	mov	r6, r0
 800abdc:	460c      	mov	r4, r1
 800abde:	b125      	cbz	r5, 800abea <__swsetup_r+0x16>
 800abe0:	69ab      	ldr	r3, [r5, #24]
 800abe2:	b913      	cbnz	r3, 800abea <__swsetup_r+0x16>
 800abe4:	4628      	mov	r0, r5
 800abe6:	f000 f953 	bl	800ae90 <__sinit>
 800abea:	4b2e      	ldr	r3, [pc, #184]	; (800aca4 <__swsetup_r+0xd0>)
 800abec:	429c      	cmp	r4, r3
 800abee:	d10f      	bne.n	800ac10 <__swsetup_r+0x3c>
 800abf0:	686c      	ldr	r4, [r5, #4]
 800abf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf6:	b29a      	uxth	r2, r3
 800abf8:	0715      	lsls	r5, r2, #28
 800abfa:	d42c      	bmi.n	800ac56 <__swsetup_r+0x82>
 800abfc:	06d0      	lsls	r0, r2, #27
 800abfe:	d411      	bmi.n	800ac24 <__swsetup_r+0x50>
 800ac00:	2209      	movs	r2, #9
 800ac02:	6032      	str	r2, [r6, #0]
 800ac04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac08:	81a3      	strh	r3, [r4, #12]
 800ac0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0e:	e03e      	b.n	800ac8e <__swsetup_r+0xba>
 800ac10:	4b25      	ldr	r3, [pc, #148]	; (800aca8 <__swsetup_r+0xd4>)
 800ac12:	429c      	cmp	r4, r3
 800ac14:	d101      	bne.n	800ac1a <__swsetup_r+0x46>
 800ac16:	68ac      	ldr	r4, [r5, #8]
 800ac18:	e7eb      	b.n	800abf2 <__swsetup_r+0x1e>
 800ac1a:	4b24      	ldr	r3, [pc, #144]	; (800acac <__swsetup_r+0xd8>)
 800ac1c:	429c      	cmp	r4, r3
 800ac1e:	bf08      	it	eq
 800ac20:	68ec      	ldreq	r4, [r5, #12]
 800ac22:	e7e6      	b.n	800abf2 <__swsetup_r+0x1e>
 800ac24:	0751      	lsls	r1, r2, #29
 800ac26:	d512      	bpl.n	800ac4e <__swsetup_r+0x7a>
 800ac28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac2a:	b141      	cbz	r1, 800ac3e <__swsetup_r+0x6a>
 800ac2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac30:	4299      	cmp	r1, r3
 800ac32:	d002      	beq.n	800ac3a <__swsetup_r+0x66>
 800ac34:	4630      	mov	r0, r6
 800ac36:	f000 fa19 	bl	800b06c <_free_r>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac44:	81a3      	strh	r3, [r4, #12]
 800ac46:	2300      	movs	r3, #0
 800ac48:	6063      	str	r3, [r4, #4]
 800ac4a:	6923      	ldr	r3, [r4, #16]
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	f043 0308 	orr.w	r3, r3, #8
 800ac54:	81a3      	strh	r3, [r4, #12]
 800ac56:	6923      	ldr	r3, [r4, #16]
 800ac58:	b94b      	cbnz	r3, 800ac6e <__swsetup_r+0x9a>
 800ac5a:	89a3      	ldrh	r3, [r4, #12]
 800ac5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac64:	d003      	beq.n	800ac6e <__swsetup_r+0x9a>
 800ac66:	4621      	mov	r1, r4
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f000 f9bf 	bl	800afec <__smakebuf_r>
 800ac6e:	89a2      	ldrh	r2, [r4, #12]
 800ac70:	f012 0301 	ands.w	r3, r2, #1
 800ac74:	d00c      	beq.n	800ac90 <__swsetup_r+0xbc>
 800ac76:	2300      	movs	r3, #0
 800ac78:	60a3      	str	r3, [r4, #8]
 800ac7a:	6963      	ldr	r3, [r4, #20]
 800ac7c:	425b      	negs	r3, r3
 800ac7e:	61a3      	str	r3, [r4, #24]
 800ac80:	6923      	ldr	r3, [r4, #16]
 800ac82:	b953      	cbnz	r3, 800ac9a <__swsetup_r+0xc6>
 800ac84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac88:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ac8c:	d1ba      	bne.n	800ac04 <__swsetup_r+0x30>
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}
 800ac90:	0792      	lsls	r2, r2, #30
 800ac92:	bf58      	it	pl
 800ac94:	6963      	ldrpl	r3, [r4, #20]
 800ac96:	60a3      	str	r3, [r4, #8]
 800ac98:	e7f2      	b.n	800ac80 <__swsetup_r+0xac>
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	e7f7      	b.n	800ac8e <__swsetup_r+0xba>
 800ac9e:	bf00      	nop
 800aca0:	20000018 	.word	0x20000018
 800aca4:	0800ceb8 	.word	0x0800ceb8
 800aca8:	0800ced8 	.word	0x0800ced8
 800acac:	0800ce98 	.word	0x0800ce98

0800acb0 <__sflush_r>:
 800acb0:	898a      	ldrh	r2, [r1, #12]
 800acb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb6:	4605      	mov	r5, r0
 800acb8:	0710      	lsls	r0, r2, #28
 800acba:	460c      	mov	r4, r1
 800acbc:	d458      	bmi.n	800ad70 <__sflush_r+0xc0>
 800acbe:	684b      	ldr	r3, [r1, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	dc05      	bgt.n	800acd0 <__sflush_r+0x20>
 800acc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	dc02      	bgt.n	800acd0 <__sflush_r+0x20>
 800acca:	2000      	movs	r0, #0
 800accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acd2:	2e00      	cmp	r6, #0
 800acd4:	d0f9      	beq.n	800acca <__sflush_r+0x1a>
 800acd6:	2300      	movs	r3, #0
 800acd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acdc:	682f      	ldr	r7, [r5, #0]
 800acde:	6a21      	ldr	r1, [r4, #32]
 800ace0:	602b      	str	r3, [r5, #0]
 800ace2:	d032      	beq.n	800ad4a <__sflush_r+0x9a>
 800ace4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	075a      	lsls	r2, r3, #29
 800acea:	d505      	bpl.n	800acf8 <__sflush_r+0x48>
 800acec:	6863      	ldr	r3, [r4, #4]
 800acee:	1ac0      	subs	r0, r0, r3
 800acf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acf2:	b10b      	cbz	r3, 800acf8 <__sflush_r+0x48>
 800acf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acf6:	1ac0      	subs	r0, r0, r3
 800acf8:	2300      	movs	r3, #0
 800acfa:	4602      	mov	r2, r0
 800acfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acfe:	6a21      	ldr	r1, [r4, #32]
 800ad00:	4628      	mov	r0, r5
 800ad02:	47b0      	blx	r6
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	89a3      	ldrh	r3, [r4, #12]
 800ad08:	d106      	bne.n	800ad18 <__sflush_r+0x68>
 800ad0a:	6829      	ldr	r1, [r5, #0]
 800ad0c:	291d      	cmp	r1, #29
 800ad0e:	d848      	bhi.n	800ada2 <__sflush_r+0xf2>
 800ad10:	4a29      	ldr	r2, [pc, #164]	; (800adb8 <__sflush_r+0x108>)
 800ad12:	40ca      	lsrs	r2, r1
 800ad14:	07d6      	lsls	r6, r2, #31
 800ad16:	d544      	bpl.n	800ada2 <__sflush_r+0xf2>
 800ad18:	2200      	movs	r2, #0
 800ad1a:	6062      	str	r2, [r4, #4]
 800ad1c:	04d9      	lsls	r1, r3, #19
 800ad1e:	6922      	ldr	r2, [r4, #16]
 800ad20:	6022      	str	r2, [r4, #0]
 800ad22:	d504      	bpl.n	800ad2e <__sflush_r+0x7e>
 800ad24:	1c42      	adds	r2, r0, #1
 800ad26:	d101      	bne.n	800ad2c <__sflush_r+0x7c>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b903      	cbnz	r3, 800ad2e <__sflush_r+0x7e>
 800ad2c:	6560      	str	r0, [r4, #84]	; 0x54
 800ad2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad30:	602f      	str	r7, [r5, #0]
 800ad32:	2900      	cmp	r1, #0
 800ad34:	d0c9      	beq.n	800acca <__sflush_r+0x1a>
 800ad36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad3a:	4299      	cmp	r1, r3
 800ad3c:	d002      	beq.n	800ad44 <__sflush_r+0x94>
 800ad3e:	4628      	mov	r0, r5
 800ad40:	f000 f994 	bl	800b06c <_free_r>
 800ad44:	2000      	movs	r0, #0
 800ad46:	6360      	str	r0, [r4, #52]	; 0x34
 800ad48:	e7c0      	b.n	800accc <__sflush_r+0x1c>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	47b0      	blx	r6
 800ad50:	1c41      	adds	r1, r0, #1
 800ad52:	d1c8      	bne.n	800ace6 <__sflush_r+0x36>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d0c5      	beq.n	800ace6 <__sflush_r+0x36>
 800ad5a:	2b1d      	cmp	r3, #29
 800ad5c:	d001      	beq.n	800ad62 <__sflush_r+0xb2>
 800ad5e:	2b16      	cmp	r3, #22
 800ad60:	d101      	bne.n	800ad66 <__sflush_r+0xb6>
 800ad62:	602f      	str	r7, [r5, #0]
 800ad64:	e7b1      	b.n	800acca <__sflush_r+0x1a>
 800ad66:	89a3      	ldrh	r3, [r4, #12]
 800ad68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	e7ad      	b.n	800accc <__sflush_r+0x1c>
 800ad70:	690f      	ldr	r7, [r1, #16]
 800ad72:	2f00      	cmp	r7, #0
 800ad74:	d0a9      	beq.n	800acca <__sflush_r+0x1a>
 800ad76:	0793      	lsls	r3, r2, #30
 800ad78:	680e      	ldr	r6, [r1, #0]
 800ad7a:	bf08      	it	eq
 800ad7c:	694b      	ldreq	r3, [r1, #20]
 800ad7e:	600f      	str	r7, [r1, #0]
 800ad80:	bf18      	it	ne
 800ad82:	2300      	movne	r3, #0
 800ad84:	eba6 0807 	sub.w	r8, r6, r7
 800ad88:	608b      	str	r3, [r1, #8]
 800ad8a:	f1b8 0f00 	cmp.w	r8, #0
 800ad8e:	dd9c      	ble.n	800acca <__sflush_r+0x1a>
 800ad90:	4643      	mov	r3, r8
 800ad92:	463a      	mov	r2, r7
 800ad94:	6a21      	ldr	r1, [r4, #32]
 800ad96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad98:	4628      	mov	r0, r5
 800ad9a:	47b0      	blx	r6
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	dc06      	bgt.n	800adae <__sflush_r+0xfe>
 800ada0:	89a3      	ldrh	r3, [r4, #12]
 800ada2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	f04f 30ff 	mov.w	r0, #4294967295
 800adac:	e78e      	b.n	800accc <__sflush_r+0x1c>
 800adae:	4407      	add	r7, r0
 800adb0:	eba8 0800 	sub.w	r8, r8, r0
 800adb4:	e7e9      	b.n	800ad8a <__sflush_r+0xda>
 800adb6:	bf00      	nop
 800adb8:	20400001 	.word	0x20400001

0800adbc <_fflush_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	690b      	ldr	r3, [r1, #16]
 800adc0:	4605      	mov	r5, r0
 800adc2:	460c      	mov	r4, r1
 800adc4:	b1db      	cbz	r3, 800adfe <_fflush_r+0x42>
 800adc6:	b118      	cbz	r0, 800add0 <_fflush_r+0x14>
 800adc8:	6983      	ldr	r3, [r0, #24]
 800adca:	b90b      	cbnz	r3, 800add0 <_fflush_r+0x14>
 800adcc:	f000 f860 	bl	800ae90 <__sinit>
 800add0:	4b0c      	ldr	r3, [pc, #48]	; (800ae04 <_fflush_r+0x48>)
 800add2:	429c      	cmp	r4, r3
 800add4:	d109      	bne.n	800adea <_fflush_r+0x2e>
 800add6:	686c      	ldr	r4, [r5, #4]
 800add8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800addc:	b17b      	cbz	r3, 800adfe <_fflush_r+0x42>
 800adde:	4621      	mov	r1, r4
 800ade0:	4628      	mov	r0, r5
 800ade2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ade6:	f7ff bf63 	b.w	800acb0 <__sflush_r>
 800adea:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <_fflush_r+0x4c>)
 800adec:	429c      	cmp	r4, r3
 800adee:	d101      	bne.n	800adf4 <_fflush_r+0x38>
 800adf0:	68ac      	ldr	r4, [r5, #8]
 800adf2:	e7f1      	b.n	800add8 <_fflush_r+0x1c>
 800adf4:	4b05      	ldr	r3, [pc, #20]	; (800ae0c <_fflush_r+0x50>)
 800adf6:	429c      	cmp	r4, r3
 800adf8:	bf08      	it	eq
 800adfa:	68ec      	ldreq	r4, [r5, #12]
 800adfc:	e7ec      	b.n	800add8 <_fflush_r+0x1c>
 800adfe:	2000      	movs	r0, #0
 800ae00:	bd38      	pop	{r3, r4, r5, pc}
 800ae02:	bf00      	nop
 800ae04:	0800ceb8 	.word	0x0800ceb8
 800ae08:	0800ced8 	.word	0x0800ced8
 800ae0c:	0800ce98 	.word	0x0800ce98

0800ae10 <std>:
 800ae10:	2300      	movs	r3, #0
 800ae12:	b510      	push	{r4, lr}
 800ae14:	4604      	mov	r4, r0
 800ae16:	e9c0 3300 	strd	r3, r3, [r0]
 800ae1a:	6083      	str	r3, [r0, #8]
 800ae1c:	8181      	strh	r1, [r0, #12]
 800ae1e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae20:	81c2      	strh	r2, [r0, #14]
 800ae22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae26:	6183      	str	r3, [r0, #24]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	305c      	adds	r0, #92	; 0x5c
 800ae2e:	f7ff fe13 	bl	800aa58 <memset>
 800ae32:	4b05      	ldr	r3, [pc, #20]	; (800ae48 <std+0x38>)
 800ae34:	6263      	str	r3, [r4, #36]	; 0x24
 800ae36:	4b05      	ldr	r3, [pc, #20]	; (800ae4c <std+0x3c>)
 800ae38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae3a:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <std+0x40>)
 800ae3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae3e:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <std+0x44>)
 800ae40:	6224      	str	r4, [r4, #32]
 800ae42:	6323      	str	r3, [r4, #48]	; 0x30
 800ae44:	bd10      	pop	{r4, pc}
 800ae46:	bf00      	nop
 800ae48:	0800b1dd 	.word	0x0800b1dd
 800ae4c:	0800b1ff 	.word	0x0800b1ff
 800ae50:	0800b237 	.word	0x0800b237
 800ae54:	0800b25b 	.word	0x0800b25b

0800ae58 <_cleanup_r>:
 800ae58:	4901      	ldr	r1, [pc, #4]	; (800ae60 <_cleanup_r+0x8>)
 800ae5a:	f000 b885 	b.w	800af68 <_fwalk_reent>
 800ae5e:	bf00      	nop
 800ae60:	0800adbd 	.word	0x0800adbd

0800ae64 <__sfmoreglue>:
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	1e4a      	subs	r2, r1, #1
 800ae68:	2568      	movs	r5, #104	; 0x68
 800ae6a:	4355      	muls	r5, r2
 800ae6c:	460e      	mov	r6, r1
 800ae6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae72:	f000 f949 	bl	800b108 <_malloc_r>
 800ae76:	4604      	mov	r4, r0
 800ae78:	b140      	cbz	r0, 800ae8c <__sfmoreglue+0x28>
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ae80:	300c      	adds	r0, #12
 800ae82:	60a0      	str	r0, [r4, #8]
 800ae84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae88:	f7ff fde6 	bl	800aa58 <memset>
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}

0800ae90 <__sinit>:
 800ae90:	6983      	ldr	r3, [r0, #24]
 800ae92:	b510      	push	{r4, lr}
 800ae94:	4604      	mov	r4, r0
 800ae96:	bb33      	cbnz	r3, 800aee6 <__sinit+0x56>
 800ae98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ae9c:	6503      	str	r3, [r0, #80]	; 0x50
 800ae9e:	4b12      	ldr	r3, [pc, #72]	; (800aee8 <__sinit+0x58>)
 800aea0:	4a12      	ldr	r2, [pc, #72]	; (800aeec <__sinit+0x5c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6282      	str	r2, [r0, #40]	; 0x28
 800aea6:	4298      	cmp	r0, r3
 800aea8:	bf04      	itt	eq
 800aeaa:	2301      	moveq	r3, #1
 800aeac:	6183      	streq	r3, [r0, #24]
 800aeae:	f000 f81f 	bl	800aef0 <__sfp>
 800aeb2:	6060      	str	r0, [r4, #4]
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f000 f81b 	bl	800aef0 <__sfp>
 800aeba:	60a0      	str	r0, [r4, #8]
 800aebc:	4620      	mov	r0, r4
 800aebe:	f000 f817 	bl	800aef0 <__sfp>
 800aec2:	2200      	movs	r2, #0
 800aec4:	60e0      	str	r0, [r4, #12]
 800aec6:	2104      	movs	r1, #4
 800aec8:	6860      	ldr	r0, [r4, #4]
 800aeca:	f7ff ffa1 	bl	800ae10 <std>
 800aece:	2201      	movs	r2, #1
 800aed0:	2109      	movs	r1, #9
 800aed2:	68a0      	ldr	r0, [r4, #8]
 800aed4:	f7ff ff9c 	bl	800ae10 <std>
 800aed8:	2202      	movs	r2, #2
 800aeda:	2112      	movs	r1, #18
 800aedc:	68e0      	ldr	r0, [r4, #12]
 800aede:	f7ff ff97 	bl	800ae10 <std>
 800aee2:	2301      	movs	r3, #1
 800aee4:	61a3      	str	r3, [r4, #24]
 800aee6:	bd10      	pop	{r4, pc}
 800aee8:	0800ce94 	.word	0x0800ce94
 800aeec:	0800ae59 	.word	0x0800ae59

0800aef0 <__sfp>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	4b1b      	ldr	r3, [pc, #108]	; (800af60 <__sfp+0x70>)
 800aef4:	681e      	ldr	r6, [r3, #0]
 800aef6:	69b3      	ldr	r3, [r6, #24]
 800aef8:	4607      	mov	r7, r0
 800aefa:	b913      	cbnz	r3, 800af02 <__sfp+0x12>
 800aefc:	4630      	mov	r0, r6
 800aefe:	f7ff ffc7 	bl	800ae90 <__sinit>
 800af02:	3648      	adds	r6, #72	; 0x48
 800af04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af08:	3b01      	subs	r3, #1
 800af0a:	d503      	bpl.n	800af14 <__sfp+0x24>
 800af0c:	6833      	ldr	r3, [r6, #0]
 800af0e:	b133      	cbz	r3, 800af1e <__sfp+0x2e>
 800af10:	6836      	ldr	r6, [r6, #0]
 800af12:	e7f7      	b.n	800af04 <__sfp+0x14>
 800af14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af18:	b16d      	cbz	r5, 800af36 <__sfp+0x46>
 800af1a:	3468      	adds	r4, #104	; 0x68
 800af1c:	e7f4      	b.n	800af08 <__sfp+0x18>
 800af1e:	2104      	movs	r1, #4
 800af20:	4638      	mov	r0, r7
 800af22:	f7ff ff9f 	bl	800ae64 <__sfmoreglue>
 800af26:	6030      	str	r0, [r6, #0]
 800af28:	2800      	cmp	r0, #0
 800af2a:	d1f1      	bne.n	800af10 <__sfp+0x20>
 800af2c:	230c      	movs	r3, #12
 800af2e:	603b      	str	r3, [r7, #0]
 800af30:	4604      	mov	r4, r0
 800af32:	4620      	mov	r0, r4
 800af34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af36:	4b0b      	ldr	r3, [pc, #44]	; (800af64 <__sfp+0x74>)
 800af38:	6665      	str	r5, [r4, #100]	; 0x64
 800af3a:	e9c4 5500 	strd	r5, r5, [r4]
 800af3e:	60a5      	str	r5, [r4, #8]
 800af40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800af44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800af48:	2208      	movs	r2, #8
 800af4a:	4629      	mov	r1, r5
 800af4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af50:	f7ff fd82 	bl	800aa58 <memset>
 800af54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af5c:	e7e9      	b.n	800af32 <__sfp+0x42>
 800af5e:	bf00      	nop
 800af60:	0800ce94 	.word	0x0800ce94
 800af64:	ffff0001 	.word	0xffff0001

0800af68 <_fwalk_reent>:
 800af68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af6c:	4680      	mov	r8, r0
 800af6e:	4689      	mov	r9, r1
 800af70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af74:	2600      	movs	r6, #0
 800af76:	b914      	cbnz	r4, 800af7e <_fwalk_reent+0x16>
 800af78:	4630      	mov	r0, r6
 800af7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800af82:	3f01      	subs	r7, #1
 800af84:	d501      	bpl.n	800af8a <_fwalk_reent+0x22>
 800af86:	6824      	ldr	r4, [r4, #0]
 800af88:	e7f5      	b.n	800af76 <_fwalk_reent+0xe>
 800af8a:	89ab      	ldrh	r3, [r5, #12]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d907      	bls.n	800afa0 <_fwalk_reent+0x38>
 800af90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af94:	3301      	adds	r3, #1
 800af96:	d003      	beq.n	800afa0 <_fwalk_reent+0x38>
 800af98:	4629      	mov	r1, r5
 800af9a:	4640      	mov	r0, r8
 800af9c:	47c8      	blx	r9
 800af9e:	4306      	orrs	r6, r0
 800afa0:	3568      	adds	r5, #104	; 0x68
 800afa2:	e7ee      	b.n	800af82 <_fwalk_reent+0x1a>

0800afa4 <__swhatbuf_r>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	460e      	mov	r6, r1
 800afa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afac:	2900      	cmp	r1, #0
 800afae:	b096      	sub	sp, #88	; 0x58
 800afb0:	4614      	mov	r4, r2
 800afb2:	461d      	mov	r5, r3
 800afb4:	da07      	bge.n	800afc6 <__swhatbuf_r+0x22>
 800afb6:	2300      	movs	r3, #0
 800afb8:	602b      	str	r3, [r5, #0]
 800afba:	89b3      	ldrh	r3, [r6, #12]
 800afbc:	061a      	lsls	r2, r3, #24
 800afbe:	d410      	bmi.n	800afe2 <__swhatbuf_r+0x3e>
 800afc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afc4:	e00e      	b.n	800afe4 <__swhatbuf_r+0x40>
 800afc6:	466a      	mov	r2, sp
 800afc8:	f000 f96e 	bl	800b2a8 <_fstat_r>
 800afcc:	2800      	cmp	r0, #0
 800afce:	dbf2      	blt.n	800afb6 <__swhatbuf_r+0x12>
 800afd0:	9a01      	ldr	r2, [sp, #4]
 800afd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afda:	425a      	negs	r2, r3
 800afdc:	415a      	adcs	r2, r3
 800afde:	602a      	str	r2, [r5, #0]
 800afe0:	e7ee      	b.n	800afc0 <__swhatbuf_r+0x1c>
 800afe2:	2340      	movs	r3, #64	; 0x40
 800afe4:	2000      	movs	r0, #0
 800afe6:	6023      	str	r3, [r4, #0]
 800afe8:	b016      	add	sp, #88	; 0x58
 800afea:	bd70      	pop	{r4, r5, r6, pc}

0800afec <__smakebuf_r>:
 800afec:	898b      	ldrh	r3, [r1, #12]
 800afee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aff0:	079d      	lsls	r5, r3, #30
 800aff2:	4606      	mov	r6, r0
 800aff4:	460c      	mov	r4, r1
 800aff6:	d507      	bpl.n	800b008 <__smakebuf_r+0x1c>
 800aff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	6123      	str	r3, [r4, #16]
 800b000:	2301      	movs	r3, #1
 800b002:	6163      	str	r3, [r4, #20]
 800b004:	b002      	add	sp, #8
 800b006:	bd70      	pop	{r4, r5, r6, pc}
 800b008:	ab01      	add	r3, sp, #4
 800b00a:	466a      	mov	r2, sp
 800b00c:	f7ff ffca 	bl	800afa4 <__swhatbuf_r>
 800b010:	9900      	ldr	r1, [sp, #0]
 800b012:	4605      	mov	r5, r0
 800b014:	4630      	mov	r0, r6
 800b016:	f000 f877 	bl	800b108 <_malloc_r>
 800b01a:	b948      	cbnz	r0, 800b030 <__smakebuf_r+0x44>
 800b01c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b020:	059a      	lsls	r2, r3, #22
 800b022:	d4ef      	bmi.n	800b004 <__smakebuf_r+0x18>
 800b024:	f023 0303 	bic.w	r3, r3, #3
 800b028:	f043 0302 	orr.w	r3, r3, #2
 800b02c:	81a3      	strh	r3, [r4, #12]
 800b02e:	e7e3      	b.n	800aff8 <__smakebuf_r+0xc>
 800b030:	4b0d      	ldr	r3, [pc, #52]	; (800b068 <__smakebuf_r+0x7c>)
 800b032:	62b3      	str	r3, [r6, #40]	; 0x28
 800b034:	89a3      	ldrh	r3, [r4, #12]
 800b036:	6020      	str	r0, [r4, #0]
 800b038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	9b00      	ldr	r3, [sp, #0]
 800b040:	6163      	str	r3, [r4, #20]
 800b042:	9b01      	ldr	r3, [sp, #4]
 800b044:	6120      	str	r0, [r4, #16]
 800b046:	b15b      	cbz	r3, 800b060 <__smakebuf_r+0x74>
 800b048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b04c:	4630      	mov	r0, r6
 800b04e:	f000 f93d 	bl	800b2cc <_isatty_r>
 800b052:	b128      	cbz	r0, 800b060 <__smakebuf_r+0x74>
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	f023 0303 	bic.w	r3, r3, #3
 800b05a:	f043 0301 	orr.w	r3, r3, #1
 800b05e:	81a3      	strh	r3, [r4, #12]
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	431d      	orrs	r5, r3
 800b064:	81a5      	strh	r5, [r4, #12]
 800b066:	e7cd      	b.n	800b004 <__smakebuf_r+0x18>
 800b068:	0800ae59 	.word	0x0800ae59

0800b06c <_free_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	4605      	mov	r5, r0
 800b070:	2900      	cmp	r1, #0
 800b072:	d045      	beq.n	800b100 <_free_r+0x94>
 800b074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b078:	1f0c      	subs	r4, r1, #4
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	bfb8      	it	lt
 800b07e:	18e4      	addlt	r4, r4, r3
 800b080:	f000 f946 	bl	800b310 <__malloc_lock>
 800b084:	4a1f      	ldr	r2, [pc, #124]	; (800b104 <_free_r+0x98>)
 800b086:	6813      	ldr	r3, [r2, #0]
 800b088:	4610      	mov	r0, r2
 800b08a:	b933      	cbnz	r3, 800b09a <_free_r+0x2e>
 800b08c:	6063      	str	r3, [r4, #4]
 800b08e:	6014      	str	r4, [r2, #0]
 800b090:	4628      	mov	r0, r5
 800b092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b096:	f000 b93c 	b.w	800b312 <__malloc_unlock>
 800b09a:	42a3      	cmp	r3, r4
 800b09c:	d90c      	bls.n	800b0b8 <_free_r+0x4c>
 800b09e:	6821      	ldr	r1, [r4, #0]
 800b0a0:	1862      	adds	r2, r4, r1
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	bf04      	itt	eq
 800b0a6:	681a      	ldreq	r2, [r3, #0]
 800b0a8:	685b      	ldreq	r3, [r3, #4]
 800b0aa:	6063      	str	r3, [r4, #4]
 800b0ac:	bf04      	itt	eq
 800b0ae:	1852      	addeq	r2, r2, r1
 800b0b0:	6022      	streq	r2, [r4, #0]
 800b0b2:	6004      	str	r4, [r0, #0]
 800b0b4:	e7ec      	b.n	800b090 <_free_r+0x24>
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	b10a      	cbz	r2, 800b0c0 <_free_r+0x54>
 800b0bc:	42a2      	cmp	r2, r4
 800b0be:	d9fa      	bls.n	800b0b6 <_free_r+0x4a>
 800b0c0:	6819      	ldr	r1, [r3, #0]
 800b0c2:	1858      	adds	r0, r3, r1
 800b0c4:	42a0      	cmp	r0, r4
 800b0c6:	d10b      	bne.n	800b0e0 <_free_r+0x74>
 800b0c8:	6820      	ldr	r0, [r4, #0]
 800b0ca:	4401      	add	r1, r0
 800b0cc:	1858      	adds	r0, r3, r1
 800b0ce:	4282      	cmp	r2, r0
 800b0d0:	6019      	str	r1, [r3, #0]
 800b0d2:	d1dd      	bne.n	800b090 <_free_r+0x24>
 800b0d4:	6810      	ldr	r0, [r2, #0]
 800b0d6:	6852      	ldr	r2, [r2, #4]
 800b0d8:	605a      	str	r2, [r3, #4]
 800b0da:	4401      	add	r1, r0
 800b0dc:	6019      	str	r1, [r3, #0]
 800b0de:	e7d7      	b.n	800b090 <_free_r+0x24>
 800b0e0:	d902      	bls.n	800b0e8 <_free_r+0x7c>
 800b0e2:	230c      	movs	r3, #12
 800b0e4:	602b      	str	r3, [r5, #0]
 800b0e6:	e7d3      	b.n	800b090 <_free_r+0x24>
 800b0e8:	6820      	ldr	r0, [r4, #0]
 800b0ea:	1821      	adds	r1, r4, r0
 800b0ec:	428a      	cmp	r2, r1
 800b0ee:	bf04      	itt	eq
 800b0f0:	6811      	ldreq	r1, [r2, #0]
 800b0f2:	6852      	ldreq	r2, [r2, #4]
 800b0f4:	6062      	str	r2, [r4, #4]
 800b0f6:	bf04      	itt	eq
 800b0f8:	1809      	addeq	r1, r1, r0
 800b0fa:	6021      	streq	r1, [r4, #0]
 800b0fc:	605c      	str	r4, [r3, #4]
 800b0fe:	e7c7      	b.n	800b090 <_free_r+0x24>
 800b100:	bd38      	pop	{r3, r4, r5, pc}
 800b102:	bf00      	nop
 800b104:	2000021c 	.word	0x2000021c

0800b108 <_malloc_r>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	1ccd      	adds	r5, r1, #3
 800b10c:	f025 0503 	bic.w	r5, r5, #3
 800b110:	3508      	adds	r5, #8
 800b112:	2d0c      	cmp	r5, #12
 800b114:	bf38      	it	cc
 800b116:	250c      	movcc	r5, #12
 800b118:	2d00      	cmp	r5, #0
 800b11a:	4606      	mov	r6, r0
 800b11c:	db01      	blt.n	800b122 <_malloc_r+0x1a>
 800b11e:	42a9      	cmp	r1, r5
 800b120:	d903      	bls.n	800b12a <_malloc_r+0x22>
 800b122:	230c      	movs	r3, #12
 800b124:	6033      	str	r3, [r6, #0]
 800b126:	2000      	movs	r0, #0
 800b128:	bd70      	pop	{r4, r5, r6, pc}
 800b12a:	f000 f8f1 	bl	800b310 <__malloc_lock>
 800b12e:	4a21      	ldr	r2, [pc, #132]	; (800b1b4 <_malloc_r+0xac>)
 800b130:	6814      	ldr	r4, [r2, #0]
 800b132:	4621      	mov	r1, r4
 800b134:	b991      	cbnz	r1, 800b15c <_malloc_r+0x54>
 800b136:	4c20      	ldr	r4, [pc, #128]	; (800b1b8 <_malloc_r+0xb0>)
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	b91b      	cbnz	r3, 800b144 <_malloc_r+0x3c>
 800b13c:	4630      	mov	r0, r6
 800b13e:	f000 f83d 	bl	800b1bc <_sbrk_r>
 800b142:	6020      	str	r0, [r4, #0]
 800b144:	4629      	mov	r1, r5
 800b146:	4630      	mov	r0, r6
 800b148:	f000 f838 	bl	800b1bc <_sbrk_r>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	d124      	bne.n	800b19a <_malloc_r+0x92>
 800b150:	230c      	movs	r3, #12
 800b152:	6033      	str	r3, [r6, #0]
 800b154:	4630      	mov	r0, r6
 800b156:	f000 f8dc 	bl	800b312 <__malloc_unlock>
 800b15a:	e7e4      	b.n	800b126 <_malloc_r+0x1e>
 800b15c:	680b      	ldr	r3, [r1, #0]
 800b15e:	1b5b      	subs	r3, r3, r5
 800b160:	d418      	bmi.n	800b194 <_malloc_r+0x8c>
 800b162:	2b0b      	cmp	r3, #11
 800b164:	d90f      	bls.n	800b186 <_malloc_r+0x7e>
 800b166:	600b      	str	r3, [r1, #0]
 800b168:	50cd      	str	r5, [r1, r3]
 800b16a:	18cc      	adds	r4, r1, r3
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 f8d0 	bl	800b312 <__malloc_unlock>
 800b172:	f104 000b 	add.w	r0, r4, #11
 800b176:	1d23      	adds	r3, r4, #4
 800b178:	f020 0007 	bic.w	r0, r0, #7
 800b17c:	1ac3      	subs	r3, r0, r3
 800b17e:	d0d3      	beq.n	800b128 <_malloc_r+0x20>
 800b180:	425a      	negs	r2, r3
 800b182:	50e2      	str	r2, [r4, r3]
 800b184:	e7d0      	b.n	800b128 <_malloc_r+0x20>
 800b186:	428c      	cmp	r4, r1
 800b188:	684b      	ldr	r3, [r1, #4]
 800b18a:	bf16      	itet	ne
 800b18c:	6063      	strne	r3, [r4, #4]
 800b18e:	6013      	streq	r3, [r2, #0]
 800b190:	460c      	movne	r4, r1
 800b192:	e7eb      	b.n	800b16c <_malloc_r+0x64>
 800b194:	460c      	mov	r4, r1
 800b196:	6849      	ldr	r1, [r1, #4]
 800b198:	e7cc      	b.n	800b134 <_malloc_r+0x2c>
 800b19a:	1cc4      	adds	r4, r0, #3
 800b19c:	f024 0403 	bic.w	r4, r4, #3
 800b1a0:	42a0      	cmp	r0, r4
 800b1a2:	d005      	beq.n	800b1b0 <_malloc_r+0xa8>
 800b1a4:	1a21      	subs	r1, r4, r0
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f000 f808 	bl	800b1bc <_sbrk_r>
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	d0cf      	beq.n	800b150 <_malloc_r+0x48>
 800b1b0:	6025      	str	r5, [r4, #0]
 800b1b2:	e7db      	b.n	800b16c <_malloc_r+0x64>
 800b1b4:	2000021c 	.word	0x2000021c
 800b1b8:	20000220 	.word	0x20000220

0800b1bc <_sbrk_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4c06      	ldr	r4, [pc, #24]	; (800b1d8 <_sbrk_r+0x1c>)
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	6023      	str	r3, [r4, #0]
 800b1c8:	f7f7 fbc2 	bl	8002950 <_sbrk>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d102      	bne.n	800b1d6 <_sbrk_r+0x1a>
 800b1d0:	6823      	ldr	r3, [r4, #0]
 800b1d2:	b103      	cbz	r3, 800b1d6 <_sbrk_r+0x1a>
 800b1d4:	602b      	str	r3, [r5, #0]
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	20000984 	.word	0x20000984

0800b1dc <__sread>:
 800b1dc:	b510      	push	{r4, lr}
 800b1de:	460c      	mov	r4, r1
 800b1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e4:	f000 f896 	bl	800b314 <_read_r>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	bfab      	itete	ge
 800b1ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b1ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b1f0:	181b      	addge	r3, r3, r0
 800b1f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b1f6:	bfac      	ite	ge
 800b1f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b1fa:	81a3      	strhlt	r3, [r4, #12]
 800b1fc:	bd10      	pop	{r4, pc}

0800b1fe <__swrite>:
 800b1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b202:	461f      	mov	r7, r3
 800b204:	898b      	ldrh	r3, [r1, #12]
 800b206:	05db      	lsls	r3, r3, #23
 800b208:	4605      	mov	r5, r0
 800b20a:	460c      	mov	r4, r1
 800b20c:	4616      	mov	r6, r2
 800b20e:	d505      	bpl.n	800b21c <__swrite+0x1e>
 800b210:	2302      	movs	r3, #2
 800b212:	2200      	movs	r2, #0
 800b214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b218:	f000 f868 	bl	800b2ec <_lseek_r>
 800b21c:	89a3      	ldrh	r3, [r4, #12]
 800b21e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b226:	81a3      	strh	r3, [r4, #12]
 800b228:	4632      	mov	r2, r6
 800b22a:	463b      	mov	r3, r7
 800b22c:	4628      	mov	r0, r5
 800b22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b232:	f000 b817 	b.w	800b264 <_write_r>

0800b236 <__sseek>:
 800b236:	b510      	push	{r4, lr}
 800b238:	460c      	mov	r4, r1
 800b23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b23e:	f000 f855 	bl	800b2ec <_lseek_r>
 800b242:	1c43      	adds	r3, r0, #1
 800b244:	89a3      	ldrh	r3, [r4, #12]
 800b246:	bf15      	itete	ne
 800b248:	6560      	strne	r0, [r4, #84]	; 0x54
 800b24a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b24e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b252:	81a3      	strheq	r3, [r4, #12]
 800b254:	bf18      	it	ne
 800b256:	81a3      	strhne	r3, [r4, #12]
 800b258:	bd10      	pop	{r4, pc}

0800b25a <__sclose>:
 800b25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b25e:	f000 b813 	b.w	800b288 <_close_r>
	...

0800b264 <_write_r>:
 800b264:	b538      	push	{r3, r4, r5, lr}
 800b266:	4c07      	ldr	r4, [pc, #28]	; (800b284 <_write_r+0x20>)
 800b268:	4605      	mov	r5, r0
 800b26a:	4608      	mov	r0, r1
 800b26c:	4611      	mov	r1, r2
 800b26e:	2200      	movs	r2, #0
 800b270:	6022      	str	r2, [r4, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	f7f7 fb1b 	bl	80028ae <_write>
 800b278:	1c43      	adds	r3, r0, #1
 800b27a:	d102      	bne.n	800b282 <_write_r+0x1e>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	b103      	cbz	r3, 800b282 <_write_r+0x1e>
 800b280:	602b      	str	r3, [r5, #0]
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	20000984 	.word	0x20000984

0800b288 <_close_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4c06      	ldr	r4, [pc, #24]	; (800b2a4 <_close_r+0x1c>)
 800b28c:	2300      	movs	r3, #0
 800b28e:	4605      	mov	r5, r0
 800b290:	4608      	mov	r0, r1
 800b292:	6023      	str	r3, [r4, #0]
 800b294:	f7f7 fb27 	bl	80028e6 <_close>
 800b298:	1c43      	adds	r3, r0, #1
 800b29a:	d102      	bne.n	800b2a2 <_close_r+0x1a>
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	b103      	cbz	r3, 800b2a2 <_close_r+0x1a>
 800b2a0:	602b      	str	r3, [r5, #0]
 800b2a2:	bd38      	pop	{r3, r4, r5, pc}
 800b2a4:	20000984 	.word	0x20000984

0800b2a8 <_fstat_r>:
 800b2a8:	b538      	push	{r3, r4, r5, lr}
 800b2aa:	4c07      	ldr	r4, [pc, #28]	; (800b2c8 <_fstat_r+0x20>)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	4605      	mov	r5, r0
 800b2b0:	4608      	mov	r0, r1
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	6023      	str	r3, [r4, #0]
 800b2b6:	f7f7 fb22 	bl	80028fe <_fstat>
 800b2ba:	1c43      	adds	r3, r0, #1
 800b2bc:	d102      	bne.n	800b2c4 <_fstat_r+0x1c>
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	b103      	cbz	r3, 800b2c4 <_fstat_r+0x1c>
 800b2c2:	602b      	str	r3, [r5, #0]
 800b2c4:	bd38      	pop	{r3, r4, r5, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20000984 	.word	0x20000984

0800b2cc <_isatty_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4c06      	ldr	r4, [pc, #24]	; (800b2e8 <_isatty_r+0x1c>)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	4605      	mov	r5, r0
 800b2d4:	4608      	mov	r0, r1
 800b2d6:	6023      	str	r3, [r4, #0]
 800b2d8:	f7f7 fb21 	bl	800291e <_isatty>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	d102      	bne.n	800b2e6 <_isatty_r+0x1a>
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	b103      	cbz	r3, 800b2e6 <_isatty_r+0x1a>
 800b2e4:	602b      	str	r3, [r5, #0]
 800b2e6:	bd38      	pop	{r3, r4, r5, pc}
 800b2e8:	20000984 	.word	0x20000984

0800b2ec <_lseek_r>:
 800b2ec:	b538      	push	{r3, r4, r5, lr}
 800b2ee:	4c07      	ldr	r4, [pc, #28]	; (800b30c <_lseek_r+0x20>)
 800b2f0:	4605      	mov	r5, r0
 800b2f2:	4608      	mov	r0, r1
 800b2f4:	4611      	mov	r1, r2
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	6022      	str	r2, [r4, #0]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	f7f7 fb1a 	bl	8002934 <_lseek>
 800b300:	1c43      	adds	r3, r0, #1
 800b302:	d102      	bne.n	800b30a <_lseek_r+0x1e>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	b103      	cbz	r3, 800b30a <_lseek_r+0x1e>
 800b308:	602b      	str	r3, [r5, #0]
 800b30a:	bd38      	pop	{r3, r4, r5, pc}
 800b30c:	20000984 	.word	0x20000984

0800b310 <__malloc_lock>:
 800b310:	4770      	bx	lr

0800b312 <__malloc_unlock>:
 800b312:	4770      	bx	lr

0800b314 <_read_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4c07      	ldr	r4, [pc, #28]	; (800b334 <_read_r+0x20>)
 800b318:	4605      	mov	r5, r0
 800b31a:	4608      	mov	r0, r1
 800b31c:	4611      	mov	r1, r2
 800b31e:	2200      	movs	r2, #0
 800b320:	6022      	str	r2, [r4, #0]
 800b322:	461a      	mov	r2, r3
 800b324:	f7f7 faa6 	bl	8002874 <_read>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d102      	bne.n	800b332 <_read_r+0x1e>
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	b103      	cbz	r3, 800b332 <_read_r+0x1e>
 800b330:	602b      	str	r3, [r5, #0]
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	20000984 	.word	0x20000984

0800b338 <_init>:
 800b338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33a:	bf00      	nop
 800b33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b33e:	bc08      	pop	{r3}
 800b340:	469e      	mov	lr, r3
 800b342:	4770      	bx	lr

0800b344 <_fini>:
 800b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b346:	bf00      	nop
 800b348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b34a:	bc08      	pop	{r3}
 800b34c:	469e      	mov	lr, r3
 800b34e:	4770      	bx	lr
