
lab02_ping_pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e0a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b60  0800e274  0800e274  0001e274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdd4  0800fdd4  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdd4  0800fdd4  0001fdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fddc  0800fddc  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fddc  0800fddc  0001fddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fde0  0800fde0  0001fde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800fde4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad8  200000a4  0800fe88  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  0800fe88  00020b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aad3  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c3a  00000000  00000000  0004aba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002680  00000000  00000000  0004f7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002430  00000000  00000000  00051e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ecb0  00000000  00000000  00054298  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fae9  00000000  00000000  00082f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00118080  00000000  00000000  000a2a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001baab1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aabc  00000000  00000000  001bab2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  001c55e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001c560c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e25c 	.word	0x0800e25c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	0800e25c 	.word	0x0800e25c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b5b0      	push	{r4, r5, r7, lr}
 8000d9e:	b0a8      	sub	sp, #160	; 0xa0
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da2:	f002 feaa 	bl	8003afa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da6:	f000 fb93 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000daa:	f001 fbb3 	bl	8002514 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000dae:	f000 fc4f 	bl	8001650 <MX_ADC3_Init>
  MX_DCMI_Init();
 8000db2:	f000 fc9f 	bl	80016f4 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000db6:	f000 fcd1 	bl	800175c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000dba:	f001 fb5b 	bl	8002474 <MX_FMC_Init>
  MX_I2C1_Init();
 8000dbe:	f000 fcff 	bl	80017c0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000dc2:	f000 fd3d 	bl	8001840 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000dc6:	f000 fd7b 	bl	80018c0 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000dca:	f000 fe2f 	bl	8001a2c <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000dce:	f000 fe59 	bl	8001a84 <MX_RTC_Init>
  MX_SAI2_Init();
 8000dd2:	f000 fefd 	bl	8001bd0 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8000dd6:	f000 ffa3 	bl	8001d20 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000dda:	f000 ffd1 	bl	8001d80 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000dde:	f000 ffff 	bl	8001de0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000de2:	f001 f83b 	bl	8001e5c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000de6:	f001 f8e5 	bl	8001fb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dea:	f001 f959 	bl	80020a0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000dee:	f001 f9cf 	bl	8002190 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000df2:	f001 fa45 	bl	8002280 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000df6:	f001 fa97 	bl	8002328 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000dfa:	f001 fadb 	bl	80023b4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000dfe:	f001 fb09 	bl	8002414 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the LCD
  BSP_SDRAM_Init();
 8000e02:	f00b fea7 	bl	800cb54 <BSP_SDRAM_Init>
  BSP_LCD_Init();
 8000e06:	f00a ff49 	bl	800bc9c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000e0a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f00a ffdc 	bl	800bdcc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f00b f839 	bl	800be8c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000e1a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e1e:	f00b f8a7 	bl	800bf70 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000e22:	f04f 30ff 	mov.w	r0, #4294967295
 8000e26:	f00b f841 	bl	800beac <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000e2a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e2e:	f00b f855 	bl	800bedc <BSP_LCD_SetBackColor>
  // Set font size
  BSP_LCD_SetFont(&Font24);
 8000e32:	48c7      	ldr	r0, [pc, #796]	; (8001150 <main+0x3b4>)
 8000e34:	f00b f86c 	bl	800bf10 <BSP_LCD_SetFont>
  
  /** Initialize the board **/
  int speed = 5;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int access_0 = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int access_2 = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  // Touch screen
  int screen_width = 480;
 8000e4a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  int screen_height = 272;
 8000e50:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000e54:	66bb      	str	r3, [r7, #104]	; 0x68
  BSP_TS_Init(screen_width, screen_height);
 8000e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000e5c:	b292      	uxth	r2, r2
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00c f82d 	bl	800cec0 <BSP_TS_Init>
  // Drawing parameters
  int ball_radius = 5;
 8000e66:	2305      	movs	r3, #5
 8000e68:	667b      	str	r3, [r7, #100]	; 0x64
  int paddle_width = 5;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	663b      	str	r3, [r7, #96]	; 0x60
  int paddle_height = 60;
 8000e6e:	233c      	movs	r3, #60	; 0x3c
 8000e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  // Default position of the ball
  int center_x = 240;
 8000e72:	23f0      	movs	r3, #240	; 0xf0
 8000e74:	65bb      	str	r3, [r7, #88]	; 0x58
  int center_y = 136;
 8000e76:	2388      	movs	r3, #136	; 0x88
 8000e78:	657b      	str	r3, [r7, #84]	; 0x54
  int point_L = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int point_R = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int ball_x_last = center_x;
 8000e86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int ball_y_last = center_y;
 8000e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  // String buffer
  char str[32];
  
  // Random displacement
  int distance_x, distance_y;
  srand(time(NULL));
 8000e92:	2000      	movs	r0, #0
 8000e94:	f00c fdc0 	bl	800da18 <time>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	460c      	mov	r4, r1
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f00c fd43 	bl	800d928 <srand>
  distance_x = (rand() % 2) + 1;
 8000ea2:	f00c fd65 	bl	800d970 <rand>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	bfb8      	it	lt
 8000eb0:	425b      	neglt	r3, r3
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  distance_y = (rand() % 2) + 1;
 8000eb8:	f00c fd5a 	bl	800d970 <rand>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	bfb8      	it	lt
 8000ec6:	425b      	neglt	r3, r3
 8000ec8:	3301      	adds	r3, #1
 8000eca:	67fb      	str	r3, [r7, #124]	; 0x7c

  // Set time stamp
  // HAL_GetTick() provides a tick value in millisecond.
  uint32_t tick_current;
  // The previous tick refreshes touched coordinates.
  uint32_t tk_record_0 = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t tk_record_1 = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	677b      	str	r3, [r7, #116]	; 0x74
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (mode == 0) {
 8000ed4:	4b9f      	ldr	r3, [pc, #636]	; (8001154 <main+0x3b8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d13f      	bne.n	8000f5c <main+0x1c0>
      if(access_0 == 0) {
 8000edc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d106      	bne.n	8000ef2 <main+0x156>
        BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000ee4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ee8:	f00b f842 	bl	800bf70 <BSP_LCD_Clear>
        access_0 = 1;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }
      sprintf(str, "        THE PONG GAME  ");
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4a98      	ldr	r2, [pc, #608]	; (8001158 <main+0x3bc>)
 8000ef6:	461c      	mov	r4, r3
 8000ef8:	4615      	mov	r5, r2
 8000efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000efe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f02:	e884 0003 	stmia.w	r4, {r0, r1}
      BSP_LCD_DisplayStringAtLine(5, (uint8_t*) str);
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	2005      	movs	r0, #5
 8000f0c:	f00b f960 	bl	800c1d0 <BSP_LCD_DisplayStringAtLine>
      ball.x = center_x;
 8000f10:	4a92      	ldr	r2, [pc, #584]	; (800115c <main+0x3c0>)
 8000f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f14:	6013      	str	r3, [r2, #0]
      ball.y = center_y;
 8000f16:	4a91      	ldr	r2, [pc, #580]	; (800115c <main+0x3c0>)
 8000f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f1a:	6053      	str	r3, [r2, #4]
      // Default position of paddles
      paddle_L.x = 30;
 8000f1c:	4b90      	ldr	r3, [pc, #576]	; (8001160 <main+0x3c4>)
 8000f1e:	221e      	movs	r2, #30
 8000f20:	601a      	str	r2, [r3, #0]
      paddle_L.y = screen_height / 2;
 8000f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	da00      	bge.n	8000f2a <main+0x18e>
 8000f28:	3301      	adds	r3, #1
 8000f2a:	105b      	asrs	r3, r3, #1
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b8c      	ldr	r3, [pc, #560]	; (8001160 <main+0x3c4>)
 8000f30:	605a      	str	r2, [r3, #4]
      paddle_R.x = 450;
 8000f32:	4b8c      	ldr	r3, [pc, #560]	; (8001164 <main+0x3c8>)
 8000f34:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000f38:	601a      	str	r2, [r3, #0]
      paddle_R.y = screen_height / 2;
 8000f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	da00      	bge.n	8000f42 <main+0x1a6>
 8000f40:	3301      	adds	r3, #1
 8000f42:	105b      	asrs	r3, r3, #1
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b87      	ldr	r3, [pc, #540]	; (8001164 <main+0x3c8>)
 8000f48:	605a      	str	r2, [r3, #4]
      point_L = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      point_R = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      access_2 = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    }

    if (mode == 1) {
 8000f5c:	4b7d      	ldr	r3, [pc, #500]	; (8001154 <main+0x3b8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d156      	bne.n	8001012 <main+0x276>
      // sprintf(str, "Mode: %d", mode);
      // BSP_LCD_DisplayStringAtLine(0, (uint8_t*) str);
      sprintf(str, "           SPEED      ");
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	4a80      	ldr	r2, [pc, #512]	; (8001168 <main+0x3cc>)
 8000f68:	461c      	mov	r4, r3
 8000f6a:	4615      	mov	r5, r2
 8000f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f74:	6020      	str	r0, [r4, #0]
 8000f76:	3404      	adds	r4, #4
 8000f78:	8021      	strh	r1, [r4, #0]
 8000f7a:	3402      	adds	r4, #2
 8000f7c:	0c0b      	lsrs	r3, r1, #16
 8000f7e:	7023      	strb	r3, [r4, #0]
      BSP_LCD_DisplayStringAtLine(3, (uint8_t*) str);
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	4619      	mov	r1, r3
 8000f84:	2003      	movs	r0, #3
 8000f86:	f00b f923 	bl	800c1d0 <BSP_LCD_DisplayStringAtLine>
      sprintf(str, "          - %2d  +    ", speed);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000f90:	4976      	ldr	r1, [pc, #472]	; (800116c <main+0x3d0>)
 8000f92:	4618      	mov	r0, r3
 8000f94:	f00c fd20 	bl	800d9d8 <siprintf>
      BSP_LCD_DisplayStringAtLine(5, (uint8_t*) str);
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f00b f917 	bl	800c1d0 <BSP_LCD_DisplayStringAtLine>
      tick_current = HAL_GetTick();
 8000fa2:	f002 fdcb 	bl	8003b3c <HAL_GetTick>
 8000fa6:	6538      	str	r0, [r7, #80]	; 0x50
      if (tick_current - tk_record_0 > 100) {
 8000fa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d92f      	bls.n	8001012 <main+0x276>
        tk_record_0 = tick_current;
 8000fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fb4:	67bb      	str	r3, [r7, #120]	; 0x78
        BSP_TS_GetState(&TS_State);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f00b ffc0 	bl	800cf40 <BSP_TS_GetState>
        if (TS_State.touchDetected) {
 8000fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d024      	beq.n	8001012 <main+0x276>
          if (TS_State.touchX[0] != 0) {
 8000fc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d021      	beq.n	8001012 <main+0x276>
            if (TS_State.touchX[0] <= (screen_width / 2)) {
 8000fce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	da00      	bge.n	8000fda <main+0x23e>
 8000fd8:	3301      	adds	r3, #1
 8000fda:	105b      	asrs	r3, r3, #1
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dc0c      	bgt.n	8000ffa <main+0x25e>
              speed = speed - 1;
 8000fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
              if (speed < 1) {
 8000fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	dc0f      	bgt.n	8001012 <main+0x276>
                speed = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000ff8:	e00b      	b.n	8001012 <main+0x276>
              }
            }
            else {
              speed = speed + 1;
 8000ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ffe:	3301      	adds	r3, #1
 8001000:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
              if (speed > 10) {
 8001004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001008:	2b0a      	cmp	r3, #10
 800100a:	dd02      	ble.n	8001012 <main+0x276>
                speed = 10;
 800100c:	230a      	movs	r3, #10
 800100e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
          }
        }
      }
    }

    if (mode == 2) {
 8001012:	4b50      	ldr	r3, [pc, #320]	; (8001154 <main+0x3b8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b02      	cmp	r3, #2
 8001018:	f47f af5c 	bne.w	8000ed4 <main+0x138>
      if (access_2 == 0) {
 800101c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001020:	2b00      	cmp	r3, #0
 8001022:	d109      	bne.n	8001038 <main+0x29c>
        BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001024:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001028:	f00a ffa2 	bl	800bf70 <BSP_LCD_Clear>
        access_0 = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        access_2 = 1;
 8001032:	2301      	movs	r3, #1
 8001034:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      /** User input **/
      tick_current = HAL_GetTick();
 8001038:	f002 fd80 	bl	8003b3c <HAL_GetTick>
 800103c:	6538      	str	r0, [r7, #80]	; 0x50
      if (tick_current - tk_record_1 > 50) {
 800103e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b32      	cmp	r3, #50	; 0x32
 8001046:	f240 80c2 	bls.w	80011ce <main+0x432>
        tk_record_1 = tick_current;
 800104a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800104c:	677b      	str	r3, [r7, #116]	; 0x74
        // Poll the state touch screen
        BSP_TS_GetState(&TS_State);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4618      	mov	r0, r3
 8001054:	f00b ff74 	bl	800cf40 <BSP_TS_GetState>
        // The touch screen on the board is multi-touch
        if (TS_State.touchDetected) {
 8001058:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 80b6 	beq.w	80011ce <main+0x432>
          for (uint8_t i = 0; i < 2; i++) {
 8001062:	2300      	movs	r3, #0
 8001064:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8001068:	e0ac      	b.n	80011c4 <main+0x428>
            if (TS_State.touchY[i] <= paddle_height / 2) {
 800106a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800106e:	3304      	adds	r3, #4
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001076:	4413      	add	r3, r2
 8001078:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 800107c:	461a      	mov	r2, r3
 800107e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001080:	2b00      	cmp	r3, #0
 8001082:	da00      	bge.n	8001086 <main+0x2ea>
 8001084:	3301      	adds	r3, #1
 8001086:	105b      	asrs	r3, r3, #1
 8001088:	429a      	cmp	r2, r3
 800108a:	dc10      	bgt.n	80010ae <main+0x312>
              TS_State.touchY[i] = paddle_height / 2;
 800108c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800108e:	2b00      	cmp	r3, #0
 8001090:	da00      	bge.n	8001094 <main+0x2f8>
 8001092:	3301      	adds	r3, #1
 8001094:	105b      	asrs	r3, r3, #1
 8001096:	461a      	mov	r2, r3
 8001098:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800109c:	b292      	uxth	r2, r2
 800109e:	3304      	adds	r3, #4
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80010a6:	440b      	add	r3, r1
 80010a8:	f823 2c78 	strh.w	r2, [r3, #-120]
 80010ac:	e028      	b.n	8001100 <main+0x364>
            }
            else if (TS_State.touchY[i] >= screen_height - paddle_height / 2) {
 80010ae:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80010b2:	3304      	adds	r3, #4
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80010ba:	4413      	add	r3, r2
 80010bc:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 80010c0:	461a      	mov	r2, r3
 80010c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	da00      	bge.n	80010ca <main+0x32e>
 80010c8:	3301      	adds	r3, #1
 80010ca:	105b      	asrs	r3, r3, #1
 80010cc:	425b      	negs	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010d2:	440b      	add	r3, r1
 80010d4:	429a      	cmp	r2, r3
 80010d6:	db13      	blt.n	8001100 <main+0x364>
              TS_State.touchY[i] = screen_height - paddle_height / 2;
 80010d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010da:	2b00      	cmp	r3, #0
 80010dc:	da00      	bge.n	80010e0 <main+0x344>
 80010de:	3301      	adds	r3, #1
 80010e0:	105b      	asrs	r3, r3, #1
 80010e2:	425b      	negs	r3, r3
 80010e4:	b299      	uxth	r1, r3
 80010e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80010ee:	440a      	add	r2, r1
 80010f0:	b292      	uxth	r2, r2
 80010f2:	3304      	adds	r3, #4
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80010fa:	440b      	add	r3, r1
 80010fc:	f823 2c78 	strh.w	r2, [r3, #-120]
            }
            if (TS_State.touchX[i] != 0) {
 8001100:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800110a:	4413      	add	r3, r2
 800110c:	f833 3c7a 	ldrh.w	r3, [r3, #-122]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d039      	beq.n	8001188 <main+0x3ec>
              if (TS_State.touchX[i] <= (screen_width / 2)) {
 8001114:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800111e:	4413      	add	r3, r2
 8001120:	f833 3c7a 	ldrh.w	r3, [r3, #-122]
 8001124:	461a      	mov	r2, r3
 8001126:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001128:	2b00      	cmp	r3, #0
 800112a:	da00      	bge.n	800112e <main+0x392>
 800112c:	3301      	adds	r3, #1
 800112e:	105b      	asrs	r3, r3, #1
 8001130:	429a      	cmp	r2, r3
 8001132:	dc1d      	bgt.n	8001170 <main+0x3d4>
                paddle_L.y = TS_State.touchY[i];
 8001134:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001138:	3304      	adds	r3, #4
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001140:	4413      	add	r3, r2
 8001142:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8001146:	461a      	mov	r2, r3
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <main+0x3c4>)
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	e01c      	b.n	8001188 <main+0x3ec>
 800114e:	bf00      	nop
 8001150:	2000000c 	.word	0x2000000c
 8001154:	200000c0 	.word	0x200000c0
 8001158:	0800e274 	.word	0x0800e274
 800115c:	20000950 	.word	0x20000950
 8001160:	20000888 	.word	0x20000888
 8001164:	20000840 	.word	0x20000840
 8001168:	0800e28c 	.word	0x0800e28c
 800116c:	0800e2a4 	.word	0x0800e2a4
              }
              else {
                paddle_R.y = TS_State.touchY[i];
 8001170:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001174:	3304      	adds	r3, #4
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800117c:	4413      	add	r3, r2
 800117e:	f833 3c78 	ldrh.w	r3, [r3, #-120]
 8001182:	461a      	mov	r2, r3
 8001184:	4bb8      	ldr	r3, [pc, #736]	; (8001468 <main+0x6cc>)
 8001186:	605a      	str	r2, [r3, #4]
              }
            }
            // Reset the displayed coordinates if the screen is untouched
            TS_State.touchX[i] = TS_State.touchY[i] = 0;
 8001188:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800118c:	1d13      	adds	r3, r2, #4
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001194:	440b      	add	r3, r1
 8001196:	2100      	movs	r1, #0
 8001198:	f823 1c78 	strh.w	r1, [r3, #-120]
 800119c:	f897 1073 	ldrb.w	r1, [r7, #115]	; 0x73
 80011a0:	1d13      	adds	r3, r2, #4
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80011a8:	4413      	add	r3, r2
 80011aa:	f833 2c78 	ldrh.w	r2, [r3, #-120]
 80011ae:	004b      	lsls	r3, r1, #1
 80011b0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80011b4:	440b      	add	r3, r1
 80011b6:	f823 2c7a 	strh.w	r2, [r3, #-122]
          for (uint8_t i = 0; i < 2; i++) {
 80011ba:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80011be:	3301      	adds	r3, #1
 80011c0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80011c4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	f67f af4e 	bls.w	800106a <main+0x2ce>
        }
      }

      /** Logic of the game **/
      // change the speed of the ball
      ball.x = ball.x + distance_x * speed * 0.5;
 80011ce:	4ba7      	ldr	r3, [pc, #668]	; (800146c <main+0x6d0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9be 	bl	8000554 <__aeabi_i2d>
 80011d8:	4604      	mov	r4, r0
 80011da:	460d      	mov	r5, r1
 80011dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011e0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f9b3 	bl	8000554 <__aeabi_i2d>
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b9f      	ldr	r3, [pc, #636]	; (8001470 <main+0x6d4>)
 80011f4:	f7ff fa18 	bl	8000628 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4620      	mov	r0, r4
 80011fe:	4629      	mov	r1, r5
 8001200:	f7ff f85c 	bl	80002bc <__adddf3>
 8001204:	4603      	mov	r3, r0
 8001206:	460c      	mov	r4, r1
 8001208:	4618      	mov	r0, r3
 800120a:	4621      	mov	r1, r4
 800120c:	f7ff fc1e 	bl	8000a4c <__aeabi_d2iz>
 8001210:	4602      	mov	r2, r0
 8001212:	4b96      	ldr	r3, [pc, #600]	; (800146c <main+0x6d0>)
 8001214:	601a      	str	r2, [r3, #0]
      ball.y = ball.y + distance_y * speed * 0.5;
 8001216:	4b95      	ldr	r3, [pc, #596]	; (800146c <main+0x6d0>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f99a 	bl	8000554 <__aeabi_i2d>
 8001220:	4604      	mov	r4, r0
 8001222:	460d      	mov	r5, r1
 8001224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001226:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800122a:	fb02 f303 	mul.w	r3, r2, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f990 	bl	8000554 <__aeabi_i2d>
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b8d      	ldr	r3, [pc, #564]	; (8001470 <main+0x6d4>)
 800123a:	f7ff f9f5 	bl	8000628 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4620      	mov	r0, r4
 8001244:	4629      	mov	r1, r5
 8001246:	f7ff f839 	bl	80002bc <__adddf3>
 800124a:	4603      	mov	r3, r0
 800124c:	460c      	mov	r4, r1
 800124e:	4618      	mov	r0, r3
 8001250:	4621      	mov	r1, r4
 8001252:	f7ff fbfb 	bl	8000a4c <__aeabi_d2iz>
 8001256:	4602      	mov	r2, r0
 8001258:	4b84      	ldr	r3, [pc, #528]	; (800146c <main+0x6d0>)
 800125a:	605a      	str	r2, [r3, #4]
      // sprintf(str, "x: %03d, y: %03d", ball.x, ball.y);
      // BSP_LCD_DisplayStringAtLine(0, (uint8_t*) str);
      
      // the ball meets the upper and lower bounds
      if (ball.y <= 10 || ball.y >= screen_height - 10) {
 800125c:	4b83      	ldr	r3, [pc, #524]	; (800146c <main+0x6d0>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b0a      	cmp	r3, #10
 8001262:	dd05      	ble.n	8001270 <main+0x4d4>
 8001264:	4b81      	ldr	r3, [pc, #516]	; (800146c <main+0x6d0>)
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800126a:	3b0a      	subs	r3, #10
 800126c:	429a      	cmp	r2, r3
 800126e:	db02      	blt.n	8001276 <main+0x4da>
        distance_y = -1 * distance_y;
 8001270:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001272:	425b      	negs	r3, r3
 8001274:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      // the ball meets the left paddle
      if ((ball.x >= paddle_L.x + 5) && (ball.x <= paddle_L.x + 10)) {
 8001276:	4b7d      	ldr	r3, [pc, #500]	; (800146c <main+0x6d0>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b7e      	ldr	r3, [pc, #504]	; (8001474 <main+0x6d8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3305      	adds	r3, #5
 8001280:	429a      	cmp	r2, r3
 8001282:	db26      	blt.n	80012d2 <main+0x536>
 8001284:	4b79      	ldr	r3, [pc, #484]	; (800146c <main+0x6d0>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b7a      	ldr	r3, [pc, #488]	; (8001474 <main+0x6d8>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	330a      	adds	r3, #10
 800128e:	429a      	cmp	r2, r3
 8001290:	dc1f      	bgt.n	80012d2 <main+0x536>
        if ((ball.y + 5 > paddle_L.y - paddle_height / 2) && (ball.y - 5 < paddle_L.y + paddle_height / 2)) {
 8001292:	4b76      	ldr	r3, [pc, #472]	; (800146c <main+0x6d0>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	1d5a      	adds	r2, r3, #5
 8001298:	4b76      	ldr	r3, [pc, #472]	; (8001474 <main+0x6d8>)
 800129a:	6859      	ldr	r1, [r3, #4]
 800129c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	da00      	bge.n	80012a4 <main+0x508>
 80012a2:	3301      	adds	r3, #1
 80012a4:	105b      	asrs	r3, r3, #1
 80012a6:	425b      	negs	r3, r3
 80012a8:	440b      	add	r3, r1
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dd11      	ble.n	80012d2 <main+0x536>
 80012ae:	4b6f      	ldr	r3, [pc, #444]	; (800146c <main+0x6d0>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	1f5a      	subs	r2, r3, #5
 80012b4:	4b6f      	ldr	r3, [pc, #444]	; (8001474 <main+0x6d8>)
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	da00      	bge.n	80012c0 <main+0x524>
 80012be:	3301      	adds	r3, #1
 80012c0:	105b      	asrs	r3, r3, #1
 80012c2:	440b      	add	r3, r1
 80012c4:	429a      	cmp	r2, r3
 80012c6:	da04      	bge.n	80012d2 <main+0x536>
          distance_x = -1 * distance_x;
 80012c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80012cc:	425b      	negs	r3, r3
 80012ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }
      }
      // the ball meets the right paddle
      if ((ball.x >= paddle_R.x - 10) && (ball.x <= paddle_R.x - 5)) {
 80012d2:	4b66      	ldr	r3, [pc, #408]	; (800146c <main+0x6d0>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b64      	ldr	r3, [pc, #400]	; (8001468 <main+0x6cc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3b0a      	subs	r3, #10
 80012dc:	429a      	cmp	r2, r3
 80012de:	db26      	blt.n	800132e <main+0x592>
 80012e0:	4b62      	ldr	r3, [pc, #392]	; (800146c <main+0x6d0>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b60      	ldr	r3, [pc, #384]	; (8001468 <main+0x6cc>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3b05      	subs	r3, #5
 80012ea:	429a      	cmp	r2, r3
 80012ec:	dc1f      	bgt.n	800132e <main+0x592>
        if ((ball.y + 5 > paddle_R.y - paddle_height / 2) && (ball.y - 5  < paddle_R.y + paddle_height / 2)) {
 80012ee:	4b5f      	ldr	r3, [pc, #380]	; (800146c <main+0x6d0>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	1d5a      	adds	r2, r3, #5
 80012f4:	4b5c      	ldr	r3, [pc, #368]	; (8001468 <main+0x6cc>)
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da00      	bge.n	8001300 <main+0x564>
 80012fe:	3301      	adds	r3, #1
 8001300:	105b      	asrs	r3, r3, #1
 8001302:	425b      	negs	r3, r3
 8001304:	440b      	add	r3, r1
 8001306:	429a      	cmp	r2, r3
 8001308:	dd11      	ble.n	800132e <main+0x592>
 800130a:	4b58      	ldr	r3, [pc, #352]	; (800146c <main+0x6d0>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	1f5a      	subs	r2, r3, #5
 8001310:	4b55      	ldr	r3, [pc, #340]	; (8001468 <main+0x6cc>)
 8001312:	6859      	ldr	r1, [r3, #4]
 8001314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001316:	2b00      	cmp	r3, #0
 8001318:	da00      	bge.n	800131c <main+0x580>
 800131a:	3301      	adds	r3, #1
 800131c:	105b      	asrs	r3, r3, #1
 800131e:	440b      	add	r3, r1
 8001320:	429a      	cmp	r2, r3
 8001322:	da04      	bge.n	800132e <main+0x592>
          distance_x = -1 * distance_x;
 8001324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001328:	425b      	negs	r3, r3
 800132a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }
      }

      // out of the left bounds
      if (ball.x <= 0) {
 800132e:	4b4f      	ldr	r3, [pc, #316]	; (800146c <main+0x6d0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	dc25      	bgt.n	8001382 <main+0x5e6>
        point_R = point_R + 1;
 8001336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800133a:	3301      	adds	r3, #1
 800133c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        ball.x = center_x;
 8001340:	4a4a      	ldr	r2, [pc, #296]	; (800146c <main+0x6d0>)
 8001342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001344:	6013      	str	r3, [r2, #0]
        ball.y = center_y;
 8001346:	4a49      	ldr	r2, [pc, #292]	; (800146c <main+0x6d0>)
 8001348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134a:	6053      	str	r3, [r2, #4]
        distance_x = -1 * distance_x;
 800134c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001350:	425b      	negs	r3, r3
 8001352:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        distance_y = -(2 * ((rand() % 2) + 1) - 2);
 8001356:	f00c fb0b 	bl	800d970 <rand>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	bfb8      	it	lt
 8001364:	425b      	neglt	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	4613      	mov	r3, r2
 800136a:	07db      	lsls	r3, r3, #31
 800136c:	1a9b      	subs	r3, r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	67fb      	str	r3, [r7, #124]	; 0x7c
        if (distance_y == 0) {
 8001372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <main+0x5e0>
          distance_y = 1;
 8001378:	2301      	movs	r3, #1
 800137a:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        HAL_Delay(200);
 800137c:	20c8      	movs	r0, #200	; 0xc8
 800137e:	f002 fbe9 	bl	8003b54 <HAL_Delay>
      }

      // out of the right bounds
      if (ball.x >= screen_width) {
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <main+0x6d0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001388:	429a      	cmp	r2, r3
 800138a:	dc25      	bgt.n	80013d8 <main+0x63c>
        point_L = point_L + 1;
 800138c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001390:	3301      	adds	r3, #1
 8001392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        ball.x = center_x;
 8001396:	4a35      	ldr	r2, [pc, #212]	; (800146c <main+0x6d0>)
 8001398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800139a:	6013      	str	r3, [r2, #0]
        ball.y = center_y;
 800139c:	4a33      	ldr	r2, [pc, #204]	; (800146c <main+0x6d0>)
 800139e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a0:	6053      	str	r3, [r2, #4]
        distance_x = -1 * distance_x;
 80013a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80013a6:	425b      	negs	r3, r3
 80013a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        distance_y = -(2 * ((rand() % 2) + 1) - 2);
 80013ac:	f00c fae0 	bl	800d970 <rand>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	bfb8      	it	lt
 80013ba:	425b      	neglt	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4613      	mov	r3, r2
 80013c0:	07db      	lsls	r3, r3, #31
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	67fb      	str	r3, [r7, #124]	; 0x7c
        if (distance_y == 0) {
 80013c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <main+0x636>
          distance_y = 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        HAL_Delay(200);
 80013d2:	20c8      	movs	r0, #200	; 0xc8
 80013d4:	f002 fbbe 	bl	8003b54 <HAL_Delay>
      }
      
      /** Drawing on the LCD **/
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013d8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013dc:	f00a fd66 	bl	800beac <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(ball_x_last, ball_y_last, ball_radius);
 80013e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80013ea:	b291      	uxth	r1, r2
 80013ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80013ee:	b292      	uxth	r2, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00b f915 	bl	800c620 <BSP_LCD_FillCircle>
      BSP_LCD_FillRect(paddle_L.x, 0, paddle_width, screen_height);
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <main+0x6d8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b298      	uxth	r0, r3
 80013fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013fe:	b29a      	uxth	r2, r3
 8001400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001402:	b29b      	uxth	r3, r3
 8001404:	2100      	movs	r1, #0
 8001406:	f00b f891 	bl	800c52c <BSP_LCD_FillRect>
      BSP_LCD_FillRect(paddle_R.x - 5, 0, paddle_width, screen_height);
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <main+0x6cc>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	3b05      	subs	r3, #5
 8001412:	b298      	uxth	r0, r3
 8001414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001416:	b29a      	uxth	r2, r3
 8001418:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800141a:	b29b      	uxth	r3, r3
 800141c:	2100      	movs	r1, #0
 800141e:	f00b f885 	bl	800c52c <BSP_LCD_FillRect>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001422:	f04f 30ff 	mov.w	r0, #4294967295
 8001426:	f00a fd41 	bl	800beac <BSP_LCD_SetTextColor>
      // Ball
      BSP_LCD_FillCircle(ball.x, ball.y, ball_radius);
 800142a:	4b10      	ldr	r3, [pc, #64]	; (800146c <main+0x6d0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b298      	uxth	r0, r3
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <main+0x6d0>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	b29b      	uxth	r3, r3
 8001436:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001438:	b292      	uxth	r2, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f00b f8f0 	bl	800c620 <BSP_LCD_FillCircle>
      // Left paddle
      BSP_LCD_FillRect(paddle_L.x, paddle_L.y - 30, paddle_width, paddle_height);
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <main+0x6d8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	b298      	uxth	r0, r3
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <main+0x6d8>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	b29b      	uxth	r3, r3
 800144c:	3b1e      	subs	r3, #30
 800144e:	b299      	uxth	r1, r3
 8001450:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001452:	b29a      	uxth	r2, r3
 8001454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001456:	b29b      	uxth	r3, r3
 8001458:	f00b f868 	bl	800c52c <BSP_LCD_FillRect>
      // Right paddle
      BSP_LCD_FillRect(paddle_R.x - 5, paddle_R.y - 30, paddle_width, paddle_height);
 800145c:	4b02      	ldr	r3, [pc, #8]	; (8001468 <main+0x6cc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	b29b      	uxth	r3, r3
 8001462:	3b05      	subs	r3, #5
 8001464:	e008      	b.n	8001478 <main+0x6dc>
 8001466:	bf00      	nop
 8001468:	20000840 	.word	0x20000840
 800146c:	20000950 	.word	0x20000950
 8001470:	3fe00000 	.word	0x3fe00000
 8001474:	20000888 	.word	0x20000888
 8001478:	b298      	uxth	r0, r3
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <main+0x728>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	b29b      	uxth	r3, r3
 8001480:	3b1e      	subs	r3, #30
 8001482:	b299      	uxth	r1, r3
 8001484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001486:	b29a      	uxth	r2, r3
 8001488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800148a:	b29b      	uxth	r3, r3
 800148c:	f00b f84e 	bl	800c52c <BSP_LCD_FillRect>
      // Counting the points
      sprintf(str, "%03d:%03d", point_L, point_R);
 8001490:	1d38      	adds	r0, r7, #4
 8001492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001496:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800149a:	490b      	ldr	r1, [pc, #44]	; (80014c8 <main+0x72c>)
 800149c:	f00c fa9c 	bl	800d9d8 <siprintf>
      BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) str, CENTER_MODE);
 80014a0:	1d3a      	adds	r2, r7, #4
 80014a2:	2301      	movs	r3, #1
 80014a4:	2100      	movs	r1, #0
 80014a6:	2000      	movs	r0, #0
 80014a8:	f00a fdce 	bl	800c048 <BSP_LCD_DisplayStringAt>
      /* Clear the LCD */
      HAL_Delay(15);
 80014ac:	200f      	movs	r0, #15
 80014ae:	f002 fb51 	bl	8003b54 <HAL_Delay>
      ball_x_last = ball.x;
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <main+0x730>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      ball_y_last = ball.y;
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <main+0x730>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (mode == 0) {
 80014c2:	e507      	b.n	8000ed4 <main+0x138>
 80014c4:	20000840 	.word	0x20000840
 80014c8:	0800e2bc 	.word	0x0800e2bc
 80014cc:	20000950 	.word	0x20000950

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0b4      	sub	sp, #208	; 0xd0
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014da:	2230      	movs	r2, #48	; 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f00c fa1a 	bl	800d918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	2284      	movs	r2, #132	; 0x84
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f00c fa0b 	bl	800d918 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001502:	f005 f89f 	bl	8006644 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b4f      	ldr	r3, [pc, #316]	; (8001644 <SystemClock_Config+0x174>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a4e      	ldr	r2, [pc, #312]	; (8001644 <SystemClock_Config+0x174>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <SystemClock_Config+0x174>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800151e:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <SystemClock_Config+0x178>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a49      	ldr	r2, [pc, #292]	; (8001648 <SystemClock_Config+0x178>)
 8001524:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <SystemClock_Config+0x178>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001536:	2309      	movs	r3, #9
 8001538:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800153c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001544:	2301      	movs	r3, #1
 8001546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001550:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001554:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001558:	2319      	movs	r3, #25
 800155a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800155e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001562:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800156c:	2309      	movs	r3, #9
 800156e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001572:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001576:	4618      	mov	r0, r3
 8001578:	f005 f986 	bl	8006888 <HAL_RCC_OscConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001582:	f001 f9f7 	bl	8002974 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001586:	f005 f86d 	bl	8006664 <HAL_PWREx_EnableOverDrive>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001590:	f001 f9f0 	bl	8002974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001594:	230f      	movs	r3, #15
 8001596:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2302      	movs	r3, #2
 800159c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80015b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015ba:	2106      	movs	r1, #6
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 fc07 	bl	8006dd0 <HAL_RCC_ClockConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80015c8:	f001 f9d4 	bl	8002974 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80015cc:	4b1f      	ldr	r3, [pc, #124]	; (800164c <SystemClock_Config+0x17c>)
 80015ce:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80015d8:	2302      	movs	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80015dc:	2302      	movs	r3, #2
 80015de:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80015e0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015e4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80015e6:	2305      	movs	r3, #5
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80015ea:	2302      	movs	r3, #2
 80015ec:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80015ee:	2303      	movs	r3, #3
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80015fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001604:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001606:	2300      	movs	r3, #0
 8001608:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800160a:	2300      	movs	r3, #0
 800160c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800160e:	2300      	movs	r3, #0
 8001610:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001612:	2300      	movs	r3, #0
 8001614:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001616:	2300      	movs	r3, #0
 8001618:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800161a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800161e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	4618      	mov	r0, r3
 800162e:	f005 fdd3 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8001638:	f001 f99c 	bl	8002974 <Error_Handler>
  }
}
 800163c:	bf00      	nop
 800163e:	37d0      	adds	r7, #208	; 0xd0
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40023800 	.word	0x40023800
 8001648:	40007000 	.word	0x40007000
 800164c:	01b14868 	.word	0x01b14868

08001650 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001656:	463b      	mov	r3, r7
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001662:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <MX_ADC3_Init+0x98>)
 8001664:	4a21      	ldr	r2, [pc, #132]	; (80016ec <MX_ADC3_Init+0x9c>)
 8001666:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001668:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <MX_ADC3_Init+0x98>)
 800166a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800166e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <MX_ADC3_Init+0x98>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001676:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_ADC3_Init+0x98>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_ADC3_Init+0x98>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_ADC3_Init+0x98>)
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168a:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_ADC3_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <MX_ADC3_Init+0x98>)
 8001692:	4a17      	ldr	r2, [pc, #92]	; (80016f0 <MX_ADC3_Init+0xa0>)
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_ADC3_Init+0x98>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_ADC3_Init+0x98>)
 800169e:	2201      	movs	r2, #1
 80016a0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_ADC3_Init+0x98>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_ADC3_Init+0x98>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <MX_ADC3_Init+0x98>)
 80016b2:	f002 fa71 	bl	8003b98 <HAL_ADC_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80016bc:	f001 f95a 	bl	8002974 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016c0:	2304      	movs	r3, #4
 80016c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c4:	2301      	movs	r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_ADC3_Init+0x98>)
 80016d2:	f002 faa5 	bl	8003c20 <HAL_ADC_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80016dc:	f001 f94a 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000708 	.word	0x20000708
 80016ec:	40012200 	.word	0x40012200
 80016f0:	0f000001 	.word	0x0f000001

080016f4 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_DCMI_Init+0x60>)
 80016fa:	4a17      	ldr	r2, [pc, #92]	; (8001758 <MX_DCMI_Init+0x64>)
 80016fc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <MX_DCMI_Init+0x60>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_DCMI_Init+0x60>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800170a:	4b12      	ldr	r3, [pc, #72]	; (8001754 <MX_DCMI_Init+0x60>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <MX_DCMI_Init+0x60>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_DCMI_Init+0x60>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <MX_DCMI_Init+0x60>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_DCMI_Init+0x60>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <MX_DCMI_Init+0x60>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_DCMI_Init+0x60>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <MX_DCMI_Init+0x60>)
 8001736:	2200      	movs	r2, #0
 8001738:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_DCMI_Init+0x60>)
 800173c:	2200      	movs	r2, #0
 800173e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <MX_DCMI_Init+0x60>)
 8001742:	f002 fd93 	bl	800426c <HAL_DCMI_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 800174c:	f001 f912 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000750 	.word	0x20000750
 8001758:	50050000 	.word	0x50050000

0800175c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <MX_DMA2D_Init+0x5c>)
 8001762:	4a16      	ldr	r2, [pc, #88]	; (80017bc <MX_DMA2D_Init+0x60>)
 8001764:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_DMA2D_Init+0x5c>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_DMA2D_Init+0x5c>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_DMA2D_Init+0x5c>)
 8001774:	2200      	movs	r2, #0
 8001776:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_DMA2D_Init+0x5c>)
 800177a:	2200      	movs	r2, #0
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_DMA2D_Init+0x5c>)
 8001780:	2200      	movs	r2, #0
 8001782:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_DMA2D_Init+0x5c>)
 8001786:	2200      	movs	r2, #0
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <MX_DMA2D_Init+0x5c>)
 800178c:	2200      	movs	r2, #0
 800178e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001790:	4809      	ldr	r0, [pc, #36]	; (80017b8 <MX_DMA2D_Init+0x5c>)
 8001792:	f002 ffa1 	bl	80046d8 <HAL_DMA2D_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800179c:	f001 f8ea 	bl	8002974 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80017a0:	2101      	movs	r1, #1
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_DMA2D_Init+0x5c>)
 80017a4:	f003 fa06 	bl	8004bb4 <HAL_DMA2D_ConfigLayer>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80017ae:	f001 f8e1 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000910 	.word	0x20000910
 80017bc:	4002b000 	.word	0x4002b000

080017c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_I2C1_Init+0x74>)
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <MX_I2C1_Init+0x78>)
 80017c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_I2C1_Init+0x74>)
 80017cc:	4a1b      	ldr	r2, [pc, #108]	; (800183c <MX_I2C1_Init+0x7c>)
 80017ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_I2C1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d6:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_I2C1_Init+0x74>)
 80017d8:	2201      	movs	r2, #1
 80017da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017dc:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_I2C1_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_I2C1_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_I2C1_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_I2C1_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_I2C1_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017fa:	480e      	ldr	r0, [pc, #56]	; (8001834 <MX_I2C1_Init+0x74>)
 80017fc:	f003 fdfa 	bl	80053f4 <HAL_I2C_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001806:	f001 f8b5 	bl	8002974 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800180a:	2100      	movs	r1, #0
 800180c:	4809      	ldr	r0, [pc, #36]	; (8001834 <MX_I2C1_Init+0x74>)
 800180e:	f004 fb09 	bl	8005e24 <HAL_I2CEx_ConfigAnalogFilter>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001818:	f001 f8ac 	bl	8002974 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800181c:	2100      	movs	r1, #0
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_I2C1_Init+0x74>)
 8001820:	f004 fb4b 	bl	8005eba <HAL_I2CEx_ConfigDigitalFilter>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800182a:	f001 f8a3 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000510 	.word	0x20000510
 8001838:	40005400 	.word	0x40005400
 800183c:	00c0eaff 	.word	0x00c0eaff

08001840 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <MX_I2C3_Init+0x74>)
 8001846:	4a1c      	ldr	r2, [pc, #112]	; (80018b8 <MX_I2C3_Init+0x78>)
 8001848:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800184a:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <MX_I2C3_Init+0x74>)
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <MX_I2C3_Init+0x7c>)
 800184e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <MX_I2C3_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <MX_I2C3_Init+0x74>)
 8001858:	2201      	movs	r2, #1
 800185a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_I2C3_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <MX_I2C3_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <MX_I2C3_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_I2C3_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001874:	4b0f      	ldr	r3, [pc, #60]	; (80018b4 <MX_I2C3_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800187a:	480e      	ldr	r0, [pc, #56]	; (80018b4 <MX_I2C3_Init+0x74>)
 800187c:	f003 fdba 	bl	80053f4 <HAL_I2C_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001886:	f001 f875 	bl	8002974 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800188a:	2100      	movs	r1, #0
 800188c:	4809      	ldr	r0, [pc, #36]	; (80018b4 <MX_I2C3_Init+0x74>)
 800188e:	f004 fac9 	bl	8005e24 <HAL_I2CEx_ConfigAnalogFilter>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001898:	f001 f86c 	bl	8002974 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800189c:	2100      	movs	r1, #0
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_I2C3_Init+0x74>)
 80018a0:	f004 fb0b 	bl	8005eba <HAL_I2CEx_ConfigDigitalFilter>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018aa:	f001 f863 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000350 	.word	0x20000350
 80018b8:	40005c00 	.word	0x40005c00
 80018bc:	00c0eaff 	.word	0x00c0eaff

080018c0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b09a      	sub	sp, #104	; 0x68
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80018c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ca:	2234      	movs	r2, #52	; 0x34
 80018cc:	2100      	movs	r1, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00c f822 	bl	800d918 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80018d4:	463b      	mov	r3, r7
 80018d6:	2234      	movs	r2, #52	; 0x34
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f00c f81c 	bl	800d918 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80018e0:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <MX_LTDC_Init+0x164>)
 80018e2:	4a51      	ldr	r2, [pc, #324]	; (8001a28 <MX_LTDC_Init+0x168>)
 80018e4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018e6:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <MX_LTDC_Init+0x164>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018ec:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <MX_LTDC_Init+0x164>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018f2:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <MX_LTDC_Init+0x164>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018f8:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <MX_LTDC_Init+0x164>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80018fe:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001900:	2228      	movs	r2, #40	; 0x28
 8001902:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001904:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001906:	2209      	movs	r2, #9
 8001908:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800190a:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <MX_LTDC_Init+0x164>)
 800190c:	2235      	movs	r2, #53	; 0x35
 800190e:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001912:	220b      	movs	r2, #11
 8001914:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001916:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001918:	f240 2215 	movw	r2, #533	; 0x215
 800191c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001920:	f240 121b 	movw	r2, #283	; 0x11b
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001926:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001928:	f240 2235 	movw	r2, #565	; 0x235
 800192c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800192e:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001930:	f240 121d 	movw	r2, #285	; 0x11d
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800194e:	4835      	ldr	r0, [pc, #212]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001950:	f004 fb00 	bl	8005f54 <HAL_LTDC_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800195a:	f001 f80b 	bl	8002974 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8001962:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 800196c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001970:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001972:	2302      	movs	r3, #2
 8001974:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8001976:	23ff      	movs	r3, #255	; 0xff
 8001978:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800197e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001982:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001984:	2307      	movs	r3, #7
 8001986:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001988:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800198c:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 800198e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001992:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8001994:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001998:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019b0:	2200      	movs	r2, #0
 80019b2:	4619      	mov	r1, r3
 80019b4:	481b      	ldr	r0, [pc, #108]	; (8001a24 <MX_LTDC_Init+0x164>)
 80019b6:	f004 fc5f 	bl	8006278 <HAL_LTDC_ConfigLayer>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 80019c0:	f000 ffd8 	bl	8002974 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80019dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e0:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80019e2:	2305      	movs	r3, #5
 80019e4:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	2201      	movs	r2, #1
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <MX_LTDC_Init+0x164>)
 8001a0c:	f004 fc34 	bl	8006278 <HAL_LTDC_ConfigLayer>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8001a16:	f000 ffad 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	3768      	adds	r7, #104	; 0x68
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000660 	.word	0x20000660
 8001a28:	40016800 	.word	0x40016800

08001a2c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MX_QUADSPI_Init+0x50>)
 8001a32:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <MX_QUADSPI_Init+0x54>)
 8001a34:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_QUADSPI_Init+0x50>)
 8001a38:	22ff      	movs	r2, #255	; 0xff
 8001a3a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_QUADSPI_Init+0x50>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_QUADSPI_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_QUADSPI_Init+0x50>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_QUADSPI_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_QUADSPI_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <MX_QUADSPI_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_QUADSPI_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_QUADSPI_Init+0x50>)
 8001a68:	f004 fe4c 	bl	8006704 <HAL_QSPI_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001a72:	f000 ff7f 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000a0c 	.word	0x20000a0c
 8001a80:	a0001000 	.word	0xa0001000

08001a84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b092      	sub	sp, #72	; 0x48
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
 8001a9a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	222c      	movs	r2, #44	; 0x2c
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f00b ff36 	bl	800d918 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001aae:	4a47      	ldr	r2, [pc, #284]	; (8001bcc <MX_RTC_Init+0x148>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ab2:	4b45      	ldr	r3, [pc, #276]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ab8:	4b43      	ldr	r3, [pc, #268]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001aba:	227f      	movs	r2, #127	; 0x7f
 8001abc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001abe:	4b42      	ldr	r3, [pc, #264]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001ac0:	22ff      	movs	r2, #255	; 0xff
 8001ac2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ac4:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001aca:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ad0:	4b3d      	ldr	r3, [pc, #244]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ad6:	483c      	ldr	r0, [pc, #240]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001ad8:	f006 f8a0 	bl	8007c1c <HAL_RTC_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001ae2:	f000 ff47 	bl	8002974 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001b00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b04:	2201      	movs	r2, #1
 8001b06:	4619      	mov	r1, r3
 8001b08:	482f      	ldr	r0, [pc, #188]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001b0a:	f006 f903 	bl	8007d14 <HAL_RTC_SetTime>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001b14:	f000 ff2e 	bl	8002974 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b34:	2201      	movs	r2, #1
 8001b36:	4619      	mov	r1, r3
 8001b38:	4823      	ldr	r0, [pc, #140]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001b3a:	f006 f9a9 	bl	8007e90 <HAL_RTC_SetDate>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001b44:	f000 ff16 	bl	8002974 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4812      	ldr	r0, [pc, #72]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001b80:	f006 fa2e 	bl	8007fe0 <HAL_RTC_SetAlarm>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001b8a:	f000 fef3 	bl	8002974 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001b8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001b94:	463b      	mov	r3, r7
 8001b96:	2201      	movs	r2, #1
 8001b98:	4619      	mov	r1, r3
 8001b9a:	480b      	ldr	r0, [pc, #44]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001b9c:	f006 fa20 	bl	8007fe0 <HAL_RTC_SetAlarm>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001ba6:	f000 fee5 	bl	8002974 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001baa:	2202      	movs	r2, #2
 8001bac:	2100      	movs	r1, #0
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <MX_RTC_Init+0x144>)
 8001bb0:	f006 fba0 	bl	80082f4 <HAL_RTCEx_SetTimeStamp>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001bba:	f000 fedb 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	3748      	adds	r7, #72	; 0x48
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000820 	.word	0x20000820
 8001bcc:	40002800 	.word	0x40002800

08001bd0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001bd4:	4b4d      	ldr	r3, [pc, #308]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001bd6:	4a4e      	ldr	r2, [pc, #312]	; (8001d10 <MX_SAI2_Init+0x140>)
 8001bd8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001bda:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001be0:	4b4a      	ldr	r3, [pc, #296]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001be6:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001be8:	2240      	movs	r2, #64	; 0x40
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001bec:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001bf2:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001bf8:	4b44      	ldr	r3, [pc, #272]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001c04:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c0a:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001c10:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c12:	4a40      	ldr	r2, [pc, #256]	; (8001d14 <MX_SAI2_Init+0x144>)
 8001c14:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c16:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c1c:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c22:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001c2e:	4b37      	ldr	r3, [pc, #220]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c30:	2208      	movs	r2, #8
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001c34:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001c3a:	4b34      	ldr	r3, [pc, #208]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001c40:	4b32      	ldr	r3, [pc, #200]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001c46:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001c52:	4b2e      	ldr	r3, [pc, #184]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001c58:	4b2c      	ldr	r3, [pc, #176]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001c64:	4829      	ldr	r0, [pc, #164]	; (8001d0c <MX_SAI2_Init+0x13c>)
 8001c66:	f006 fb9b 	bl	80083a0 <HAL_SAI_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001c70:	f000 fe80 	bl	8002974 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001c74:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001c76:	4a29      	ldr	r2, [pc, #164]	; (8001d1c <MX_SAI2_Init+0x14c>)
 8001c78:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c7a:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001c82:	2203      	movs	r2, #3
 8001c84:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001c86:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001c88:	2240      	movs	r2, #64	; 0x40
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c8c:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001cf8:	4807      	ldr	r0, [pc, #28]	; (8001d18 <MX_SAI2_Init+0x148>)
 8001cfa:	f006 fb51 	bl	80083a0 <HAL_SAI_Init>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001d04:	f000 fe36 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	2000048c 	.word	0x2000048c
 8001d10:	40015c04 	.word	0x40015c04
 8001d14:	0002ee00 	.word	0x0002ee00
 8001d18:	200002cc 	.word	0x200002cc
 8001d1c:	40015c24 	.word	0x40015c24

08001d20 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <MX_SDMMC1_SD_Init+0x58>)
 8001d26:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <MX_SDMMC1_SD_Init+0x5c>)
 8001d28:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <MX_SDMMC1_SD_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_SDMMC1_SD_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <MX_SDMMC1_SD_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	; (8001d78 <MX_SDMMC1_SD_Init+0x58>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <MX_SDMMC1_SD_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <MX_SDMMC1_SD_Init+0x58>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001d4e:	480a      	ldr	r0, [pc, #40]	; (8001d78 <MX_SDMMC1_SD_Init+0x58>)
 8001d50:	f006 fcce 	bl	80086f0 <HAL_SD_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8001d5a:	f000 fe0b 	bl	8002974 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001d5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <MX_SDMMC1_SD_Init+0x58>)
 8001d64:	f006 ff00 	bl	8008b68 <HAL_SD_ConfigWideBusOperation>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8001d6e:	f000 fe01 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000055c 	.word	0x2000055c
 8001d7c:	40012c00 	.word	0x40012c00

08001d80 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001d86:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d8a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001d98:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001dc8:	4804      	ldr	r0, [pc, #16]	; (8001ddc <MX_SPDIFRX_Init+0x5c>)
 8001dca:	f007 fa85 	bl	80092d8 <HAL_SPDIFRX_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001dd4:	f000 fdce 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000440 	.word	0x20000440

08001de0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001de6:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <MX_SPI2_Init+0x78>)
 8001de8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001dec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001df8:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001dfa:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001dfe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e00:	4b14      	ldr	r3, [pc, #80]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e14:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001e2e:	2207      	movs	r2, #7
 8001e30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001e3a:	2208      	movs	r2, #8
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_SPI2_Init+0x74>)
 8001e40:	f007 faa6 	bl	8009390 <HAL_SPI_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e4a:	f000 fd93 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	2000039c 	.word	0x2000039c
 8001e58:	40003800 	.word	0x40003800

08001e5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b09a      	sub	sp, #104	; 0x68
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
 8001e8c:	615a      	str	r2, [r3, #20]
 8001e8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	222c      	movs	r2, #44	; 0x2c
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f00b fd3e 	bl	800d918 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e9c:	4b43      	ldr	r3, [pc, #268]	; (8001fac <MX_TIM1_Init+0x150>)
 8001e9e:	4a44      	ldr	r2, [pc, #272]	; (8001fb0 <MX_TIM1_Init+0x154>)
 8001ea0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ea2:	4b42      	ldr	r3, [pc, #264]	; (8001fac <MX_TIM1_Init+0x150>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b40      	ldr	r3, [pc, #256]	; (8001fac <MX_TIM1_Init+0x150>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <MX_TIM1_Init+0x150>)
 8001eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <MX_TIM1_Init+0x150>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <MX_TIM1_Init+0x150>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec2:	4b3a      	ldr	r3, [pc, #232]	; (8001fac <MX_TIM1_Init+0x150>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ec8:	4838      	ldr	r0, [pc, #224]	; (8001fac <MX_TIM1_Init+0x150>)
 8001eca:	f007 faf3 	bl	80094b4 <HAL_TIM_Base_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ed4:	f000 fd4e 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001edc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ede:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4831      	ldr	r0, [pc, #196]	; (8001fac <MX_TIM1_Init+0x150>)
 8001ee6:	f007 fd9d 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ef0:	f000 fd40 	bl	8002974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ef4:	482d      	ldr	r0, [pc, #180]	; (8001fac <MX_TIM1_Init+0x150>)
 8001ef6:	f007 fb33 	bl	8009560 <HAL_TIM_PWM_Init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001f00:	f000 fd38 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f14:	4619      	mov	r1, r3
 8001f16:	4825      	ldr	r0, [pc, #148]	; (8001fac <MX_TIM1_Init+0x150>)
 8001f18:	f008 f9fe 	bl	800a318 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001f22:	f000 fd27 	bl	8002974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f26:	2360      	movs	r3, #96	; 0x60
 8001f28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f32:	2300      	movs	r3, #0
 8001f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f46:	2200      	movs	r2, #0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4818      	ldr	r0, [pc, #96]	; (8001fac <MX_TIM1_Init+0x150>)
 8001f4c:	f007 fc52 	bl	80097f4 <HAL_TIM_PWM_ConfigChannel>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001f56:	f000 fd0d 	bl	8002974 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4807      	ldr	r0, [pc, #28]	; (8001fac <MX_TIM1_Init+0x150>)
 8001f90:	f008 fa50 	bl	800a434 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001f9a:	f000 fceb 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f9e:	4803      	ldr	r0, [pc, #12]	; (8001fac <MX_TIM1_Init+0x150>)
 8001fa0:	f001 fa10 	bl	80033c4 <HAL_TIM_MspPostInit>

}
 8001fa4:	bf00      	nop
 8001fa6:	3768      	adds	r7, #104	; 0x68
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20000848 	.word	0x20000848
 8001fb0:	40010000 	.word	0x40010000

08001fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08e      	sub	sp, #56	; 0x38
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <MX_TIM2_Init+0xe8>)
 8001fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fee:	4b2b      	ldr	r3, [pc, #172]	; (800209c <MX_TIM2_Init+0xe8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	4b29      	ldr	r3, [pc, #164]	; (800209c <MX_TIM2_Init+0xe8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <MX_TIM2_Init+0xe8>)
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <MX_TIM2_Init+0xe8>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002008:	4b24      	ldr	r3, [pc, #144]	; (800209c <MX_TIM2_Init+0xe8>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800200e:	4823      	ldr	r0, [pc, #140]	; (800209c <MX_TIM2_Init+0xe8>)
 8002010:	f007 fa50 	bl	80094b4 <HAL_TIM_Base_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800201a:	f000 fcab 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002028:	4619      	mov	r1, r3
 800202a:	481c      	ldr	r0, [pc, #112]	; (800209c <MX_TIM2_Init+0xe8>)
 800202c:	f007 fcfa 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002036:	f000 fc9d 	bl	8002974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800203a:	4818      	ldr	r0, [pc, #96]	; (800209c <MX_TIM2_Init+0xe8>)
 800203c:	f007 fa90 	bl	8009560 <HAL_TIM_PWM_Init>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002046:	f000 fc95 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	4810      	ldr	r0, [pc, #64]	; (800209c <MX_TIM2_Init+0xe8>)
 800205a:	f008 f95d 	bl	800a318 <HAL_TIMEx_MasterConfigSynchronization>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002064:	f000 fc86 	bl	8002974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002068:	2360      	movs	r3, #96	; 0x60
 800206a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002070:	2300      	movs	r3, #0
 8002072:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002078:	463b      	mov	r3, r7
 800207a:	2200      	movs	r2, #0
 800207c:	4619      	mov	r1, r3
 800207e:	4807      	ldr	r0, [pc, #28]	; (800209c <MX_TIM2_Init+0xe8>)
 8002080:	f007 fbb8 	bl	80097f4 <HAL_TIM_PWM_ConfigChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800208a:	f000 fc73 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800208e:	4803      	ldr	r0, [pc, #12]	; (800209c <MX_TIM2_Init+0xe8>)
 8002090:	f001 f998 	bl	80033c4 <HAL_TIM_MspPostInit>

}
 8002094:	bf00      	nop
 8002096:	3738      	adds	r7, #56	; 0x38
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000958 	.word	0x20000958

080020a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08e      	sub	sp, #56	; 0x38
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
 80020b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c0:	463b      	mov	r3, r7
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]
 80020ce:	615a      	str	r2, [r3, #20]
 80020d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020d2:	4b2d      	ldr	r3, [pc, #180]	; (8002188 <MX_TIM3_Init+0xe8>)
 80020d4:	4a2d      	ldr	r2, [pc, #180]	; (800218c <MX_TIM3_Init+0xec>)
 80020d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <MX_TIM3_Init+0xe8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <MX_TIM3_Init+0xe8>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020e4:	4b28      	ldr	r3, [pc, #160]	; (8002188 <MX_TIM3_Init+0xe8>)
 80020e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ec:	4b26      	ldr	r3, [pc, #152]	; (8002188 <MX_TIM3_Init+0xe8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f2:	4b25      	ldr	r3, [pc, #148]	; (8002188 <MX_TIM3_Init+0xe8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020f8:	4823      	ldr	r0, [pc, #140]	; (8002188 <MX_TIM3_Init+0xe8>)
 80020fa:	f007 f9db 	bl	80094b4 <HAL_TIM_Base_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002104:	f000 fc36 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800210e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002112:	4619      	mov	r1, r3
 8002114:	481c      	ldr	r0, [pc, #112]	; (8002188 <MX_TIM3_Init+0xe8>)
 8002116:	f007 fc85 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002120:	f000 fc28 	bl	8002974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002124:	4818      	ldr	r0, [pc, #96]	; (8002188 <MX_TIM3_Init+0xe8>)
 8002126:	f007 fa1b 	bl	8009560 <HAL_TIM_PWM_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002130:	f000 fc20 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	4619      	mov	r1, r3
 8002142:	4811      	ldr	r0, [pc, #68]	; (8002188 <MX_TIM3_Init+0xe8>)
 8002144:	f008 f8e8 	bl	800a318 <HAL_TIMEx_MasterConfigSynchronization>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800214e:	f000 fc11 	bl	8002974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002152:	2360      	movs	r3, #96	; 0x60
 8002154:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002162:	463b      	mov	r3, r7
 8002164:	2200      	movs	r2, #0
 8002166:	4619      	mov	r1, r3
 8002168:	4807      	ldr	r0, [pc, #28]	; (8002188 <MX_TIM3_Init+0xe8>)
 800216a:	f007 fb43 	bl	80097f4 <HAL_TIM_PWM_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002174:	f000 fbfe 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <MX_TIM3_Init+0xe8>)
 800217a:	f001 f923 	bl	80033c4 <HAL_TIM_MspPostInit>

}
 800217e:	bf00      	nop
 8002180:	3738      	adds	r7, #56	; 0x38
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000620 	.word	0x20000620
 800218c:	40000400 	.word	0x40000400

08002190 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	; 0x38
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b0:	463b      	mov	r3, r7
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]
 80021be:	615a      	str	r2, [r3, #20]
 80021c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021c2:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <MX_TIM5_Init+0xe8>)
 80021c4:	4a2d      	ldr	r2, [pc, #180]	; (800227c <MX_TIM5_Init+0xec>)
 80021c6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <MX_TIM5_Init+0xe8>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ce:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <MX_TIM5_Init+0xe8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80021d4:	4b28      	ldr	r3, [pc, #160]	; (8002278 <MX_TIM5_Init+0xe8>)
 80021d6:	f04f 32ff 	mov.w	r2, #4294967295
 80021da:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021dc:	4b26      	ldr	r3, [pc, #152]	; (8002278 <MX_TIM5_Init+0xe8>)
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <MX_TIM5_Init+0xe8>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80021e8:	4823      	ldr	r0, [pc, #140]	; (8002278 <MX_TIM5_Init+0xe8>)
 80021ea:	f007 f963 	bl	80094b4 <HAL_TIM_Base_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80021f4:	f000 fbbe 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002202:	4619      	mov	r1, r3
 8002204:	481c      	ldr	r0, [pc, #112]	; (8002278 <MX_TIM5_Init+0xe8>)
 8002206:	f007 fc0d 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002210:	f000 fbb0 	bl	8002974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002214:	4818      	ldr	r0, [pc, #96]	; (8002278 <MX_TIM5_Init+0xe8>)
 8002216:	f007 f9a3 	bl	8009560 <HAL_TIM_PWM_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002220:	f000 fba8 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	4619      	mov	r1, r3
 8002232:	4811      	ldr	r0, [pc, #68]	; (8002278 <MX_TIM5_Init+0xe8>)
 8002234:	f008 f870 	bl	800a318 <HAL_TIMEx_MasterConfigSynchronization>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800223e:	f000 fb99 	bl	8002974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002242:	2360      	movs	r3, #96	; 0x60
 8002244:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002252:	463b      	mov	r3, r7
 8002254:	220c      	movs	r2, #12
 8002256:	4619      	mov	r1, r3
 8002258:	4807      	ldr	r0, [pc, #28]	; (8002278 <MX_TIM5_Init+0xe8>)
 800225a:	f007 facb 	bl	80097f4 <HAL_TIM_PWM_ConfigChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002264:	f000 fb86 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002268:	4803      	ldr	r0, [pc, #12]	; (8002278 <MX_TIM5_Init+0xe8>)
 800226a:	f001 f8ab 	bl	80033c4 <HAL_TIM_MspPostInit>

}
 800226e:	bf00      	nop
 8002270:	3738      	adds	r7, #56	; 0x38
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200005e0 	.word	0x200005e0
 800227c:	40000c00 	.word	0x40000c00

08002280 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	f107 0310 	add.w	r3, r7, #16
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <MX_TIM8_Init+0xa0>)
 80022a0:	4a20      	ldr	r2, [pc, #128]	; (8002324 <MX_TIM8_Init+0xa4>)
 80022a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80022a4:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <MX_TIM8_Init+0xa0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022aa:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <MX_TIM8_Init+0xa0>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <MX_TIM8_Init+0xa0>)
 80022b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <MX_TIM8_Init+0xa0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <MX_TIM8_Init+0xa0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <MX_TIM8_Init+0xa0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80022ca:	4815      	ldr	r0, [pc, #84]	; (8002320 <MX_TIM8_Init+0xa0>)
 80022cc:	f007 f8f2 	bl	80094b4 <HAL_TIM_Base_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80022d6:	f000 fb4d 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	4619      	mov	r1, r3
 80022e6:	480e      	ldr	r0, [pc, #56]	; (8002320 <MX_TIM8_Init+0xa0>)
 80022e8:	f007 fb9c 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80022f2:	f000 fb3f 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4806      	ldr	r0, [pc, #24]	; (8002320 <MX_TIM8_Init+0xa0>)
 8002308:	f008 f806 	bl	800a318 <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002312:	f000 fb2f 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000400 	.word	0x20000400
 8002324:	40010400 	.word	0x40010400

08002328 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
 800233c:	615a      	str	r2, [r3, #20]
 800233e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002340:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <MX_TIM12_Init+0x84>)
 8002342:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <MX_TIM12_Init+0x88>)
 8002344:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <MX_TIM12_Init+0x84>)
 8002348:	2200      	movs	r2, #0
 800234a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <MX_TIM12_Init+0x84>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002352:	4b16      	ldr	r3, [pc, #88]	; (80023ac <MX_TIM12_Init+0x84>)
 8002354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002358:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <MX_TIM12_Init+0x84>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <MX_TIM12_Init+0x84>)
 8002362:	2200      	movs	r2, #0
 8002364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002366:	4811      	ldr	r0, [pc, #68]	; (80023ac <MX_TIM12_Init+0x84>)
 8002368:	f007 f8fa 	bl	8009560 <HAL_TIM_PWM_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002372:	f000 faff 	bl	8002974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002376:	2360      	movs	r3, #96	; 0x60
 8002378:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	2200      	movs	r2, #0
 800238a:	4619      	mov	r1, r3
 800238c:	4807      	ldr	r0, [pc, #28]	; (80023ac <MX_TIM12_Init+0x84>)
 800238e:	f007 fa31 	bl	80097f4 <HAL_TIM_PWM_ConfigChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002398:	f000 faec 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800239c:	4803      	ldr	r0, [pc, #12]	; (80023ac <MX_TIM12_Init+0x84>)
 800239e:	f001 f811 	bl	80033c4 <HAL_TIM_MspPostInit>

}
 80023a2:	bf00      	nop
 80023a4:	3720      	adds	r7, #32
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000998 	.word	0x20000998
 80023b0:	40001800 	.word	0x40001800

080023b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023b8:	4b14      	ldr	r3, [pc, #80]	; (800240c <MX_USART1_UART_Init+0x58>)
 80023ba:	4a15      	ldr	r2, [pc, #84]	; (8002410 <MX_USART1_UART_Init+0x5c>)
 80023bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <MX_USART1_UART_Init+0x58>)
 80023c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <MX_USART1_UART_Init+0x58>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <MX_USART1_UART_Init+0x58>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_USART1_UART_Init+0x58>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <MX_USART1_UART_Init+0x58>)
 80023da:	220c      	movs	r2, #12
 80023dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <MX_USART1_UART_Init+0x58>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <MX_USART1_UART_Init+0x58>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <MX_USART1_UART_Init+0x58>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <MX_USART1_UART_Init+0x58>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_USART1_UART_Init+0x58>)
 80023f8:	f008 f8b8 	bl	800a56c <HAL_UART_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002402:	f000 fab7 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200007a0 	.word	0x200007a0
 8002410:	40011000 	.word	0x40011000

08002414 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <MX_USART6_UART_Init+0x58>)
 800241a:	4a15      	ldr	r2, [pc, #84]	; (8002470 <MX_USART6_UART_Init+0x5c>)
 800241c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800241e:	4b13      	ldr	r3, [pc, #76]	; (800246c <MX_USART6_UART_Init+0x58>)
 8002420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002424:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_USART6_UART_Init+0x58>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <MX_USART6_UART_Init+0x58>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_USART6_UART_Init+0x58>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <MX_USART6_UART_Init+0x58>)
 800243a:	220c      	movs	r2, #12
 800243c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <MX_USART6_UART_Init+0x58>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <MX_USART6_UART_Init+0x58>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <MX_USART6_UART_Init+0x58>)
 800244c:	2200      	movs	r2, #0
 800244e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <MX_USART6_UART_Init+0x58>)
 8002452:	2200      	movs	r2, #0
 8002454:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002456:	4805      	ldr	r0, [pc, #20]	; (800246c <MX_USART6_UART_Init+0x58>)
 8002458:	f008 f888 	bl	800a56c <HAL_UART_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002462:	f000 fa87 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000890 	.word	0x20000890
 8002470:	40011400 	.word	0x40011400

08002474 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
 8002488:	615a      	str	r2, [r3, #20]
 800248a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800248c:	4b1f      	ldr	r3, [pc, #124]	; (800250c <MX_FMC_Init+0x98>)
 800248e:	4a20      	ldr	r2, [pc, #128]	; (8002510 <MX_FMC_Init+0x9c>)
 8002490:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002492:	4b1e      	ldr	r3, [pc, #120]	; (800250c <MX_FMC_Init+0x98>)
 8002494:	2200      	movs	r2, #0
 8002496:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <MX_FMC_Init+0x98>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800249e:	4b1b      	ldr	r3, [pc, #108]	; (800250c <MX_FMC_Init+0x98>)
 80024a0:	2204      	movs	r2, #4
 80024a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <MX_FMC_Init+0x98>)
 80024a6:	2210      	movs	r2, #16
 80024a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <MX_FMC_Init+0x98>)
 80024ac:	2240      	movs	r2, #64	; 0x40
 80024ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80024b0:	4b16      	ldr	r3, [pc, #88]	; (800250c <MX_FMC_Init+0x98>)
 80024b2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80024b6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_FMC_Init+0x98>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80024be:	4b13      	ldr	r3, [pc, #76]	; (800250c <MX_FMC_Init+0x98>)
 80024c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_FMC_Init+0x98>)
 80024c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_FMC_Init+0x98>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80024d4:	2302      	movs	r3, #2
 80024d6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80024d8:	2307      	movs	r3, #7
 80024da:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80024dc:	2304      	movs	r3, #4
 80024de:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80024e0:	2307      	movs	r3, #7
 80024e2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80024e4:	2303      	movs	r3, #3
 80024e6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80024ec:	2302      	movs	r3, #2
 80024ee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80024f0:	1d3b      	adds	r3, r7, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_FMC_Init+0x98>)
 80024f6:	f006 fe6f 	bl	80091d8 <HAL_SDRAM_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002500:	f000 fa38 	bl	8002974 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002504:	bf00      	nop
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	200009d8 	.word	0x200009d8
 8002510:	a0000140 	.word	0xa0000140

08002514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b090      	sub	sp, #64	; 0x40
 8002518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800252a:	4baf      	ldr	r3, [pc, #700]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4aae      	ldr	r2, [pc, #696]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002530:	f043 0310 	orr.w	r3, r3, #16
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4bac      	ldr	r3, [pc, #688]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002540:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002542:	4ba9      	ldr	r3, [pc, #676]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4aa8      	ldr	r2, [pc, #672]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4ba6      	ldr	r3, [pc, #664]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800255a:	4ba3      	ldr	r3, [pc, #652]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4aa2      	ldr	r2, [pc, #648]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4ba0      	ldr	r3, [pc, #640]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002572:	4b9d      	ldr	r3, [pc, #628]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a9c      	ldr	r2, [pc, #624]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b9a      	ldr	r3, [pc, #616]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	4b97      	ldr	r3, [pc, #604]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a96      	ldr	r2, [pc, #600]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b94      	ldr	r3, [pc, #592]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	4b91      	ldr	r3, [pc, #580]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a90      	ldr	r2, [pc, #576]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b8e      	ldr	r3, [pc, #568]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80025ba:	4b8b      	ldr	r3, [pc, #556]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a8a      	ldr	r2, [pc, #552]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b88      	ldr	r3, [pc, #544]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80025d2:	4b85      	ldr	r3, [pc, #532]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a84      	ldr	r2, [pc, #528]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b82      	ldr	r3, [pc, #520]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80025ea:	4b7f      	ldr	r3, [pc, #508]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a7e      	ldr	r2, [pc, #504]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b7c      	ldr	r3, [pc, #496]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002602:	4b79      	ldr	r3, [pc, #484]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a78      	ldr	r2, [pc, #480]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002608:	f043 0320 	orr.w	r3, r3, #32
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b76      	ldr	r3, [pc, #472]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800261a:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a72      	ldr	r2, [pc, #456]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b70      	ldr	r3, [pc, #448]	; (80027e8 <MX_GPIO_Init+0x2d4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002632:	2201      	movs	r2, #1
 8002634:	2120      	movs	r1, #32
 8002636:	486d      	ldr	r0, [pc, #436]	; (80027ec <MX_GPIO_Init+0x2d8>)
 8002638:	f002 fe9e 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800263c:	2200      	movs	r2, #0
 800263e:	210c      	movs	r1, #12
 8002640:	486b      	ldr	r0, [pc, #428]	; (80027f0 <MX_GPIO_Init+0x2dc>)
 8002642:	f002 fe99 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002646:	2201      	movs	r2, #1
 8002648:	2108      	movs	r1, #8
 800264a:	486a      	ldr	r0, [pc, #424]	; (80027f4 <MX_GPIO_Init+0x2e0>)
 800264c:	f002 fe94 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002650:	2201      	movs	r2, #1
 8002652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002656:	4866      	ldr	r0, [pc, #408]	; (80027f0 <MX_GPIO_Init+0x2dc>)
 8002658:	f002 fe8e 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002662:	4865      	ldr	r0, [pc, #404]	; (80027f8 <MX_GPIO_Init+0x2e4>)
 8002664:	f002 fe88 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002668:	2200      	movs	r2, #0
 800266a:	21c8      	movs	r1, #200	; 0xc8
 800266c:	4863      	ldr	r0, [pc, #396]	; (80027fc <MX_GPIO_Init+0x2e8>)
 800266e:	f002 fe83 	bl	8005378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002672:	2308      	movs	r3, #8
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002676:	2300      	movs	r3, #0
 8002678:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002682:	4619      	mov	r1, r3
 8002684:	485e      	ldr	r0, [pc, #376]	; (8002800 <MX_GPIO_Init+0x2ec>)
 8002686:	f002 fbc3 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800268a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800269c:	230b      	movs	r3, #11
 800269e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a4:	4619      	mov	r1, r3
 80026a6:	4855      	ldr	r0, [pc, #340]	; (80027fc <MX_GPIO_Init+0x2e8>)
 80026a8:	f002 fbb2 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80026ac:	f643 4323 	movw	r3, #15395	; 0x3c23
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026be:	230a      	movs	r3, #10
 80026c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c6:	4619      	mov	r1, r3
 80026c8:	484e      	ldr	r0, [pc, #312]	; (8002804 <MX_GPIO_Init+0x2f0>)
 80026ca:	f002 fba1 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80026ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d4:	2300      	movs	r3, #0
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80026dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026e0:	4619      	mov	r1, r3
 80026e2:	4849      	ldr	r0, [pc, #292]	; (8002808 <MX_GPIO_Init+0x2f4>)
 80026e4:	f002 fb94 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80026e8:	2340      	movs	r3, #64	; 0x40
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80026ec:	4b47      	ldr	r3, [pc, #284]	; (800280c <MX_GPIO_Init+0x2f8>)
 80026ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80026f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f8:	4619      	mov	r1, r3
 80026fa:	483c      	ldr	r0, [pc, #240]	; (80027ec <MX_GPIO_Init+0x2d8>)
 80026fc:	f002 fb88 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8002700:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002712:	230a      	movs	r3, #10
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800271a:	4619      	mov	r1, r3
 800271c:	483c      	ldr	r0, [pc, #240]	; (8002810 <MX_GPIO_Init+0x2fc>)
 800271e:	f002 fb77 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002722:	2320      	movs	r3, #32
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002726:	2301      	movs	r3, #1
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002736:	4619      	mov	r1, r3
 8002738:	482c      	ldr	r0, [pc, #176]	; (80027ec <MX_GPIO_Init+0x2d8>)
 800273a:	f002 fb69 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800273e:	f241 030c 	movw	r3, #4108	; 0x100c
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002744:	2301      	movs	r3, #1
 8002746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002754:	4619      	mov	r1, r3
 8002756:	4826      	ldr	r0, [pc, #152]	; (80027f0 <MX_GPIO_Init+0x2dc>)
 8002758:	f002 fb5a 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800275c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002762:	2300      	movs	r3, #0
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800276a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800276e:	4619      	mov	r1, r3
 8002770:	4828      	ldr	r0, [pc, #160]	; (8002814 <MX_GPIO_Init+0x300>)
 8002772:	f002 fb4d 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002776:	2308      	movs	r3, #8
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277a:	2301      	movs	r3, #1
 800277c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800278a:	4619      	mov	r1, r3
 800278c:	4819      	ldr	r0, [pc, #100]	; (80027f4 <MX_GPIO_Init+0x2e0>)
 800278e:	f002 fb3f 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002792:	2310      	movs	r3, #16
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002796:	2300      	movs	r3, #0
 8002798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800279e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a2:	4619      	mov	r1, r3
 80027a4:	4811      	ldr	r0, [pc, #68]	; (80027ec <MX_GPIO_Init+0x2d8>)
 80027a6:	f002 fb33 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80027aa:	f248 0304 	movw	r3, #32772	; 0x8004
 80027ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b0:	2300      	movs	r3, #0
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80027b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027bc:	4619      	mov	r1, r3
 80027be:	480e      	ldr	r0, [pc, #56]	; (80027f8 <MX_GPIO_Init+0x2e4>)
 80027c0:	f002 fb26 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80027c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ca:	2301      	movs	r3, #1
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80027d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027da:	4619      	mov	r1, r3
 80027dc:	4806      	ldr	r0, [pc, #24]	; (80027f8 <MX_GPIO_Init+0x2e4>)
 80027de:	f002 fb17 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027e6:	e017      	b.n	8002818 <MX_GPIO_Init+0x304>
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020c00 	.word	0x40020c00
 80027f0:	40022000 	.word	0x40022000
 80027f4:	40022800 	.word	0x40022800
 80027f8:	40021c00 	.word	0x40021c00
 80027fc:	40021800 	.word	0x40021800
 8002800:	40021000 	.word	0x40021000
 8002804:	40020400 	.word	0x40020400
 8002808:	40022400 	.word	0x40022400
 800280c:	10120000 	.word	0x10120000
 8002810:	40020000 	.word	0x40020000
 8002814:	40020800 	.word	0x40020800
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800281a:	4b46      	ldr	r3, [pc, #280]	; (8002934 <MX_GPIO_Init+0x420>)
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002826:	4619      	mov	r1, r3
 8002828:	4843      	ldr	r0, [pc, #268]	; (8002938 <MX_GPIO_Init+0x424>)
 800282a:	f002 faf1 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800282e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002834:	4b41      	ldr	r3, [pc, #260]	; (800293c <MX_GPIO_Init+0x428>)
 8002836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800283c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002840:	4619      	mov	r1, r3
 8002842:	483d      	ldr	r0, [pc, #244]	; (8002938 <MX_GPIO_Init+0x424>)
 8002844:	f002 fae4 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002848:	2310      	movs	r3, #16
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002858:	230a      	movs	r3, #10
 800285a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800285c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002860:	4619      	mov	r1, r3
 8002862:	4837      	ldr	r0, [pc, #220]	; (8002940 <MX_GPIO_Init+0x42c>)
 8002864:	f002 fad4 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002868:	23c8      	movs	r3, #200	; 0xc8
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286c:	2301      	movs	r3, #1
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800287c:	4619      	mov	r1, r3
 800287e:	4831      	ldr	r0, [pc, #196]	; (8002944 <MX_GPIO_Init+0x430>)
 8002880:	f002 fac6 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002884:	2305      	movs	r3, #5
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002890:	2303      	movs	r3, #3
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002894:	230a      	movs	r3, #10
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289c:	4619      	mov	r1, r3
 800289e:	482a      	ldr	r0, [pc, #168]	; (8002948 <MX_GPIO_Init+0x434>)
 80028a0:	f002 fab6 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80028a4:	2332      	movs	r3, #50	; 0x32
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028b4:	230b      	movs	r3, #11
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028bc:	4619      	mov	r1, r3
 80028be:	4822      	ldr	r0, [pc, #136]	; (8002948 <MX_GPIO_Init+0x434>)
 80028c0:	f002 faa6 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80028c4:	2304      	movs	r3, #4
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c8:	2300      	movs	r3, #0
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80028d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d4:	4619      	mov	r1, r3
 80028d6:	481b      	ldr	r0, [pc, #108]	; (8002944 <MX_GPIO_Init+0x430>)
 80028d8:	f002 fa9a 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80028dc:	2386      	movs	r3, #134	; 0x86
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e0:	2302      	movs	r3, #2
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80028ec:	230b      	movs	r3, #11
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f4:	4619      	mov	r1, r3
 80028f6:	4815      	ldr	r0, [pc, #84]	; (800294c <MX_GPIO_Init+0x438>)
 80028f8:	f002 fa8a 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80028fc:	2328      	movs	r3, #40	; 0x28
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800290c:	230a      	movs	r3, #10
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002914:	4619      	mov	r1, r3
 8002916:	480d      	ldr	r0, [pc, #52]	; (800294c <MX_GPIO_Init+0x438>)
 8002918:	f002 fa7a 	bl	8004e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 800291c:	2200      	movs	r2, #0
 800291e:	2101      	movs	r1, #1
 8002920:	2028      	movs	r0, #40	; 0x28
 8002922:	f001 fc79 	bl	8004218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002926:	2028      	movs	r0, #40	; 0x28
 8002928:	f001 fc92 	bl	8004250 <HAL_NVIC_EnableIRQ>

}
 800292c:	bf00      	nop
 800292e:	3740      	adds	r7, #64	; 0x40
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	10210000 	.word	0x10210000
 8002938:	40022000 	.word	0x40022000
 800293c:	10120000 	.word	0x10120000
 8002940:	40021c00 	.word	0x40021c00
 8002944:	40021800 	.word	0x40021800
 8002948:	40020800 	.word	0x40020800
 800294c:	40020000 	.word	0x40020000

08002950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002962:	f001 f8d7 	bl	8003b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	40001000 	.word	0x40001000

08002974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_MspInit+0x4c>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_MspInit+0x4c>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_MspInit+0x4c>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_MspInit+0x4c>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_MspInit+0x4c>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ac:	6453      	str	r3, [r2, #68]	; 0x44
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_MspInit+0x4c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029ba:	2200      	movs	r2, #0
 80029bc:	210f      	movs	r1, #15
 80029be:	f06f 0001 	mvn.w	r0, #1
 80029c2:	f001 fc29 	bl	8004218 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40023800 	.word	0x40023800

080029d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <HAL_ADC_MspInit+0xa4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d13c      	bne.n	8002a70 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <HAL_ADC_MspInit+0xa8>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a20      	ldr	r2, [pc, #128]	; (8002a7c <HAL_ADC_MspInit+0xa8>)
 80029fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <HAL_ADC_MspInit+0xa8>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <HAL_ADC_MspInit+0xa8>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_ADC_MspInit+0xa8>)
 8002a14:	f043 0320 	orr.w	r3, r3, #32
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_ADC_MspInit+0xa8>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <HAL_ADC_MspInit+0xa8>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <HAL_ADC_MspInit+0xa8>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_ADC_MspInit+0xa8>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002a3e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002a42:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a44:	2303      	movs	r3, #3
 8002a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	4619      	mov	r1, r3
 8002a52:	480b      	ldr	r0, [pc, #44]	; (8002a80 <HAL_ADC_MspInit+0xac>)
 8002a54:	f002 f9dc 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4806      	ldr	r0, [pc, #24]	; (8002a84 <HAL_ADC_MspInit+0xb0>)
 8002a6c:	f002 f9d0 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a70:	bf00      	nop
 8002a72:	3728      	adds	r7, #40	; 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40012200 	.word	0x40012200
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40021400 	.word	0x40021400
 8002a84:	40020000 	.word	0x40020000

08002a88 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08e      	sub	sp, #56	; 0x38
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a50      	ldr	r2, [pc, #320]	; (8002be8 <HAL_DCMI_MspInit+0x160>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	f040 809a 	bne.w	8002be0 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8002aac:	4b4f      	ldr	r3, [pc, #316]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab0:	4a4e      	ldr	r2, [pc, #312]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6353      	str	r3, [r2, #52]	; 0x34
 8002ab8:	4b4c      	ldr	r3, [pc, #304]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac4:	4b49      	ldr	r3, [pc, #292]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	4a48      	ldr	r2, [pc, #288]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002aca:	f043 0310 	orr.w	r3, r3, #16
 8002ace:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad0:	4b46      	ldr	r3, [pc, #280]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002adc:	4b43      	ldr	r3, [pc, #268]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	4a42      	ldr	r2, [pc, #264]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002ae2:	f043 0308 	orr.w	r3, r3, #8
 8002ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae8:	4b40      	ldr	r3, [pc, #256]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002af4:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	4a3c      	ldr	r2, [pc, #240]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002afe:	6313      	str	r3, [r2, #48]	; 0x30
 8002b00:	4b3a      	ldr	r3, [pc, #232]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b0c:	4b37      	ldr	r3, [pc, #220]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	4a36      	ldr	r2, [pc, #216]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b16:	6313      	str	r3, [r2, #48]	; 0x30
 8002b18:	4b34      	ldr	r3, [pc, #208]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b24:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	4a30      	ldr	r2, [pc, #192]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b30:	4b2e      	ldr	r3, [pc, #184]	; (8002bec <HAL_DCMI_MspInit+0x164>)
 8002b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002b3c:	2360      	movs	r3, #96	; 0x60
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b4c:	230d      	movs	r3, #13
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b54:	4619      	mov	r1, r3
 8002b56:	4826      	ldr	r0, [pc, #152]	; (8002bf0 <HAL_DCMI_MspInit+0x168>)
 8002b58:	f002 f95a 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002b5c:	2308      	movs	r3, #8
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b6c:	230d      	movs	r3, #13
 8002b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	481f      	ldr	r0, [pc, #124]	; (8002bf4 <HAL_DCMI_MspInit+0x16c>)
 8002b78:	f002 f94a 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002b8e:	230d      	movs	r3, #13
 8002b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8002b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b96:	4619      	mov	r1, r3
 8002b98:	4817      	ldr	r0, [pc, #92]	; (8002bf8 <HAL_DCMI_MspInit+0x170>)
 8002b9a:	f002 f939 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8002b9e:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bb0:	230d      	movs	r3, #13
 8002bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4810      	ldr	r0, [pc, #64]	; (8002bfc <HAL_DCMI_MspInit+0x174>)
 8002bbc:	f002 f928 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002bc0:	2350      	movs	r3, #80	; 0x50
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002bd0:	230d      	movs	r3, #13
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <HAL_DCMI_MspInit+0x178>)
 8002bdc:	f002 f918 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002be0:	bf00      	nop
 8002be2:	3738      	adds	r7, #56	; 0x38
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	50050000 	.word	0x50050000
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40020c00 	.word	0x40020c00
 8002bf8:	40021800 	.word	0x40021800
 8002bfc:	40021c00 	.word	0x40021c00
 8002c00:	40020000 	.word	0x40020000

08002c04 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <HAL_DMA2D_MspInit+0x44>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d113      	bne.n	8002c3e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HAL_DMA2D_MspInit+0x48>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <HAL_DMA2D_MspInit+0x48>)
 8002c1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_DMA2D_MspInit+0x48>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	205a      	movs	r0, #90	; 0x5a
 8002c34:	f001 faf0 	bl	8004218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002c38:	205a      	movs	r0, #90	; 0x5a
 8002c3a:	f001 fb09 	bl	8004250 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	4002b000 	.word	0x4002b000
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08c      	sub	sp, #48	; 0x30
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 031c 	add.w	r3, r7, #28
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a2f      	ldr	r2, [pc, #188]	; (8002d2c <HAL_I2C_MspInit+0xdc>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d129      	bne.n	8002cc6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c72:	4b2f      	ldr	r3, [pc, #188]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c90:	2312      	movs	r3, #18
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c94:	2301      	movs	r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4823      	ldr	r0, [pc, #140]	; (8002d34 <HAL_I2C_MspInit+0xe4>)
 8002ca8:	f002 f8b2 	bl	8004e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cac:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002cb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002cc4:	e02d      	b.n	8002d22 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <HAL_I2C_MspInit+0xe8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d128      	bne.n	8002d22 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cd0:	4b17      	ldr	r3, [pc, #92]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	4a16      	ldr	r2, [pc, #88]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cda:	6313      	str	r3, [r2, #48]	; 0x30
 8002cdc:	4b14      	ldr	r3, [pc, #80]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002ce8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cee:	2312      	movs	r3, #18
 8002cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cfe:	f107 031c 	add.w	r3, r7, #28
 8002d02:	4619      	mov	r1, r3
 8002d04:	480d      	ldr	r0, [pc, #52]	; (8002d3c <HAL_I2C_MspInit+0xec>)
 8002d06:	f002 f883 	bl	8004e10 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002d10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_I2C_MspInit+0xe0>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
}
 8002d22:	bf00      	nop
 8002d24:	3730      	adds	r7, #48	; 0x30
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40005400 	.word	0x40005400
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020400 	.word	0x40020400
 8002d38:	40005c00 	.word	0x40005c00
 8002d3c:	40021c00 	.word	0x40021c00

08002d40 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <HAL_I2C_MspDeInit+0x64>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d110      	bne.n	8002d74 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <HAL_I2C_MspDeInit+0x68>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <HAL_I2C_MspDeInit+0x68>)
 8002d58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002d5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d62:	4812      	ldr	r0, [pc, #72]	; (8002dac <HAL_I2C_MspDeInit+0x6c>)
 8002d64:	f002 f9fe 	bl	8005164 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002d68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d6c:	480f      	ldr	r0, [pc, #60]	; (8002dac <HAL_I2C_MspDeInit+0x6c>)
 8002d6e:	f002 f9f9 	bl	8005164 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002d72:	e013      	b.n	8002d9c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0d      	ldr	r2, [pc, #52]	; (8002db0 <HAL_I2C_MspDeInit+0x70>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d10e      	bne.n	8002d9c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_I2C_MspDeInit+0x68>)
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <HAL_I2C_MspDeInit+0x68>)
 8002d84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002d8a:	2180      	movs	r1, #128	; 0x80
 8002d8c:	4809      	ldr	r0, [pc, #36]	; (8002db4 <HAL_I2C_MspDeInit+0x74>)
 8002d8e:	f002 f9e9 	bl	8005164 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8002d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d96:	4807      	ldr	r0, [pc, #28]	; (8002db4 <HAL_I2C_MspDeInit+0x74>)
 8002d98:	f002 f9e4 	bl	8005164 <HAL_GPIO_DeInit>
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40005400 	.word	0x40005400
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40020400 	.word	0x40020400
 8002db0:	40005c00 	.word	0x40005c00
 8002db4:	40021c00 	.word	0x40021c00

08002db8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08e      	sub	sp, #56	; 0x38
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a55      	ldr	r2, [pc, #340]	; (8002f2c <HAL_LTDC_MspInit+0x174>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	f040 80a3 	bne.w	8002f22 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ddc:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	4a53      	ldr	r2, [pc, #332]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002de2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002de6:	6453      	str	r3, [r2, #68]	; 0x44
 8002de8:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002df4:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	4a4d      	ldr	r2, [pc, #308]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002dfa:	f043 0310 	orr.w	r3, r3, #16
 8002dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002e0c:	4b48      	ldr	r3, [pc, #288]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	4a47      	ldr	r2, [pc, #284]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e16:	6313      	str	r3, [r2, #48]	; 0x30
 8002e18:	4b45      	ldr	r3, [pc, #276]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002e24:	4b42      	ldr	r3, [pc, #264]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	4a41      	ldr	r2, [pc, #260]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e30:	4b3f      	ldr	r3, [pc, #252]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e3c:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	4a3b      	ldr	r2, [pc, #236]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e46:	6313      	str	r3, [r2, #48]	; 0x30
 8002e48:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002e54:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4a35      	ldr	r2, [pc, #212]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e60:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <HAL_LTDC_MspInit+0x178>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002e6c:	2310      	movs	r3, #16
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e70:	2302      	movs	r3, #2
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e7c:	230e      	movs	r3, #14
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e84:	4619      	mov	r1, r3
 8002e86:	482b      	ldr	r0, [pc, #172]	; (8002f34 <HAL_LTDC_MspInit+0x17c>)
 8002e88:	f001 ffc2 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002e8c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	2302      	movs	r3, #2
 8002e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e9e:	230e      	movs	r3, #14
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4823      	ldr	r0, [pc, #140]	; (8002f38 <HAL_LTDC_MspInit+0x180>)
 8002eaa:	f001 ffb1 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8002eae:	23f7      	movs	r3, #247	; 0xf7
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ebe:	230e      	movs	r3, #14
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	481c      	ldr	r0, [pc, #112]	; (8002f3c <HAL_LTDC_MspInit+0x184>)
 8002eca:	f001 ffa1 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	2300      	movs	r3, #0
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ee0:	2309      	movs	r3, #9
 8002ee2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4815      	ldr	r0, [pc, #84]	; (8002f40 <HAL_LTDC_MspInit+0x188>)
 8002eec:	f001 ff90 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002ef0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efe:	2300      	movs	r3, #0
 8002f00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f02:	230e      	movs	r3, #14
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	480d      	ldr	r0, [pc, #52]	; (8002f44 <HAL_LTDC_MspInit+0x18c>)
 8002f0e:	f001 ff7f 	bl	8004e10 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	2058      	movs	r0, #88	; 0x58
 8002f18:	f001 f97e 	bl	8004218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002f1c:	2058      	movs	r0, #88	; 0x58
 8002f1e:	f001 f997 	bl	8004250 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002f22:	bf00      	nop
 8002f24:	3738      	adds	r7, #56	; 0x38
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40016800 	.word	0x40016800
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40022400 	.word	0x40022400
 8002f3c:	40022800 	.word	0x40022800
 8002f40:	40021800 	.word	0x40021800
 8002f44:	40022000 	.word	0x40022000

08002f48 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08c      	sub	sp, #48	; 0x30
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 031c 	add.w	r3, r7, #28
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a3b      	ldr	r2, [pc, #236]	; (8003054 <HAL_QSPI_MspInit+0x10c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d170      	bne.n	800304c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	4a3a      	ldr	r2, [pc, #232]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	6393      	str	r3, [r2, #56]	; 0x38
 8002f76:	4b38      	ldr	r3, [pc, #224]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
 8002f80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	4a34      	ldr	r2, [pc, #208]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002f88:	f043 0310 	orr.w	r3, r3, #16
 8002f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8e:	4b32      	ldr	r3, [pc, #200]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9a:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a2e      	ldr	r2, [pc, #184]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	4a28      	ldr	r2, [pc, #160]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002fb8:	f043 0308 	orr.w	r3, r3, #8
 8002fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbe:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_QSPI_MspInit+0x110>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002fda:	2309      	movs	r3, #9
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002fde:	f107 031c 	add.w	r3, r7, #28
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	481d      	ldr	r0, [pc, #116]	; (800305c <HAL_QSPI_MspInit+0x114>)
 8002fe6:	f001 ff13 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002fea:	2340      	movs	r3, #64	; 0x40
 8002fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ffa:	230a      	movs	r3, #10
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ffe:	f107 031c 	add.w	r3, r7, #28
 8003002:	4619      	mov	r1, r3
 8003004:	4816      	ldr	r0, [pc, #88]	; (8003060 <HAL_QSPI_MspInit+0x118>)
 8003006:	f001 ff03 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800300a:	2304      	movs	r3, #4
 800300c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300e:	2302      	movs	r3, #2
 8003010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003016:	2303      	movs	r3, #3
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800301a:	2309      	movs	r3, #9
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301e:	f107 031c 	add.w	r3, r7, #28
 8003022:	4619      	mov	r1, r3
 8003024:	480e      	ldr	r0, [pc, #56]	; (8003060 <HAL_QSPI_MspInit+0x118>)
 8003026:	f001 fef3 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800302a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800302e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003038:	2303      	movs	r3, #3
 800303a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800303c:	2309      	movs	r3, #9
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003040:	f107 031c 	add.w	r3, r7, #28
 8003044:	4619      	mov	r1, r3
 8003046:	4807      	ldr	r0, [pc, #28]	; (8003064 <HAL_QSPI_MspInit+0x11c>)
 8003048:	f001 fee2 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800304c:	bf00      	nop
 800304e:	3730      	adds	r7, #48	; 0x30
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	a0001000 	.word	0xa0001000
 8003058:	40023800 	.word	0x40023800
 800305c:	40021000 	.word	0x40021000
 8003060:	40020400 	.word	0x40020400
 8003064:	40020c00 	.word	0x40020c00

08003068 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a07      	ldr	r2, [pc, #28]	; (8003094 <HAL_RTC_MspInit+0x2c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d105      	bne.n	8003086 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <HAL_RTC_MspInit+0x30>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a06      	ldr	r2, [pc, #24]	; (8003098 <HAL_RTC_MspInit+0x30>)
 8003080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40002800 	.word	0x40002800
 8003098:	40023800 	.word	0x40023800

0800309c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b08a      	sub	sp, #40	; 0x28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a25      	ldr	r2, [pc, #148]	; (8003150 <HAL_SD_MspInit+0xb4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d144      	bne.n	8003148 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80030be:	4b25      	ldr	r3, [pc, #148]	; (8003154 <HAL_SD_MspInit+0xb8>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	4a24      	ldr	r2, [pc, #144]	; (8003154 <HAL_SD_MspInit+0xb8>)
 80030c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030c8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <HAL_SD_MspInit+0xb8>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d6:	4b1f      	ldr	r3, [pc, #124]	; (8003154 <HAL_SD_MspInit+0xb8>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	4a1e      	ldr	r2, [pc, #120]	; (8003154 <HAL_SD_MspInit+0xb8>)
 80030dc:	f043 0304 	orr.w	r3, r3, #4
 80030e0:	6313      	str	r3, [r2, #48]	; 0x30
 80030e2:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <HAL_SD_MspInit+0xb8>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ee:	4b19      	ldr	r3, [pc, #100]	; (8003154 <HAL_SD_MspInit+0xb8>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	4a18      	ldr	r2, [pc, #96]	; (8003154 <HAL_SD_MspInit+0xb8>)
 80030f4:	f043 0308 	orr.w	r3, r3, #8
 80030f8:	6313      	str	r3, [r2, #48]	; 0x30
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <HAL_SD_MspInit+0xb8>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003106:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800310a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003114:	2303      	movs	r3, #3
 8003116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003118:	230c      	movs	r3, #12
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	480d      	ldr	r0, [pc, #52]	; (8003158 <HAL_SD_MspInit+0xbc>)
 8003124:	f001 fe74 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003128:	2304      	movs	r3, #4
 800312a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003134:	2303      	movs	r3, #3
 8003136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003138:	230c      	movs	r3, #12
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	4619      	mov	r1, r3
 8003142:	4806      	ldr	r0, [pc, #24]	; (800315c <HAL_SD_MspInit+0xc0>)
 8003144:	f001 fe64 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003148:	bf00      	nop
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40023800 	.word	0x40023800
 8003158:	40020800 	.word	0x40020800
 800315c:	40020c00 	.word	0x40020c00

08003160 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	60da      	str	r2, [r3, #12]
 8003176:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8003180:	d127      	bne.n	80031d2 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003182:	4b16      	ldr	r3, [pc, #88]	; (80031dc <HAL_SPDIFRX_MspInit+0x7c>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	4a15      	ldr	r2, [pc, #84]	; (80031dc <HAL_SPDIFRX_MspInit+0x7c>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6413      	str	r3, [r2, #64]	; 0x40
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <HAL_SPDIFRX_MspInit+0x7c>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <HAL_SPDIFRX_MspInit+0x7c>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	4a0f      	ldr	r2, [pc, #60]	; (80031dc <HAL_SPDIFRX_MspInit+0x7c>)
 80031a0:	f043 0308 	orr.w	r3, r3, #8
 80031a4:	6313      	str	r3, [r2, #48]	; 0x30
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <HAL_SPDIFRX_MspInit+0x7c>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80031c2:	2308      	movs	r3, #8
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	4804      	ldr	r0, [pc, #16]	; (80031e0 <HAL_SPDIFRX_MspInit+0x80>)
 80031ce:	f001 fe1f 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80031d2:	bf00      	nop
 80031d4:	3728      	adds	r7, #40	; 0x28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40020c00 	.word	0x40020c00

080031e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	; 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a25      	ldr	r2, [pc, #148]	; (8003298 <HAL_SPI_MspInit+0xb4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d144      	bne.n	8003290 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <HAL_SPI_MspInit+0xb8>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	4a24      	ldr	r2, [pc, #144]	; (800329c <HAL_SPI_MspInit+0xb8>)
 800320c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003210:	6413      	str	r3, [r2, #64]	; 0x40
 8003212:	4b22      	ldr	r3, [pc, #136]	; (800329c <HAL_SPI_MspInit+0xb8>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800321e:	4b1f      	ldr	r3, [pc, #124]	; (800329c <HAL_SPI_MspInit+0xb8>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4a1e      	ldr	r2, [pc, #120]	; (800329c <HAL_SPI_MspInit+0xb8>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4b1c      	ldr	r3, [pc, #112]	; (800329c <HAL_SPI_MspInit+0xb8>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003236:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_SPI_MspInit+0xb8>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4a18      	ldr	r2, [pc, #96]	; (800329c <HAL_SPI_MspInit+0xb8>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_SPI_MspInit+0xb8>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800324e:	2302      	movs	r3, #2
 8003250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003252:	2302      	movs	r3, #2
 8003254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325a:	2300      	movs	r3, #0
 800325c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800325e:	2305      	movs	r3, #5
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003262:	f107 0314 	add.w	r3, r7, #20
 8003266:	4619      	mov	r1, r3
 8003268:	480d      	ldr	r0, [pc, #52]	; (80032a0 <HAL_SPI_MspInit+0xbc>)
 800326a:	f001 fdd1 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800326e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327c:	2300      	movs	r3, #0
 800327e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003280:	2305      	movs	r3, #5
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	4619      	mov	r1, r3
 800328a:	4806      	ldr	r0, [pc, #24]	; (80032a4 <HAL_SPI_MspInit+0xc0>)
 800328c:	f001 fdc0 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003290:	bf00      	nop
 8003292:	3728      	adds	r7, #40	; 0x28
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40003800 	.word	0x40003800
 800329c:	40023800 	.word	0x40023800
 80032a0:	40022000 	.word	0x40022000
 80032a4:	40020400 	.word	0x40020400

080032a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	; 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a2e      	ldr	r2, [pc, #184]	; (8003370 <HAL_TIM_Base_MspInit+0xc8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10c      	bne.n	80032d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032ba:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	4a2d      	ldr	r2, [pc, #180]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	6453      	str	r3, [r2, #68]	; 0x44
 80032c6:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80032d2:	e046      	b.n	8003362 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032dc:	d10c      	bne.n	80032f8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032de:	4b25      	ldr	r3, [pc, #148]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a24      	ldr	r2, [pc, #144]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	69bb      	ldr	r3, [r7, #24]
}
 80032f6:	e034      	b.n	8003362 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <HAL_TIM_Base_MspInit+0xd0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10c      	bne.n	800331c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	697b      	ldr	r3, [r7, #20]
}
 800331a:	e022      	b.n	8003362 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a16      	ldr	r2, [pc, #88]	; (800337c <HAL_TIM_Base_MspInit+0xd4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10c      	bne.n	8003340 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	4a12      	ldr	r2, [pc, #72]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 800332c:	f043 0308 	orr.w	r3, r3, #8
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]
}
 800333e:	e010      	b.n	8003362 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <HAL_TIM_Base_MspInit+0xd8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d10b      	bne.n	8003362 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6453      	str	r3, [r2, #68]	; 0x44
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <HAL_TIM_Base_MspInit+0xcc>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
}
 8003362:	bf00      	nop
 8003364:	3724      	adds	r7, #36	; 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40010000 	.word	0x40010000
 8003374:	40023800 	.word	0x40023800
 8003378:	40000400 	.word	0x40000400
 800337c:	40000c00 	.word	0x40000c00
 8003380:	40010400 	.word	0x40010400

08003384 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <HAL_TIM_PWM_MspInit+0x38>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d10b      	bne.n	80033ae <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <HAL_TIM_PWM_MspInit+0x3c>)
 800339c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a0:	6413      	str	r3, [r2, #64]	; 0x40
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <HAL_TIM_PWM_MspInit+0x3c>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40001800 	.word	0x40001800
 80033c0:	40023800 	.word	0x40023800

080033c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08c      	sub	sp, #48	; 0x30
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 031c 	add.w	r3, r7, #28
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a56      	ldr	r2, [pc, #344]	; (800353c <HAL_TIM_MspPostInit+0x178>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d11d      	bne.n	8003422 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e6:	4b56      	ldr	r3, [pc, #344]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a55      	ldr	r2, [pc, #340]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80033fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003404:	2302      	movs	r3, #2
 8003406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340c:	2300      	movs	r3, #0
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003410:	2301      	movs	r3, #1
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003414:	f107 031c 	add.w	r3, r7, #28
 8003418:	4619      	mov	r1, r3
 800341a:	484a      	ldr	r0, [pc, #296]	; (8003544 <HAL_TIM_MspPostInit+0x180>)
 800341c:	f001 fcf8 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003420:	e087      	b.n	8003532 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342a:	d11d      	bne.n	8003468 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342c:	4b44      	ldr	r3, [pc, #272]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	4a43      	ldr	r2, [pc, #268]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6313      	str	r3, [r2, #48]	; 0x30
 8003438:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	2302      	movs	r3, #2
 800344c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003452:	2300      	movs	r3, #0
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003456:	2301      	movs	r3, #1
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800345a:	f107 031c 	add.w	r3, r7, #28
 800345e:	4619      	mov	r1, r3
 8003460:	4838      	ldr	r0, [pc, #224]	; (8003544 <HAL_TIM_MspPostInit+0x180>)
 8003462:	f001 fcd5 	bl	8004e10 <HAL_GPIO_Init>
}
 8003466:	e064      	b.n	8003532 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a36      	ldr	r2, [pc, #216]	; (8003548 <HAL_TIM_MspPostInit+0x184>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d11c      	bne.n	80034ac <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003472:	4b33      	ldr	r3, [pc, #204]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a32      	ldr	r2, [pc, #200]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b30      	ldr	r3, [pc, #192]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	613b      	str	r3, [r7, #16]
 8003488:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800348a:	2310      	movs	r3, #16
 800348c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348e:	2302      	movs	r3, #2
 8003490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	2300      	movs	r3, #0
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800349a:	2302      	movs	r3, #2
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800349e:	f107 031c 	add.w	r3, r7, #28
 80034a2:	4619      	mov	r1, r3
 80034a4:	4829      	ldr	r0, [pc, #164]	; (800354c <HAL_TIM_MspPostInit+0x188>)
 80034a6:	f001 fcb3 	bl	8004e10 <HAL_GPIO_Init>
}
 80034aa:	e042      	b.n	8003532 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a27      	ldr	r2, [pc, #156]	; (8003550 <HAL_TIM_MspPostInit+0x18c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d11c      	bne.n	80034f0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a21      	ldr	r2, [pc, #132]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 80034bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b1f      	ldr	r3, [pc, #124]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	2300      	movs	r3, #0
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034de:	2302      	movs	r3, #2
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80034e2:	f107 031c 	add.w	r3, r7, #28
 80034e6:	4619      	mov	r1, r3
 80034e8:	481a      	ldr	r0, [pc, #104]	; (8003554 <HAL_TIM_MspPostInit+0x190>)
 80034ea:	f001 fc91 	bl	8004e10 <HAL_GPIO_Init>
}
 80034ee:	e020      	b.n	8003532 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a18      	ldr	r2, [pc, #96]	; (8003558 <HAL_TIM_MspPostInit+0x194>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d11b      	bne.n	8003532 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a10      	ldr	r2, [pc, #64]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 8003500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <HAL_TIM_MspPostInit+0x17c>)
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003512:	2340      	movs	r3, #64	; 0x40
 8003514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351e:	2300      	movs	r3, #0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003522:	2309      	movs	r3, #9
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003526:	f107 031c 	add.w	r3, r7, #28
 800352a:	4619      	mov	r1, r3
 800352c:	480b      	ldr	r0, [pc, #44]	; (800355c <HAL_TIM_MspPostInit+0x198>)
 800352e:	f001 fc6f 	bl	8004e10 <HAL_GPIO_Init>
}
 8003532:	bf00      	nop
 8003534:	3730      	adds	r7, #48	; 0x30
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000
 8003540:	40023800 	.word	0x40023800
 8003544:	40020000 	.word	0x40020000
 8003548:	40000400 	.word	0x40000400
 800354c:	40020400 	.word	0x40020400
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40022000 	.word	0x40022000
 8003558:	40001800 	.word	0x40001800
 800355c:	40021c00 	.word	0x40021c00

08003560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08c      	sub	sp, #48	; 0x30
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a3c      	ldr	r2, [pc, #240]	; (8003670 <HAL_UART_MspInit+0x110>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d145      	bne.n	800360e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003582:	4b3c      	ldr	r3, [pc, #240]	; (8003674 <HAL_UART_MspInit+0x114>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003586:	4a3b      	ldr	r2, [pc, #236]	; (8003674 <HAL_UART_MspInit+0x114>)
 8003588:	f043 0310 	orr.w	r3, r3, #16
 800358c:	6453      	str	r3, [r2, #68]	; 0x44
 800358e:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_UART_MspInit+0x114>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_UART_MspInit+0x114>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4a35      	ldr	r2, [pc, #212]	; (8003674 <HAL_UART_MspInit+0x114>)
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	6313      	str	r3, [r2, #48]	; 0x30
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_UART_MspInit+0x114>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b2:	4b30      	ldr	r3, [pc, #192]	; (8003674 <HAL_UART_MspInit+0x114>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a2f      	ldr	r2, [pc, #188]	; (8003674 <HAL_UART_MspInit+0x114>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b2d      	ldr	r3, [pc, #180]	; (8003674 <HAL_UART_MspInit+0x114>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035da:	2307      	movs	r3, #7
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80035de:	f107 031c 	add.w	r3, r7, #28
 80035e2:	4619      	mov	r1, r3
 80035e4:	4824      	ldr	r0, [pc, #144]	; (8003678 <HAL_UART_MspInit+0x118>)
 80035e6:	f001 fc13 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80035ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f0:	2302      	movs	r3, #2
 80035f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f8:	2300      	movs	r3, #0
 80035fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035fc:	2307      	movs	r3, #7
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003600:	f107 031c 	add.w	r3, r7, #28
 8003604:	4619      	mov	r1, r3
 8003606:	481d      	ldr	r0, [pc, #116]	; (800367c <HAL_UART_MspInit+0x11c>)
 8003608:	f001 fc02 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800360c:	e02c      	b.n	8003668 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1b      	ldr	r2, [pc, #108]	; (8003680 <HAL_UART_MspInit+0x120>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d127      	bne.n	8003668 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003618:	4b16      	ldr	r3, [pc, #88]	; (8003674 <HAL_UART_MspInit+0x114>)
 800361a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361c:	4a15      	ldr	r2, [pc, #84]	; (8003674 <HAL_UART_MspInit+0x114>)
 800361e:	f043 0320 	orr.w	r3, r3, #32
 8003622:	6453      	str	r3, [r2, #68]	; 0x44
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_UART_MspInit+0x114>)
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003630:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_UART_MspInit+0x114>)
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	4a0f      	ldr	r2, [pc, #60]	; (8003674 <HAL_UART_MspInit+0x114>)
 8003636:	f043 0304 	orr.w	r3, r3, #4
 800363a:	6313      	str	r3, [r2, #48]	; 0x30
 800363c:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <HAL_UART_MspInit+0x114>)
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003648:	23c0      	movs	r3, #192	; 0xc0
 800364a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364c:	2302      	movs	r3, #2
 800364e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003654:	2303      	movs	r3, #3
 8003656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003658:	2308      	movs	r3, #8
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365c:	f107 031c 	add.w	r3, r7, #28
 8003660:	4619      	mov	r1, r3
 8003662:	4808      	ldr	r0, [pc, #32]	; (8003684 <HAL_UART_MspInit+0x124>)
 8003664:	f001 fbd4 	bl	8004e10 <HAL_GPIO_Init>
}
 8003668:	bf00      	nop
 800366a:	3730      	adds	r7, #48	; 0x30
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40011000 	.word	0x40011000
 8003674:	40023800 	.word	0x40023800
 8003678:	40020400 	.word	0x40020400
 800367c:	40020000 	.word	0x40020000
 8003680:	40011400 	.word	0x40011400
 8003684:	40020800 	.word	0x40020800

08003688 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800369c:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <HAL_FMC_MspInit+0x100>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d16d      	bne.n	8003780 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80036a4:	4b38      	ldr	r3, [pc, #224]	; (8003788 <HAL_FMC_MspInit+0x100>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80036aa:	4b38      	ldr	r3, [pc, #224]	; (800378c <HAL_FMC_MspInit+0x104>)
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	4a37      	ldr	r2, [pc, #220]	; (800378c <HAL_FMC_MspInit+0x104>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6393      	str	r3, [r2, #56]	; 0x38
 80036b6:	4b35      	ldr	r3, [pc, #212]	; (800378c <HAL_FMC_MspInit+0x104>)
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	603b      	str	r3, [r7, #0]
 80036c0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80036c2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80036c6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d0:	2303      	movs	r3, #3
 80036d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036d4:	230c      	movs	r3, #12
 80036d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	4619      	mov	r1, r3
 80036dc:	482c      	ldr	r0, [pc, #176]	; (8003790 <HAL_FMC_MspInit+0x108>)
 80036de:	f001 fb97 	bl	8004e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80036e2:	f248 1333 	movw	r3, #33075	; 0x8133
 80036e6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e8:	2302      	movs	r3, #2
 80036ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f0:	2303      	movs	r3, #3
 80036f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80036f4:	230c      	movs	r3, #12
 80036f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036f8:	1d3b      	adds	r3, r7, #4
 80036fa:	4619      	mov	r1, r3
 80036fc:	4825      	ldr	r0, [pc, #148]	; (8003794 <HAL_FMC_MspInit+0x10c>)
 80036fe:	f001 fb87 	bl	8004e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003702:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003706:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003708:	2302      	movs	r3, #2
 800370a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003710:	2303      	movs	r3, #3
 8003712:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003714:	230c      	movs	r3, #12
 8003716:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003718:	1d3b      	adds	r3, r7, #4
 800371a:	4619      	mov	r1, r3
 800371c:	481e      	ldr	r0, [pc, #120]	; (8003798 <HAL_FMC_MspInit+0x110>)
 800371e:	f001 fb77 	bl	8004e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003722:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003726:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003728:	2302      	movs	r3, #2
 800372a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003730:	2303      	movs	r3, #3
 8003732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003734:	230c      	movs	r3, #12
 8003736:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4817      	ldr	r0, [pc, #92]	; (800379c <HAL_FMC_MspInit+0x114>)
 800373e:	f001 fb67 	bl	8004e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003742:	2328      	movs	r3, #40	; 0x28
 8003744:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374e:	2303      	movs	r3, #3
 8003750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003752:	230c      	movs	r3, #12
 8003754:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003756:	1d3b      	adds	r3, r7, #4
 8003758:	4619      	mov	r1, r3
 800375a:	4811      	ldr	r0, [pc, #68]	; (80037a0 <HAL_FMC_MspInit+0x118>)
 800375c:	f001 fb58 	bl	8004e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003760:	2308      	movs	r3, #8
 8003762:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376c:	2303      	movs	r3, #3
 800376e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003770:	230c      	movs	r3, #12
 8003772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	4619      	mov	r1, r3
 8003778:	480a      	ldr	r0, [pc, #40]	; (80037a4 <HAL_FMC_MspInit+0x11c>)
 800377a:	f001 fb49 	bl	8004e10 <HAL_GPIO_Init>
 800377e:	e000      	b.n	8003782 <HAL_FMC_MspInit+0xfa>
    return;
 8003780:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	200000c4 	.word	0x200000c4
 800378c:	40023800 	.word	0x40023800
 8003790:	40021000 	.word	0x40021000
 8003794:	40021800 	.word	0x40021800
 8003798:	40020c00 	.word	0x40020c00
 800379c:	40021400 	.word	0x40021400
 80037a0:	40021c00 	.word	0x40021c00
 80037a4:	40020800 	.word	0x40020800

080037a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80037b0:	f7ff ff6a 	bl	8003688 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a2b      	ldr	r2, [pc, #172]	; (8003878 <HAL_SAI_MspInit+0xbc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d124      	bne.n	8003818 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80037ce:	4b2b      	ldr	r3, [pc, #172]	; (800387c <HAL_SAI_MspInit+0xc0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10b      	bne.n	80037ee <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80037d6:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_SAI_MspInit+0xc4>)
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	4a29      	ldr	r2, [pc, #164]	; (8003880 <HAL_SAI_MspInit+0xc4>)
 80037dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037e0:	6453      	str	r3, [r2, #68]	; 0x44
 80037e2:	4b27      	ldr	r3, [pc, #156]	; (8003880 <HAL_SAI_MspInit+0xc4>)
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80037ee:	4b23      	ldr	r3, [pc, #140]	; (800387c <HAL_SAI_MspInit+0xc0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	4a21      	ldr	r2, [pc, #132]	; (800387c <HAL_SAI_MspInit+0xc0>)
 80037f6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80037f8:	23f0      	movs	r3, #240	; 0xf0
 80037fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fc:	2302      	movs	r3, #2
 80037fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003804:	2300      	movs	r3, #0
 8003806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003808:	230a      	movs	r3, #10
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800380c:	f107 0314 	add.w	r3, r7, #20
 8003810:	4619      	mov	r1, r3
 8003812:	481c      	ldr	r0, [pc, #112]	; (8003884 <HAL_SAI_MspInit+0xc8>)
 8003814:	f001 fafc 	bl	8004e10 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1a      	ldr	r2, [pc, #104]	; (8003888 <HAL_SAI_MspInit+0xcc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d125      	bne.n	800386e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003822:	4b16      	ldr	r3, [pc, #88]	; (800387c <HAL_SAI_MspInit+0xc0>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800382a:	4b15      	ldr	r3, [pc, #84]	; (8003880 <HAL_SAI_MspInit+0xc4>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	4a14      	ldr	r2, [pc, #80]	; (8003880 <HAL_SAI_MspInit+0xc4>)
 8003830:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003834:	6453      	str	r3, [r2, #68]	; 0x44
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_SAI_MspInit+0xc4>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003842:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_SAI_MspInit+0xc0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	4a0c      	ldr	r2, [pc, #48]	; (800387c <HAL_SAI_MspInit+0xc0>)
 800384a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800384c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385a:	2300      	movs	r3, #0
 800385c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800385e:	230a      	movs	r3, #10
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4619      	mov	r1, r3
 8003868:	4808      	ldr	r0, [pc, #32]	; (800388c <HAL_SAI_MspInit+0xd0>)
 800386a:	f001 fad1 	bl	8004e10 <HAL_GPIO_Init>

    }
}
 800386e:	bf00      	nop
 8003870:	3728      	adds	r7, #40	; 0x28
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40015c04 	.word	0x40015c04
 800387c:	200000c8 	.word	0x200000c8
 8003880:	40023800 	.word	0x40023800
 8003884:	40022000 	.word	0x40022000
 8003888:	40015c24 	.word	0x40015c24
 800388c:	40021800 	.word	0x40021800

08003890 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08c      	sub	sp, #48	; 0x30
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80038a0:	2200      	movs	r2, #0
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	2036      	movs	r0, #54	; 0x36
 80038a6:	f000 fcb7 	bl	8004218 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038aa:	2036      	movs	r0, #54	; 0x36
 80038ac:	f000 fcd0 	bl	8004250 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80038b0:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <HAL_InitTick+0xa0>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <HAL_InitTick+0xa0>)
 80038b6:	f043 0310 	orr.w	r3, r3, #16
 80038ba:	6413      	str	r3, [r2, #64]	; 0x40
 80038bc:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <HAL_InitTick+0xa0>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038c8:	f107 0210 	add.w	r2, r7, #16
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	4611      	mov	r1, r2
 80038d2:	4618      	mov	r0, r3
 80038d4:	f003 fc4e 	bl	8007174 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038d8:	f003 fc24 	bl	8007124 <HAL_RCC_GetPCLK1Freq>
 80038dc:	4603      	mov	r3, r0
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80038e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e4:	4a13      	ldr	r2, [pc, #76]	; (8003934 <HAL_InitTick+0xa4>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0c9b      	lsrs	r3, r3, #18
 80038ec:	3b01      	subs	r3, #1
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_InitTick+0xa8>)
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <HAL_InitTick+0xac>)
 80038f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_InitTick+0xa8>)
 80038f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038fc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038fe:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <HAL_InitTick+0xa8>)
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003904:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <HAL_InitTick+0xa8>)
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_InitTick+0xa8>)
 800390c:	2200      	movs	r2, #0
 800390e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003910:	4809      	ldr	r0, [pc, #36]	; (8003938 <HAL_InitTick+0xa8>)
 8003912:	f005 fdcf 	bl	80094b4 <HAL_TIM_Base_Init>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800391c:	4806      	ldr	r0, [pc, #24]	; (8003938 <HAL_InitTick+0xa8>)
 800391e:	f005 fdf5 	bl	800950c <HAL_TIM_Base_Start_IT>
 8003922:	4603      	mov	r3, r0
 8003924:	e000      	b.n	8003928 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
}
 8003928:	4618      	mov	r0, r3
 800392a:	3730      	adds	r7, #48	; 0x30
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40023800 	.word	0x40023800
 8003934:	431bde83 	.word	0x431bde83
 8003938:	20000a58 	.word	0x20000a58
 800393c:	40001000 	.word	0x40001000

08003940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003952:	e7fe      	b.n	8003952 <HardFault_Handler+0x4>

08003954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003958:	e7fe      	b.n	8003958 <MemManage_Handler+0x4>

0800395a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800395e:	e7fe      	b.n	800395e <BusFault_Handler+0x4>

08003960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003964:	e7fe      	b.n	8003964 <UsageFault_Handler+0x4>

08003966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003966:	b480      	push	{r7}
 8003968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003994:	bf00      	nop
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80039a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039a8:	f001 fd00 	bl	80053ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_Delay(300);
 80039ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039b0:	f000 f8d0 	bl	8003b54 <HAL_Delay>
  mode = mode + 1;
 80039b4:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <EXTI15_10_IRQHandler+0x30>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	4a05      	ldr	r2, [pc, #20]	; (80039d0 <EXTI15_10_IRQHandler+0x30>)
 80039bc:	6013      	str	r3, [r2, #0]
  
  if (mode > 2) {
 80039be:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <EXTI15_10_IRQHandler+0x30>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	dd02      	ble.n	80039cc <EXTI15_10_IRQHandler+0x2c>
    mode = 0;
 80039c6:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <EXTI15_10_IRQHandler+0x30>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
  }
  
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039cc:	bf00      	nop
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	200000c0 	.word	0x200000c0

080039d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039d8:	4802      	ldr	r0, [pc, #8]	; (80039e4 <TIM6_DAC_IRQHandler+0x10>)
 80039da:	f005 fdec 	bl	80095b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039de:	bf00      	nop
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000a58 	.word	0x20000a58

080039e8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80039ec:	4802      	ldr	r0, [pc, #8]	; (80039f8 <LTDC_IRQHandler+0x10>)
 80039ee:	f002 fb81 	bl	80060f4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000660 	.word	0x20000660

080039fc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003a00:	4802      	ldr	r0, [pc, #8]	; (8003a0c <DMA2D_IRQHandler+0x10>)
 8003a02:	f000 ffc7 	bl	8004994 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000910 	.word	0x20000910

08003a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a18:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <_sbrk+0x5c>)
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <_sbrk+0x60>)
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a24:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <_sbrk+0x64>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <_sbrk+0x64>)
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <_sbrk+0x68>)
 8003a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <_sbrk+0x64>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d207      	bcs.n	8003a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a40:	f009 ff40 	bl	800d8c4 <__errno>
 8003a44:	4602      	mov	r2, r0
 8003a46:	230c      	movs	r3, #12
 8003a48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4e:	e009      	b.n	8003a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a50:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <_sbrk+0x64>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a56:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <_sbrk+0x64>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <_sbrk+0x64>)
 8003a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a62:	68fb      	ldr	r3, [r7, #12]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20050000 	.word	0x20050000
 8003a70:	00000400 	.word	0x00000400
 8003a74:	200000cc 	.word	0x200000cc
 8003a78:	20000b80 	.word	0x20000b80

08003a7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <SystemInit+0x28>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	4a07      	ldr	r2, [pc, #28]	; (8003aa4 <SystemInit+0x28>)
 8003a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <SystemInit+0x28>)
 8003a92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a96:	609a      	str	r2, [r3, #8]
#endif
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ae0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003aac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003aae:	e003      	b.n	8003ab8 <LoopCopyDataInit>

08003ab0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ab0:	4b0c      	ldr	r3, [pc, #48]	; (8003ae4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ab2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ab4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ab6:	3104      	adds	r1, #4

08003ab8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ab8:	480b      	ldr	r0, [pc, #44]	; (8003ae8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003abc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003abe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ac0:	d3f6      	bcc.n	8003ab0 <CopyDataInit>
  ldr  r2, =_sbss
 8003ac2:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ac4:	e002      	b.n	8003acc <LoopFillZerobss>

08003ac6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ac6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ac8:	f842 3b04 	str.w	r3, [r2], #4

08003acc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003acc:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003ace:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003ad0:	d3f9      	bcc.n	8003ac6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ad2:	f7ff ffd3 	bl	8003a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ad6:	f009 fefb 	bl	800d8d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ada:	f7fd f95f 	bl	8000d9c <main>
  bx  lr    
 8003ade:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ae0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003ae4:	0800fde4 	.word	0x0800fde4
  ldr  r0, =_sdata
 8003ae8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003aec:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8003af0:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8003af4:	20000b7c 	.word	0x20000b7c

08003af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003af8:	e7fe      	b.n	8003af8 <ADC_IRQHandler>

08003afa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003afe:	2003      	movs	r0, #3
 8003b00:	f000 fb7f 	bl	8004202 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b04:	2000      	movs	r0, #0
 8003b06:	f7ff fec3 	bl	8003890 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003b0a:	f7fe ff3b 	bl	8002984 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_IncTick+0x20>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_IncTick+0x24>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4413      	add	r3, r2
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <HAL_IncTick+0x24>)
 8003b26:	6013      	str	r3, [r2, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000008 	.word	0x20000008
 8003b38:	20000a98 	.word	0x20000a98

08003b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b40:	4b03      	ldr	r3, [pc, #12]	; (8003b50 <HAL_GetTick+0x14>)
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000a98 	.word	0x20000a98

08003b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b5c:	f7ff ffee 	bl	8003b3c <HAL_GetTick>
 8003b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d005      	beq.n	8003b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b6e:	4b09      	ldr	r3, [pc, #36]	; (8003b94 <HAL_Delay+0x40>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b7a:	bf00      	nop
 8003b7c:	f7ff ffde 	bl	8003b3c <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d8f7      	bhi.n	8003b7c <HAL_Delay+0x28>
  {
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	20000008 	.word	0x20000008

08003b98 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e031      	b.n	8003c12 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fe ff0c 	bl	80029d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d116      	bne.n	8003c04 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bda:	4b10      	ldr	r3, [pc, #64]	; (8003c1c <HAL_ADC_Init+0x84>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	f043 0202 	orr.w	r2, r3, #2
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f964 	bl	8003eb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40
 8003c02:	e001      	b.n	8003c08 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	ffffeefd 	.word	0xffffeefd

08003c20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x1c>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e12a      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x272>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b09      	cmp	r3, #9
 8003c4a:	d93a      	bls.n	8003cc2 <HAL_ADC_ConfigChannel+0xa2>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c54:	d035      	beq.n	8003cc2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68d9      	ldr	r1, [r3, #12]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	3b1e      	subs	r3, #30
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43da      	mvns	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	400a      	ands	r2, r1
 8003c7a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a87      	ldr	r2, [pc, #540]	; (8003ea0 <HAL_ADC_ConfigChannel+0x280>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d10a      	bne.n	8003c9c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68d9      	ldr	r1, [r3, #12]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	061a      	lsls	r2, r3, #24
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c9a:	e035      	b.n	8003d08 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68d9      	ldr	r1, [r3, #12]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	4618      	mov	r0, r3
 8003cae:	4603      	mov	r3, r0
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	4403      	add	r3, r0
 8003cb4:	3b1e      	subs	r3, #30
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003cc0:	e022      	b.n	8003d08 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6919      	ldr	r1, [r3, #16]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4413      	add	r3, r2
 8003cd6:	2207      	movs	r2, #7
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6919      	ldr	r1, [r3, #16]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4403      	add	r3, r0
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b06      	cmp	r3, #6
 8003d0e:	d824      	bhi.n	8003d5a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	3b05      	subs	r3, #5
 8003d22:	221f      	movs	r2, #31
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43da      	mvns	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	400a      	ands	r2, r1
 8003d30:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	4618      	mov	r0, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	3b05      	subs	r3, #5
 8003d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	635a      	str	r2, [r3, #52]	; 0x34
 8003d58:	e04c      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d824      	bhi.n	8003dac <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	3b23      	subs	r3, #35	; 0x23
 8003d74:	221f      	movs	r2, #31
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	43da      	mvns	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	400a      	ands	r2, r1
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	4618      	mov	r0, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3b23      	subs	r3, #35	; 0x23
 8003d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
 8003daa:	e023      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	3b41      	subs	r3, #65	; 0x41
 8003dbe:	221f      	movs	r2, #31
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43da      	mvns	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	400a      	ands	r2, r1
 8003dcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	3b41      	subs	r3, #65	; 0x41
 8003de8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2a      	ldr	r2, [pc, #168]	; (8003ea4 <HAL_ADC_ConfigChannel+0x284>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10a      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x1f4>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e06:	d105      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003e08:	4b27      	ldr	r3, [pc, #156]	; (8003ea8 <HAL_ADC_ConfigChannel+0x288>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a26      	ldr	r2, [pc, #152]	; (8003ea8 <HAL_ADC_ConfigChannel+0x288>)
 8003e0e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003e12:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a22      	ldr	r2, [pc, #136]	; (8003ea4 <HAL_ADC_ConfigChannel+0x284>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d109      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x212>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b12      	cmp	r3, #18
 8003e24:	d105      	bne.n	8003e32 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_ADC_ConfigChannel+0x288>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4a1f      	ldr	r2, [pc, #124]	; (8003ea8 <HAL_ADC_ConfigChannel+0x288>)
 8003e2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e30:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <HAL_ADC_ConfigChannel+0x284>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d125      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x268>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a17      	ldr	r2, [pc, #92]	; (8003ea0 <HAL_ADC_ConfigChannel+0x280>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <HAL_ADC_ConfigChannel+0x22e>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b11      	cmp	r3, #17
 8003e4c:	d11c      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <HAL_ADC_ConfigChannel+0x288>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <HAL_ADC_ConfigChannel+0x288>)
 8003e54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e58:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <HAL_ADC_ConfigChannel+0x280>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d111      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <HAL_ADC_ConfigChannel+0x28c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a11      	ldr	r2, [pc, #68]	; (8003eb0 <HAL_ADC_ConfigChannel+0x290>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	0c9a      	lsrs	r2, r3, #18
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003e7a:	e002      	b.n	8003e82 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f9      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	10000012 	.word	0x10000012
 8003ea4:	40012000 	.word	0x40012000
 8003ea8:	40012300 	.word	0x40012300
 8003eac:	20000000 	.word	0x20000000
 8003eb0:	431bde83 	.word	0x431bde83

08003eb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003ebc:	4b78      	ldr	r3, [pc, #480]	; (80040a0 <ADC_Init+0x1ec>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a77      	ldr	r2, [pc, #476]	; (80040a0 <ADC_Init+0x1ec>)
 8003ec2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003ec6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003ec8:	4b75      	ldr	r3, [pc, #468]	; (80040a0 <ADC_Init+0x1ec>)
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4973      	ldr	r1, [pc, #460]	; (80040a0 <ADC_Init+0x1ec>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	021a      	lsls	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6899      	ldr	r1, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	4a58      	ldr	r2, [pc, #352]	; (80040a4 <ADC_Init+0x1f0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6899      	ldr	r1, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	e00f      	b.n	8003fae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0202 	bic.w	r2, r2, #2
 8003fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6899      	ldr	r1, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	005a      	lsls	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ffa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	3b01      	subs	r3, #1
 8004008:	035a      	lsls	r2, r3, #13
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	e007      	b.n	8004024 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004022:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	3b01      	subs	r3, #1
 8004040:	051a      	lsls	r2, r3, #20
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6899      	ldr	r1, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004066:	025a      	lsls	r2, r3, #9
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6899      	ldr	r1, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	029a      	lsls	r2, r3, #10
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012300 	.word	0x40012300
 80040a4:	0f000001 	.word	0x0f000001

080040a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <__NVIC_SetPriorityGrouping+0x40>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040c4:	4013      	ands	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <__NVIC_SetPriorityGrouping+0x44>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <__NVIC_SetPriorityGrouping+0x40>)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	60d3      	str	r3, [r2, #12]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000ed00 	.word	0xe000ed00
 80040ec:	05fa0000 	.word	0x05fa0000

080040f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <__NVIC_GetPriorityGrouping+0x18>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	f003 0307 	and.w	r3, r3, #7
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411a:	2b00      	cmp	r3, #0
 800411c:	db0b      	blt.n	8004136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	f003 021f 	and.w	r2, r3, #31
 8004124:	4907      	ldr	r1, [pc, #28]	; (8004144 <__NVIC_EnableIRQ+0x38>)
 8004126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2001      	movs	r0, #1
 800412e:	fa00 f202 	lsl.w	r2, r0, r2
 8004132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000e100 	.word	0xe000e100

08004148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	6039      	str	r1, [r7, #0]
 8004152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004158:	2b00      	cmp	r3, #0
 800415a:	db0a      	blt.n	8004172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	490c      	ldr	r1, [pc, #48]	; (8004194 <__NVIC_SetPriority+0x4c>)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	0112      	lsls	r2, r2, #4
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	440b      	add	r3, r1
 800416c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004170:	e00a      	b.n	8004188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4908      	ldr	r1, [pc, #32]	; (8004198 <__NVIC_SetPriority+0x50>)
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	3b04      	subs	r3, #4
 8004180:	0112      	lsls	r2, r2, #4
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	440b      	add	r3, r1
 8004186:	761a      	strb	r2, [r3, #24]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000e100 	.word	0xe000e100
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800419c:	b480      	push	{r7}
 800419e:	b089      	sub	sp, #36	; 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f1c3 0307 	rsb	r3, r3, #7
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	bf28      	it	cs
 80041ba:	2304      	movcs	r3, #4
 80041bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2b06      	cmp	r3, #6
 80041c4:	d902      	bls.n	80041cc <NVIC_EncodePriority+0x30>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3b03      	subs	r3, #3
 80041ca:	e000      	b.n	80041ce <NVIC_EncodePriority+0x32>
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	401a      	ands	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e4:	f04f 31ff 	mov.w	r1, #4294967295
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	43d9      	mvns	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f4:	4313      	orrs	r3, r2
         );
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3724      	adds	r7, #36	; 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b082      	sub	sp, #8
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff ff4c 	bl	80040a8 <__NVIC_SetPriorityGrouping>
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	4603      	mov	r3, r0
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800422a:	f7ff ff61 	bl	80040f0 <__NVIC_GetPriorityGrouping>
 800422e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	6978      	ldr	r0, [r7, #20]
 8004236:	f7ff ffb1 	bl	800419c <NVIC_EncodePriority>
 800423a:	4602      	mov	r2, r0
 800423c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004240:	4611      	mov	r1, r2
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff ff80 	bl	8004148 <__NVIC_SetPriority>
}
 8004248:	bf00      	nop
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff ff54 	bl	800410c <__NVIC_EnableIRQ>
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e069      	b.n	8004352 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d102      	bne.n	8004290 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fe fbfc 	bl	8002a88 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6819      	ldr	r1, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4b2a      	ldr	r3, [pc, #168]	; (800435c <HAL_DCMI_Init+0xf0>)
 80042b2:	400b      	ands	r3, r1
 80042b4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6819      	ldr	r1, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80042ca:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80042d6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80042e2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80042ee:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80042fa:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b10      	cmp	r3, #16
 800430a:	d112      	bne.n	8004332 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	7f1b      	ldrb	r3, [r3, #28]
 8004310:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7f5b      	ldrb	r3, [r3, #29]
 8004316:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004318:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7f9b      	ldrb	r3, [r3, #30]
 800431e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8004320:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	7fdb      	ldrb	r3, [r3, #31]
 8004328:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800432e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004330:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 021e 	orr.w	r2, r2, #30
 8004340:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	ffe0f007 	.word	0xffe0f007

08004360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800436c:	f7ff fbe6 	bl	8003b3c <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e099      	b.n	80044b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800439c:	e00f      	b.n	80043be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800439e:	f7ff fbcd 	bl	8003b3c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d908      	bls.n	80043be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2203      	movs	r2, #3
 80043b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e078      	b.n	80044b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e8      	bne.n	800439e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <HAL_DMA_Init+0x158>)
 80043d8:	4013      	ands	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	2b04      	cmp	r3, #4
 8004416:	d107      	bne.n	8004428 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004420:	4313      	orrs	r3, r2
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	2b04      	cmp	r3, #4
 8004450:	d117      	bne.n	8004482 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f8bd 	bl	80045e4 <DMA_CheckFifoParam>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2240      	movs	r2, #64	; 0x40
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800447e:	2301      	movs	r3, #1
 8004480:	e016      	b.n	80044b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f874 	bl	8004578 <DMA_CalcBaseAndBitshift>
 8004490:	4603      	mov	r3, r0
 8004492:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	223f      	movs	r2, #63	; 0x3f
 800449a:	409a      	lsls	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	f010803f 	.word	0xf010803f

080044bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e050      	b.n	8004570 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d101      	bne.n	80044de <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80044da:	2302      	movs	r3, #2
 80044dc:	e048      	b.n	8004570 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2200      	movs	r2, #0
 80044fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2200      	movs	r2, #0
 8004504:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2200      	movs	r2, #0
 800450c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2221      	movs	r2, #33	; 0x21
 800451c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f82a 	bl	8004578 <DMA_CalcBaseAndBitshift>
 8004524:	4603      	mov	r3, r0
 8004526:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452c:	223f      	movs	r2, #63	; 0x3f
 800452e:	409a      	lsls	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	3b10      	subs	r3, #16
 8004588:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <DMA_CalcBaseAndBitshift+0x60>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004592:	4a12      	ldr	r2, [pc, #72]	; (80045dc <DMA_CalcBaseAndBitshift+0x64>)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d908      	bls.n	80045b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	4b0c      	ldr	r3, [pc, #48]	; (80045e0 <DMA_CalcBaseAndBitshift+0x68>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	1d1a      	adds	r2, r3, #4
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	659a      	str	r2, [r3, #88]	; 0x58
 80045b6:	e006      	b.n	80045c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <DMA_CalcBaseAndBitshift+0x68>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	aaaaaaab 	.word	0xaaaaaaab
 80045dc:	0800e2e0 	.word	0x0800e2e0
 80045e0:	fffffc00 	.word	0xfffffc00

080045e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d11f      	bne.n	800463e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d855      	bhi.n	80046b0 <DMA_CheckFifoParam+0xcc>
 8004604:	a201      	add	r2, pc, #4	; (adr r2, 800460c <DMA_CheckFifoParam+0x28>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	0800461d 	.word	0x0800461d
 8004610:	0800462f 	.word	0x0800462f
 8004614:	0800461d 	.word	0x0800461d
 8004618:	080046b1 	.word	0x080046b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d045      	beq.n	80046b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800462c:	e042      	b.n	80046b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004636:	d13f      	bne.n	80046b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800463c:	e03c      	b.n	80046b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004646:	d121      	bne.n	800468c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b03      	cmp	r3, #3
 800464c:	d836      	bhi.n	80046bc <DMA_CheckFifoParam+0xd8>
 800464e:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <DMA_CheckFifoParam+0x70>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	08004665 	.word	0x08004665
 8004658:	0800466b 	.word	0x0800466b
 800465c:	08004665 	.word	0x08004665
 8004660:	0800467d 	.word	0x0800467d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      break;
 8004668:	e02f      	b.n	80046ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d024      	beq.n	80046c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467a:	e021      	b.n	80046c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004684:	d11e      	bne.n	80046c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800468a:	e01b      	b.n	80046c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d902      	bls.n	8004698 <DMA_CheckFifoParam+0xb4>
 8004692:	2b03      	cmp	r3, #3
 8004694:	d003      	beq.n	800469e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004696:	e018      	b.n	80046ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
      break;
 800469c:	e015      	b.n	80046ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00e      	beq.n	80046c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
      break;
 80046ae:	e00b      	b.n	80046c8 <DMA_CheckFifoParam+0xe4>
      break;
 80046b0:	bf00      	nop
 80046b2:	e00a      	b.n	80046ca <DMA_CheckFifoParam+0xe6>
      break;
 80046b4:	bf00      	nop
 80046b6:	e008      	b.n	80046ca <DMA_CheckFifoParam+0xe6>
      break;
 80046b8:	bf00      	nop
 80046ba:	e006      	b.n	80046ca <DMA_CheckFifoParam+0xe6>
      break;
 80046bc:	bf00      	nop
 80046be:	e004      	b.n	80046ca <DMA_CheckFifoParam+0xe6>
      break;
 80046c0:	bf00      	nop
 80046c2:	e002      	b.n	80046ca <DMA_CheckFifoParam+0xe6>
      break;   
 80046c4:	bf00      	nop
 80046c6:	e000      	b.n	80046ca <DMA_CheckFifoParam+0xe6>
      break;
 80046c8:	bf00      	nop
    }
  } 
  
  return status; 
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e039      	b.n	800475e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fe fa80 	bl	8002c04 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004728:	f023 0107 	bic.w	r1, r3, #7
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473e:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <HAL_DMA2D_Init+0x90>)
 8004740:	4013      	ands	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68d1      	ldr	r1, [r2, #12]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	430b      	orrs	r3, r1
 800474c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	ffffc000 	.word	0xffffc000

0800476c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_DMA2D_Start+0x1c>
 8004784:	2302      	movs	r3, #2
 8004786:	e018      	b.n	80047ba <HAL_DMA2D_Start+0x4e>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fa98 	bl	8004cd8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b086      	sub	sp, #24
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d056      	beq.n	800488c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80047de:	f7ff f9ad 	bl	8003b3c <HAL_GetTick>
 80047e2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80047e4:	e04b      	b.n	800487e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d023      	beq.n	8004840 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004806:	f043 0202 	orr.w	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	f043 0201 	orr.w	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2221      	movs	r2, #33	; 0x21
 800482a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2204      	movs	r2, #4
 8004830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0a5      	b.n	800498c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004846:	d01a      	beq.n	800487e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004848:	f7ff f978 	bl	8003b3c <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d302      	bcc.n	800485e <HAL_DMA2D_PollForTransfer+0x9c>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	f043 0220 	orr.w	r2, r3, #32
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2203      	movs	r2, #3
 800486e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e086      	b.n	800498c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ac      	beq.n	80047e6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d061      	beq.n	8004972 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80048ae:	f7ff f945 	bl	8003b3c <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80048b4:	e056      	b.n	8004964 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d02e      	beq.n	8004926 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	f043 0204 	orr.w	r2, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	f043 0202 	orr.w	r2, r3, #2
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	f043 0201 	orr.w	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2229      	movs	r2, #41	; 0x29
 8004910:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2204      	movs	r2, #4
 8004916:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e032      	b.n	800498c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d01a      	beq.n	8004964 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800492e:	f7ff f905 	bl	8003b3c <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <HAL_DMA2D_PollForTransfer+0x182>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10f      	bne.n	8004964 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2203      	movs	r2, #3
 8004954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e013      	b.n	800498c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0a1      	beq.n	80048b6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2212      	movs	r2, #18
 8004978:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d026      	beq.n	8004a04 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d021      	beq.n	8004a04 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049ce:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	f043 0201 	orr.w	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2204      	movs	r2, #4
 80049e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d026      	beq.n	8004a5c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d021      	beq.n	8004a5c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a26:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a34:	f043 0202 	orr.w	r2, r3, #2
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d026      	beq.n	8004ab4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d021      	beq.n	8004ab4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a7e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2208      	movs	r2, #8
 8004a86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8c:	f043 0204 	orr.w	r2, r3, #4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2204      	movs	r2, #4
 8004a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d013      	beq.n	8004ae6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2204      	movs	r2, #4
 8004ade:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f853 	bl	8004b8c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d024      	beq.n	8004b3a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d01f      	beq.n	8004b3a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b08:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d01f      	beq.n	8004b84 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01a      	beq.n	8004b84 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b5c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2210      	movs	r2, #16
 8004b64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f80e 	bl	8004ba0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_DMA2D_ConfigLayer+0x20>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e079      	b.n	8004cc8 <HAL_DMA2D_ConfigLayer+0x114>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	3318      	adds	r3, #24
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004bfe:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <HAL_DMA2D_ConfigLayer+0x120>)
 8004c00:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b0a      	cmp	r3, #10
 8004c08:	d003      	beq.n	8004c12 <HAL_DMA2D_ConfigLayer+0x5e>
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b09      	cmp	r3, #9
 8004c10:	d107      	bne.n	8004c22 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e005      	b.n	8004c2e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	061b      	lsls	r3, r3, #24
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d120      	bne.n	8004c76 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	ea02 0103 	and.w	r1, r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b0a      	cmp	r3, #10
 8004c5c:	d003      	beq.n	8004c66 <HAL_DMA2D_ConfigLayer+0xb2>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b09      	cmp	r3, #9
 8004c64:	d127      	bne.n	8004cb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	68da      	ldr	r2, [r3, #12]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28
 8004c74:	e01f      	b.n	8004cb6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	ea02 0103 	and.w	r1, r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b0a      	cmp	r3, #10
 8004c9e:	d003      	beq.n	8004ca8 <HAL_DMA2D_ConfigLayer+0xf4>
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b09      	cmp	r3, #9
 8004ca6:	d106      	bne.n	8004cb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004cb4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	ff03000f 	.word	0xff03000f

08004cd8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b08b      	sub	sp, #44	; 0x2c
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	041a      	lsls	r2, r3, #16
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d10:	d174      	bne.n	8004dfc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d18:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d20:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d28:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d108      	bne.n	8004d4a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
 8004d48:	e053      	b.n	8004df2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d106      	bne.n	8004d60 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	e048      	b.n	8004df2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d111      	bne.n	8004d8c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	0cdb      	lsrs	r3, r3, #19
 8004d6c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	0a9b      	lsrs	r3, r3, #10
 8004d72:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	08db      	lsrs	r3, r3, #3
 8004d78:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	02db      	lsls	r3, r3, #11
 8004d82:	4313      	orrs	r3, r2
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8a:	e032      	b.n	8004df2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d117      	bne.n	8004dc4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	0fdb      	lsrs	r3, r3, #31
 8004d98:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	0cdb      	lsrs	r3, r3, #19
 8004d9e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	0adb      	lsrs	r3, r3, #11
 8004da4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	08db      	lsrs	r3, r3, #3
 8004daa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	029b      	lsls	r3, r3, #10
 8004db4:	431a      	orrs	r2, r3
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	03db      	lsls	r3, r3, #15
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	e016      	b.n	8004df2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	0f1b      	lsrs	r3, r3, #28
 8004dc8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	0d1b      	lsrs	r3, r3, #20
 8004dce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	0b1b      	lsrs	r3, r3, #12
 8004dd4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	011a      	lsls	r2, r3, #4
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	431a      	orrs	r2, r3
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	031b      	lsls	r3, r3, #12
 8004dea:	4313      	orrs	r3, r2
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004dfa:	e003      	b.n	8004e04 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68ba      	ldr	r2, [r7, #8]
 8004e02:	60da      	str	r2, [r3, #12]
}
 8004e04:	bf00      	nop
 8004e06:	372c      	adds	r7, #44	; 0x2c
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004e22:	2300      	movs	r3, #0
 8004e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004e26:	2300      	movs	r3, #0
 8004e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
 8004e2e:	e175      	b.n	800511c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004e30:	2201      	movs	r2, #1
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4013      	ands	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	f040 8164 	bne.w	8005116 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d00b      	beq.n	8004e6e <HAL_GPIO_Init+0x5e>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d007      	beq.n	8004e6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e62:	2b11      	cmp	r3, #17
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b12      	cmp	r3, #18
 8004e6c:	d130      	bne.n	8004ed0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	2203      	movs	r2, #3
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4013      	ands	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	f003 0201 	and.w	r2, r3, #1
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	2203      	movs	r2, #3
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d003      	beq.n	8004f10 <HAL_GPIO_Init+0x100>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b12      	cmp	r3, #18
 8004f0e:	d123      	bne.n	8004f58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	08da      	lsrs	r2, r3, #3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3208      	adds	r2, #8
 8004f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	220f      	movs	r2, #15
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4013      	ands	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	08da      	lsrs	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	3208      	adds	r2, #8
 8004f52:	69b9      	ldr	r1, [r7, #24]
 8004f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	2203      	movs	r2, #3
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f003 0203 	and.w	r2, r3, #3
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80be 	beq.w	8005116 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f9a:	4b65      	ldr	r3, [pc, #404]	; (8005130 <HAL_GPIO_Init+0x320>)
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	4a64      	ldr	r2, [pc, #400]	; (8005130 <HAL_GPIO_Init+0x320>)
 8004fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fa6:	4b62      	ldr	r3, [pc, #392]	; (8005130 <HAL_GPIO_Init+0x320>)
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004fb2:	4a60      	ldr	r2, [pc, #384]	; (8005134 <HAL_GPIO_Init+0x324>)
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	089b      	lsrs	r3, r3, #2
 8004fb8:	3302      	adds	r3, #2
 8004fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	220f      	movs	r2, #15
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a57      	ldr	r2, [pc, #348]	; (8005138 <HAL_GPIO_Init+0x328>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d037      	beq.n	800504e <HAL_GPIO_Init+0x23e>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a56      	ldr	r2, [pc, #344]	; (800513c <HAL_GPIO_Init+0x32c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d031      	beq.n	800504a <HAL_GPIO_Init+0x23a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a55      	ldr	r2, [pc, #340]	; (8005140 <HAL_GPIO_Init+0x330>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d02b      	beq.n	8005046 <HAL_GPIO_Init+0x236>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a54      	ldr	r2, [pc, #336]	; (8005144 <HAL_GPIO_Init+0x334>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d025      	beq.n	8005042 <HAL_GPIO_Init+0x232>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a53      	ldr	r2, [pc, #332]	; (8005148 <HAL_GPIO_Init+0x338>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d01f      	beq.n	800503e <HAL_GPIO_Init+0x22e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a52      	ldr	r2, [pc, #328]	; (800514c <HAL_GPIO_Init+0x33c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d019      	beq.n	800503a <HAL_GPIO_Init+0x22a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a51      	ldr	r2, [pc, #324]	; (8005150 <HAL_GPIO_Init+0x340>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d013      	beq.n	8005036 <HAL_GPIO_Init+0x226>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a50      	ldr	r2, [pc, #320]	; (8005154 <HAL_GPIO_Init+0x344>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00d      	beq.n	8005032 <HAL_GPIO_Init+0x222>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a4f      	ldr	r2, [pc, #316]	; (8005158 <HAL_GPIO_Init+0x348>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d007      	beq.n	800502e <HAL_GPIO_Init+0x21e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a4e      	ldr	r2, [pc, #312]	; (800515c <HAL_GPIO_Init+0x34c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d101      	bne.n	800502a <HAL_GPIO_Init+0x21a>
 8005026:	2309      	movs	r3, #9
 8005028:	e012      	b.n	8005050 <HAL_GPIO_Init+0x240>
 800502a:	230a      	movs	r3, #10
 800502c:	e010      	b.n	8005050 <HAL_GPIO_Init+0x240>
 800502e:	2308      	movs	r3, #8
 8005030:	e00e      	b.n	8005050 <HAL_GPIO_Init+0x240>
 8005032:	2307      	movs	r3, #7
 8005034:	e00c      	b.n	8005050 <HAL_GPIO_Init+0x240>
 8005036:	2306      	movs	r3, #6
 8005038:	e00a      	b.n	8005050 <HAL_GPIO_Init+0x240>
 800503a:	2305      	movs	r3, #5
 800503c:	e008      	b.n	8005050 <HAL_GPIO_Init+0x240>
 800503e:	2304      	movs	r3, #4
 8005040:	e006      	b.n	8005050 <HAL_GPIO_Init+0x240>
 8005042:	2303      	movs	r3, #3
 8005044:	e004      	b.n	8005050 <HAL_GPIO_Init+0x240>
 8005046:	2302      	movs	r3, #2
 8005048:	e002      	b.n	8005050 <HAL_GPIO_Init+0x240>
 800504a:	2301      	movs	r3, #1
 800504c:	e000      	b.n	8005050 <HAL_GPIO_Init+0x240>
 800504e:	2300      	movs	r3, #0
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	f002 0203 	and.w	r2, r2, #3
 8005056:	0092      	lsls	r2, r2, #2
 8005058:	4093      	lsls	r3, r2
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4313      	orrs	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005060:	4934      	ldr	r1, [pc, #208]	; (8005134 <HAL_GPIO_Init+0x324>)
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	089b      	lsrs	r3, r3, #2
 8005066:	3302      	adds	r3, #2
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800506e:	4b3c      	ldr	r3, [pc, #240]	; (8005160 <HAL_GPIO_Init+0x350>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	43db      	mvns	r3, r3
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	4013      	ands	r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005092:	4a33      	ldr	r2, [pc, #204]	; (8005160 <HAL_GPIO_Init+0x350>)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005098:	4b31      	ldr	r3, [pc, #196]	; (8005160 <HAL_GPIO_Init+0x350>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	43db      	mvns	r3, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4013      	ands	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050bc:	4a28      	ldr	r2, [pc, #160]	; (8005160 <HAL_GPIO_Init+0x350>)
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050c2:	4b27      	ldr	r3, [pc, #156]	; (8005160 <HAL_GPIO_Init+0x350>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	43db      	mvns	r3, r3
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4013      	ands	r3, r2
 80050d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050e6:	4a1e      	ldr	r2, [pc, #120]	; (8005160 <HAL_GPIO_Init+0x350>)
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050ec:	4b1c      	ldr	r3, [pc, #112]	; (8005160 <HAL_GPIO_Init+0x350>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	43db      	mvns	r3, r3
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	4013      	ands	r3, r2
 80050fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005110:	4a13      	ldr	r2, [pc, #76]	; (8005160 <HAL_GPIO_Init+0x350>)
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3301      	adds	r3, #1
 800511a:	61fb      	str	r3, [r7, #28]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	2b0f      	cmp	r3, #15
 8005120:	f67f ae86 	bls.w	8004e30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005124:	bf00      	nop
 8005126:	3724      	adds	r7, #36	; 0x24
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40023800 	.word	0x40023800
 8005134:	40013800 	.word	0x40013800
 8005138:	40020000 	.word	0x40020000
 800513c:	40020400 	.word	0x40020400
 8005140:	40020800 	.word	0x40020800
 8005144:	40020c00 	.word	0x40020c00
 8005148:	40021000 	.word	0x40021000
 800514c:	40021400 	.word	0x40021400
 8005150:	40021800 	.word	0x40021800
 8005154:	40021c00 	.word	0x40021c00
 8005158:	40022000 	.word	0x40022000
 800515c:	40022400 	.word	0x40022400
 8005160:	40013c00 	.word	0x40013c00

08005164 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005164:	b480      	push	{r7}
 8005166:	b087      	sub	sp, #28
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800516e:	2300      	movs	r3, #0
 8005170:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005172:	2300      	movs	r3, #0
 8005174:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005176:	2300      	movs	r3, #0
 8005178:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e0d9      	b.n	8005334 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005180:	2201      	movs	r2, #1
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4013      	ands	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	429a      	cmp	r2, r3
 8005198:	f040 80c9 	bne.w	800532e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800519c:	4a6a      	ldr	r2, [pc, #424]	; (8005348 <HAL_GPIO_DeInit+0x1e4>)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	089b      	lsrs	r3, r3, #2
 80051a2:	3302      	adds	r3, #2
 80051a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 0303 	and.w	r3, r3, #3
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	220f      	movs	r2, #15
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a62      	ldr	r2, [pc, #392]	; (800534c <HAL_GPIO_DeInit+0x1e8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d037      	beq.n	8005236 <HAL_GPIO_DeInit+0xd2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a61      	ldr	r2, [pc, #388]	; (8005350 <HAL_GPIO_DeInit+0x1ec>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d031      	beq.n	8005232 <HAL_GPIO_DeInit+0xce>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a60      	ldr	r2, [pc, #384]	; (8005354 <HAL_GPIO_DeInit+0x1f0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d02b      	beq.n	800522e <HAL_GPIO_DeInit+0xca>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a5f      	ldr	r2, [pc, #380]	; (8005358 <HAL_GPIO_DeInit+0x1f4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d025      	beq.n	800522a <HAL_GPIO_DeInit+0xc6>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a5e      	ldr	r2, [pc, #376]	; (800535c <HAL_GPIO_DeInit+0x1f8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01f      	beq.n	8005226 <HAL_GPIO_DeInit+0xc2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a5d      	ldr	r2, [pc, #372]	; (8005360 <HAL_GPIO_DeInit+0x1fc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d019      	beq.n	8005222 <HAL_GPIO_DeInit+0xbe>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a5c      	ldr	r2, [pc, #368]	; (8005364 <HAL_GPIO_DeInit+0x200>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <HAL_GPIO_DeInit+0xba>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a5b      	ldr	r2, [pc, #364]	; (8005368 <HAL_GPIO_DeInit+0x204>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00d      	beq.n	800521a <HAL_GPIO_DeInit+0xb6>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a5a      	ldr	r2, [pc, #360]	; (800536c <HAL_GPIO_DeInit+0x208>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d007      	beq.n	8005216 <HAL_GPIO_DeInit+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a59      	ldr	r2, [pc, #356]	; (8005370 <HAL_GPIO_DeInit+0x20c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d101      	bne.n	8005212 <HAL_GPIO_DeInit+0xae>
 800520e:	2309      	movs	r3, #9
 8005210:	e012      	b.n	8005238 <HAL_GPIO_DeInit+0xd4>
 8005212:	230a      	movs	r3, #10
 8005214:	e010      	b.n	8005238 <HAL_GPIO_DeInit+0xd4>
 8005216:	2308      	movs	r3, #8
 8005218:	e00e      	b.n	8005238 <HAL_GPIO_DeInit+0xd4>
 800521a:	2307      	movs	r3, #7
 800521c:	e00c      	b.n	8005238 <HAL_GPIO_DeInit+0xd4>
 800521e:	2306      	movs	r3, #6
 8005220:	e00a      	b.n	8005238 <HAL_GPIO_DeInit+0xd4>
 8005222:	2305      	movs	r3, #5
 8005224:	e008      	b.n	8005238 <HAL_GPIO_DeInit+0xd4>
 8005226:	2304      	movs	r3, #4
 8005228:	e006      	b.n	8005238 <HAL_GPIO_DeInit+0xd4>
 800522a:	2303      	movs	r3, #3
 800522c:	e004      	b.n	8005238 <HAL_GPIO_DeInit+0xd4>
 800522e:	2302      	movs	r3, #2
 8005230:	e002      	b.n	8005238 <HAL_GPIO_DeInit+0xd4>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <HAL_GPIO_DeInit+0xd4>
 8005236:	2300      	movs	r3, #0
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	f002 0203 	and.w	r2, r2, #3
 800523e:	0092      	lsls	r2, r2, #2
 8005240:	4093      	lsls	r3, r2
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	429a      	cmp	r2, r3
 8005246:	d132      	bne.n	80052ae <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005248:	4b4a      	ldr	r3, [pc, #296]	; (8005374 <HAL_GPIO_DeInit+0x210>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	43db      	mvns	r3, r3
 8005250:	4948      	ldr	r1, [pc, #288]	; (8005374 <HAL_GPIO_DeInit+0x210>)
 8005252:	4013      	ands	r3, r2
 8005254:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005256:	4b47      	ldr	r3, [pc, #284]	; (8005374 <HAL_GPIO_DeInit+0x210>)
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	43db      	mvns	r3, r3
 800525e:	4945      	ldr	r1, [pc, #276]	; (8005374 <HAL_GPIO_DeInit+0x210>)
 8005260:	4013      	ands	r3, r2
 8005262:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005264:	4b43      	ldr	r3, [pc, #268]	; (8005374 <HAL_GPIO_DeInit+0x210>)
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	43db      	mvns	r3, r3
 800526c:	4941      	ldr	r1, [pc, #260]	; (8005374 <HAL_GPIO_DeInit+0x210>)
 800526e:	4013      	ands	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005272:	4b40      	ldr	r3, [pc, #256]	; (8005374 <HAL_GPIO_DeInit+0x210>)
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	43db      	mvns	r3, r3
 800527a:	493e      	ldr	r1, [pc, #248]	; (8005374 <HAL_GPIO_DeInit+0x210>)
 800527c:	4013      	ands	r3, r2
 800527e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	220f      	movs	r2, #15
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005290:	4a2d      	ldr	r2, [pc, #180]	; (8005348 <HAL_GPIO_DeInit+0x1e4>)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	089b      	lsrs	r3, r3, #2
 8005296:	3302      	adds	r3, #2
 8005298:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	43da      	mvns	r2, r3
 80052a0:	4829      	ldr	r0, [pc, #164]	; (8005348 <HAL_GPIO_DeInit+0x1e4>)
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	089b      	lsrs	r3, r3, #2
 80052a6:	400a      	ands	r2, r1
 80052a8:	3302      	adds	r3, #2
 80052aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	2103      	movs	r1, #3
 80052b8:	fa01 f303 	lsl.w	r3, r1, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	401a      	ands	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	08da      	lsrs	r2, r3, #3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3208      	adds	r2, #8
 80052cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	220f      	movs	r2, #15
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	43db      	mvns	r3, r3
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	08d2      	lsrs	r2, r2, #3
 80052e4:	4019      	ands	r1, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	3208      	adds	r2, #8
 80052ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	2103      	movs	r1, #3
 80052f8:	fa01 f303 	lsl.w	r3, r1, r3
 80052fc:	43db      	mvns	r3, r3
 80052fe:	401a      	ands	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	2101      	movs	r1, #1
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	fa01 f303 	lsl.w	r3, r1, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	401a      	ands	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	2103      	movs	r1, #3
 8005322:	fa01 f303 	lsl.w	r3, r1, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	401a      	ands	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	3301      	adds	r3, #1
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2b0f      	cmp	r3, #15
 8005338:	f67f af22 	bls.w	8005180 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	40013800 	.word	0x40013800
 800534c:	40020000 	.word	0x40020000
 8005350:	40020400 	.word	0x40020400
 8005354:	40020800 	.word	0x40020800
 8005358:	40020c00 	.word	0x40020c00
 800535c:	40021000 	.word	0x40021000
 8005360:	40021400 	.word	0x40021400
 8005364:	40021800 	.word	0x40021800
 8005368:	40021c00 	.word	0x40021c00
 800536c:	40022000 	.word	0x40022000
 8005370:	40022400 	.word	0x40022400
 8005374:	40013c00 	.word	0x40013c00

08005378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	807b      	strh	r3, [r7, #2]
 8005384:	4613      	mov	r3, r2
 8005386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005388:	787b      	ldrb	r3, [r7, #1]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800538e:	887a      	ldrh	r2, [r7, #2]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005394:	e003      	b.n	800539e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005396:	887b      	ldrh	r3, [r7, #2]
 8005398:	041a      	lsls	r2, r3, #16
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	619a      	str	r2, [r3, #24]
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
	...

080053ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80053b6:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053b8:	695a      	ldr	r2, [r3, #20]
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	4013      	ands	r3, r2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053c2:	4a05      	ldr	r2, [pc, #20]	; (80053d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f806 	bl	80053dc <HAL_GPIO_EXTI_Callback>
  }
}
 80053d0:	bf00      	nop
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40013c00 	.word	0x40013c00

080053dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e07f      	b.n	8005506 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d106      	bne.n	8005420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fd fc18 	bl	8002c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2224      	movs	r2, #36	; 0x24
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0201 	bic.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005444:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005454:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d107      	bne.n	800546e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800546a:	609a      	str	r2, [r3, #8]
 800546c:	e006      	b.n	800547c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689a      	ldr	r2, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800547a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d104      	bne.n	800548e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800548c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <HAL_I2C_Init+0x11c>)
 800549a:	430b      	orrs	r3, r1
 800549c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	ea42 0103 	orr.w	r1, r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	021a      	lsls	r2, r3, #8
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69d9      	ldr	r1, [r3, #28]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1a      	ldr	r2, [r3, #32]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0201 	orr.w	r2, r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	02008000 	.word	0x02008000

08005514 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e021      	b.n	800556a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2224      	movs	r2, #36	; 0x24
 800552a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fd fbfe 	bl	8002d40 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
	...

08005574 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	461a      	mov	r2, r3
 8005582:	4603      	mov	r3, r0
 8005584:	817b      	strh	r3, [r7, #10]
 8005586:	460b      	mov	r3, r1
 8005588:	813b      	strh	r3, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b20      	cmp	r3, #32
 8005598:	f040 80f9 	bne.w	800578e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_I2C_Mem_Write+0x34>
 80055a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d105      	bne.n	80055b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0ed      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_I2C_Mem_Write+0x4e>
 80055be:	2302      	movs	r3, #2
 80055c0:	e0e6      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055ca:	f7fe fab7 	bl	8003b3c <HAL_GetTick>
 80055ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	2319      	movs	r3, #25
 80055d6:	2201      	movs	r2, #1
 80055d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f000 fad1 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0d1      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2221      	movs	r2, #33	; 0x21
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2240      	movs	r2, #64	; 0x40
 80055f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a3a      	ldr	r2, [r7, #32]
 8005606:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005614:	88f8      	ldrh	r0, [r7, #6]
 8005616:	893a      	ldrh	r2, [r7, #8]
 8005618:	8979      	ldrh	r1, [r7, #10]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	4603      	mov	r3, r0
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f9e1 	bl	80059ec <I2C_RequestMemoryWrite>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0a9      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	2bff      	cmp	r3, #255	; 0xff
 8005644:	d90e      	bls.n	8005664 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	22ff      	movs	r2, #255	; 0xff
 800564a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005650:	b2da      	uxtb	r2, r3
 8005652:	8979      	ldrh	r1, [r7, #10]
 8005654:	2300      	movs	r3, #0
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 fbb3 	bl	8005dc8 <I2C_TransferConfig>
 8005662:	e00f      	b.n	8005684 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005672:	b2da      	uxtb	r2, r3
 8005674:	8979      	ldrh	r1, [r7, #10]
 8005676:	2300      	movs	r3, #0
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fba2 	bl	8005dc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fabb 	bl	8005c04 <I2C_WaitOnTXISFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e07b      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d034      	beq.n	800573c <HAL_I2C_Mem_Write+0x1c8>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d130      	bne.n	800573c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	2200      	movs	r2, #0
 80056e2:	2180      	movs	r1, #128	; 0x80
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 fa4d 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e04d      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2bff      	cmp	r3, #255	; 0xff
 80056fc:	d90e      	bls.n	800571c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	22ff      	movs	r2, #255	; 0xff
 8005702:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005708:	b2da      	uxtb	r2, r3
 800570a:	8979      	ldrh	r1, [r7, #10]
 800570c:	2300      	movs	r3, #0
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 fb57 	bl	8005dc8 <I2C_TransferConfig>
 800571a:	e00f      	b.n	800573c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005720:	b29a      	uxth	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572a:	b2da      	uxtb	r2, r3
 800572c:	8979      	ldrh	r1, [r7, #10]
 800572e:	2300      	movs	r3, #0
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fb46 	bl	8005dc8 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d19e      	bne.n	8005684 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 fa9a 	bl	8005c84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e01a      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2220      	movs	r2, #32
 8005760:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6859      	ldr	r1, [r3, #4]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <HAL_I2C_Mem_Write+0x224>)
 800576e:	400b      	ands	r3, r1
 8005770:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	e000      	b.n	8005790 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800578e:	2302      	movs	r3, #2
  }
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	fe00e800 	.word	0xfe00e800

0800579c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	4608      	mov	r0, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	461a      	mov	r2, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	817b      	strh	r3, [r7, #10]
 80057ae:	460b      	mov	r3, r1
 80057b0:	813b      	strh	r3, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b20      	cmp	r3, #32
 80057c0:	f040 80fd 	bne.w	80059be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <HAL_I2C_Mem_Read+0x34>
 80057ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d105      	bne.n	80057dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e0f1      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d101      	bne.n	80057ea <HAL_I2C_Mem_Read+0x4e>
 80057e6:	2302      	movs	r3, #2
 80057e8:	e0ea      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057f2:	f7fe f9a3 	bl	8003b3c <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	2319      	movs	r3, #25
 80057fe:	2201      	movs	r2, #1
 8005800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f9bd 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e0d5      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2222      	movs	r2, #34	; 0x22
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2240      	movs	r2, #64	; 0x40
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a3a      	ldr	r2, [r7, #32]
 800582e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005834:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800583c:	88f8      	ldrh	r0, [r7, #6]
 800583e:	893a      	ldrh	r2, [r7, #8]
 8005840:	8979      	ldrh	r1, [r7, #10]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	9301      	str	r3, [sp, #4]
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	4603      	mov	r3, r0
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f921 	bl	8005a94 <I2C_RequestMemoryRead>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0ad      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005868:	b29b      	uxth	r3, r3
 800586a:	2bff      	cmp	r3, #255	; 0xff
 800586c:	d90e      	bls.n	800588c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	22ff      	movs	r2, #255	; 0xff
 8005872:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005878:	b2da      	uxtb	r2, r3
 800587a:	8979      	ldrh	r1, [r7, #10]
 800587c:	4b52      	ldr	r3, [pc, #328]	; (80059c8 <HAL_I2C_Mem_Read+0x22c>)
 800587e:	9300      	str	r3, [sp, #0]
 8005880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fa9f 	bl	8005dc8 <I2C_TransferConfig>
 800588a:	e00f      	b.n	80058ac <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589a:	b2da      	uxtb	r2, r3
 800589c:	8979      	ldrh	r1, [r7, #10]
 800589e:	4b4a      	ldr	r3, [pc, #296]	; (80059c8 <HAL_I2C_Mem_Read+0x22c>)
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 fa8e 	bl	8005dc8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	2200      	movs	r2, #0
 80058b4:	2104      	movs	r1, #4
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f964 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e07c      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	3b01      	subs	r3, #1
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d034      	beq.n	800596c <HAL_I2C_Mem_Read+0x1d0>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d130      	bne.n	800596c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	2200      	movs	r2, #0
 8005912:	2180      	movs	r1, #128	; 0x80
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f935 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e04d      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	2bff      	cmp	r3, #255	; 0xff
 800592c:	d90e      	bls.n	800594c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	22ff      	movs	r2, #255	; 0xff
 8005932:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005938:	b2da      	uxtb	r2, r3
 800593a:	8979      	ldrh	r1, [r7, #10]
 800593c:	2300      	movs	r3, #0
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fa3f 	bl	8005dc8 <I2C_TransferConfig>
 800594a:	e00f      	b.n	800596c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595a:	b2da      	uxtb	r2, r3
 800595c:	8979      	ldrh	r1, [r7, #10]
 800595e:	2300      	movs	r3, #0
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fa2e 	bl	8005dc8 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d19a      	bne.n	80058ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f982 	bl	8005c84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e01a      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2220      	movs	r2, #32
 8005990:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6859      	ldr	r1, [r3, #4]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_I2C_Mem_Read+0x230>)
 800599e:	400b      	ands	r3, r1
 80059a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e000      	b.n	80059c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80059be:	2302      	movs	r3, #2
  }
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	80002400 	.word	0x80002400
 80059cc:	fe00e800 	.word	0xfe00e800

080059d0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059de:	b2db      	uxtb	r3, r3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	4608      	mov	r0, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	817b      	strh	r3, [r7, #10]
 80059fe:	460b      	mov	r3, r1
 8005a00:	813b      	strh	r3, [r7, #8]
 8005a02:	4613      	mov	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a06:	88fb      	ldrh	r3, [r7, #6]
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	8979      	ldrh	r1, [r7, #10]
 8005a0c:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <I2C_RequestMemoryWrite+0xa4>)
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f9d7 	bl	8005dc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	69b9      	ldr	r1, [r7, #24]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 f8f0 	bl	8005c04 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e02c      	b.n	8005a88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a2e:	88fb      	ldrh	r3, [r7, #6]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d105      	bne.n	8005a40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a34:	893b      	ldrh	r3, [r7, #8]
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	629a      	str	r2, [r3, #40]	; 0x28
 8005a3e:	e015      	b.n	8005a6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a40:	893b      	ldrh	r3, [r7, #8]
 8005a42:	0a1b      	lsrs	r3, r3, #8
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	69b9      	ldr	r1, [r7, #24]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f8d6 	bl	8005c04 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e012      	b.n	8005a88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a62:	893b      	ldrh	r3, [r7, #8]
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2200      	movs	r2, #0
 8005a74:	2180      	movs	r1, #128	; 0x80
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f884 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	80002000 	.word	0x80002000

08005a94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	4608      	mov	r0, r1
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	817b      	strh	r3, [r7, #10]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	813b      	strh	r3, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	8979      	ldrh	r1, [r7, #10]
 8005ab4:	4b20      	ldr	r3, [pc, #128]	; (8005b38 <I2C_RequestMemoryRead+0xa4>)
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f984 	bl	8005dc8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	69b9      	ldr	r1, [r7, #24]
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f000 f89d 	bl	8005c04 <I2C_WaitOnTXISFlagUntilTimeout>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e02c      	b.n	8005b2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d105      	bne.n	8005ae6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ada:	893b      	ldrh	r3, [r7, #8]
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8005ae4:	e015      	b.n	8005b12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ae6:	893b      	ldrh	r3, [r7, #8]
 8005ae8:	0a1b      	lsrs	r3, r3, #8
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	69b9      	ldr	r1, [r7, #24]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f883 	bl	8005c04 <I2C_WaitOnTXISFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e012      	b.n	8005b2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b08:	893b      	ldrh	r3, [r7, #8]
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2140      	movs	r1, #64	; 0x40
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f831 	bl	8005b84 <I2C_WaitOnFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	80002000 	.word	0x80002000

08005b3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d103      	bne.n	8005b5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2200      	movs	r2, #0
 8005b58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d007      	beq.n	8005b78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	619a      	str	r2, [r3, #24]
  }
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b94:	e022      	b.n	8005bdc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9c:	d01e      	beq.n	8005bdc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9e:	f7fd ffcd 	bl	8003b3c <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d302      	bcc.n	8005bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d113      	bne.n	8005bdc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb8:	f043 0220 	orr.w	r2, r3, #32
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e00f      	b.n	8005bfc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4013      	ands	r3, r2
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	bf0c      	ite	eq
 8005bec:	2301      	moveq	r3, #1
 8005bee:	2300      	movne	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d0cd      	beq.n	8005b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c10:	e02c      	b.n	8005c6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f870 	bl	8005cfc <I2C_IsAcknowledgeFailed>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e02a      	b.n	8005c7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2c:	d01e      	beq.n	8005c6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2e:	f7fd ff85 	bl	8003b3c <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d302      	bcc.n	8005c44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d113      	bne.n	8005c6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c48:	f043 0220 	orr.w	r2, r3, #32
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e007      	b.n	8005c7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d1cb      	bne.n	8005c12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c90:	e028      	b.n	8005ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f830 	bl	8005cfc <I2C_IsAcknowledgeFailed>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e026      	b.n	8005cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca6:	f7fd ff49 	bl	8003b3c <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d302      	bcc.n	8005cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d113      	bne.n	8005ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc0:	f043 0220 	orr.w	r2, r3, #32
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e007      	b.n	8005cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f003 0320 	and.w	r3, r3, #32
 8005cee:	2b20      	cmp	r3, #32
 8005cf0:	d1cf      	bne.n	8005c92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f003 0310 	and.w	r3, r3, #16
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d151      	bne.n	8005dba <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d16:	e022      	b.n	8005d5e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1e:	d01e      	beq.n	8005d5e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d20:	f7fd ff0c 	bl	8003b3c <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d302      	bcc.n	8005d36 <I2C_IsAcknowledgeFailed+0x3a>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d113      	bne.n	8005d5e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	f043 0220 	orr.w	r2, r3, #32
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e02e      	b.n	8005dbc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d1d5      	bne.n	8005d18 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2210      	movs	r2, #16
 8005d72:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff fedd 	bl	8005b3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6859      	ldr	r1, [r3, #4]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <I2C_IsAcknowledgeFailed+0xc8>)
 8005d8e:	400b      	ands	r3, r1
 8005d90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d96:	f043 0204 	orr.w	r2, r3, #4
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	fe00e800 	.word	0xfe00e800

08005dc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	607b      	str	r3, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	817b      	strh	r3, [r7, #10]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	0d5b      	lsrs	r3, r3, #21
 8005de4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005de8:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <I2C_TransferConfig+0x58>)
 8005dea:	430b      	orrs	r3, r1
 8005dec:	43db      	mvns	r3, r3
 8005dee:	ea02 0103 	and.w	r1, r2, r3
 8005df2:	897b      	ldrh	r3, [r7, #10]
 8005df4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005df8:	7a7b      	ldrb	r3, [r7, #9]
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e00:	431a      	orrs	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	431a      	orrs	r2, r3
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005e12:	bf00      	nop
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	03ff63ff 	.word	0x03ff63ff

08005e24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d138      	bne.n	8005eac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e032      	b.n	8005eae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2224      	movs	r2, #36	; 0x24
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0201 	bic.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6819      	ldr	r1, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e000      	b.n	8005eae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
  }
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d139      	bne.n	8005f44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e033      	b.n	8005f46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2224      	movs	r2, #36	; 0x24
 8005eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0201 	bic.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	021b      	lsls	r3, r3, #8
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0201 	orr.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e000      	b.n	8005f46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e0bf      	b.n	80060e6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fc ff1c 	bl	8002db8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f96:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6999      	ldr	r1, [r3, #24]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6899      	ldr	r1, [r3, #8]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	4b4a      	ldr	r3, [pc, #296]	; (80060f0 <HAL_LTDC_Init+0x19c>)
 8005fc8:	400b      	ands	r3, r1
 8005fca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	041b      	lsls	r3, r3, #16
 8005fd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6899      	ldr	r1, [r3, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68d9      	ldr	r1, [r3, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	4b3e      	ldr	r3, [pc, #248]	; (80060f0 <HAL_LTDC_Init+0x19c>)
 8005ff6:	400b      	ands	r3, r1
 8005ff8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	041b      	lsls	r3, r3, #16
 8006000:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68d9      	ldr	r1, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1a      	ldr	r2, [r3, #32]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6919      	ldr	r1, [r3, #16]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b33      	ldr	r3, [pc, #204]	; (80060f0 <HAL_LTDC_Init+0x19c>)
 8006024:	400b      	ands	r3, r1
 8006026:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6919      	ldr	r1, [r3, #16]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6959      	ldr	r1, [r3, #20]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4b27      	ldr	r3, [pc, #156]	; (80060f0 <HAL_LTDC_Init+0x19c>)
 8006052:	400b      	ands	r3, r1
 8006054:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	041b      	lsls	r3, r3, #16
 800605c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6959      	ldr	r1, [r3, #20]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006084:	041b      	lsls	r3, r3, #16
 8006086:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006096:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0206 	orr.w	r2, r2, #6
 80060c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	f000f800 	.word	0xf000f800

080060f4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b00      	cmp	r3, #0
 8006114:	d023      	beq.n	800615e <HAL_LTDC_IRQHandler+0x6a>
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01e      	beq.n	800615e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0204 	bic.w	r2, r2, #4
 800612e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2204      	movs	r2, #4
 8006136:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800613e:	f043 0201 	orr.w	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2204      	movs	r2, #4
 800614c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f86f 	bl	800623c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d023      	beq.n	80061b0 <HAL_LTDC_IRQHandler+0xbc>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01e      	beq.n	80061b0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0202 	bic.w	r2, r2, #2
 8006180:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2202      	movs	r2, #2
 8006188:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006190:	f043 0202 	orr.w	r2, r3, #2
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2204      	movs	r2, #4
 800619e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f846 	bl	800623c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d01b      	beq.n	80061f2 <HAL_LTDC_IRQHandler+0xfe>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d016      	beq.n	80061f2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0201 	bic.w	r2, r2, #1
 80061d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2201      	movs	r2, #1
 80061da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f82f 	bl	8006250 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01b      	beq.n	8006234 <HAL_LTDC_IRQHandler+0x140>
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d016      	beq.n	8006234 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f022 0208 	bic.w	r2, r2, #8
 8006214:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2208      	movs	r2, #8
 800621c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f818 	bl	8006264 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006278:	b5b0      	push	{r4, r5, r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_LTDC_ConfigLayer+0x1a>
 800628e:	2302      	movs	r3, #2
 8006290:	e02c      	b.n	80062ec <HAL_LTDC_ConfigLayer+0x74>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2202      	movs	r2, #2
 800629e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2134      	movs	r1, #52	; 0x34
 80062a8:	fb01 f303 	mul.w	r3, r1, r3
 80062ac:	4413      	add	r3, r2
 80062ae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4614      	mov	r4, r2
 80062b6:	461d      	mov	r5, r3
 80062b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062c4:	682b      	ldr	r3, [r5, #0]
 80062c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f81f 	bl	8006310 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2201      	movs	r2, #1
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bdb0      	pop	{r4, r5, r7, pc}

080062f4 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006302:	b2db      	uxtb	r3, r3
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006310:	b480      	push	{r7}
 8006312:	b089      	sub	sp, #36	; 0x24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	0c1b      	lsrs	r3, r3, #16
 8006328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800632c:	4413      	add	r3, r2
 800632e:	041b      	lsls	r3, r3, #16
 8006330:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	01db      	lsls	r3, r3, #7
 800633c:	4413      	add	r3, r2
 800633e:	3384      	adds	r3, #132	; 0x84
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	6812      	ldr	r2, [r2, #0]
 8006346:	4611      	mov	r1, r2
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	01d2      	lsls	r2, r2, #7
 800634c:	440a      	add	r2, r1
 800634e:	3284      	adds	r2, #132	; 0x84
 8006350:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006354:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	0c1b      	lsrs	r3, r3, #16
 8006362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006366:	4413      	add	r3, r2
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4619      	mov	r1, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	01db      	lsls	r3, r3, #7
 8006374:	440b      	add	r3, r1
 8006376:	3384      	adds	r3, #132	; 0x84
 8006378:	4619      	mov	r1, r3
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	4313      	orrs	r3, r2
 800637e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800638e:	4413      	add	r3, r2
 8006390:	041b      	lsls	r3, r3, #16
 8006392:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	461a      	mov	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	01db      	lsls	r3, r3, #7
 800639e:	4413      	add	r3, r2
 80063a0:	3384      	adds	r3, #132	; 0x84
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	4611      	mov	r1, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	01d2      	lsls	r2, r2, #7
 80063ae:	440a      	add	r2, r1
 80063b0:	3284      	adds	r2, #132	; 0x84
 80063b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80063b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063c6:	4413      	add	r3, r2
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4619      	mov	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	01db      	lsls	r3, r3, #7
 80063d4:	440b      	add	r3, r1
 80063d6:	3384      	adds	r3, #132	; 0x84
 80063d8:	4619      	mov	r1, r3
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4313      	orrs	r3, r2
 80063de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	01db      	lsls	r3, r3, #7
 80063ea:	4413      	add	r3, r2
 80063ec:	3384      	adds	r3, #132	; 0x84
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	4611      	mov	r1, r2
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	01d2      	lsls	r2, r2, #7
 80063fa:	440a      	add	r2, r1
 80063fc:	3284      	adds	r2, #132	; 0x84
 80063fe:	f023 0307 	bic.w	r3, r3, #7
 8006402:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	01db      	lsls	r3, r3, #7
 800640e:	4413      	add	r3, r2
 8006410:	3384      	adds	r3, #132	; 0x84
 8006412:	461a      	mov	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006420:	021b      	lsls	r3, r3, #8
 8006422:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800642a:	041b      	lsls	r3, r3, #16
 800642c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	061b      	lsls	r3, r3, #24
 8006434:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	01db      	lsls	r3, r3, #7
 8006440:	4413      	add	r3, r2
 8006442:	3384      	adds	r3, #132	; 0x84
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	01db      	lsls	r3, r3, #7
 8006450:	4413      	add	r3, r2
 8006452:	3384      	adds	r3, #132	; 0x84
 8006454:	461a      	mov	r2, r3
 8006456:	2300      	movs	r3, #0
 8006458:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006460:	461a      	mov	r2, r3
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	431a      	orrs	r2, r3
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	431a      	orrs	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4619      	mov	r1, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	01db      	lsls	r3, r3, #7
 8006474:	440b      	add	r3, r1
 8006476:	3384      	adds	r3, #132	; 0x84
 8006478:	4619      	mov	r1, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	461a      	mov	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	01db      	lsls	r3, r3, #7
 800648a:	4413      	add	r3, r2
 800648c:	3384      	adds	r3, #132	; 0x84
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	6812      	ldr	r2, [r2, #0]
 8006494:	4611      	mov	r1, r2
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	01d2      	lsls	r2, r2, #7
 800649a:	440a      	add	r2, r1
 800649c:	3284      	adds	r2, #132	; 0x84
 800649e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064a2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	01db      	lsls	r3, r3, #7
 80064ae:	4413      	add	r3, r2
 80064b0:	3384      	adds	r3, #132	; 0x84
 80064b2:	461a      	mov	r2, r3
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	01db      	lsls	r3, r3, #7
 80064c4:	4413      	add	r3, r2
 80064c6:	3384      	adds	r3, #132	; 0x84
 80064c8:	69da      	ldr	r2, [r3, #28]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4619      	mov	r1, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	01db      	lsls	r3, r3, #7
 80064d4:	440b      	add	r3, r1
 80064d6:	3384      	adds	r3, #132	; 0x84
 80064d8:	4619      	mov	r1, r3
 80064da:	4b58      	ldr	r3, [pc, #352]	; (800663c <LTDC_SetConfig+0x32c>)
 80064dc:	4013      	ands	r3, r2
 80064de:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6a1b      	ldr	r3, [r3, #32]
 80064e8:	68f9      	ldr	r1, [r7, #12]
 80064ea:	6809      	ldr	r1, [r1, #0]
 80064ec:	4608      	mov	r0, r1
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	01c9      	lsls	r1, r1, #7
 80064f2:	4401      	add	r1, r0
 80064f4:	3184      	adds	r1, #132	; 0x84
 80064f6:	4313      	orrs	r3, r2
 80064f8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	01db      	lsls	r3, r3, #7
 8006504:	4413      	add	r3, r2
 8006506:	3384      	adds	r3, #132	; 0x84
 8006508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	01db      	lsls	r3, r3, #7
 8006514:	4413      	add	r3, r2
 8006516:	3384      	adds	r3, #132	; 0x84
 8006518:	461a      	mov	r2, r3
 800651a:	2300      	movs	r3, #0
 800651c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	01db      	lsls	r3, r3, #7
 8006528:	4413      	add	r3, r2
 800652a:	3384      	adds	r3, #132	; 0x84
 800652c:	461a      	mov	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d102      	bne.n	8006542 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800653c:	2304      	movs	r3, #4
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	e01b      	b.n	800657a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d102      	bne.n	8006550 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800654a:	2303      	movs	r3, #3
 800654c:	61fb      	str	r3, [r7, #28]
 800654e:	e014      	b.n	800657a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b04      	cmp	r3, #4
 8006556:	d00b      	beq.n	8006570 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800655c:	2b02      	cmp	r3, #2
 800655e:	d007      	beq.n	8006570 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006564:	2b03      	cmp	r3, #3
 8006566:	d003      	beq.n	8006570 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800656c:	2b07      	cmp	r3, #7
 800656e:	d102      	bne.n	8006576 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006570:	2302      	movs	r3, #2
 8006572:	61fb      	str	r3, [r7, #28]
 8006574:	e001      	b.n	800657a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006576:	2301      	movs	r3, #1
 8006578:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	01db      	lsls	r3, r3, #7
 8006584:	4413      	add	r3, r2
 8006586:	3384      	adds	r3, #132	; 0x84
 8006588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	4611      	mov	r1, r2
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	01d2      	lsls	r2, r2, #7
 8006594:	440a      	add	r2, r1
 8006596:	3284      	adds	r2, #132	; 0x84
 8006598:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800659c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	fb02 f303 	mul.w	r3, r2, r3
 80065a8:	041a      	lsls	r2, r3, #16
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6859      	ldr	r1, [r3, #4]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	1acb      	subs	r3, r1, r3
 80065b4:	69f9      	ldr	r1, [r7, #28]
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	3303      	adds	r3, #3
 80065bc:	68f9      	ldr	r1, [r7, #12]
 80065be:	6809      	ldr	r1, [r1, #0]
 80065c0:	4608      	mov	r0, r1
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	01c9      	lsls	r1, r1, #7
 80065c6:	4401      	add	r1, r0
 80065c8:	3184      	adds	r1, #132	; 0x84
 80065ca:	4313      	orrs	r3, r2
 80065cc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	01db      	lsls	r3, r3, #7
 80065d8:	4413      	add	r3, r2
 80065da:	3384      	adds	r3, #132	; 0x84
 80065dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4619      	mov	r1, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	01db      	lsls	r3, r3, #7
 80065e8:	440b      	add	r3, r1
 80065ea:	3384      	adds	r3, #132	; 0x84
 80065ec:	4619      	mov	r1, r3
 80065ee:	4b14      	ldr	r3, [pc, #80]	; (8006640 <LTDC_SetConfig+0x330>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	461a      	mov	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	01db      	lsls	r3, r3, #7
 80065fe:	4413      	add	r3, r2
 8006600:	3384      	adds	r3, #132	; 0x84
 8006602:	461a      	mov	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	01db      	lsls	r3, r3, #7
 8006614:	4413      	add	r3, r2
 8006616:	3384      	adds	r3, #132	; 0x84
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	4611      	mov	r1, r2
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	01d2      	lsls	r2, r2, #7
 8006624:	440a      	add	r2, r1
 8006626:	3284      	adds	r2, #132	; 0x84
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	6013      	str	r3, [r2, #0]
}
 800662e:	bf00      	nop
 8006630:	3724      	adds	r7, #36	; 0x24
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	fffff8f8 	.word	0xfffff8f8
 8006640:	fffff800 	.word	0xfffff800

08006644 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a04      	ldr	r2, [pc, #16]	; (8006660 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800664e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006652:	6013      	str	r3, [r2, #0]
}
 8006654:	bf00      	nop
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	40007000 	.word	0x40007000

08006664 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800666e:	4b23      	ldr	r3, [pc, #140]	; (80066fc <HAL_PWREx_EnableOverDrive+0x98>)
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	4a22      	ldr	r2, [pc, #136]	; (80066fc <HAL_PWREx_EnableOverDrive+0x98>)
 8006674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006678:	6413      	str	r3, [r2, #64]	; 0x40
 800667a:	4b20      	ldr	r3, [pc, #128]	; (80066fc <HAL_PWREx_EnableOverDrive+0x98>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006686:	4b1e      	ldr	r3, [pc, #120]	; (8006700 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a1d      	ldr	r2, [pc, #116]	; (8006700 <HAL_PWREx_EnableOverDrive+0x9c>)
 800668c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006690:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006692:	f7fd fa53 	bl	8003b3c <HAL_GetTick>
 8006696:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006698:	e009      	b.n	80066ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800669a:	f7fd fa4f 	bl	8003b3c <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066a8:	d901      	bls.n	80066ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e022      	b.n	80066f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80066ae:	4b14      	ldr	r3, [pc, #80]	; (8006700 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ba:	d1ee      	bne.n	800669a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80066bc:	4b10      	ldr	r3, [pc, #64]	; (8006700 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a0f      	ldr	r2, [pc, #60]	; (8006700 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066c8:	f7fd fa38 	bl	8003b3c <HAL_GetTick>
 80066cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066ce:	e009      	b.n	80066e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80066d0:	f7fd fa34 	bl	8003b3c <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066de:	d901      	bls.n	80066e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e007      	b.n	80066f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80066e4:	4b06      	ldr	r3, [pc, #24]	; (8006700 <HAL_PWREx_EnableOverDrive+0x9c>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066f0:	d1ee      	bne.n	80066d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40023800 	.word	0x40023800
 8006700:	40007000 	.word	0x40007000

08006704 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af02      	add	r7, sp, #8
 800670a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800670c:	f7fd fa16 	bl	8003b3c <HAL_GetTick>
 8006710:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e067      	b.n	80067ec <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f7fc fc09 	bl	8002f48 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006736:	f241 3188 	movw	r1, #5000	; 0x1388
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f85e 	bl	80067fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	3b01      	subs	r3, #1
 8006750:	021a      	lsls	r2, r3, #8
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	2120      	movs	r1, #32
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f856 	bl	8006818 <QSPI_WaitFlagStateUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006770:	7afb      	ldrb	r3, [r7, #11]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d135      	bne.n	80067e2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4b1d      	ldr	r3, [pc, #116]	; (80067f4 <HAL_QSPI_Init+0xf0>)
 800677e:	4013      	ands	r3, r2
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6852      	ldr	r2, [r2, #4]
 8006784:	0611      	lsls	r1, r2, #24
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	68d2      	ldr	r2, [r2, #12]
 800678a:	4311      	orrs	r1, r2
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	69d2      	ldr	r2, [r2, #28]
 8006790:	4311      	orrs	r1, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6a12      	ldr	r2, [r2, #32]
 8006796:	4311      	orrs	r1, r2
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6812      	ldr	r2, [r2, #0]
 800679c:	430b      	orrs	r3, r1
 800679e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <HAL_QSPI_Init+0xf4>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6912      	ldr	r2, [r2, #16]
 80067ae:	0411      	lsls	r1, r2, #16
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6952      	ldr	r2, [r2, #20]
 80067b4:	4311      	orrs	r1, r2
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6992      	ldr	r2, [r2, #24]
 80067ba:	4311      	orrs	r1, r2
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	430b      	orrs	r3, r1
 80067c2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80067ea:	7afb      	ldrb	r3, [r7, #11]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	00ffff2f 	.word	0x00ffff2f
 80067f8:	ffe0f8fe 	.word	0xffe0f8fe

080067fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	603b      	str	r3, [r7, #0]
 8006824:	4613      	mov	r3, r2
 8006826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006828:	e01a      	b.n	8006860 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006830:	d016      	beq.n	8006860 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006832:	f7fd f983 	bl	8003b3c <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	429a      	cmp	r2, r3
 8006840:	d302      	bcc.n	8006848 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10b      	bne.n	8006860 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2204      	movs	r2, #4
 800684c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006854:	f043 0201 	orr.w	r2, r3, #1
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e00e      	b.n	800687e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	689a      	ldr	r2, [r3, #8]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	4013      	ands	r3, r2
 800686a:	2b00      	cmp	r3, #0
 800686c:	bf14      	ite	ne
 800686e:	2301      	movne	r3, #1
 8006870:	2300      	moveq	r3, #0
 8006872:	b2db      	uxtb	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	429a      	cmp	r2, r3
 800687a:	d1d6      	bne.n	800682a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006890:	2300      	movs	r3, #0
 8006892:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e291      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8087 	beq.w	80069ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068ac:	4b96      	ldr	r3, [pc, #600]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f003 030c 	and.w	r3, r3, #12
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d00c      	beq.n	80068d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068b8:	4b93      	ldr	r3, [pc, #588]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 030c 	and.w	r3, r3, #12
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d112      	bne.n	80068ea <HAL_RCC_OscConfig+0x62>
 80068c4:	4b90      	ldr	r3, [pc, #576]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d0:	d10b      	bne.n	80068ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d2:	4b8d      	ldr	r3, [pc, #564]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d06c      	beq.n	80069b8 <HAL_RCC_OscConfig+0x130>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d168      	bne.n	80069b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e26b      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f2:	d106      	bne.n	8006902 <HAL_RCC_OscConfig+0x7a>
 80068f4:	4b84      	ldr	r3, [pc, #528]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a83      	ldr	r2, [pc, #524]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 80068fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	e02e      	b.n	8006960 <HAL_RCC_OscConfig+0xd8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10c      	bne.n	8006924 <HAL_RCC_OscConfig+0x9c>
 800690a:	4b7f      	ldr	r3, [pc, #508]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a7e      	ldr	r2, [pc, #504]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	4b7c      	ldr	r3, [pc, #496]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a7b      	ldr	r2, [pc, #492]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 800691c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e01d      	b.n	8006960 <HAL_RCC_OscConfig+0xd8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800692c:	d10c      	bne.n	8006948 <HAL_RCC_OscConfig+0xc0>
 800692e:	4b76      	ldr	r3, [pc, #472]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a75      	ldr	r2, [pc, #468]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	4b73      	ldr	r3, [pc, #460]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a72      	ldr	r2, [pc, #456]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	e00b      	b.n	8006960 <HAL_RCC_OscConfig+0xd8>
 8006948:	4b6f      	ldr	r3, [pc, #444]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a6e      	ldr	r2, [pc, #440]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 800694e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	4b6c      	ldr	r3, [pc, #432]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a6b      	ldr	r2, [pc, #428]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 800695a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800695e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d013      	beq.n	8006990 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006968:	f7fd f8e8 	bl	8003b3c <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006970:	f7fd f8e4 	bl	8003b3c <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b64      	cmp	r3, #100	; 0x64
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e21f      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006982:	4b61      	ldr	r3, [pc, #388]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0f0      	beq.n	8006970 <HAL_RCC_OscConfig+0xe8>
 800698e:	e014      	b.n	80069ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fd f8d4 	bl	8003b3c <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006998:	f7fd f8d0 	bl	8003b3c <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b64      	cmp	r3, #100	; 0x64
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e20b      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069aa:	4b57      	ldr	r3, [pc, #348]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0x110>
 80069b6:	e000      	b.n	80069ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0302 	and.w	r3, r3, #2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d069      	beq.n	8006a9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069c6:	4b50      	ldr	r3, [pc, #320]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 030c 	and.w	r3, r3, #12
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00b      	beq.n	80069ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069d2:	4b4d      	ldr	r3, [pc, #308]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 030c 	and.w	r3, r3, #12
 80069da:	2b08      	cmp	r3, #8
 80069dc:	d11c      	bne.n	8006a18 <HAL_RCC_OscConfig+0x190>
 80069de:	4b4a      	ldr	r3, [pc, #296]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d116      	bne.n	8006a18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ea:	4b47      	ldr	r3, [pc, #284]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <HAL_RCC_OscConfig+0x17a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d001      	beq.n	8006a02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e1df      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a02:	4b41      	ldr	r3, [pc, #260]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	493d      	ldr	r1, [pc, #244]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a16:	e040      	b.n	8006a9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d023      	beq.n	8006a68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a20:	4b39      	ldr	r3, [pc, #228]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a38      	ldr	r2, [pc, #224]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006a26:	f043 0301 	orr.w	r3, r3, #1
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fd f886 	bl	8003b3c <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a34:	f7fd f882 	bl	8003b3c <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e1bd      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a46:	4b30      	ldr	r3, [pc, #192]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a52:	4b2d      	ldr	r3, [pc, #180]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	4929      	ldr	r1, [pc, #164]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	600b      	str	r3, [r1, #0]
 8006a66:	e018      	b.n	8006a9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a68:	4b27      	ldr	r3, [pc, #156]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a26      	ldr	r2, [pc, #152]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006a6e:	f023 0301 	bic.w	r3, r3, #1
 8006a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a74:	f7fd f862 	bl	8003b3c <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a7c:	f7fd f85e 	bl	8003b3c <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e199      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a8e:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f0      	bne.n	8006a7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d038      	beq.n	8006b18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d019      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aae:	4b16      	ldr	r3, [pc, #88]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab2:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aba:	f7fd f83f 	bl	8003b3c <HAL_GetTick>
 8006abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ac2:	f7fd f83b 	bl	8003b3c <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e176      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0f0      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x23a>
 8006ae0:	e01a      	b.n	8006b18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ae2:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ae6:	4a08      	ldr	r2, [pc, #32]	; (8006b08 <HAL_RCC_OscConfig+0x280>)
 8006ae8:	f023 0301 	bic.w	r3, r3, #1
 8006aec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aee:	f7fd f825 	bl	8003b3c <HAL_GetTick>
 8006af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006af4:	e00a      	b.n	8006b0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006af6:	f7fd f821 	bl	8003b3c <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d903      	bls.n	8006b0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e15c      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
 8006b08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b0c:	4b91      	ldr	r3, [pc, #580]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1ee      	bne.n	8006af6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0304 	and.w	r3, r3, #4
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f000 80a4 	beq.w	8006c6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b26:	4b8b      	ldr	r3, [pc, #556]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10d      	bne.n	8006b4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b32:	4b88      	ldr	r3, [pc, #544]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b36:	4a87      	ldr	r2, [pc, #540]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b3e:	4b85      	ldr	r3, [pc, #532]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b4e:	4b82      	ldr	r3, [pc, #520]	; (8006d58 <HAL_RCC_OscConfig+0x4d0>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d118      	bne.n	8006b8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006b5a:	4b7f      	ldr	r3, [pc, #508]	; (8006d58 <HAL_RCC_OscConfig+0x4d0>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a7e      	ldr	r2, [pc, #504]	; (8006d58 <HAL_RCC_OscConfig+0x4d0>)
 8006b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b66:	f7fc ffe9 	bl	8003b3c <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b6e:	f7fc ffe5 	bl	8003b3c <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b64      	cmp	r3, #100	; 0x64
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e120      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b80:	4b75      	ldr	r3, [pc, #468]	; (8006d58 <HAL_RCC_OscConfig+0x4d0>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d0f0      	beq.n	8006b6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d106      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x31a>
 8006b94:	4b6f      	ldr	r3, [pc, #444]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b98:	4a6e      	ldr	r2, [pc, #440]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba0:	e02d      	b.n	8006bfe <HAL_RCC_OscConfig+0x376>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x33c>
 8006baa:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bae:	4a69      	ldr	r2, [pc, #420]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8006bb6:	4b67      	ldr	r3, [pc, #412]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	4a66      	ldr	r2, [pc, #408]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006bbc:	f023 0304 	bic.w	r3, r3, #4
 8006bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc2:	e01c      	b.n	8006bfe <HAL_RCC_OscConfig+0x376>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2b05      	cmp	r3, #5
 8006bca:	d10c      	bne.n	8006be6 <HAL_RCC_OscConfig+0x35e>
 8006bcc:	4b61      	ldr	r3, [pc, #388]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd0:	4a60      	ldr	r2, [pc, #384]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006bd2:	f043 0304 	orr.w	r3, r3, #4
 8006bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd8:	4b5e      	ldr	r3, [pc, #376]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bdc:	4a5d      	ldr	r2, [pc, #372]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006bde:	f043 0301 	orr.w	r3, r3, #1
 8006be2:	6713      	str	r3, [r2, #112]	; 0x70
 8006be4:	e00b      	b.n	8006bfe <HAL_RCC_OscConfig+0x376>
 8006be6:	4b5b      	ldr	r3, [pc, #364]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	4a5a      	ldr	r2, [pc, #360]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006bec:	f023 0301 	bic.w	r3, r3, #1
 8006bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8006bf2:	4b58      	ldr	r3, [pc, #352]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf6:	4a57      	ldr	r2, [pc, #348]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006bf8:	f023 0304 	bic.w	r3, r3, #4
 8006bfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d015      	beq.n	8006c32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c06:	f7fc ff99 	bl	8003b3c <HAL_GetTick>
 8006c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c0c:	e00a      	b.n	8006c24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0e:	f7fc ff95 	bl	8003b3c <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e0ce      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c24:	4b4b      	ldr	r3, [pc, #300]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0ee      	beq.n	8006c0e <HAL_RCC_OscConfig+0x386>
 8006c30:	e014      	b.n	8006c5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c32:	f7fc ff83 	bl	8003b3c <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c38:	e00a      	b.n	8006c50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c3a:	f7fc ff7f 	bl	8003b3c <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d901      	bls.n	8006c50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e0b8      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c50:	4b40      	ldr	r3, [pc, #256]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1ee      	bne.n	8006c3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d105      	bne.n	8006c6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c62:	4b3c      	ldr	r3, [pc, #240]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	4a3b      	ldr	r2, [pc, #236]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 80a4 	beq.w	8006dc0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c78:	4b36      	ldr	r3, [pc, #216]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f003 030c 	and.w	r3, r3, #12
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d06b      	beq.n	8006d5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d149      	bne.n	8006d20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c8c:	4b31      	ldr	r3, [pc, #196]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a30      	ldr	r2, [pc, #192]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c98:	f7fc ff50 	bl	8003b3c <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ca0:	f7fc ff4c 	bl	8003b3c <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e087      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb2:	4b28      	ldr	r3, [pc, #160]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1f0      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69da      	ldr	r2, [r3, #28]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	019b      	lsls	r3, r3, #6
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd4:	085b      	lsrs	r3, r3, #1
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce0:	061b      	lsls	r3, r3, #24
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	4a1b      	ldr	r2, [pc, #108]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006ce6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cec:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a18      	ldr	r2, [pc, #96]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf8:	f7fc ff20 	bl	8003b3c <HAL_GetTick>
 8006cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cfe:	e008      	b.n	8006d12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d00:	f7fc ff1c 	bl	8003b3c <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d901      	bls.n	8006d12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e057      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d12:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0f0      	beq.n	8006d00 <HAL_RCC_OscConfig+0x478>
 8006d1e:	e04f      	b.n	8006dc0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d20:	4b0c      	ldr	r3, [pc, #48]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a0b      	ldr	r2, [pc, #44]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d2c:	f7fc ff06 	bl	8003b3c <HAL_GetTick>
 8006d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d32:	e008      	b.n	8006d46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d34:	f7fc ff02 	bl	8003b3c <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e03d      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d46:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <HAL_RCC_OscConfig+0x4cc>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1f0      	bne.n	8006d34 <HAL_RCC_OscConfig+0x4ac>
 8006d52:	e035      	b.n	8006dc0 <HAL_RCC_OscConfig+0x538>
 8006d54:	40023800 	.word	0x40023800
 8006d58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <HAL_RCC_OscConfig+0x544>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d028      	beq.n	8006dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d121      	bne.n	8006dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d11a      	bne.n	8006dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d111      	bne.n	8006dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da2:	085b      	lsrs	r3, r3, #1
 8006da4:	3b01      	subs	r3, #1
 8006da6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d107      	bne.n	8006dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40023800 	.word	0x40023800

08006dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0d0      	b.n	8006f8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006de8:	4b6a      	ldr	r3, [pc, #424]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d910      	bls.n	8006e18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df6:	4b67      	ldr	r3, [pc, #412]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f023 020f 	bic.w	r2, r3, #15
 8006dfe:	4965      	ldr	r1, [pc, #404]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e06:	4b63      	ldr	r3, [pc, #396]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d001      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0b8      	b.n	8006f8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d020      	beq.n	8006e66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0304 	and.w	r3, r3, #4
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e30:	4b59      	ldr	r3, [pc, #356]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	4a58      	ldr	r2, [pc, #352]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e48:	4b53      	ldr	r3, [pc, #332]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	4a52      	ldr	r2, [pc, #328]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e54:	4b50      	ldr	r3, [pc, #320]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	494d      	ldr	r1, [pc, #308]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d040      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d107      	bne.n	8006e8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e7a:	4b47      	ldr	r3, [pc, #284]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d115      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e07f      	b.n	8006f8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d107      	bne.n	8006ea2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e92:	4b41      	ldr	r3, [pc, #260]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e073      	b.n	8006f8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ea2:	4b3d      	ldr	r3, [pc, #244]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e06b      	b.n	8006f8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eb2:	4b39      	ldr	r3, [pc, #228]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f023 0203 	bic.w	r2, r3, #3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	4936      	ldr	r1, [pc, #216]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec4:	f7fc fe3a 	bl	8003b3c <HAL_GetTick>
 8006ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eca:	e00a      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ecc:	f7fc fe36 	bl	8003b3c <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e053      	b.n	8006f8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ee2:	4b2d      	ldr	r3, [pc, #180]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 020c 	and.w	r2, r3, #12
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d1eb      	bne.n	8006ecc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ef4:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 030f 	and.w	r3, r3, #15
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d210      	bcs.n	8006f24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f02:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f023 020f 	bic.w	r2, r3, #15
 8006f0a:	4922      	ldr	r1, [pc, #136]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f12:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <HAL_RCC_ClockConfig+0x1c4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d001      	beq.n	8006f24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e032      	b.n	8006f8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d008      	beq.n	8006f42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f30:	4b19      	ldr	r3, [pc, #100]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	4916      	ldr	r1, [pc, #88]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d009      	beq.n	8006f62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f4e:	4b12      	ldr	r3, [pc, #72]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	490e      	ldr	r1, [pc, #56]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f62:	f000 f821 	bl	8006fa8 <HAL_RCC_GetSysClockFreq>
 8006f66:	4601      	mov	r1, r0
 8006f68:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <HAL_RCC_ClockConfig+0x1c8>)
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	091b      	lsrs	r3, r3, #4
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <HAL_RCC_ClockConfig+0x1cc>)
 8006f74:	5cd3      	ldrb	r3, [r2, r3]
 8006f76:	fa21 f303 	lsr.w	r3, r1, r3
 8006f7a:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8006f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f7e:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <HAL_RCC_ClockConfig+0x1d4>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fc fc84 	bl	8003890 <HAL_InitTick>

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	40023c00 	.word	0x40023c00
 8006f98:	40023800 	.word	0x40023800
 8006f9c:	0800e2c8 	.word	0x0800e2c8
 8006fa0:	20000000 	.word	0x20000000
 8006fa4:	20000004 	.word	0x20000004

08006fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fbe:	4b50      	ldr	r3, [pc, #320]	; (8007100 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 030c 	and.w	r3, r3, #12
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d007      	beq.n	8006fda <HAL_RCC_GetSysClockFreq+0x32>
 8006fca:	2b08      	cmp	r3, #8
 8006fcc:	d008      	beq.n	8006fe0 <HAL_RCC_GetSysClockFreq+0x38>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 808d 	bne.w	80070ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fd4:	4b4b      	ldr	r3, [pc, #300]	; (8007104 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006fd6:	60bb      	str	r3, [r7, #8]
      break;
 8006fd8:	e08c      	b.n	80070f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fda:	4b4b      	ldr	r3, [pc, #300]	; (8007108 <HAL_RCC_GetSysClockFreq+0x160>)
 8006fdc:	60bb      	str	r3, [r7, #8]
      break;
 8006fde:	e089      	b.n	80070f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fe0:	4b47      	ldr	r3, [pc, #284]	; (8007100 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fe8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006fea:	4b45      	ldr	r3, [pc, #276]	; (8007100 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d023      	beq.n	800703e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ff6:	4b42      	ldr	r3, [pc, #264]	; (8007100 <HAL_RCC_GetSysClockFreq+0x158>)
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	099b      	lsrs	r3, r3, #6
 8006ffc:	f04f 0400 	mov.w	r4, #0
 8007000:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	ea03 0501 	and.w	r5, r3, r1
 800700c:	ea04 0602 	and.w	r6, r4, r2
 8007010:	4a3d      	ldr	r2, [pc, #244]	; (8007108 <HAL_RCC_GetSysClockFreq+0x160>)
 8007012:	fb02 f106 	mul.w	r1, r2, r6
 8007016:	2200      	movs	r2, #0
 8007018:	fb02 f205 	mul.w	r2, r2, r5
 800701c:	440a      	add	r2, r1
 800701e:	493a      	ldr	r1, [pc, #232]	; (8007108 <HAL_RCC_GetSysClockFreq+0x160>)
 8007020:	fba5 0101 	umull	r0, r1, r5, r1
 8007024:	1853      	adds	r3, r2, r1
 8007026:	4619      	mov	r1, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f04f 0400 	mov.w	r4, #0
 800702e:	461a      	mov	r2, r3
 8007030:	4623      	mov	r3, r4
 8007032:	f7f9 fd33 	bl	8000a9c <__aeabi_uldivmod>
 8007036:	4603      	mov	r3, r0
 8007038:	460c      	mov	r4, r1
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	e049      	b.n	80070d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800703e:	4b30      	ldr	r3, [pc, #192]	; (8007100 <HAL_RCC_GetSysClockFreq+0x158>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	099b      	lsrs	r3, r3, #6
 8007044:	f04f 0400 	mov.w	r4, #0
 8007048:	f240 11ff 	movw	r1, #511	; 0x1ff
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	ea03 0501 	and.w	r5, r3, r1
 8007054:	ea04 0602 	and.w	r6, r4, r2
 8007058:	4629      	mov	r1, r5
 800705a:	4632      	mov	r2, r6
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	f04f 0400 	mov.w	r4, #0
 8007064:	0154      	lsls	r4, r2, #5
 8007066:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800706a:	014b      	lsls	r3, r1, #5
 800706c:	4619      	mov	r1, r3
 800706e:	4622      	mov	r2, r4
 8007070:	1b49      	subs	r1, r1, r5
 8007072:	eb62 0206 	sbc.w	r2, r2, r6
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	f04f 0400 	mov.w	r4, #0
 800707e:	0194      	lsls	r4, r2, #6
 8007080:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007084:	018b      	lsls	r3, r1, #6
 8007086:	1a5b      	subs	r3, r3, r1
 8007088:	eb64 0402 	sbc.w	r4, r4, r2
 800708c:	f04f 0100 	mov.w	r1, #0
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	00e2      	lsls	r2, r4, #3
 8007096:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800709a:	00d9      	lsls	r1, r3, #3
 800709c:	460b      	mov	r3, r1
 800709e:	4614      	mov	r4, r2
 80070a0:	195b      	adds	r3, r3, r5
 80070a2:	eb44 0406 	adc.w	r4, r4, r6
 80070a6:	f04f 0100 	mov.w	r1, #0
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	02a2      	lsls	r2, r4, #10
 80070b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80070b4:	0299      	lsls	r1, r3, #10
 80070b6:	460b      	mov	r3, r1
 80070b8:	4614      	mov	r4, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	4621      	mov	r1, r4
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f04f 0400 	mov.w	r4, #0
 80070c4:	461a      	mov	r2, r3
 80070c6:	4623      	mov	r3, r4
 80070c8:	f7f9 fce8 	bl	8000a9c <__aeabi_uldivmod>
 80070cc:	4603      	mov	r3, r0
 80070ce:	460c      	mov	r4, r1
 80070d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80070d2:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <HAL_RCC_GetSysClockFreq+0x158>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	0c1b      	lsrs	r3, r3, #16
 80070d8:	f003 0303 	and.w	r3, r3, #3
 80070dc:	3301      	adds	r3, #1
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ea:	60bb      	str	r3, [r7, #8]
      break;
 80070ec:	e002      	b.n	80070f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070ee:	4b05      	ldr	r3, [pc, #20]	; (8007104 <HAL_RCC_GetSysClockFreq+0x15c>)
 80070f0:	60bb      	str	r3, [r7, #8]
      break;
 80070f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070f4:	68bb      	ldr	r3, [r7, #8]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070fe:	bf00      	nop
 8007100:	40023800 	.word	0x40023800
 8007104:	00f42400 	.word	0x00f42400
 8007108:	017d7840 	.word	0x017d7840

0800710c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007110:	4b03      	ldr	r3, [pc, #12]	; (8007120 <HAL_RCC_GetHCLKFreq+0x14>)
 8007112:	681b      	ldr	r3, [r3, #0]
}
 8007114:	4618      	mov	r0, r3
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20000000 	.word	0x20000000

08007124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007128:	f7ff fff0 	bl	800710c <HAL_RCC_GetHCLKFreq>
 800712c:	4601      	mov	r1, r0
 800712e:	4b05      	ldr	r3, [pc, #20]	; (8007144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	0a9b      	lsrs	r3, r3, #10
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	4a03      	ldr	r2, [pc, #12]	; (8007148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800713a:	5cd3      	ldrb	r3, [r2, r3]
 800713c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007140:	4618      	mov	r0, r3
 8007142:	bd80      	pop	{r7, pc}
 8007144:	40023800 	.word	0x40023800
 8007148:	0800e2d8 	.word	0x0800e2d8

0800714c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007150:	f7ff ffdc 	bl	800710c <HAL_RCC_GetHCLKFreq>
 8007154:	4601      	mov	r1, r0
 8007156:	4b05      	ldr	r3, [pc, #20]	; (800716c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	0b5b      	lsrs	r3, r3, #13
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	4a03      	ldr	r2, [pc, #12]	; (8007170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007162:	5cd3      	ldrb	r3, [r2, r3]
 8007164:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007168:	4618      	mov	r0, r3
 800716a:	bd80      	pop	{r7, pc}
 800716c:	40023800 	.word	0x40023800
 8007170:	0800e2d8 	.word	0x0800e2d8

08007174 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	220f      	movs	r2, #15
 8007182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007184:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <HAL_RCC_GetClockConfig+0x5c>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 0203 	and.w	r2, r3, #3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007190:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <HAL_RCC_GetClockConfig+0x5c>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800719c:	4b0c      	ldr	r3, [pc, #48]	; (80071d0 <HAL_RCC_GetClockConfig+0x5c>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80071a8:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <HAL_RCC_GetClockConfig+0x5c>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	08db      	lsrs	r3, r3, #3
 80071ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80071b6:	4b07      	ldr	r3, [pc, #28]	; (80071d4 <HAL_RCC_GetClockConfig+0x60>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 020f 	and.w	r2, r3, #15
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	601a      	str	r2, [r3, #0]
}
 80071c2:	bf00      	nop
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40023800 	.word	0x40023800
 80071d4:	40023c00 	.word	0x40023c00

080071d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d012      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007200:	4b69      	ldr	r3, [pc, #420]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	4a68      	ldr	r2, [pc, #416]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007206:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800720a:	6093      	str	r3, [r2, #8]
 800720c:	4b66      	ldr	r3, [pc, #408]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007214:	4964      	ldr	r1, [pc, #400]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007216:	4313      	orrs	r3, r2
 8007218:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007222:	2301      	movs	r3, #1
 8007224:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d017      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007232:	4b5d      	ldr	r3, [pc, #372]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007240:	4959      	ldr	r1, [pc, #356]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007242:	4313      	orrs	r3, r2
 8007244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007250:	d101      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007252:	2301      	movs	r3, #1
 8007254:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800725e:	2301      	movs	r3, #1
 8007260:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d017      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800726e:	4b4e      	ldr	r3, [pc, #312]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007274:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727c:	494a      	ldr	r1, [pc, #296]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800728c:	d101      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800728e:	2301      	movs	r3, #1
 8007290:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800729a:	2301      	movs	r3, #1
 800729c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80072aa:	2301      	movs	r3, #1
 80072ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f000 808b 	beq.w	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072bc:	4b3a      	ldr	r3, [pc, #232]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	4a39      	ldr	r2, [pc, #228]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072c6:	6413      	str	r3, [r2, #64]	; 0x40
 80072c8:	4b37      	ldr	r3, [pc, #220]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072d4:	4b35      	ldr	r3, [pc, #212]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a34      	ldr	r2, [pc, #208]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072e0:	f7fc fc2c 	bl	8003b3c <HAL_GetTick>
 80072e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072e6:	e008      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072e8:	f7fc fc28 	bl	8003b3c <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b64      	cmp	r3, #100	; 0x64
 80072f4:	d901      	bls.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e355      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072fa:	4b2c      	ldr	r3, [pc, #176]	; (80073ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0f0      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007306:	4b28      	ldr	r3, [pc, #160]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d035      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	429a      	cmp	r2, r3
 8007322:	d02e      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007324:	4b20      	ldr	r3, [pc, #128]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800732c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800732e:	4b1e      	ldr	r3, [pc, #120]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007332:	4a1d      	ldr	r2, [pc, #116]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007338:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800733a:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	4a1a      	ldr	r2, [pc, #104]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007344:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007346:	4a18      	ldr	r2, [pc, #96]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800734c:	4b16      	ldr	r3, [pc, #88]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800734e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b01      	cmp	r3, #1
 8007356:	d114      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007358:	f7fc fbf0 	bl	8003b3c <HAL_GetTick>
 800735c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800735e:	e00a      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007360:	f7fc fbec 	bl	8003b3c <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	f241 3288 	movw	r2, #5000	; 0x1388
 800736e:	4293      	cmp	r3, r2
 8007370:	d901      	bls.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e317      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0ee      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800738a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800738e:	d111      	bne.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007390:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800739c:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800739e:	400b      	ands	r3, r1
 80073a0:	4901      	ldr	r1, [pc, #4]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	608b      	str	r3, [r1, #8]
 80073a6:	e00b      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80073a8:	40023800 	.word	0x40023800
 80073ac:	40007000 	.word	0x40007000
 80073b0:	0ffffcff 	.word	0x0ffffcff
 80073b4:	4bb0      	ldr	r3, [pc, #704]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	4aaf      	ldr	r2, [pc, #700]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073be:	6093      	str	r3, [r2, #8]
 80073c0:	4bad      	ldr	r3, [pc, #692]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073cc:	49aa      	ldr	r1, [pc, #680]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0310 	and.w	r3, r3, #16
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d010      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073de:	4ba6      	ldr	r3, [pc, #664]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e4:	4aa4      	ldr	r2, [pc, #656]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80073ee:	4ba2      	ldr	r3, [pc, #648]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	499f      	ldr	r1, [pc, #636]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00a      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800740c:	4b9a      	ldr	r3, [pc, #616]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800740e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007412:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800741a:	4997      	ldr	r1, [pc, #604]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800741c:	4313      	orrs	r3, r2
 800741e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00a      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800742e:	4b92      	ldr	r3, [pc, #584]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007434:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800743c:	498e      	ldr	r1, [pc, #568]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800743e:	4313      	orrs	r3, r2
 8007440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007450:	4b89      	ldr	r3, [pc, #548]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007456:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800745e:	4986      	ldr	r1, [pc, #536]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007460:	4313      	orrs	r3, r2
 8007462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007472:	4b81      	ldr	r3, [pc, #516]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007478:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007480:	497d      	ldr	r1, [pc, #500]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007482:	4313      	orrs	r3, r2
 8007484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007494:	4b78      	ldr	r3, [pc, #480]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749a:	f023 0203 	bic.w	r2, r3, #3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a2:	4975      	ldr	r1, [pc, #468]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074b6:	4b70      	ldr	r3, [pc, #448]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074bc:	f023 020c 	bic.w	r2, r3, #12
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c4:	496c      	ldr	r1, [pc, #432]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00a      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074d8:	4b67      	ldr	r3, [pc, #412]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e6:	4964      	ldr	r1, [pc, #400]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074fa:	4b5f      	ldr	r3, [pc, #380]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80074fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007500:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007508:	495b      	ldr	r1, [pc, #364]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800751c:	4b56      	ldr	r3, [pc, #344]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800751e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752a:	4953      	ldr	r1, [pc, #332]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800753e:	4b4e      	ldr	r3, [pc, #312]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007544:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754c:	494a      	ldr	r1, [pc, #296]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007560:	4b45      	ldr	r3, [pc, #276]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007566:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756e:	4942      	ldr	r1, [pc, #264]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00a      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007582:	4b3d      	ldr	r3, [pc, #244]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007588:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007590:	4939      	ldr	r1, [pc, #228]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00a      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075a4:	4b34      	ldr	r3, [pc, #208]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b2:	4931      	ldr	r1, [pc, #196]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d011      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80075c6:	4b2c      	ldr	r3, [pc, #176]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075d4:	4928      	ldr	r1, [pc, #160]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075e4:	d101      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80075e6:	2301      	movs	r3, #1
 80075e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80075f6:	2301      	movs	r3, #1
 80075f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007606:	4b1c      	ldr	r3, [pc, #112]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007614:	4918      	ldr	r1, [pc, #96]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007616:	4313      	orrs	r3, r2
 8007618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00b      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007628:	4b13      	ldr	r3, [pc, #76]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800762a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007638:	490f      	ldr	r1, [pc, #60]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800763a:	4313      	orrs	r3, r2
 800763c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d005      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800764e:	f040 80d8 	bne.w	8007802 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a08      	ldr	r2, [pc, #32]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007658:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800765c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800765e:	f7fc fa6d 	bl	8003b3c <HAL_GetTick>
 8007662:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007664:	e00a      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007666:	f7fc fa69 	bl	8003b3c <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	2b64      	cmp	r3, #100	; 0x64
 8007672:	d903      	bls.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007674:	2303      	movs	r3, #3
 8007676:	e196      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007678:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800767c:	4b6c      	ldr	r3, [pc, #432]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1ee      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d021      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007698:	2b00      	cmp	r3, #0
 800769a:	d11d      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800769c:	4b64      	ldr	r3, [pc, #400]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800769e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	f003 0303 	and.w	r3, r3, #3
 80076a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076aa:	4b61      	ldr	r3, [pc, #388]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80076ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b0:	0e1b      	lsrs	r3, r3, #24
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	019a      	lsls	r2, r3, #6
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	041b      	lsls	r3, r3, #16
 80076c2:	431a      	orrs	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	061b      	lsls	r3, r3, #24
 80076c8:	431a      	orrs	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	071b      	lsls	r3, r3, #28
 80076d0:	4957      	ldr	r1, [pc, #348]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d004      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x516>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ec:	d00a      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d02e      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007702:	d129      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007704:	4b4a      	ldr	r3, [pc, #296]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800770a:	0c1b      	lsrs	r3, r3, #16
 800770c:	f003 0303 	and.w	r3, r3, #3
 8007710:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007712:	4b47      	ldr	r3, [pc, #284]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007718:	0f1b      	lsrs	r3, r3, #28
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	019a      	lsls	r2, r3, #6
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	041b      	lsls	r3, r3, #16
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	061b      	lsls	r3, r3, #24
 8007732:	431a      	orrs	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	071b      	lsls	r3, r3, #28
 8007738:	493d      	ldr	r1, [pc, #244]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800773a:	4313      	orrs	r3, r2
 800773c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007740:	4b3b      	ldr	r3, [pc, #236]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007746:	f023 021f 	bic.w	r2, r3, #31
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	3b01      	subs	r3, #1
 8007750:	4937      	ldr	r1, [pc, #220]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007752:	4313      	orrs	r3, r2
 8007754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d01d      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007764:	4b32      	ldr	r3, [pc, #200]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800776a:	0e1b      	lsrs	r3, r3, #24
 800776c:	f003 030f 	and.w	r3, r3, #15
 8007770:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007772:	4b2f      	ldr	r3, [pc, #188]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007778:	0f1b      	lsrs	r3, r3, #28
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	019a      	lsls	r2, r3, #6
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	041b      	lsls	r3, r3, #16
 800778c:	431a      	orrs	r2, r3
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	061b      	lsls	r3, r3, #24
 8007792:	431a      	orrs	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	071b      	lsls	r3, r3, #28
 8007798:	4925      	ldr	r1, [pc, #148]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800779a:	4313      	orrs	r3, r2
 800779c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d011      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	019a      	lsls	r2, r3, #6
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	041b      	lsls	r3, r3, #16
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	061b      	lsls	r3, r3, #24
 80077c0:	431a      	orrs	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	071b      	lsls	r3, r3, #28
 80077c8:	4919      	ldr	r1, [pc, #100]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80077d0:	4b17      	ldr	r3, [pc, #92]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a16      	ldr	r2, [pc, #88]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077dc:	f7fc f9ae 	bl	8003b3c <HAL_GetTick>
 80077e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077e2:	e008      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077e4:	f7fc f9aa 	bl	8003b3c <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b64      	cmp	r3, #100	; 0x64
 80077f0:	d901      	bls.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e0d7      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077f6:	4b0e      	ldr	r3, [pc, #56]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f0      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b01      	cmp	r3, #1
 8007806:	f040 80cd 	bne.w	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800780a:	4b09      	ldr	r3, [pc, #36]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a08      	ldr	r2, [pc, #32]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007816:	f7fc f991 	bl	8003b3c <HAL_GetTick>
 800781a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800781c:	e00a      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800781e:	f7fc f98d 	bl	8003b3c <HAL_GetTick>
 8007822:	4602      	mov	r2, r0
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	2b64      	cmp	r3, #100	; 0x64
 800782a:	d903      	bls.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e0ba      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007830:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007834:	4b5e      	ldr	r3, [pc, #376]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800783c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007840:	d0ed      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800785e:	2b00      	cmp	r3, #0
 8007860:	d02e      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	2b00      	cmp	r3, #0
 8007868:	d12a      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800786a:	4b51      	ldr	r3, [pc, #324]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800786c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007870:	0c1b      	lsrs	r3, r3, #16
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007878:	4b4d      	ldr	r3, [pc, #308]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800787a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787e:	0f1b      	lsrs	r3, r3, #28
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	019a      	lsls	r2, r3, #6
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	041b      	lsls	r3, r3, #16
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	061b      	lsls	r3, r3, #24
 8007898:	431a      	orrs	r2, r3
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	071b      	lsls	r3, r3, #28
 800789e:	4944      	ldr	r1, [pc, #272]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80078a6:	4b42      	ldr	r3, [pc, #264]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80078a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	3b01      	subs	r3, #1
 80078b6:	021b      	lsls	r3, r3, #8
 80078b8:	493d      	ldr	r1, [pc, #244]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d022      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078d4:	d11d      	bne.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078d6:	4b36      	ldr	r3, [pc, #216]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80078d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078dc:	0e1b      	lsrs	r3, r3, #24
 80078de:	f003 030f 	and.w	r3, r3, #15
 80078e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078e4:	4b32      	ldr	r3, [pc, #200]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80078e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ea:	0f1b      	lsrs	r3, r3, #28
 80078ec:	f003 0307 	and.w	r3, r3, #7
 80078f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	019a      	lsls	r2, r3, #6
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	041b      	lsls	r3, r3, #16
 80078fe:	431a      	orrs	r2, r3
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	061b      	lsls	r3, r3, #24
 8007904:	431a      	orrs	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	071b      	lsls	r3, r3, #28
 800790a:	4929      	ldr	r1, [pc, #164]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800790c:	4313      	orrs	r3, r2
 800790e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b00      	cmp	r3, #0
 800791c:	d028      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800791e:	4b24      	ldr	r3, [pc, #144]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007924:	0e1b      	lsrs	r3, r3, #24
 8007926:	f003 030f 	and.w	r3, r3, #15
 800792a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800792c:	4b20      	ldr	r3, [pc, #128]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	f003 0303 	and.w	r3, r3, #3
 8007938:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	019a      	lsls	r2, r3, #6
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	041b      	lsls	r3, r3, #16
 8007944:	431a      	orrs	r2, r3
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	061b      	lsls	r3, r3, #24
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	69db      	ldr	r3, [r3, #28]
 8007950:	071b      	lsls	r3, r3, #28
 8007952:	4917      	ldr	r1, [pc, #92]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007954:	4313      	orrs	r3, r2
 8007956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800795a:	4b15      	ldr	r3, [pc, #84]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800795c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	4911      	ldr	r1, [pc, #68]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800796a:	4313      	orrs	r3, r2
 800796c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007970:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a0e      	ldr	r2, [pc, #56]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800797a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800797c:	f7fc f8de 	bl	8003b3c <HAL_GetTick>
 8007980:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007982:	e008      	b.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007984:	f7fc f8da 	bl	8003b3c <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	2b64      	cmp	r3, #100	; 0x64
 8007990:	d901      	bls.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007992:	2303      	movs	r3, #3
 8007994:	e007      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800799e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079a2:	d1ef      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3720      	adds	r7, #32
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40023800 	.word	0x40023800

080079b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80079d2:	f040 8086 	bne.w	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80079d6:	4b8d      	ldr	r3, [pc, #564]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079dc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80079e4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ec:	d03e      	beq.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80079ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079f2:	d073      	beq.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d000      	beq.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80079f8:	e074      	b.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80079fa:	4b84      	ldr	r3, [pc, #528]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d108      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a06:	4b81      	ldr	r3, [pc, #516]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a0e:	4a80      	ldr	r2, [pc, #512]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a14:	613b      	str	r3, [r7, #16]
 8007a16:	e007      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a18:	4b7c      	ldr	r3, [pc, #496]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a20:	4a7c      	ldr	r2, [pc, #496]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a26:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007a28:	4b78      	ldr	r3, [pc, #480]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2e:	0e1b      	lsrs	r3, r3, #24
 8007a30:	f003 030f 	and.w	r3, r3, #15
 8007a34:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007a36:	4b75      	ldr	r3, [pc, #468]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3c:	099b      	lsrs	r3, r3, #6
 8007a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	fb02 f203 	mul.w	r2, r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007a50:	4b6e      	ldr	r3, [pc, #440]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	f003 031f 	and.w	r3, r3, #31
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a68:	617b      	str	r3, [r7, #20]
        break;
 8007a6a:	e03b      	b.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007a6c:	4b67      	ldr	r3, [pc, #412]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d108      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a78:	4b64      	ldr	r3, [pc, #400]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a80:	4a63      	ldr	r2, [pc, #396]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a86:	613b      	str	r3, [r7, #16]
 8007a88:	e007      	b.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a8a:	4b60      	ldr	r3, [pc, #384]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a92:	4a60      	ldr	r2, [pc, #384]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a98:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007a9a:	4b5c      	ldr	r3, [pc, #368]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aa0:	0e1b      	lsrs	r3, r3, #24
 8007aa2:	f003 030f 	and.w	r3, r3, #15
 8007aa6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007aa8:	4b58      	ldr	r3, [pc, #352]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aae:	099b      	lsrs	r3, r3, #6
 8007ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	fb02 f203 	mul.w	r2, r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007ac2:	4b52      	ldr	r3, [pc, #328]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ac8:	f003 031f 	and.w	r3, r3, #31
 8007acc:	3301      	adds	r3, #1
 8007ace:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad8:	617b      	str	r3, [r7, #20]
        break;
 8007ada:	e003      	b.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007adc:	4b4e      	ldr	r3, [pc, #312]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007ade:	617b      	str	r3, [r7, #20]
        break;
 8007ae0:	e000      	b.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8007ae2:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aea:	f040 8086 	bne.w	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007aee:	4b47      	ldr	r3, [pc, #284]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007af4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007afc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b04:	d03e      	beq.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8007b06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b0a:	d073      	beq.n	8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d000      	beq.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007b10:	e074      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007b12:	4b3e      	ldr	r3, [pc, #248]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d108      	bne.n	8007b30 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b1e:	4b3b      	ldr	r3, [pc, #236]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b26:	4a3a      	ldr	r2, [pc, #232]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2c:	613b      	str	r3, [r7, #16]
 8007b2e:	e007      	b.n	8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007b30:	4b36      	ldr	r3, [pc, #216]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b38:	4a36      	ldr	r2, [pc, #216]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b3e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007b40:	4b32      	ldr	r3, [pc, #200]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b46:	0e1b      	lsrs	r3, r3, #24
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007b4e:	4b2f      	ldr	r3, [pc, #188]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b54:	099b      	lsrs	r3, r3, #6
 8007b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	fb02 f203 	mul.w	r2, r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b66:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007b68:	4b28      	ldr	r3, [pc, #160]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b6e:	0a1b      	lsrs	r3, r3, #8
 8007b70:	f003 031f 	and.w	r3, r3, #31
 8007b74:	3301      	adds	r3, #1
 8007b76:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b80:	617b      	str	r3, [r7, #20]
        break;
 8007b82:	e03b      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007b84:	4b21      	ldr	r3, [pc, #132]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d108      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b90:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b98:	4a1d      	ldr	r2, [pc, #116]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	e007      	b.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ba2:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007baa:	4a1a      	ldr	r2, [pc, #104]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007bb2:	4b16      	ldr	r3, [pc, #88]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bb8:	0e1b      	lsrs	r3, r3, #24
 8007bba:	f003 030f 	and.w	r3, r3, #15
 8007bbe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007bc0:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bc6:	099b      	lsrs	r3, r3, #6
 8007bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	fb02 f203 	mul.w	r2, r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007bda:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007be0:	f003 031f 	and.w	r3, r3, #31
 8007be4:	3301      	adds	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf0:	617b      	str	r3, [r7, #20]
        break;
 8007bf2:	e003      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007bf4:	4b08      	ldr	r3, [pc, #32]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007bf6:	617b      	str	r3, [r7, #20]
        break;
 8007bf8:	e000      	b.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8007bfa:	bf00      	nop

  return frequency;
 8007bfc:	697b      	ldr	r3, [r7, #20]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	371c      	adds	r7, #28
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	40023800 	.word	0x40023800
 8007c10:	00f42400 	.word	0x00f42400
 8007c14:	017d7840 	.word	0x017d7840
 8007c18:	00bb8000 	.word	0x00bb8000

08007c1c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e06b      	b.n	8007d06 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7f5b      	ldrb	r3, [r3, #29]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d105      	bne.n	8007c44 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fb fa12 	bl	8003068 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2202      	movs	r2, #2
 8007c48:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	22ca      	movs	r2, #202	; 0xca
 8007c50:	625a      	str	r2, [r3, #36]	; 0x24
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2253      	movs	r2, #83	; 0x53
 8007c58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fb00 	bl	8008260 <RTC_EnterInitMode>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d008      	beq.n	8007c78 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	22ff      	movs	r2, #255	; 0xff
 8007c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2204      	movs	r2, #4
 8007c72:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e046      	b.n	8007d06 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6899      	ldr	r1, [r3, #8]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	4b23      	ldr	r3, [pc, #140]	; (8007d10 <HAL_RTC_Init+0xf4>)
 8007c84:	400b      	ands	r3, r1
 8007c86:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6899      	ldr	r1, [r3, #8]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	68d2      	ldr	r2, [r2, #12]
 8007cae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	6919      	ldr	r1, [r3, #16]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	041a      	lsls	r2, r3, #16
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cd2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0208 	bic.w	r2, r2, #8
 8007ce2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	22ff      	movs	r2, #255	; 0xff
 8007cfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007d04:	2300      	movs	r3, #0
  }
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	ff8fffbf 	.word	0xff8fffbf

08007d14 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007d14:	b590      	push	{r4, r7, lr}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	7f1b      	ldrb	r3, [r3, #28]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d101      	bne.n	8007d30 <HAL_RTC_SetTime+0x1c>
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e0a8      	b.n	8007e82 <HAL_RTC_SetTime+0x16e>
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2201      	movs	r2, #1
 8007d34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2202      	movs	r2, #2
 8007d3a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d126      	bne.n	8007d90 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2200      	movs	r2, #0
 8007d54:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 faac 	bl	80082b8 <RTC_ByteToBcd2>
 8007d60:	4603      	mov	r3, r0
 8007d62:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 faa5 	bl	80082b8 <RTC_ByteToBcd2>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007d72:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	789b      	ldrb	r3, [r3, #2]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fa9d 	bl	80082b8 <RTC_ByteToBcd2>
 8007d7e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007d80:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	7b1b      	ldrb	r3, [r3, #12]
 8007d88:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]
 8007d8e:	e018      	b.n	8007dc2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d102      	bne.n	8007da4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2200      	movs	r2, #0
 8007da2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	785b      	ldrb	r3, [r3, #1]
 8007dae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007db0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007db6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	7b1b      	ldrb	r3, [r3, #12]
 8007dbc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	22ca      	movs	r2, #202	; 0xca
 8007dc8:	625a      	str	r2, [r3, #36]	; 0x24
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2253      	movs	r2, #83	; 0x53
 8007dd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 fa44 	bl	8008260 <RTC_EnterInitMode>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00b      	beq.n	8007df6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	22ff      	movs	r2, #255	; 0xff
 8007de4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2204      	movs	r2, #4
 8007dea:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e045      	b.n	8007e82 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	6979      	ldr	r1, [r7, #20]
 8007dfc:	4b23      	ldr	r3, [pc, #140]	; (8007e8c <HAL_RTC_SetTime+0x178>)
 8007dfe:	400b      	ands	r3, r1
 8007e00:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6899      	ldr	r1, [r3, #8]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	691a      	ldr	r2, [r3, #16]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	431a      	orrs	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68da      	ldr	r2, [r3, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e38:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d111      	bne.n	8007e6c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 f9e1 	bl	8008210 <HAL_RTC_WaitForSynchro>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	22ff      	movs	r2, #255	; 0xff
 8007e5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2204      	movs	r2, #4
 8007e60:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e00a      	b.n	8007e82 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	22ff      	movs	r2, #255	; 0xff
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007e80:	2300      	movs	r3, #0
  }
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	371c      	adds	r7, #28
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd90      	pop	{r4, r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	007f7f7f 	.word	0x007f7f7f

08007e90 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e90:	b590      	push	{r4, r7, lr}
 8007e92:	b087      	sub	sp, #28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	7f1b      	ldrb	r3, [r3, #28]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_RTC_SetDate+0x1c>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	e092      	b.n	8007fd2 <HAL_RTC_SetDate+0x142>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10e      	bne.n	8007edc <HAL_RTC_SetDate+0x4c>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	f003 0310 	and.w	r3, r3, #16
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d008      	beq.n	8007edc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	785b      	ldrb	r3, [r3, #1]
 8007ece:	f023 0310 	bic.w	r3, r3, #16
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	330a      	adds	r3, #10
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d11c      	bne.n	8007f1c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	78db      	ldrb	r3, [r3, #3]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f9e6 	bl	80082b8 <RTC_ByteToBcd2>
 8007eec:	4603      	mov	r3, r0
 8007eee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	785b      	ldrb	r3, [r3, #1]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 f9df 	bl	80082b8 <RTC_ByteToBcd2>
 8007efa:	4603      	mov	r3, r0
 8007efc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007efe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	789b      	ldrb	r3, [r3, #2]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 f9d7 	bl	80082b8 <RTC_ByteToBcd2>
 8007f0a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007f0c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e00e      	b.n	8007f3a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	78db      	ldrb	r3, [r3, #3]
 8007f20:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	785b      	ldrb	r3, [r3, #1]
 8007f26:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007f28:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007f2e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007f36:	4313      	orrs	r3, r2
 8007f38:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	22ca      	movs	r2, #202	; 0xca
 8007f40:	625a      	str	r2, [r3, #36]	; 0x24
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2253      	movs	r2, #83	; 0x53
 8007f48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 f988 	bl	8008260 <RTC_EnterInitMode>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00b      	beq.n	8007f6e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	22ff      	movs	r2, #255	; 0xff
 8007f5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2204      	movs	r2, #4
 8007f62:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e031      	b.n	8007fd2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	6979      	ldr	r1, [r7, #20]
 8007f74:	4b19      	ldr	r3, [pc, #100]	; (8007fdc <HAL_RTC_SetDate+0x14c>)
 8007f76:	400b      	ands	r3, r1
 8007f78:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	68da      	ldr	r2, [r3, #12]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f88:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d111      	bne.n	8007fbc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f000 f939 	bl	8008210 <HAL_RTC_WaitForSynchro>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00b      	beq.n	8007fbc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	22ff      	movs	r2, #255	; 0xff
 8007faa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2204      	movs	r2, #4
 8007fb0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e00a      	b.n	8007fd2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	22ff      	movs	r2, #255	; 0xff
 8007fc2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
  }
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd90      	pop	{r4, r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	00ffff3f 	.word	0x00ffff3f

08007fe0 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007fe0:	b590      	push	{r4, r7, lr}
 8007fe2:	b089      	sub	sp, #36	; 0x24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007fec:	2300      	movs	r3, #0
 8007fee:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	7f1b      	ldrb	r3, [r3, #28]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_RTC_SetAlarm+0x24>
 8008000:	2302      	movs	r3, #2
 8008002:	e101      	b.n	8008208 <HAL_RTC_SetAlarm+0x228>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2202      	movs	r2, #2
 800800e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d137      	bne.n	8008086 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	d102      	bne.n	800802a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2200      	movs	r2, #0
 8008028:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f000 f942 	bl	80082b8 <RTC_ByteToBcd2>
 8008034:	4603      	mov	r3, r0
 8008036:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	785b      	ldrb	r3, [r3, #1]
 800803c:	4618      	mov	r0, r3
 800803e:	f000 f93b 	bl	80082b8 <RTC_ByteToBcd2>
 8008042:	4603      	mov	r3, r0
 8008044:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008046:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	789b      	ldrb	r3, [r3, #2]
 800804c:	4618      	mov	r0, r3
 800804e:	f000 f933 	bl	80082b8 <RTC_ByteToBcd2>
 8008052:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008054:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	7b1b      	ldrb	r3, [r3, #12]
 800805c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800805e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008068:	4618      	mov	r0, r3
 800806a:	f000 f925 	bl	80082b8 <RTC_ByteToBcd2>
 800806e:	4603      	mov	r3, r0
 8008070:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008072:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800807a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008080:	4313      	orrs	r3, r2
 8008082:	61fb      	str	r3, [r7, #28]
 8008084:	e023      	b.n	80080ce <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008090:	2b00      	cmp	r3, #0
 8008092:	d102      	bne.n	800809a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	2200      	movs	r2, #0
 8008098:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	785b      	ldrb	r3, [r3, #1]
 80080a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80080a6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80080ac:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	7b1b      	ldrb	r3, [r3, #12]
 80080b2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80080b4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080bc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80080be:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80080c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80080ca:	4313      	orrs	r3, r2
 80080cc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	22ca      	movs	r2, #202	; 0xca
 80080e0:	625a      	str	r2, [r3, #36]	; 0x24
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2253      	movs	r2, #83	; 0x53
 80080e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080f2:	d13f      	bne.n	8008174 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008102:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008112:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008114:	f7fb fd12 	bl	8003b3c <HAL_GetTick>
 8008118:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800811a:	e013      	b.n	8008144 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800811c:	f7fb fd0e 	bl	8003b3c <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800812a:	d90b      	bls.n	8008144 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	22ff      	movs	r2, #255	; 0xff
 8008132:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2203      	movs	r2, #3
 8008138:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008140:	2303      	movs	r3, #3
 8008142:	e061      	b.n	8008208 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d0e4      	beq.n	800811c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	69fa      	ldr	r2, [r7, #28]
 8008158:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	689a      	ldr	r2, [r3, #8]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008170:	609a      	str	r2, [r3, #8]
 8008172:	e03e      	b.n	80081f2 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008182:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008192:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008194:	f7fb fcd2 	bl	8003b3c <HAL_GetTick>
 8008198:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800819a:	e013      	b.n	80081c4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800819c:	f7fb fcce 	bl	8003b3c <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081aa:	d90b      	bls.n	80081c4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	22ff      	movs	r2, #255	; 0xff
 80081b2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2203      	movs	r2, #3
 80081b8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e021      	b.n	8008208 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0e4      	beq.n	800819c <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69fa      	ldr	r2, [r7, #28]
 80081d8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	22ff      	movs	r2, #255	; 0xff
 80081f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3724      	adds	r7, #36	; 0x24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd90      	pop	{r4, r7, pc}

08008210 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800822a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800822c:	f7fb fc86 	bl	8003b3c <HAL_GetTick>
 8008230:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008232:	e009      	b.n	8008248 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008234:	f7fb fc82 	bl	8003b3c <HAL_GetTick>
 8008238:	4602      	mov	r2, r0
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	1ad3      	subs	r3, r2, r3
 800823e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008242:	d901      	bls.n	8008248 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e007      	b.n	8008258 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	f003 0320 	and.w	r3, r3, #32
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0ee      	beq.n	8008234 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	d119      	bne.n	80082ae <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f04f 32ff 	mov.w	r2, #4294967295
 8008282:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008284:	f7fb fc5a 	bl	8003b3c <HAL_GetTick>
 8008288:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800828a:	e009      	b.n	80082a0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800828c:	f7fb fc56 	bl	8003b3c <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800829a:	d901      	bls.n	80082a0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e007      	b.n	80082b0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0ee      	beq.n	800828c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80082c6:	e005      	b.n	80082d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3301      	adds	r3, #1
 80082cc:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80082ce:	79fb      	ldrb	r3, [r7, #7]
 80082d0:	3b0a      	subs	r3, #10
 80082d2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	2b09      	cmp	r3, #9
 80082d8:	d8f6      	bhi.n	80082c8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	b2db      	uxtb	r3, r3
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3714      	adds	r7, #20
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b087      	sub	sp, #28
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	7f1b      	ldrb	r3, [r3, #28]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_RTCEx_SetTimeStamp+0x1c>
 800830c:	2302      	movs	r3, #2
 800830e:	e03e      	b.n	800838e <HAL_RTCEx_SetTimeStamp+0x9a>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2201      	movs	r2, #1
 8008314:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2202      	movs	r2, #2
 800831a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	4b1e      	ldr	r3, [pc, #120]	; (800839c <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008324:	4013      	ands	r3, r2
 8008326:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	4313      	orrs	r3, r2
 800832e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	22ca      	movs	r2, #202	; 0xca
 8008336:	625a      	str	r2, [r3, #36]	; 0x24
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2253      	movs	r2, #83	; 0x53
 800833e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0206 	bic.w	r2, r2, #6
 800834e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	430a      	orrs	r2, r1
 800835e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689a      	ldr	r2, [r3, #8]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008376:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	22ff      	movs	r2, #255	; 0xff
 800837e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2201      	movs	r2, #1
 8008384:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	fffff7f7 	.word	0xfffff7f7

080083a0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e149      	b.n	8008652 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d106      	bne.n	80083d8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7fb f9f2 	bl	80037bc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f94f 	bl	8008684 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d007      	beq.n	80083fe <HAL_SAI_Init+0x5e>
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d302      	bcc.n	80083f8 <HAL_SAI_Init+0x58>
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d006      	beq.n	8008404 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80083f6:	e008      	b.n	800840a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61fb      	str	r3, [r7, #28]
      break;
 80083fc:	e005      	b.n	800840a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80083fe:	2310      	movs	r3, #16
 8008400:	61fb      	str	r3, [r7, #28]
      break;
 8008402:	e002      	b.n	800840a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008404:	2320      	movs	r3, #32
 8008406:	61fb      	str	r3, [r7, #28]
      break;
 8008408:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	2b03      	cmp	r3, #3
 8008410:	d81d      	bhi.n	800844e <HAL_SAI_Init+0xae>
 8008412:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <HAL_SAI_Init+0x78>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	08008429 	.word	0x08008429
 800841c:	0800842f 	.word	0x0800842f
 8008420:	08008437 	.word	0x08008437
 8008424:	0800843f 	.word	0x0800843f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8008428:	2300      	movs	r3, #0
 800842a:	617b      	str	r3, [r7, #20]
      }
      break;
 800842c:	e010      	b.n	8008450 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800842e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008432:	617b      	str	r3, [r7, #20]
      }
      break;
 8008434:	e00c      	b.n	8008450 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8008436:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800843a:	617b      	str	r3, [r7, #20]
      }
      break;
 800843c:	e008      	b.n	8008450 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800843e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008442:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	f043 0301 	orr.w	r3, r3, #1
 800844a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800844c:	e000      	b.n	8008450 <HAL_SAI_Init+0xb0>
  default:
    break;
 800844e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a81      	ldr	r2, [pc, #516]	; (800865c <HAL_SAI_Init+0x2bc>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d004      	beq.n	8008464 <HAL_SAI_Init+0xc4>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a80      	ldr	r2, [pc, #512]	; (8008660 <HAL_SAI_Init+0x2c0>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d103      	bne.n	800846c <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008464:	4a7f      	ldr	r2, [pc, #508]	; (8008664 <HAL_SAI_Init+0x2c4>)
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	6013      	str	r3, [r2, #0]
 800846a:	e002      	b.n	8008472 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800846c:	4a7e      	ldr	r2, [pc, #504]	; (8008668 <HAL_SAI_Init+0x2c8>)
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d043      	beq.n	8008502 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a76      	ldr	r2, [pc, #472]	; (800865c <HAL_SAI_Init+0x2bc>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d004      	beq.n	8008492 <HAL_SAI_Init+0xf2>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a74      	ldr	r2, [pc, #464]	; (8008660 <HAL_SAI_Init+0x2c0>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d104      	bne.n	800849c <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008492:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008496:	f7ff fa8d 	bl	80079b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800849a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a72      	ldr	r2, [pc, #456]	; (800866c <HAL_SAI_Init+0x2cc>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d004      	beq.n	80084b0 <HAL_SAI_Init+0x110>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a71      	ldr	r2, [pc, #452]	; (8008670 <HAL_SAI_Init+0x2d0>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d104      	bne.n	80084ba <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80084b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80084b4:	f7ff fa7e 	bl	80079b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80084b8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	4613      	mov	r3, r2
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	4413      	add	r3, r2
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	461a      	mov	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	025b      	lsls	r3, r3, #9
 80084cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4a67      	ldr	r2, [pc, #412]	; (8008674 <HAL_SAI_Init+0x2d4>)
 80084d6:	fba2 2303 	umull	r2, r3, r2, r3
 80084da:	08da      	lsrs	r2, r3, #3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80084e0:	68f9      	ldr	r1, [r7, #12]
 80084e2:	4b64      	ldr	r3, [pc, #400]	; (8008674 <HAL_SAI_Init+0x2d4>)
 80084e4:	fba3 2301 	umull	r2, r3, r3, r1
 80084e8:	08da      	lsrs	r2, r3, #3
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	005b      	lsls	r3, r3, #1
 80084f2:	1aca      	subs	r2, r1, r3
 80084f4:	2a08      	cmp	r2, #8
 80084f6:	d904      	bls.n	8008502 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	1c5a      	adds	r2, r3, #1
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <HAL_SAI_Init+0x172>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2b02      	cmp	r3, #2
 8008510:	d109      	bne.n	8008526 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008516:	2b01      	cmp	r3, #1
 8008518:	d101      	bne.n	800851e <HAL_SAI_Init+0x17e>
 800851a:	2300      	movs	r3, #0
 800851c:	e001      	b.n	8008522 <HAL_SAI_Init+0x182>
 800851e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008522:	61bb      	str	r3, [r7, #24]
 8008524:	e008      	b.n	8008538 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852a:	2b01      	cmp	r3, #1
 800852c:	d102      	bne.n	8008534 <HAL_SAI_Init+0x194>
 800852e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008532:	e000      	b.n	8008536 <HAL_SAI_Init+0x196>
 8008534:	2300      	movs	r3, #0
 8008536:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6819      	ldr	r1, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	4b4d      	ldr	r3, [pc, #308]	; (8008678 <HAL_SAI_Init+0x2d8>)
 8008544:	400b      	ands	r3, r1
 8008546:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6819      	ldr	r1, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685a      	ldr	r2, [r3, #4]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800855c:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	431a      	orrs	r2, r3
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8008570:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800857c:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	051b      	lsls	r3, r3, #20
 8008584:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6859      	ldr	r1, [r3, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	4b38      	ldr	r3, [pc, #224]	; (800867c <HAL_SAI_Init+0x2dc>)
 800859a:	400b      	ands	r3, r1
 800859c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6859      	ldr	r1, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	699a      	ldr	r2, [r3, #24]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ac:	431a      	orrs	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b2:	431a      	orrs	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	430a      	orrs	r2, r1
 80085ba:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6899      	ldr	r1, [r3, #8]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	4b2e      	ldr	r3, [pc, #184]	; (8008680 <HAL_SAI_Init+0x2e0>)
 80085c8:	400b      	ands	r3, r1
 80085ca:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6899      	ldr	r1, [r3, #8]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80085dc:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80085e2:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80085e8:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ee:	3b01      	subs	r3, #1
 80085f0:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80085f2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68d9      	ldr	r1, [r3, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	f24f 0320 	movw	r3, #61472	; 0xf020
 800860a:	400b      	ands	r3, r1
 800860c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68d9      	ldr	r1, [r3, #12]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800861c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008622:	041b      	lsls	r3, r3, #16
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800862a:	3b01      	subs	r3, #1
 800862c:	021b      	lsls	r3, r3, #8
 800862e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3720      	adds	r7, #32
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	40015804 	.word	0x40015804
 8008660:	40015824 	.word	0x40015824
 8008664:	40015800 	.word	0x40015800
 8008668:	40015c00 	.word	0x40015c00
 800866c:	40015c04 	.word	0x40015c04
 8008670:	40015c24 	.word	0x40015c24
 8008674:	cccccccd 	.word	0xcccccccd
 8008678:	ff05c010 	.word	0xff05c010
 800867c:	ffff1ff0 	.word	0xffff1ff0
 8008680:	fff88000 	.word	0xfff88000

08008684 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008684:	b490      	push	{r4, r7}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800868c:	4b16      	ldr	r3, [pc, #88]	; (80086e8 <SAI_Disable+0x64>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a16      	ldr	r2, [pc, #88]	; (80086ec <SAI_Disable+0x68>)
 8008692:	fba2 2303 	umull	r2, r3, r2, r3
 8008696:	0b1b      	lsrs	r3, r3, #12
 8008698:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80086ac:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80086ae:	4623      	mov	r3, r4
 80086b0:	1e5c      	subs	r4, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10a      	bne.n	80086cc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	73fb      	strb	r3, [r7, #15]
      break;
 80086ca:	e006      	b.n	80086da <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e9      	bne.n	80086ae <SAI_Disable+0x2a>

  return status;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc90      	pop	{r4, r7}
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	20000000 	.word	0x20000000
 80086ec:	95cbec1b 	.word	0x95cbec1b

080086f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e022      	b.n	8008748 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d105      	bne.n	800871a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7fa fcc1 	bl	800309c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2203      	movs	r2, #3
 800871e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f814 	bl	8008750 <HAL_SD_InitCard>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e00a      	b.n	8008748 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008750:	b5b0      	push	{r4, r5, r7, lr}
 8008752:	b08e      	sub	sp, #56	; 0x38
 8008754:	af04      	add	r7, sp, #16
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008758:	2300      	movs	r3, #0
 800875a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800875c:	2300      	movs	r3, #0
 800875e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008760:	2300      	movs	r3, #0
 8008762:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008764:	2300      	movs	r3, #0
 8008766:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008768:	2300      	movs	r3, #0
 800876a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800876c:	2376      	movs	r3, #118	; 0x76
 800876e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681d      	ldr	r5, [r3, #0]
 8008774:	466c      	mov	r4, sp
 8008776:	f107 0314 	add.w	r3, r7, #20
 800877a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800877e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008782:	f107 0308 	add.w	r3, r7, #8
 8008786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008788:	4628      	mov	r0, r5
 800878a:	f002 fc59 	bl	800b040 <SDMMC_Init>
 800878e:	4603      	mov	r3, r0
 8008790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e03b      	b.n	8008818 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087ae:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f002 fc7c 	bl	800b0b2 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087c8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fb16 	bl	8008dfc <SD_PowerON>
 80087d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00b      	beq.n	80087f0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	431a      	orrs	r2, r3
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e013      	b.n	8008818 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fa35 	bl	8008c60 <SD_InitCard>
 80087f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00b      	beq.n	8008816 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e000      	b.n	8008818 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3728      	adds	r7, #40	; 0x28
 800881c:	46bd      	mov	sp, r7
 800881e:	bdb0      	pop	{r4, r5, r7, pc}

08008820 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800882e:	0f9b      	lsrs	r3, r3, #30
 8008830:	b2da      	uxtb	r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800883a:	0e9b      	lsrs	r3, r3, #26
 800883c:	b2db      	uxtb	r3, r3
 800883e:	f003 030f 	and.w	r3, r3, #15
 8008842:	b2da      	uxtb	r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800884c:	0e1b      	lsrs	r3, r3, #24
 800884e:	b2db      	uxtb	r3, r3
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	b2da      	uxtb	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800885e:	0c1b      	lsrs	r3, r3, #16
 8008860:	b2da      	uxtb	r2, r3
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800886a:	0a1b      	lsrs	r3, r3, #8
 800886c:	b2da      	uxtb	r2, r3
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008876:	b2da      	uxtb	r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008880:	0d1b      	lsrs	r3, r3, #20
 8008882:	b29a      	uxth	r2, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800888c:	0c1b      	lsrs	r3, r3, #16
 800888e:	b2db      	uxtb	r3, r3
 8008890:	f003 030f 	and.w	r3, r3, #15
 8008894:	b2da      	uxtb	r2, r3
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800889e:	0bdb      	lsrs	r3, r3, #15
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088b0:	0b9b      	lsrs	r3, r3, #14
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	b2da      	uxtb	r2, r3
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088c2:	0b5b      	lsrs	r3, r3, #13
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088d4:	0b1b      	lsrs	r3, r3, #12
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	b2da      	uxtb	r2, r3
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2200      	movs	r2, #0
 80088e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d163      	bne.n	80089b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088f4:	009a      	lsls	r2, r3, #2
 80088f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80088fa:	4013      	ands	r3, r2
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008900:	0f92      	lsrs	r2, r2, #30
 8008902:	431a      	orrs	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800890c:	0edb      	lsrs	r3, r3, #27
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 0307 	and.w	r3, r3, #7
 8008914:	b2da      	uxtb	r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800891e:	0e1b      	lsrs	r3, r3, #24
 8008920:	b2db      	uxtb	r3, r3
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	b2da      	uxtb	r2, r3
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008930:	0d5b      	lsrs	r3, r3, #21
 8008932:	b2db      	uxtb	r3, r3
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	b2da      	uxtb	r2, r3
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008942:	0c9b      	lsrs	r3, r3, #18
 8008944:	b2db      	uxtb	r3, r3
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	b2da      	uxtb	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008954:	0bdb      	lsrs	r3, r3, #15
 8008956:	b2db      	uxtb	r3, r3
 8008958:	f003 0307 	and.w	r3, r3, #7
 800895c:	b2da      	uxtb	r2, r3
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	7e1b      	ldrb	r3, [r3, #24]
 8008970:	b2db      	uxtb	r3, r3
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	3302      	adds	r3, #2
 8008978:	2201      	movs	r2, #1
 800897a:	fa02 f303 	lsl.w	r3, r2, r3
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008982:	fb02 f203 	mul.w	r2, r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	7a1b      	ldrb	r3, [r3, #8]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	f003 030f 	and.w	r3, r3, #15
 8008994:	2201      	movs	r2, #1
 8008996:	409a      	lsls	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80089a4:	0a52      	lsrs	r2, r2, #9
 80089a6:	fb02 f203 	mul.w	r2, r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089b4:	661a      	str	r2, [r3, #96]	; 0x60
 80089b6:	e031      	b.n	8008a1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d11d      	bne.n	80089fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089c4:	041b      	lsls	r3, r3, #16
 80089c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ce:	0c1b      	lsrs	r3, r3, #16
 80089d0:	431a      	orrs	r2, r3
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	3301      	adds	r3, #1
 80089dc:	029a      	lsls	r2, r3, #10
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089f0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	661a      	str	r2, [r3, #96]	; 0x60
 80089fa:	e00f      	b.n	8008a1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a58      	ldr	r2, [pc, #352]	; (8008b64 <HAL_SD_GetCardCSD+0x344>)
 8008a02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e09d      	b.n	8008b58 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a20:	0b9b      	lsrs	r3, r3, #14
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	f003 0301 	and.w	r3, r3, #1
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a32:	09db      	lsrs	r3, r3, #7
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a54:	0fdb      	lsrs	r3, r3, #31
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a60:	0f5b      	lsrs	r3, r3, #29
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	f003 0303 	and.w	r3, r3, #3
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a72:	0e9b      	lsrs	r3, r3, #26
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a84:	0d9b      	lsrs	r3, r3, #22
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 030f 	and.w	r3, r3, #15
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a96:	0d5b      	lsrs	r3, r3, #21
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	f003 0301 	and.w	r3, r3, #1
 8008a9e:	b2da      	uxtb	r2, r3
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab2:	0c1b      	lsrs	r3, r3, #16
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac6:	0bdb      	lsrs	r3, r3, #15
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ada:	0b9b      	lsrs	r3, r3, #14
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aee:	0b5b      	lsrs	r3, r3, #13
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b02:	0b1b      	lsrs	r3, r3, #12
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b16:	0a9b      	lsrs	r3, r3, #10
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b2a:	0a1b      	lsrs	r3, r3, #8
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3e:	085b      	lsrs	r3, r3, #1
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	004005ff 	.word	0x004005ff

08008b68 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008b68:	b5b0      	push	{r4, r5, r7, lr}
 8008b6a:	b08e      	sub	sp, #56	; 0x38
 8008b6c:	af04      	add	r7, sp, #16
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2203      	movs	r2, #3
 8008b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d02e      	beq.n	8008be0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b88:	d106      	bne.n	8008b98 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	639a      	str	r2, [r3, #56]	; 0x38
 8008b96:	e029      	b.n	8008bec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b9e:	d10a      	bne.n	8008bb6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f9b9 	bl	8008f18 <SD_WideBus_Enable>
 8008ba6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	639a      	str	r2, [r3, #56]	; 0x38
 8008bb4:	e01a      	b.n	8008bec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10a      	bne.n	8008bd2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f9f6 	bl	8008fae <SD_WideBus_Disable>
 8008bc2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	639a      	str	r2, [r3, #56]	; 0x38
 8008bd0:	e00c      	b.n	8008bec <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	639a      	str	r2, [r3, #56]	; 0x38
 8008bde:	e005      	b.n	8008bec <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d009      	beq.n	8008c08 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a18      	ldr	r2, [pc, #96]	; (8008c5c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008bfa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e024      	b.n	8008c52 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	699b      	ldr	r3, [r3, #24]
 8008c28:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681d      	ldr	r5, [r3, #0]
 8008c2e:	466c      	mov	r4, sp
 8008c30:	f107 0318 	add.w	r3, r7, #24
 8008c34:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c3c:	f107 030c 	add.w	r3, r7, #12
 8008c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c42:	4628      	mov	r0, r5
 8008c44:	f002 f9fc 	bl	800b040 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3728      	adds	r7, #40	; 0x28
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bdb0      	pop	{r4, r5, r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	004005ff 	.word	0x004005ff

08008c60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c60:	b5b0      	push	{r4, r5, r7, lr}
 8008c62:	b094      	sub	sp, #80	; 0x50
 8008c64:	af04      	add	r7, sp, #16
 8008c66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f002 fa2d 	bl	800b0d0 <SDMMC_GetPowerState>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c80:	e0b7      	b.n	8008df2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d02f      	beq.n	8008cea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f002 fbad 	bl	800b3ee <SDMMC_CmdSendCID>
 8008c94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <SD_InitCard+0x40>
    {
      return errorstate;
 8008c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9e:	e0a8      	b.n	8008df2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f002 fa57 	bl	800b15a <SDMMC_GetResponse>
 8008cac:	4602      	mov	r2, r0
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2104      	movs	r1, #4
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f002 fa4e 	bl	800b15a <SDMMC_GetResponse>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2108      	movs	r1, #8
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f002 fa45 	bl	800b15a <SDMMC_GetResponse>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	210c      	movs	r1, #12
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f002 fa3c 	bl	800b15a <SDMMC_GetResponse>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d00d      	beq.n	8008d0e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f107 020e 	add.w	r2, r7, #14
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f002 fbb3 	bl	800b468 <SDMMC_CmdSetRelAdd>
 8008d02:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <SD_InitCard+0xae>
    {
      return errorstate;
 8008d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0c:	e071      	b.n	8008df2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d036      	beq.n	8008d84 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d16:	89fb      	ldrh	r3, [r7, #14]
 8008d18:	461a      	mov	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d26:	041b      	lsls	r3, r3, #16
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4610      	mov	r0, r2
 8008d2c:	f002 fb7d 	bl	800b42a <SDMMC_CmdSendCSD>
 8008d30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3a:	e05a      	b.n	8008df2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2100      	movs	r1, #0
 8008d42:	4618      	mov	r0, r3
 8008d44:	f002 fa09 	bl	800b15a <SDMMC_GetResponse>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2104      	movs	r1, #4
 8008d54:	4618      	mov	r0, r3
 8008d56:	f002 fa00 	bl	800b15a <SDMMC_GetResponse>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2108      	movs	r1, #8
 8008d66:	4618      	mov	r0, r3
 8008d68:	f002 f9f7 	bl	800b15a <SDMMC_GetResponse>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	210c      	movs	r1, #12
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f002 f9ee 	bl	800b15a <SDMMC_GetResponse>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2104      	movs	r1, #4
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f002 f9e5 	bl	800b15a <SDMMC_GetResponse>
 8008d90:	4603      	mov	r3, r0
 8008d92:	0d1a      	lsrs	r2, r3, #20
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008d98:	f107 0310 	add.w	r3, r7, #16
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff fd3e 	bl	8008820 <HAL_SD_GetCardCSD>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008daa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008dae:	e020      	b.n	8008df2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6819      	ldr	r1, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db8:	041b      	lsls	r3, r3, #16
 8008dba:	f04f 0400 	mov.w	r4, #0
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	4623      	mov	r3, r4
 8008dc2:	4608      	mov	r0, r1
 8008dc4:	f002 fa2a 	bl	800b21c <SDMMC_CmdSelDesel>
 8008dc8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <SD_InitCard+0x174>
  {
    return errorstate;
 8008dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd2:	e00e      	b.n	8008df2 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681d      	ldr	r5, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	466c      	mov	r4, sp
 8008ddc:	f103 0210 	add.w	r2, r3, #16
 8008de0:	ca07      	ldmia	r2, {r0, r1, r2}
 8008de2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008de6:	3304      	adds	r3, #4
 8008de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008dea:	4628      	mov	r0, r5
 8008dec:	f002 f928 	bl	800b040 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3740      	adds	r7, #64	; 0x40
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008dfc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	617b      	str	r3, [r7, #20]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f002 fa24 	bl	800b262 <SDMMC_CmdGoIdleState>
 8008e1a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	e072      	b.n	8008f0c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f002 fa37 	bl	800b29e <SDMMC_CmdOperCond>
 8008e30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00d      	beq.n	8008e54 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f002 fa0d 	bl	800b262 <SDMMC_CmdGoIdleState>
 8008e48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d004      	beq.n	8008e5a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	e05b      	b.n	8008f0c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d137      	bne.n	8008ed2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2100      	movs	r1, #0
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f002 fa37 	bl	800b2dc <SDMMC_CmdAppCommand>
 8008e6e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d02d      	beq.n	8008ed2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e7a:	e047      	b.n	8008f0c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f002 fa2a 	bl	800b2dc <SDMMC_CmdAppCommand>
 8008e88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <SD_PowerON+0x98>
    {
      return errorstate;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	e03b      	b.n	8008f0c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	491e      	ldr	r1, [pc, #120]	; (8008f14 <SD_PowerON+0x118>)
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f002 fa40 	bl	800b320 <SDMMC_CmdAppOperCommand>
 8008ea0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d002      	beq.n	8008eae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008eac:	e02e      	b.n	8008f0c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f002 f950 	bl	800b15a <SDMMC_GetResponse>
 8008eba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	0fdb      	lsrs	r3, r3, #31
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <SD_PowerON+0xcc>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e000      	b.n	8008eca <SD_PowerON+0xce>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	613b      	str	r3, [r7, #16]

    count++;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d802      	bhi.n	8008ee2 <SD_PowerON+0xe6>
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0cc      	beq.n	8008e7c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d902      	bls.n	8008ef2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ef0:	e00c      	b.n	8008f0c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	645a      	str	r2, [r3, #68]	; 0x44
 8008f02:	e002      	b.n	8008f0a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008f0a:	2300      	movs	r3, #0
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3718      	adds	r7, #24
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	c1100000 	.word	0xc1100000

08008f18 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008f20:	2300      	movs	r3, #0
 8008f22:	60fb      	str	r3, [r7, #12]
 8008f24:	2300      	movs	r3, #0
 8008f26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f002 f913 	bl	800b15a <SDMMC_GetResponse>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f3e:	d102      	bne.n	8008f46 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f44:	e02f      	b.n	8008fa6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008f46:	f107 030c 	add.w	r3, r7, #12
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f879 	bl	8009044 <SD_FindSCR>
 8008f52:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	e023      	b.n	8008fa6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d01c      	beq.n	8008fa2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f70:	041b      	lsls	r3, r3, #16
 8008f72:	4619      	mov	r1, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	f002 f9b1 	bl	800b2dc <SDMMC_CmdAppCommand>
 8008f7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	e00f      	b.n	8008fa6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2102      	movs	r1, #2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f002 f9eb 	bl	800b368 <SDMMC_CmdBusWidth>
 8008f92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	e003      	b.n	8008fa6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e001      	b.n	8008fa6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fa2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	2300      	movs	r3, #0
 8008fbc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f002 f8c8 	bl	800b15a <SDMMC_GetResponse>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fd4:	d102      	bne.n	8008fdc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008fd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008fda:	e02f      	b.n	800903c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008fdc:	f107 030c 	add.w	r3, r7, #12
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f82e 	bl	8009044 <SD_FindSCR>
 8008fe8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d001      	beq.n	8008ff4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	e023      	b.n	800903c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d01c      	beq.n	8009038 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009006:	041b      	lsls	r3, r3, #16
 8009008:	4619      	mov	r1, r3
 800900a:	4610      	mov	r0, r2
 800900c:	f002 f966 	bl	800b2dc <SDMMC_CmdAppCommand>
 8009010:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	e00f      	b.n	800903c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2100      	movs	r1, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f002 f9a0 	bl	800b368 <SDMMC_CmdBusWidth>
 8009028:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	e003      	b.n	800903c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009034:	2300      	movs	r3, #0
 8009036:	e001      	b.n	800903c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009038:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800903c:	4618      	mov	r0, r3
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009044:	b590      	push	{r4, r7, lr}
 8009046:	b08f      	sub	sp, #60	; 0x3c
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800904e:	f7fa fd75 	bl	8003b3c <HAL_GetTick>
 8009052:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009058:	2300      	movs	r3, #0
 800905a:	60bb      	str	r3, [r7, #8]
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2108      	movs	r1, #8
 800906a:	4618      	mov	r0, r3
 800906c:	f002 f8b4 	bl	800b1d8 <SDMMC_CmdBlockLength>
 8009070:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	e0a9      	b.n	80091d0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009084:	041b      	lsls	r3, r3, #16
 8009086:	4619      	mov	r1, r3
 8009088:	4610      	mov	r0, r2
 800908a:	f002 f927 	bl	800b2dc <SDMMC_CmdAppCommand>
 800908e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	e09a      	b.n	80091d0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800909a:	f04f 33ff 	mov.w	r3, #4294967295
 800909e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80090a0:	2308      	movs	r3, #8
 80090a2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80090a4:	2330      	movs	r3, #48	; 0x30
 80090a6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090a8:	2302      	movs	r3, #2
 80090aa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80090b0:	2301      	movs	r3, #1
 80090b2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f107 0210 	add.w	r2, r7, #16
 80090bc:	4611      	mov	r1, r2
 80090be:	4618      	mov	r0, r3
 80090c0:	f002 f85e 	bl	800b180 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f002 f96f 	bl	800b3ac <SDMMC_CmdSendSCR>
 80090ce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d022      	beq.n	800911c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80090d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d8:	e07a      	b.n	80091d0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00e      	beq.n	8009106 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6819      	ldr	r1, [r3, #0]
 80090ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	f107 0208 	add.w	r2, r7, #8
 80090f4:	18d4      	adds	r4, r2, r3
 80090f6:	4608      	mov	r0, r1
 80090f8:	f001 ffce 	bl	800b098 <SDMMC_ReadFIFO>
 80090fc:	4603      	mov	r3, r0
 80090fe:	6023      	str	r3, [r4, #0]
      index++;
 8009100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009102:	3301      	adds	r3, #1
 8009104:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009106:	f7fa fd19 	bl	8003b3c <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009114:	d102      	bne.n	800911c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009116:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800911a:	e059      	b.n	80091d0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009122:	f240 432a 	movw	r3, #1066	; 0x42a
 8009126:	4013      	ands	r3, r2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0d6      	beq.n	80090da <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009132:	f003 0308 	and.w	r3, r3, #8
 8009136:	2b00      	cmp	r3, #0
 8009138:	d005      	beq.n	8009146 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2208      	movs	r2, #8
 8009140:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009142:	2308      	movs	r3, #8
 8009144:	e044      	b.n	80091d0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800914c:	f003 0302 	and.w	r3, r3, #2
 8009150:	2b00      	cmp	r3, #0
 8009152:	d005      	beq.n	8009160 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2202      	movs	r2, #2
 800915a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800915c:	2302      	movs	r3, #2
 800915e:	e037      	b.n	80091d0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d005      	beq.n	800917a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2220      	movs	r2, #32
 8009174:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009176:	2320      	movs	r3, #32
 8009178:	e02a      	b.n	80091d0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009182:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	061a      	lsls	r2, r3, #24
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	021b      	lsls	r3, r3, #8
 800918c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009190:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	0a1b      	lsrs	r3, r3, #8
 8009196:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800919a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	0e1b      	lsrs	r3, r3, #24
 80091a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	601a      	str	r2, [r3, #0]
    scr++;
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	3304      	adds	r3, #4
 80091aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	061a      	lsls	r2, r3, #24
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091b8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	0a1b      	lsrs	r3, r3, #8
 80091be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80091c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	0e1b      	lsrs	r3, r3, #24
 80091c8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80091ce:	2300      	movs	r3, #0
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	373c      	adds	r7, #60	; 0x3c
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd90      	pop	{r4, r7, pc}

080091d8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d101      	bne.n	80091ec <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e025      	b.n	8009238 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d106      	bne.n	8009206 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7fa fad1 	bl	80037a8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2202      	movs	r2, #2
 800920a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	3304      	adds	r3, #4
 8009216:	4619      	mov	r1, r3
 8009218:	4610      	mov	r0, r2
 800921a:	f001 fdeb 	bl	800adf4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	461a      	mov	r2, r3
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	f001 fe55 	bl	800aed8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b02      	cmp	r3, #2
 8009256:	d101      	bne.n	800925c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009258:	2302      	movs	r3, #2
 800925a:	e018      	b.n	800928e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	68b9      	ldr	r1, [r7, #8]
 800926c:	4618      	mov	r0, r3
 800926e:	f001 feb3 	bl	800afd8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b02      	cmp	r3, #2
 8009278:	d104      	bne.n	8009284 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2205      	movs	r2, #5
 800927e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009282:	e003      	b.n	800928c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b082      	sub	sp, #8
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d101      	bne.n	80092b0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80092ac:	2302      	movs	r3, #2
 80092ae:	e00e      	b.n	80092ce <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	4618      	mov	r0, r3
 80092c0:	f001 feab 	bl	800b01a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d101      	bne.n	80092ea <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e04c      	b.n	8009384 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d106      	bne.n	8009304 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7f9 ff2e 	bl	8003160 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 0203 	bic.w	r2, r2, #3
 800931a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	4b19      	ldr	r3, [pc, #100]	; (800938c <HAL_SPDIFRX_Init+0xb4>)
 8009328:	4013      	ands	r3, r2
 800932a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009334:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800933a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009340:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009346:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800934c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009352:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009358:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800935e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009364:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	4313      	orrs	r3, r2
 800936a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2201      	movs	r2, #1
 800937e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009382:	2300      	movs	r3, #0
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	fff88407 	.word	0xfff88407

08009390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e084      	b.n	80094ac <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d106      	bne.n	80093c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7f9 ff11 	bl	80031e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2202      	movs	r2, #2
 80093c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093d8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093e2:	d902      	bls.n	80093ea <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80093e4:	2300      	movs	r3, #0
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	e002      	b.n	80093f0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80093ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80093f8:	d007      	beq.n	800940a <HAL_SPI_Init+0x7a>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009402:	d002      	beq.n	800940a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10b      	bne.n	800942a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800941a:	d903      	bls.n	8009424 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2202      	movs	r2, #2
 8009420:	631a      	str	r2, [r3, #48]	; 0x30
 8009422:	e002      	b.n	800942a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	431a      	orrs	r2, r3
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	431a      	orrs	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	431a      	orrs	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009448:	431a      	orrs	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	431a      	orrs	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	ea42 0103 	orr.w	r1, r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	0c1b      	lsrs	r3, r3, #16
 800946a:	f003 0204 	and.w	r2, r3, #4
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009472:	431a      	orrs	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009478:	431a      	orrs	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	ea42 0103 	orr.w	r1, r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	430a      	orrs	r2, r1
 800948a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	69da      	ldr	r2, [r3, #28]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800949a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e01d      	b.n	8009502 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7f9 fee4 	bl	80032a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f000 fb78 	bl	8009be8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68da      	ldr	r2, [r3, #12]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f042 0201 	orr.w	r2, r2, #1
 8009522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	689a      	ldr	r2, [r3, #8]
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <HAL_TIM_Base_Start_IT+0x50>)
 800952c:	4013      	ands	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2b06      	cmp	r3, #6
 8009534:	d00b      	beq.n	800954e <HAL_TIM_Base_Start_IT+0x42>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800953c:	d007      	beq.n	800954e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f042 0201 	orr.w	r2, r2, #1
 800954c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3714      	adds	r7, #20
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	00010007 	.word	0x00010007

08009560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e01d      	b.n	80095ae <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d106      	bne.n	800958c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7f9 fefc 	bl	8003384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2202      	movs	r2, #2
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3304      	adds	r3, #4
 800959c:	4619      	mov	r1, r3
 800959e:	4610      	mov	r0, r2
 80095a0:	f000 fb22 	bl	8009be8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	f003 0302 	and.w	r3, r3, #2
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d122      	bne.n	8009612 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d11b      	bne.n	8009612 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f06f 0202 	mvn.w	r2, #2
 80095e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	f003 0303 	and.w	r3, r3, #3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fad7 	bl	8009bac <HAL_TIM_IC_CaptureCallback>
 80095fe:	e005      	b.n	800960c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fac9 	bl	8009b98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fada 	bl	8009bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b04      	cmp	r3, #4
 800961e:	d122      	bne.n	8009666 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f003 0304 	and.w	r3, r3, #4
 800962a:	2b04      	cmp	r3, #4
 800962c:	d11b      	bne.n	8009666 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f06f 0204 	mvn.w	r2, #4
 8009636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 faad 	bl	8009bac <HAL_TIM_IC_CaptureCallback>
 8009652:	e005      	b.n	8009660 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fa9f 	bl	8009b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 fab0 	bl	8009bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	f003 0308 	and.w	r3, r3, #8
 8009670:	2b08      	cmp	r3, #8
 8009672:	d122      	bne.n	80096ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f003 0308 	and.w	r3, r3, #8
 800967e:	2b08      	cmp	r3, #8
 8009680:	d11b      	bne.n	80096ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f06f 0208 	mvn.w	r2, #8
 800968a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2204      	movs	r2, #4
 8009690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	f003 0303 	and.w	r3, r3, #3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fa83 	bl	8009bac <HAL_TIM_IC_CaptureCallback>
 80096a6:	e005      	b.n	80096b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fa75 	bl	8009b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fa86 	bl	8009bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	f003 0310 	and.w	r3, r3, #16
 80096c4:	2b10      	cmp	r3, #16
 80096c6:	d122      	bne.n	800970e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f003 0310 	and.w	r3, r3, #16
 80096d2:	2b10      	cmp	r3, #16
 80096d4:	d11b      	bne.n	800970e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f06f 0210 	mvn.w	r2, #16
 80096de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2208      	movs	r2, #8
 80096e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d003      	beq.n	80096fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fa59 	bl	8009bac <HAL_TIM_IC_CaptureCallback>
 80096fa:	e005      	b.n	8009708 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fa4b 	bl	8009b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fa5c 	bl	8009bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	f003 0301 	and.w	r3, r3, #1
 8009718:	2b01      	cmp	r3, #1
 800971a:	d10e      	bne.n	800973a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b01      	cmp	r3, #1
 8009728:	d107      	bne.n	800973a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f06f 0201 	mvn.w	r2, #1
 8009732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7f9 f90b 	bl	8002950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009744:	2b80      	cmp	r3, #128	; 0x80
 8009746:	d10e      	bne.n	8009766 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009752:	2b80      	cmp	r3, #128	; 0x80
 8009754:	d107      	bne.n	8009766 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800975e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 feef 	bl	800a544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009774:	d10e      	bne.n	8009794 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009780:	2b80      	cmp	r3, #128	; 0x80
 8009782:	d107      	bne.n	8009794 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800978c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fee2 	bl	800a558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800979e:	2b40      	cmp	r3, #64	; 0x40
 80097a0:	d10e      	bne.n	80097c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ac:	2b40      	cmp	r3, #64	; 0x40
 80097ae:	d107      	bne.n	80097c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fa0a 	bl	8009bd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	d10e      	bne.n	80097ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f003 0320 	and.w	r3, r3, #32
 80097d8:	2b20      	cmp	r3, #32
 80097da:	d107      	bne.n	80097ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f06f 0220 	mvn.w	r2, #32
 80097e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fea2 	bl	800a530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097ec:	bf00      	nop
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009806:	2b01      	cmp	r3, #1
 8009808:	d101      	bne.n	800980e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800980a:	2302      	movs	r3, #2
 800980c:	e105      	b.n	8009a1a <HAL_TIM_PWM_ConfigChannel+0x226>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2202      	movs	r2, #2
 800981a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b14      	cmp	r3, #20
 8009822:	f200 80f0 	bhi.w	8009a06 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009826:	a201      	add	r2, pc, #4	; (adr r2, 800982c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982c:	08009881 	.word	0x08009881
 8009830:	08009a07 	.word	0x08009a07
 8009834:	08009a07 	.word	0x08009a07
 8009838:	08009a07 	.word	0x08009a07
 800983c:	080098c1 	.word	0x080098c1
 8009840:	08009a07 	.word	0x08009a07
 8009844:	08009a07 	.word	0x08009a07
 8009848:	08009a07 	.word	0x08009a07
 800984c:	08009903 	.word	0x08009903
 8009850:	08009a07 	.word	0x08009a07
 8009854:	08009a07 	.word	0x08009a07
 8009858:	08009a07 	.word	0x08009a07
 800985c:	08009943 	.word	0x08009943
 8009860:	08009a07 	.word	0x08009a07
 8009864:	08009a07 	.word	0x08009a07
 8009868:	08009a07 	.word	0x08009a07
 800986c:	08009985 	.word	0x08009985
 8009870:	08009a07 	.word	0x08009a07
 8009874:	08009a07 	.word	0x08009a07
 8009878:	08009a07 	.word	0x08009a07
 800987c:	080099c5 	.word	0x080099c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68b9      	ldr	r1, [r7, #8]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fa4e 	bl	8009d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	699a      	ldr	r2, [r3, #24]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0208 	orr.w	r2, r2, #8
 800989a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	699a      	ldr	r2, [r3, #24]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f022 0204 	bic.w	r2, r2, #4
 80098aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6999      	ldr	r1, [r3, #24]
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	691a      	ldr	r2, [r3, #16]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	619a      	str	r2, [r3, #24]
      break;
 80098be:	e0a3      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68b9      	ldr	r1, [r7, #8]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 faa0 	bl	8009e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699a      	ldr	r2, [r3, #24]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	699a      	ldr	r2, [r3, #24]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6999      	ldr	r1, [r3, #24]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	021a      	lsls	r2, r3, #8
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	619a      	str	r2, [r3, #24]
      break;
 8009900:	e082      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68b9      	ldr	r1, [r7, #8]
 8009908:	4618      	mov	r0, r3
 800990a:	f000 faf7 	bl	8009efc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	69da      	ldr	r2, [r3, #28]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f042 0208 	orr.w	r2, r2, #8
 800991c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69da      	ldr	r2, [r3, #28]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0204 	bic.w	r2, r2, #4
 800992c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69d9      	ldr	r1, [r3, #28]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	691a      	ldr	r2, [r3, #16]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	61da      	str	r2, [r3, #28]
      break;
 8009940:	e062      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	4618      	mov	r0, r3
 800994a:	f000 fb4d 	bl	8009fe8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	69da      	ldr	r2, [r3, #28]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800995c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69da      	ldr	r2, [r3, #28]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800996c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	69d9      	ldr	r1, [r3, #28]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	021a      	lsls	r2, r3, #8
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	430a      	orrs	r2, r1
 8009980:	61da      	str	r2, [r3, #28]
      break;
 8009982:	e041      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	4618      	mov	r0, r3
 800998c:	f000 fb84 	bl	800a098 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0208 	orr.w	r2, r2, #8
 800999e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0204 	bic.w	r2, r2, #4
 80099ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	691a      	ldr	r2, [r3, #16]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80099c2:	e021      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68b9      	ldr	r1, [r7, #8]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fbb6 	bl	800a13c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	021a      	lsls	r2, r3, #8
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009a04:	e000      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009a06:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop

08009a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d101      	bne.n	8009a3c <HAL_TIM_ConfigClockSource+0x18>
 8009a38:	2302      	movs	r3, #2
 8009a3a:	e0a6      	b.n	8009b8a <HAL_TIM_ConfigClockSource+0x166>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	4b4f      	ldr	r3, [pc, #316]	; (8009b94 <HAL_TIM_ConfigClockSource+0x170>)
 8009a58:	4013      	ands	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b40      	cmp	r3, #64	; 0x40
 8009a72:	d067      	beq.n	8009b44 <HAL_TIM_ConfigClockSource+0x120>
 8009a74:	2b40      	cmp	r3, #64	; 0x40
 8009a76:	d80b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x6c>
 8009a78:	2b10      	cmp	r3, #16
 8009a7a:	d073      	beq.n	8009b64 <HAL_TIM_ConfigClockSource+0x140>
 8009a7c:	2b10      	cmp	r3, #16
 8009a7e:	d802      	bhi.n	8009a86 <HAL_TIM_ConfigClockSource+0x62>
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d06f      	beq.n	8009b64 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009a84:	e078      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a86:	2b20      	cmp	r3, #32
 8009a88:	d06c      	beq.n	8009b64 <HAL_TIM_ConfigClockSource+0x140>
 8009a8a:	2b30      	cmp	r3, #48	; 0x30
 8009a8c:	d06a      	beq.n	8009b64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009a8e:	e073      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a90:	2b70      	cmp	r3, #112	; 0x70
 8009a92:	d00d      	beq.n	8009ab0 <HAL_TIM_ConfigClockSource+0x8c>
 8009a94:	2b70      	cmp	r3, #112	; 0x70
 8009a96:	d804      	bhi.n	8009aa2 <HAL_TIM_ConfigClockSource+0x7e>
 8009a98:	2b50      	cmp	r3, #80	; 0x50
 8009a9a:	d033      	beq.n	8009b04 <HAL_TIM_ConfigClockSource+0xe0>
 8009a9c:	2b60      	cmp	r3, #96	; 0x60
 8009a9e:	d041      	beq.n	8009b24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009aa0:	e06a      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa6:	d066      	beq.n	8009b76 <HAL_TIM_ConfigClockSource+0x152>
 8009aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aac:	d017      	beq.n	8009ade <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009aae:	e063      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	6899      	ldr	r1, [r3, #8]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f000 fc0a 	bl	800a2d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ad2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	609a      	str	r2, [r3, #8]
      break;
 8009adc:	e04c      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	6899      	ldr	r1, [r3, #8]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f000 fbf3 	bl	800a2d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b00:	609a      	str	r2, [r3, #8]
      break;
 8009b02:	e039      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	6859      	ldr	r1, [r3, #4]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	461a      	mov	r2, r3
 8009b12:	f000 fb67 	bl	800a1e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2150      	movs	r1, #80	; 0x50
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fbc0 	bl	800a2a2 <TIM_ITRx_SetConfig>
      break;
 8009b22:	e029      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	6859      	ldr	r1, [r3, #4]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	461a      	mov	r2, r3
 8009b32:	f000 fb86 	bl	800a242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2160      	movs	r1, #96	; 0x60
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f000 fbb0 	bl	800a2a2 <TIM_ITRx_SetConfig>
      break;
 8009b42:	e019      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	6859      	ldr	r1, [r3, #4]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	461a      	mov	r2, r3
 8009b52:	f000 fb47 	bl	800a1e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2140      	movs	r1, #64	; 0x40
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 fba0 	bl	800a2a2 <TIM_ITRx_SetConfig>
      break;
 8009b62:	e009      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4610      	mov	r0, r2
 8009b70:	f000 fb97 	bl	800a2a2 <TIM_ITRx_SetConfig>
      break;
 8009b74:	e000      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	fffeff88 	.word	0xfffeff88

08009b98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a40      	ldr	r2, [pc, #256]	; (8009cfc <TIM_Base_SetConfig+0x114>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d013      	beq.n	8009c28 <TIM_Base_SetConfig+0x40>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c06:	d00f      	beq.n	8009c28 <TIM_Base_SetConfig+0x40>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a3d      	ldr	r2, [pc, #244]	; (8009d00 <TIM_Base_SetConfig+0x118>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00b      	beq.n	8009c28 <TIM_Base_SetConfig+0x40>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a3c      	ldr	r2, [pc, #240]	; (8009d04 <TIM_Base_SetConfig+0x11c>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d007      	beq.n	8009c28 <TIM_Base_SetConfig+0x40>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a3b      	ldr	r2, [pc, #236]	; (8009d08 <TIM_Base_SetConfig+0x120>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d003      	beq.n	8009c28 <TIM_Base_SetConfig+0x40>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a3a      	ldr	r2, [pc, #232]	; (8009d0c <TIM_Base_SetConfig+0x124>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d108      	bne.n	8009c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a2f      	ldr	r2, [pc, #188]	; (8009cfc <TIM_Base_SetConfig+0x114>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d02b      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c48:	d027      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a2c      	ldr	r2, [pc, #176]	; (8009d00 <TIM_Base_SetConfig+0x118>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d023      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a2b      	ldr	r2, [pc, #172]	; (8009d04 <TIM_Base_SetConfig+0x11c>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d01f      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a2a      	ldr	r2, [pc, #168]	; (8009d08 <TIM_Base_SetConfig+0x120>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d01b      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a29      	ldr	r2, [pc, #164]	; (8009d0c <TIM_Base_SetConfig+0x124>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d017      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a28      	ldr	r2, [pc, #160]	; (8009d10 <TIM_Base_SetConfig+0x128>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d013      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a27      	ldr	r2, [pc, #156]	; (8009d14 <TIM_Base_SetConfig+0x12c>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d00f      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a26      	ldr	r2, [pc, #152]	; (8009d18 <TIM_Base_SetConfig+0x130>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00b      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a25      	ldr	r2, [pc, #148]	; (8009d1c <TIM_Base_SetConfig+0x134>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d007      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a24      	ldr	r2, [pc, #144]	; (8009d20 <TIM_Base_SetConfig+0x138>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d003      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a23      	ldr	r2, [pc, #140]	; (8009d24 <TIM_Base_SetConfig+0x13c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d108      	bne.n	8009cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a0a      	ldr	r2, [pc, #40]	; (8009cfc <TIM_Base_SetConfig+0x114>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d003      	beq.n	8009ce0 <TIM_Base_SetConfig+0xf8>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a0c      	ldr	r2, [pc, #48]	; (8009d0c <TIM_Base_SetConfig+0x124>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d103      	bne.n	8009ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	691a      	ldr	r2, [r3, #16]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	615a      	str	r2, [r3, #20]
}
 8009cee:	bf00      	nop
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf8:	4770      	bx	lr
 8009cfa:	bf00      	nop
 8009cfc:	40010000 	.word	0x40010000
 8009d00:	40000400 	.word	0x40000400
 8009d04:	40000800 	.word	0x40000800
 8009d08:	40000c00 	.word	0x40000c00
 8009d0c:	40010400 	.word	0x40010400
 8009d10:	40014000 	.word	0x40014000
 8009d14:	40014400 	.word	0x40014400
 8009d18:	40014800 	.word	0x40014800
 8009d1c:	40001800 	.word	0x40001800
 8009d20:	40001c00 	.word	0x40001c00
 8009d24:	40002000 	.word	0x40002000

08009d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	f023 0201 	bic.w	r2, r3, #1
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6a1b      	ldr	r3, [r3, #32]
 8009d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	4b2b      	ldr	r3, [pc, #172]	; (8009e00 <TIM_OC1_SetConfig+0xd8>)
 8009d54:	4013      	ands	r3, r2
 8009d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 0303 	bic.w	r3, r3, #3
 8009d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f023 0302 	bic.w	r3, r3, #2
 8009d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a21      	ldr	r2, [pc, #132]	; (8009e04 <TIM_OC1_SetConfig+0xdc>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d003      	beq.n	8009d8c <TIM_OC1_SetConfig+0x64>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a20      	ldr	r2, [pc, #128]	; (8009e08 <TIM_OC1_SetConfig+0xe0>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d10c      	bne.n	8009da6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f023 0308 	bic.w	r3, r3, #8
 8009d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f023 0304 	bic.w	r3, r3, #4
 8009da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a16      	ldr	r2, [pc, #88]	; (8009e04 <TIM_OC1_SetConfig+0xdc>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d003      	beq.n	8009db6 <TIM_OC1_SetConfig+0x8e>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a15      	ldr	r2, [pc, #84]	; (8009e08 <TIM_OC1_SetConfig+0xe0>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d111      	bne.n	8009dda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	695b      	ldr	r3, [r3, #20]
 8009dca:	693a      	ldr	r2, [r7, #16]
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	693a      	ldr	r2, [r7, #16]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	685a      	ldr	r2, [r3, #4]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	621a      	str	r2, [r3, #32]
}
 8009df4:	bf00      	nop
 8009df6:	371c      	adds	r7, #28
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	fffeff8f 	.word	0xfffeff8f
 8009e04:	40010000 	.word	0x40010000
 8009e08:	40010400 	.word	0x40010400

08009e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	f023 0210 	bic.w	r2, r3, #16
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	4b2e      	ldr	r3, [pc, #184]	; (8009ef0 <TIM_OC2_SetConfig+0xe4>)
 8009e38:	4013      	ands	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	021b      	lsls	r3, r3, #8
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	f023 0320 	bic.w	r3, r3, #32
 8009e56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a23      	ldr	r2, [pc, #140]	; (8009ef4 <TIM_OC2_SetConfig+0xe8>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d003      	beq.n	8009e74 <TIM_OC2_SetConfig+0x68>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	4a22      	ldr	r2, [pc, #136]	; (8009ef8 <TIM_OC2_SetConfig+0xec>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d10d      	bne.n	8009e90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	011b      	lsls	r3, r3, #4
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4a18      	ldr	r2, [pc, #96]	; (8009ef4 <TIM_OC2_SetConfig+0xe8>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d003      	beq.n	8009ea0 <TIM_OC2_SetConfig+0x94>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a17      	ldr	r2, [pc, #92]	; (8009ef8 <TIM_OC2_SetConfig+0xec>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d113      	bne.n	8009ec8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	695b      	ldr	r3, [r3, #20]
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	693a      	ldr	r2, [r7, #16]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	699b      	ldr	r3, [r3, #24]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	621a      	str	r2, [r3, #32]
}
 8009ee2:	bf00      	nop
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	feff8fff 	.word	0xfeff8fff
 8009ef4:	40010000 	.word	0x40010000
 8009ef8:	40010400 	.word	0x40010400

08009efc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	69db      	ldr	r3, [r3, #28]
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	4b2d      	ldr	r3, [pc, #180]	; (8009fdc <TIM_OC3_SetConfig+0xe0>)
 8009f28:	4013      	ands	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f023 0303 	bic.w	r3, r3, #3
 8009f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	021b      	lsls	r3, r3, #8
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a22      	ldr	r2, [pc, #136]	; (8009fe0 <TIM_OC3_SetConfig+0xe4>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d003      	beq.n	8009f62 <TIM_OC3_SetConfig+0x66>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a21      	ldr	r2, [pc, #132]	; (8009fe4 <TIM_OC3_SetConfig+0xe8>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d10d      	bne.n	8009f7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	021b      	lsls	r3, r3, #8
 8009f70:	697a      	ldr	r2, [r7, #20]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a17      	ldr	r2, [pc, #92]	; (8009fe0 <TIM_OC3_SetConfig+0xe4>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d003      	beq.n	8009f8e <TIM_OC3_SetConfig+0x92>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a16      	ldr	r2, [pc, #88]	; (8009fe4 <TIM_OC3_SetConfig+0xe8>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d113      	bne.n	8009fb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	011b      	lsls	r3, r3, #4
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	011b      	lsls	r3, r3, #4
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	697a      	ldr	r2, [r7, #20]
 8009fce:	621a      	str	r2, [r3, #32]
}
 8009fd0:	bf00      	nop
 8009fd2:	371c      	adds	r7, #28
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	fffeff8f 	.word	0xfffeff8f
 8009fe0:	40010000 	.word	0x40010000
 8009fe4:	40010400 	.word	0x40010400

08009fe8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4b1e      	ldr	r3, [pc, #120]	; (800a08c <TIM_OC4_SetConfig+0xa4>)
 800a014:	4013      	ands	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a01e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	021b      	lsls	r3, r3, #8
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a032:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	031b      	lsls	r3, r3, #12
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a13      	ldr	r2, [pc, #76]	; (800a090 <TIM_OC4_SetConfig+0xa8>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d003      	beq.n	800a050 <TIM_OC4_SetConfig+0x68>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a12      	ldr	r2, [pc, #72]	; (800a094 <TIM_OC4_SetConfig+0xac>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d109      	bne.n	800a064 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a056:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	695b      	ldr	r3, [r3, #20]
 800a05c:	019b      	lsls	r3, r3, #6
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	4313      	orrs	r3, r2
 800a062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	697a      	ldr	r2, [r7, #20]
 800a068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	685a      	ldr	r2, [r3, #4]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	693a      	ldr	r2, [r7, #16]
 800a07c:	621a      	str	r2, [r3, #32]
}
 800a07e:	bf00      	nop
 800a080:	371c      	adds	r7, #28
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	feff8fff 	.word	0xfeff8fff
 800a090:	40010000 	.word	0x40010000
 800a094:	40010400 	.word	0x40010400

0800a098 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a098:	b480      	push	{r7}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	4b1b      	ldr	r3, [pc, #108]	; (800a130 <TIM_OC5_SetConfig+0x98>)
 800a0c4:	4013      	ands	r3, r2
 800a0c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a0d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	041b      	lsls	r3, r3, #16
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a12      	ldr	r2, [pc, #72]	; (800a134 <TIM_OC5_SetConfig+0x9c>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d003      	beq.n	800a0f6 <TIM_OC5_SetConfig+0x5e>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a11      	ldr	r2, [pc, #68]	; (800a138 <TIM_OC5_SetConfig+0xa0>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d109      	bne.n	800a10a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	021b      	lsls	r3, r3, #8
 800a104:	697a      	ldr	r2, [r7, #20]
 800a106:	4313      	orrs	r3, r2
 800a108:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	621a      	str	r2, [r3, #32]
}
 800a124:	bf00      	nop
 800a126:	371c      	adds	r7, #28
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	fffeff8f 	.word	0xfffeff8f
 800a134:	40010000 	.word	0x40010000
 800a138:	40010400 	.word	0x40010400

0800a13c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6a1b      	ldr	r3, [r3, #32]
 800a14a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	4b1c      	ldr	r3, [pc, #112]	; (800a1d8 <TIM_OC6_SetConfig+0x9c>)
 800a168:	4013      	ands	r3, r2
 800a16a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	021b      	lsls	r3, r3, #8
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	4313      	orrs	r3, r2
 800a176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a17e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	051b      	lsls	r3, r3, #20
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	4313      	orrs	r3, r2
 800a18a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	4a13      	ldr	r2, [pc, #76]	; (800a1dc <TIM_OC6_SetConfig+0xa0>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d003      	beq.n	800a19c <TIM_OC6_SetConfig+0x60>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a12      	ldr	r2, [pc, #72]	; (800a1e0 <TIM_OC6_SetConfig+0xa4>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d109      	bne.n	800a1b0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	695b      	ldr	r3, [r3, #20]
 800a1a8:	029b      	lsls	r3, r3, #10
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	621a      	str	r2, [r3, #32]
}
 800a1ca:	bf00      	nop
 800a1cc:	371c      	adds	r7, #28
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	feff8fff 	.word	0xfeff8fff
 800a1dc:	40010000 	.word	0x40010000
 800a1e0:	40010400 	.word	0x40010400

0800a1e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b087      	sub	sp, #28
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6a1b      	ldr	r3, [r3, #32]
 800a1f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	f023 0201 	bic.w	r2, r3, #1
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a20e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	011b      	lsls	r3, r3, #4
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	4313      	orrs	r3, r2
 800a218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f023 030a 	bic.w	r3, r3, #10
 800a220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	4313      	orrs	r3, r2
 800a228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	621a      	str	r2, [r3, #32]
}
 800a236:	bf00      	nop
 800a238:	371c      	adds	r7, #28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a242:	b480      	push	{r7}
 800a244:	b087      	sub	sp, #28
 800a246:	af00      	add	r7, sp, #0
 800a248:	60f8      	str	r0, [r7, #12]
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	f023 0210 	bic.w	r2, r3, #16
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a26c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	031b      	lsls	r3, r3, #12
 800a272:	697a      	ldr	r2, [r7, #20]
 800a274:	4313      	orrs	r3, r2
 800a276:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a27e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	011b      	lsls	r3, r3, #4
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	4313      	orrs	r3, r2
 800a288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	621a      	str	r2, [r3, #32]
}
 800a296:	bf00      	nop
 800a298:	371c      	adds	r7, #28
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b085      	sub	sp, #20
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2ba:	683a      	ldr	r2, [r7, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	f043 0307 	orr.w	r3, r3, #7
 800a2c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	609a      	str	r2, [r3, #8]
}
 800a2cc:	bf00      	nop
 800a2ce:	3714      	adds	r7, #20
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b087      	sub	sp, #28
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	021a      	lsls	r2, r3, #8
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	697a      	ldr	r2, [r7, #20]
 800a302:	4313      	orrs	r3, r2
 800a304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	609a      	str	r2, [r3, #8]
}
 800a30c:	bf00      	nop
 800a30e:	371c      	adds	r7, #28
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d101      	bne.n	800a330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a32c:	2302      	movs	r3, #2
 800a32e:	e06d      	b.n	800a40c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2202      	movs	r2, #2
 800a33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a30      	ldr	r2, [pc, #192]	; (800a418 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d004      	beq.n	800a364 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a2f      	ldr	r2, [pc, #188]	; (800a41c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d108      	bne.n	800a376 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a36a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	4313      	orrs	r3, r2
 800a374:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a37c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	4313      	orrs	r3, r2
 800a386:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a20      	ldr	r2, [pc, #128]	; (800a418 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d022      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3a2:	d01d      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1d      	ldr	r2, [pc, #116]	; (800a420 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d018      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a1c      	ldr	r2, [pc, #112]	; (800a424 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d013      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a1a      	ldr	r2, [pc, #104]	; (800a428 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d00e      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a15      	ldr	r2, [pc, #84]	; (800a41c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d009      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a16      	ldr	r2, [pc, #88]	; (800a42c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d004      	beq.n	800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a15      	ldr	r2, [pc, #84]	; (800a430 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d10c      	bne.n	800a3fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	40010000 	.word	0x40010000
 800a41c:	40010400 	.word	0x40010400
 800a420:	40000400 	.word	0x40000400
 800a424:	40000800 	.word	0x40000800
 800a428:	40000c00 	.word	0x40000c00
 800a42c:	40014000 	.word	0x40014000
 800a430:	40001800 	.word	0x40001800

0800a434 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a43e:	2300      	movs	r3, #0
 800a440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d101      	bne.n	800a450 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a44c:	2302      	movs	r3, #2
 800a44e:	e065      	b.n	800a51c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	4313      	orrs	r3, r2
 800a464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	4313      	orrs	r3, r2
 800a472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	4313      	orrs	r3, r2
 800a480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	041b      	lsls	r3, r3, #16
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a16      	ldr	r2, [pc, #88]	; (800a528 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d004      	beq.n	800a4de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a14      	ldr	r2, [pc, #80]	; (800a52c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d115      	bne.n	800a50a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	051b      	lsls	r3, r3, #20
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	69db      	ldr	r3, [r3, #28]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	4313      	orrs	r3, r2
 800a508:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr
 800a528:	40010000 	.word	0x40010000
 800a52c:	40010400 	.word	0x40010400

0800a530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a560:	bf00      	nop
 800a562:	370c      	adds	r7, #12
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e040      	b.n	800a600 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a582:	2b00      	cmp	r3, #0
 800a584:	d106      	bne.n	800a594 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7f8 ffe6 	bl	8003560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2224      	movs	r2, #36	; 0x24
 800a598:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f022 0201 	bic.w	r2, r2, #1
 800a5a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f82c 	bl	800a608 <UART_SetConfig>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d101      	bne.n	800a5ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e022      	b.n	800a600 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d002      	beq.n	800a5c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 faca 	bl	800ab5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a5e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f042 0201 	orr.w	r2, r2, #1
 800a5f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fb51 	bl	800aca0 <UART_CheckIdleState>
 800a5fe:	4603      	mov	r3, r0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a610:	2300      	movs	r3, #0
 800a612:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	689a      	ldr	r2, [r3, #8]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	431a      	orrs	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	431a      	orrs	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	69db      	ldr	r3, [r3, #28]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	4bb1      	ldr	r3, [pc, #708]	; (800a8fc <UART_SetConfig+0x2f4>)
 800a638:	4013      	ands	r3, r2
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	6812      	ldr	r2, [r2, #0]
 800a63e:	6939      	ldr	r1, [r7, #16]
 800a640:	430b      	orrs	r3, r1
 800a642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a1b      	ldr	r3, [r3, #32]
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	4313      	orrs	r3, r2
 800a668:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a9f      	ldr	r2, [pc, #636]	; (800a900 <UART_SetConfig+0x2f8>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d121      	bne.n	800a6cc <UART_SetConfig+0xc4>
 800a688:	4b9e      	ldr	r3, [pc, #632]	; (800a904 <UART_SetConfig+0x2fc>)
 800a68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a68e:	f003 0303 	and.w	r3, r3, #3
 800a692:	2b03      	cmp	r3, #3
 800a694:	d816      	bhi.n	800a6c4 <UART_SetConfig+0xbc>
 800a696:	a201      	add	r2, pc, #4	; (adr r2, 800a69c <UART_SetConfig+0x94>)
 800a698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69c:	0800a6ad 	.word	0x0800a6ad
 800a6a0:	0800a6b9 	.word	0x0800a6b9
 800a6a4:	0800a6b3 	.word	0x0800a6b3
 800a6a8:	0800a6bf 	.word	0x0800a6bf
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	77fb      	strb	r3, [r7, #31]
 800a6b0:	e151      	b.n	800a956 <UART_SetConfig+0x34e>
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	77fb      	strb	r3, [r7, #31]
 800a6b6:	e14e      	b.n	800a956 <UART_SetConfig+0x34e>
 800a6b8:	2304      	movs	r3, #4
 800a6ba:	77fb      	strb	r3, [r7, #31]
 800a6bc:	e14b      	b.n	800a956 <UART_SetConfig+0x34e>
 800a6be:	2308      	movs	r3, #8
 800a6c0:	77fb      	strb	r3, [r7, #31]
 800a6c2:	e148      	b.n	800a956 <UART_SetConfig+0x34e>
 800a6c4:	2310      	movs	r3, #16
 800a6c6:	77fb      	strb	r3, [r7, #31]
 800a6c8:	bf00      	nop
 800a6ca:	e144      	b.n	800a956 <UART_SetConfig+0x34e>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a8d      	ldr	r2, [pc, #564]	; (800a908 <UART_SetConfig+0x300>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d134      	bne.n	800a740 <UART_SetConfig+0x138>
 800a6d6:	4b8b      	ldr	r3, [pc, #556]	; (800a904 <UART_SetConfig+0x2fc>)
 800a6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6dc:	f003 030c 	and.w	r3, r3, #12
 800a6e0:	2b0c      	cmp	r3, #12
 800a6e2:	d829      	bhi.n	800a738 <UART_SetConfig+0x130>
 800a6e4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ec <UART_SetConfig+0xe4>)
 800a6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ea:	bf00      	nop
 800a6ec:	0800a721 	.word	0x0800a721
 800a6f0:	0800a739 	.word	0x0800a739
 800a6f4:	0800a739 	.word	0x0800a739
 800a6f8:	0800a739 	.word	0x0800a739
 800a6fc:	0800a72d 	.word	0x0800a72d
 800a700:	0800a739 	.word	0x0800a739
 800a704:	0800a739 	.word	0x0800a739
 800a708:	0800a739 	.word	0x0800a739
 800a70c:	0800a727 	.word	0x0800a727
 800a710:	0800a739 	.word	0x0800a739
 800a714:	0800a739 	.word	0x0800a739
 800a718:	0800a739 	.word	0x0800a739
 800a71c:	0800a733 	.word	0x0800a733
 800a720:	2300      	movs	r3, #0
 800a722:	77fb      	strb	r3, [r7, #31]
 800a724:	e117      	b.n	800a956 <UART_SetConfig+0x34e>
 800a726:	2302      	movs	r3, #2
 800a728:	77fb      	strb	r3, [r7, #31]
 800a72a:	e114      	b.n	800a956 <UART_SetConfig+0x34e>
 800a72c:	2304      	movs	r3, #4
 800a72e:	77fb      	strb	r3, [r7, #31]
 800a730:	e111      	b.n	800a956 <UART_SetConfig+0x34e>
 800a732:	2308      	movs	r3, #8
 800a734:	77fb      	strb	r3, [r7, #31]
 800a736:	e10e      	b.n	800a956 <UART_SetConfig+0x34e>
 800a738:	2310      	movs	r3, #16
 800a73a:	77fb      	strb	r3, [r7, #31]
 800a73c:	bf00      	nop
 800a73e:	e10a      	b.n	800a956 <UART_SetConfig+0x34e>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a71      	ldr	r2, [pc, #452]	; (800a90c <UART_SetConfig+0x304>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d120      	bne.n	800a78c <UART_SetConfig+0x184>
 800a74a:	4b6e      	ldr	r3, [pc, #440]	; (800a904 <UART_SetConfig+0x2fc>)
 800a74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a750:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a754:	2b10      	cmp	r3, #16
 800a756:	d00f      	beq.n	800a778 <UART_SetConfig+0x170>
 800a758:	2b10      	cmp	r3, #16
 800a75a:	d802      	bhi.n	800a762 <UART_SetConfig+0x15a>
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <UART_SetConfig+0x164>
 800a760:	e010      	b.n	800a784 <UART_SetConfig+0x17c>
 800a762:	2b20      	cmp	r3, #32
 800a764:	d005      	beq.n	800a772 <UART_SetConfig+0x16a>
 800a766:	2b30      	cmp	r3, #48	; 0x30
 800a768:	d009      	beq.n	800a77e <UART_SetConfig+0x176>
 800a76a:	e00b      	b.n	800a784 <UART_SetConfig+0x17c>
 800a76c:	2300      	movs	r3, #0
 800a76e:	77fb      	strb	r3, [r7, #31]
 800a770:	e0f1      	b.n	800a956 <UART_SetConfig+0x34e>
 800a772:	2302      	movs	r3, #2
 800a774:	77fb      	strb	r3, [r7, #31]
 800a776:	e0ee      	b.n	800a956 <UART_SetConfig+0x34e>
 800a778:	2304      	movs	r3, #4
 800a77a:	77fb      	strb	r3, [r7, #31]
 800a77c:	e0eb      	b.n	800a956 <UART_SetConfig+0x34e>
 800a77e:	2308      	movs	r3, #8
 800a780:	77fb      	strb	r3, [r7, #31]
 800a782:	e0e8      	b.n	800a956 <UART_SetConfig+0x34e>
 800a784:	2310      	movs	r3, #16
 800a786:	77fb      	strb	r3, [r7, #31]
 800a788:	bf00      	nop
 800a78a:	e0e4      	b.n	800a956 <UART_SetConfig+0x34e>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a5f      	ldr	r2, [pc, #380]	; (800a910 <UART_SetConfig+0x308>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d120      	bne.n	800a7d8 <UART_SetConfig+0x1d0>
 800a796:	4b5b      	ldr	r3, [pc, #364]	; (800a904 <UART_SetConfig+0x2fc>)
 800a798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a79c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a7a0:	2b40      	cmp	r3, #64	; 0x40
 800a7a2:	d00f      	beq.n	800a7c4 <UART_SetConfig+0x1bc>
 800a7a4:	2b40      	cmp	r3, #64	; 0x40
 800a7a6:	d802      	bhi.n	800a7ae <UART_SetConfig+0x1a6>
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d005      	beq.n	800a7b8 <UART_SetConfig+0x1b0>
 800a7ac:	e010      	b.n	800a7d0 <UART_SetConfig+0x1c8>
 800a7ae:	2b80      	cmp	r3, #128	; 0x80
 800a7b0:	d005      	beq.n	800a7be <UART_SetConfig+0x1b6>
 800a7b2:	2bc0      	cmp	r3, #192	; 0xc0
 800a7b4:	d009      	beq.n	800a7ca <UART_SetConfig+0x1c2>
 800a7b6:	e00b      	b.n	800a7d0 <UART_SetConfig+0x1c8>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	77fb      	strb	r3, [r7, #31]
 800a7bc:	e0cb      	b.n	800a956 <UART_SetConfig+0x34e>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	77fb      	strb	r3, [r7, #31]
 800a7c2:	e0c8      	b.n	800a956 <UART_SetConfig+0x34e>
 800a7c4:	2304      	movs	r3, #4
 800a7c6:	77fb      	strb	r3, [r7, #31]
 800a7c8:	e0c5      	b.n	800a956 <UART_SetConfig+0x34e>
 800a7ca:	2308      	movs	r3, #8
 800a7cc:	77fb      	strb	r3, [r7, #31]
 800a7ce:	e0c2      	b.n	800a956 <UART_SetConfig+0x34e>
 800a7d0:	2310      	movs	r3, #16
 800a7d2:	77fb      	strb	r3, [r7, #31]
 800a7d4:	bf00      	nop
 800a7d6:	e0be      	b.n	800a956 <UART_SetConfig+0x34e>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a4d      	ldr	r2, [pc, #308]	; (800a914 <UART_SetConfig+0x30c>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d124      	bne.n	800a82c <UART_SetConfig+0x224>
 800a7e2:	4b48      	ldr	r3, [pc, #288]	; (800a904 <UART_SetConfig+0x2fc>)
 800a7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f0:	d012      	beq.n	800a818 <UART_SetConfig+0x210>
 800a7f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f6:	d802      	bhi.n	800a7fe <UART_SetConfig+0x1f6>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d007      	beq.n	800a80c <UART_SetConfig+0x204>
 800a7fc:	e012      	b.n	800a824 <UART_SetConfig+0x21c>
 800a7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a802:	d006      	beq.n	800a812 <UART_SetConfig+0x20a>
 800a804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a808:	d009      	beq.n	800a81e <UART_SetConfig+0x216>
 800a80a:	e00b      	b.n	800a824 <UART_SetConfig+0x21c>
 800a80c:	2300      	movs	r3, #0
 800a80e:	77fb      	strb	r3, [r7, #31]
 800a810:	e0a1      	b.n	800a956 <UART_SetConfig+0x34e>
 800a812:	2302      	movs	r3, #2
 800a814:	77fb      	strb	r3, [r7, #31]
 800a816:	e09e      	b.n	800a956 <UART_SetConfig+0x34e>
 800a818:	2304      	movs	r3, #4
 800a81a:	77fb      	strb	r3, [r7, #31]
 800a81c:	e09b      	b.n	800a956 <UART_SetConfig+0x34e>
 800a81e:	2308      	movs	r3, #8
 800a820:	77fb      	strb	r3, [r7, #31]
 800a822:	e098      	b.n	800a956 <UART_SetConfig+0x34e>
 800a824:	2310      	movs	r3, #16
 800a826:	77fb      	strb	r3, [r7, #31]
 800a828:	bf00      	nop
 800a82a:	e094      	b.n	800a956 <UART_SetConfig+0x34e>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a39      	ldr	r2, [pc, #228]	; (800a918 <UART_SetConfig+0x310>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d124      	bne.n	800a880 <UART_SetConfig+0x278>
 800a836:	4b33      	ldr	r3, [pc, #204]	; (800a904 <UART_SetConfig+0x2fc>)
 800a838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a83c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a844:	d012      	beq.n	800a86c <UART_SetConfig+0x264>
 800a846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a84a:	d802      	bhi.n	800a852 <UART_SetConfig+0x24a>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d007      	beq.n	800a860 <UART_SetConfig+0x258>
 800a850:	e012      	b.n	800a878 <UART_SetConfig+0x270>
 800a852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a856:	d006      	beq.n	800a866 <UART_SetConfig+0x25e>
 800a858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a85c:	d009      	beq.n	800a872 <UART_SetConfig+0x26a>
 800a85e:	e00b      	b.n	800a878 <UART_SetConfig+0x270>
 800a860:	2301      	movs	r3, #1
 800a862:	77fb      	strb	r3, [r7, #31]
 800a864:	e077      	b.n	800a956 <UART_SetConfig+0x34e>
 800a866:	2302      	movs	r3, #2
 800a868:	77fb      	strb	r3, [r7, #31]
 800a86a:	e074      	b.n	800a956 <UART_SetConfig+0x34e>
 800a86c:	2304      	movs	r3, #4
 800a86e:	77fb      	strb	r3, [r7, #31]
 800a870:	e071      	b.n	800a956 <UART_SetConfig+0x34e>
 800a872:	2308      	movs	r3, #8
 800a874:	77fb      	strb	r3, [r7, #31]
 800a876:	e06e      	b.n	800a956 <UART_SetConfig+0x34e>
 800a878:	2310      	movs	r3, #16
 800a87a:	77fb      	strb	r3, [r7, #31]
 800a87c:	bf00      	nop
 800a87e:	e06a      	b.n	800a956 <UART_SetConfig+0x34e>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a25      	ldr	r2, [pc, #148]	; (800a91c <UART_SetConfig+0x314>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d124      	bne.n	800a8d4 <UART_SetConfig+0x2cc>
 800a88a:	4b1e      	ldr	r3, [pc, #120]	; (800a904 <UART_SetConfig+0x2fc>)
 800a88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a890:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a898:	d012      	beq.n	800a8c0 <UART_SetConfig+0x2b8>
 800a89a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a89e:	d802      	bhi.n	800a8a6 <UART_SetConfig+0x29e>
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d007      	beq.n	800a8b4 <UART_SetConfig+0x2ac>
 800a8a4:	e012      	b.n	800a8cc <UART_SetConfig+0x2c4>
 800a8a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8aa:	d006      	beq.n	800a8ba <UART_SetConfig+0x2b2>
 800a8ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8b0:	d009      	beq.n	800a8c6 <UART_SetConfig+0x2be>
 800a8b2:	e00b      	b.n	800a8cc <UART_SetConfig+0x2c4>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	77fb      	strb	r3, [r7, #31]
 800a8b8:	e04d      	b.n	800a956 <UART_SetConfig+0x34e>
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	77fb      	strb	r3, [r7, #31]
 800a8be:	e04a      	b.n	800a956 <UART_SetConfig+0x34e>
 800a8c0:	2304      	movs	r3, #4
 800a8c2:	77fb      	strb	r3, [r7, #31]
 800a8c4:	e047      	b.n	800a956 <UART_SetConfig+0x34e>
 800a8c6:	2308      	movs	r3, #8
 800a8c8:	77fb      	strb	r3, [r7, #31]
 800a8ca:	e044      	b.n	800a956 <UART_SetConfig+0x34e>
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	77fb      	strb	r3, [r7, #31]
 800a8d0:	bf00      	nop
 800a8d2:	e040      	b.n	800a956 <UART_SetConfig+0x34e>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a11      	ldr	r2, [pc, #68]	; (800a920 <UART_SetConfig+0x318>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d139      	bne.n	800a952 <UART_SetConfig+0x34a>
 800a8de:	4b09      	ldr	r3, [pc, #36]	; (800a904 <UART_SetConfig+0x2fc>)
 800a8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a8e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8ec:	d027      	beq.n	800a93e <UART_SetConfig+0x336>
 800a8ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8f2:	d817      	bhi.n	800a924 <UART_SetConfig+0x31c>
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d01c      	beq.n	800a932 <UART_SetConfig+0x32a>
 800a8f8:	e027      	b.n	800a94a <UART_SetConfig+0x342>
 800a8fa:	bf00      	nop
 800a8fc:	efff69f3 	.word	0xefff69f3
 800a900:	40011000 	.word	0x40011000
 800a904:	40023800 	.word	0x40023800
 800a908:	40004400 	.word	0x40004400
 800a90c:	40004800 	.word	0x40004800
 800a910:	40004c00 	.word	0x40004c00
 800a914:	40005000 	.word	0x40005000
 800a918:	40011400 	.word	0x40011400
 800a91c:	40007800 	.word	0x40007800
 800a920:	40007c00 	.word	0x40007c00
 800a924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a928:	d006      	beq.n	800a938 <UART_SetConfig+0x330>
 800a92a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a92e:	d009      	beq.n	800a944 <UART_SetConfig+0x33c>
 800a930:	e00b      	b.n	800a94a <UART_SetConfig+0x342>
 800a932:	2300      	movs	r3, #0
 800a934:	77fb      	strb	r3, [r7, #31]
 800a936:	e00e      	b.n	800a956 <UART_SetConfig+0x34e>
 800a938:	2302      	movs	r3, #2
 800a93a:	77fb      	strb	r3, [r7, #31]
 800a93c:	e00b      	b.n	800a956 <UART_SetConfig+0x34e>
 800a93e:	2304      	movs	r3, #4
 800a940:	77fb      	strb	r3, [r7, #31]
 800a942:	e008      	b.n	800a956 <UART_SetConfig+0x34e>
 800a944:	2308      	movs	r3, #8
 800a946:	77fb      	strb	r3, [r7, #31]
 800a948:	e005      	b.n	800a956 <UART_SetConfig+0x34e>
 800a94a:	2310      	movs	r3, #16
 800a94c:	77fb      	strb	r3, [r7, #31]
 800a94e:	bf00      	nop
 800a950:	e001      	b.n	800a956 <UART_SetConfig+0x34e>
 800a952:	2310      	movs	r3, #16
 800a954:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a95e:	d17f      	bne.n	800aa60 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a960:	7ffb      	ldrb	r3, [r7, #31]
 800a962:	2b08      	cmp	r3, #8
 800a964:	d85c      	bhi.n	800aa20 <UART_SetConfig+0x418>
 800a966:	a201      	add	r2, pc, #4	; (adr r2, 800a96c <UART_SetConfig+0x364>)
 800a968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96c:	0800a991 	.word	0x0800a991
 800a970:	0800a9b1 	.word	0x0800a9b1
 800a974:	0800a9d1 	.word	0x0800a9d1
 800a978:	0800aa21 	.word	0x0800aa21
 800a97c:	0800a9e9 	.word	0x0800a9e9
 800a980:	0800aa21 	.word	0x0800aa21
 800a984:	0800aa21 	.word	0x0800aa21
 800a988:	0800aa21 	.word	0x0800aa21
 800a98c:	0800aa09 	.word	0x0800aa09
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a990:	f7fc fbc8 	bl	8007124 <HAL_RCC_GetPCLK1Freq>
 800a994:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	005a      	lsls	r2, r3, #1
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	085b      	lsrs	r3, r3, #1
 800a9a0:	441a      	add	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	61bb      	str	r3, [r7, #24]
        break;
 800a9ae:	e03a      	b.n	800aa26 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9b0:	f7fc fbcc 	bl	800714c <HAL_RCC_GetPCLK2Freq>
 800a9b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	005a      	lsls	r2, r3, #1
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	085b      	lsrs	r3, r3, #1
 800a9c0:	441a      	add	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	61bb      	str	r3, [r7, #24]
        break;
 800a9ce:	e02a      	b.n	800aa26 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	085a      	lsrs	r2, r3, #1
 800a9d6:	4b5f      	ldr	r3, [pc, #380]	; (800ab54 <UART_SetConfig+0x54c>)
 800a9d8:	4413      	add	r3, r2
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	6852      	ldr	r2, [r2, #4]
 800a9de:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	61bb      	str	r3, [r7, #24]
        break;
 800a9e6:	e01e      	b.n	800aa26 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9e8:	f7fc fade 	bl	8006fa8 <HAL_RCC_GetSysClockFreq>
 800a9ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	005a      	lsls	r2, r3, #1
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	085b      	lsrs	r3, r3, #1
 800a9f8:	441a      	add	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	61bb      	str	r3, [r7, #24]
        break;
 800aa06:	e00e      	b.n	800aa26 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	085b      	lsrs	r3, r3, #1
 800aa0e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	61bb      	str	r3, [r7, #24]
        break;
 800aa1e:	e002      	b.n	800aa26 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	75fb      	strb	r3, [r7, #23]
        break;
 800aa24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	2b0f      	cmp	r3, #15
 800aa2a:	d916      	bls.n	800aa5a <UART_SetConfig+0x452>
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa32:	d212      	bcs.n	800aa5a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	f023 030f 	bic.w	r3, r3, #15
 800aa3c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	085b      	lsrs	r3, r3, #1
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	897b      	ldrh	r3, [r7, #10]
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	897a      	ldrh	r2, [r7, #10]
 800aa56:	60da      	str	r2, [r3, #12]
 800aa58:	e070      	b.n	800ab3c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	75fb      	strb	r3, [r7, #23]
 800aa5e:	e06d      	b.n	800ab3c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800aa60:	7ffb      	ldrb	r3, [r7, #31]
 800aa62:	2b08      	cmp	r3, #8
 800aa64:	d859      	bhi.n	800ab1a <UART_SetConfig+0x512>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <UART_SetConfig+0x464>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aa91 	.word	0x0800aa91
 800aa70:	0800aaaf 	.word	0x0800aaaf
 800aa74:	0800aacd 	.word	0x0800aacd
 800aa78:	0800ab1b 	.word	0x0800ab1b
 800aa7c:	0800aae5 	.word	0x0800aae5
 800aa80:	0800ab1b 	.word	0x0800ab1b
 800aa84:	0800ab1b 	.word	0x0800ab1b
 800aa88:	0800ab1b 	.word	0x0800ab1b
 800aa8c:	0800ab03 	.word	0x0800ab03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa90:	f7fc fb48 	bl	8007124 <HAL_RCC_GetPCLK1Freq>
 800aa94:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	085a      	lsrs	r2, r3, #1
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	441a      	add	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	61bb      	str	r3, [r7, #24]
        break;
 800aaac:	e038      	b.n	800ab20 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaae:	f7fc fb4d 	bl	800714c <HAL_RCC_GetPCLK2Freq>
 800aab2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	085a      	lsrs	r2, r3, #1
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	441a      	add	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	61bb      	str	r3, [r7, #24]
        break;
 800aaca:	e029      	b.n	800ab20 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	085a      	lsrs	r2, r3, #1
 800aad2:	4b21      	ldr	r3, [pc, #132]	; (800ab58 <UART_SetConfig+0x550>)
 800aad4:	4413      	add	r3, r2
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	6852      	ldr	r2, [r2, #4]
 800aada:	fbb3 f3f2 	udiv	r3, r3, r2
 800aade:	b29b      	uxth	r3, r3
 800aae0:	61bb      	str	r3, [r7, #24]
        break;
 800aae2:	e01d      	b.n	800ab20 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aae4:	f7fc fa60 	bl	8006fa8 <HAL_RCC_GetSysClockFreq>
 800aae8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	085a      	lsrs	r2, r3, #1
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	441a      	add	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	61bb      	str	r3, [r7, #24]
        break;
 800ab00:	e00e      	b.n	800ab20 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	085b      	lsrs	r3, r3, #1
 800ab08:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	61bb      	str	r3, [r7, #24]
        break;
 800ab18:	e002      	b.n	800ab20 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	75fb      	strb	r3, [r7, #23]
        break;
 800ab1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	2b0f      	cmp	r3, #15
 800ab24:	d908      	bls.n	800ab38 <UART_SetConfig+0x530>
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab2c:	d204      	bcs.n	800ab38 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	60da      	str	r2, [r3, #12]
 800ab36:	e001      	b.n	800ab3c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3720      	adds	r7, #32
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	01e84800 	.word	0x01e84800
 800ab58:	00f42400 	.word	0x00f42400

0800ab5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00a      	beq.n	800ab86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	430a      	orrs	r2, r1
 800ab84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8a:	f003 0302 	and.w	r3, r3, #2
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00a      	beq.n	800aba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	430a      	orrs	r2, r1
 800aba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abac:	f003 0304 	and.w	r3, r3, #4
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00a      	beq.n	800abca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	430a      	orrs	r2, r1
 800abc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abce:	f003 0308 	and.w	r3, r3, #8
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	430a      	orrs	r2, r1
 800abea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf0:	f003 0310 	and.w	r3, r3, #16
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00a      	beq.n	800ac0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	430a      	orrs	r2, r1
 800ac0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac12:	f003 0320 	and.w	r3, r3, #32
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00a      	beq.n	800ac30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	430a      	orrs	r2, r1
 800ac2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d01a      	beq.n	800ac72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	430a      	orrs	r2, r1
 800ac50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac5a:	d10a      	bne.n	800ac72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00a      	beq.n	800ac94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	605a      	str	r2, [r3, #4]
  }
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af02      	add	r7, sp, #8
 800aca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800acae:	f7f8 ff45 	bl	8003b3c <HAL_GetTick>
 800acb2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0308 	and.w	r3, r3, #8
 800acbe:	2b08      	cmp	r3, #8
 800acc0:	d10e      	bne.n	800ace0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f814 	bl	800acfe <UART_WaitOnFlagUntilTimeout>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e00a      	b.n	800acf6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2220      	movs	r2, #32
 800ace4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2220      	movs	r2, #32
 800acea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	60f8      	str	r0, [r7, #12]
 800ad06:	60b9      	str	r1, [r7, #8]
 800ad08:	603b      	str	r3, [r7, #0]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad0e:	e05d      	b.n	800adcc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad16:	d059      	beq.n	800adcc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad18:	f7f8 ff10 	bl	8003b3c <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	69ba      	ldr	r2, [r7, #24]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d302      	bcc.n	800ad2e <UART_WaitOnFlagUntilTimeout+0x30>
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d11b      	bne.n	800ad66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ad3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	689a      	ldr	r2, [r3, #8]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f022 0201 	bic.w	r2, r2, #1
 800ad4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2220      	movs	r2, #32
 800ad52:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2220      	movs	r2, #32
 800ad58:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ad62:	2303      	movs	r3, #3
 800ad64:	e042      	b.n	800adec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 0304 	and.w	r3, r3, #4
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d02b      	beq.n	800adcc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad82:	d123      	bne.n	800adcc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad8c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ad9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	689a      	ldr	r2, [r3, #8]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f022 0201 	bic.w	r2, r2, #1
 800adac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2220      	movs	r2, #32
 800adb2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2220      	movs	r2, #32
 800adb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2220      	movs	r2, #32
 800adbe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e00f      	b.n	800adec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	69da      	ldr	r2, [r3, #28]
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	4013      	ands	r3, r2
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	429a      	cmp	r2, r3
 800adda:	bf0c      	ite	eq
 800addc:	2301      	moveq	r3, #1
 800adde:	2300      	movne	r3, #0
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	461a      	mov	r2, r3
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d092      	beq.n	800ad10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d027      	beq.n	800ae5e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ae14:	68fa      	ldr	r2, [r7, #12]
 800ae16:	4b2f      	ldr	r3, [pc, #188]	; (800aed4 <FMC_SDRAM_Init+0xe0>)
 800ae18:	4013      	ands	r3, r2
 800ae1a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae24:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800ae2a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800ae30:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800ae36:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800ae3c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800ae42:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800ae48:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ae4e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	e032      	b.n	800aec4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae6a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae74:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800ae7a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800ae7c:	68fa      	ldr	r2, [r7, #12]
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	4b12      	ldr	r3, [pc, #72]	; (800aed4 <FMC_SDRAM_Init+0xe0>)
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800ae98:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800ae9e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800aea4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800aeaa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800aeb0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	ffff8000 	.word	0xffff8000

0800aed8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b087      	sub	sp, #28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800aee8:	2300      	movs	r3, #0
 800aeea:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d02e      	beq.n	800af50 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aefe:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	3b01      	subs	r3, #1
 800af0c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800af0e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	3b01      	subs	r3, #1
 800af16:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800af18:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	3b01      	subs	r3, #1
 800af20:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800af22:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	3b01      	subs	r3, #1
 800af2a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800af2c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	3b01      	subs	r3, #1
 800af34:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800af36:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	3b01      	subs	r3, #1
 800af3e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800af40:	4313      	orrs	r3, r2
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	4313      	orrs	r3, r2
 800af46:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	609a      	str	r2, [r3, #8]
 800af4e:	e039      	b.n	800afc4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	4b1e      	ldr	r3, [pc, #120]	; (800afd4 <FMC_SDRAM_Timing_Init+0xfc>)
 800af5a:	4013      	ands	r3, r2
 800af5c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	3b01      	subs	r3, #1
 800af64:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	3b01      	subs	r3, #1
 800af6c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800af6e:	4313      	orrs	r3, r2
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	4313      	orrs	r3, r2
 800af74:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af82:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	3b01      	subs	r3, #1
 800af90:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800af92:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	3b01      	subs	r3, #1
 800af9a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800af9c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	3b01      	subs	r3, #1
 800afa4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800afa6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	3b01      	subs	r3, #1
 800afae:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800afb0:	4313      	orrs	r3, r2
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	697a      	ldr	r2, [r7, #20]
 800afbc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	371c      	adds	r7, #28
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	ff0f0fff 	.word	0xff0f0fff

0800afd8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800afd8:	b480      	push	{r7}
 800afda:	b087      	sub	sp, #28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aff0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	3b01      	subs	r3, #1
 800aff8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800affa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b002:	4313      	orrs	r3, r2
 800b004:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	371c      	adds	r7, #28
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b01a:	b480      	push	{r7}
 800b01c:	b083      	sub	sp, #12
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	695a      	ldr	r2, [r3, #20]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	431a      	orrs	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b040:	b084      	sub	sp, #16
 800b042:	b480      	push	{r7}
 800b044:	b085      	sub	sp, #20
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	f107 001c 	add.w	r0, r7, #28
 800b04e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b056:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b058:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b05a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b05e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b060:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b062:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b066:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b06a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	4313      	orrs	r3, r2
 800b070:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685a      	ldr	r2, [r3, #4]
 800b076:	4b07      	ldr	r3, [pc, #28]	; (800b094 <SDMMC_Init+0x54>)
 800b078:	4013      	ands	r3, r2
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	431a      	orrs	r2, r3
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	b004      	add	sp, #16
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	ffff8100 	.word	0xffff8100

0800b098 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b082      	sub	sp, #8
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2203      	movs	r2, #3
 800b0be:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b0c0:	2002      	movs	r0, #2
 800b0c2:	f7f8 fd47 	bl	8003b54 <HAL_Delay>
  
  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 0303 	and.w	r3, r3, #3
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b10a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b110:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b116:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68da      	ldr	r2, [r3, #12]
 800b122:	4b06      	ldr	r3, [pc, #24]	; (800b13c <SDMMC_SendCommand+0x50>)
 800b124:	4013      	ands	r3, r2
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	431a      	orrs	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3714      	adds	r7, #20
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	fffff000 	.word	0xfffff000

0800b140 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	b2db      	uxtb	r3, r3
}
 800b14e:	4618      	mov	r0, r3
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b085      	sub	sp, #20
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
 800b162:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	3314      	adds	r3, #20
 800b168:	461a      	mov	r2, r3
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	4413      	add	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
}  
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1a6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b1ac:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b1b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1be:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	431a      	orrs	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0

}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b088      	sub	sp, #32
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b1e6:	2310      	movs	r3, #16
 800b1e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1ea:	2340      	movs	r3, #64	; 0x40
 800b1ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1f8:	f107 0308 	add.w	r3, r7, #8
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7ff ff74 	bl	800b0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b204:	f241 3288 	movw	r2, #5000	; 0x1388
 800b208:	2110      	movs	r1, #16
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 f976 	bl	800b4fc <SDMMC_GetCmdResp1>
 800b210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b212:	69fb      	ldr	r3, [r7, #28]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3720      	adds	r7, #32
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b08a      	sub	sp, #40	; 0x28
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b22c:	2307      	movs	r3, #7
 800b22e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b230:	2340      	movs	r3, #64	; 0x40
 800b232:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b234:	2300      	movs	r3, #0
 800b236:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b23c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b23e:	f107 0310 	add.w	r3, r7, #16
 800b242:	4619      	mov	r1, r3
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7ff ff51 	bl	800b0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b24a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b24e:	2107      	movs	r1, #7
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f000 f953 	bl	800b4fc <SDMMC_GetCmdResp1>
 800b256:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3728      	adds	r7, #40	; 0x28
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b088      	sub	sp, #32
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b26a:	2300      	movs	r3, #0
 800b26c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b26e:	2300      	movs	r3, #0
 800b270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b272:	2300      	movs	r3, #0
 800b274:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b276:	2300      	movs	r3, #0
 800b278:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b27a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b27e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b280:	f107 0308 	add.w	r3, r7, #8
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7ff ff30 	bl	800b0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f90d 	bl	800b4ac <SDMMC_GetCmdError>
 800b292:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b294:	69fb      	ldr	r3, [r7, #28]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3720      	adds	r7, #32
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b088      	sub	sp, #32
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b2a6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b2aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b2ac:	2308      	movs	r3, #8
 800b2ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2b0:	2340      	movs	r3, #64	; 0x40
 800b2b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2be:	f107 0308 	add.w	r3, r7, #8
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff ff11 	bl	800b0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 faf6 	bl	800b8bc <SDMMC_GetCmdResp7>
 800b2d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2d2:	69fb      	ldr	r3, [r7, #28]
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	3720      	adds	r7, #32
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b088      	sub	sp, #32
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b2ea:	2337      	movs	r3, #55	; 0x37
 800b2ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2ee:	2340      	movs	r3, #64	; 0x40
 800b2f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2fc:	f107 0308 	add.w	r3, r7, #8
 800b300:	4619      	mov	r1, r3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7ff fef2 	bl	800b0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b308:	f241 3288 	movw	r2, #5000	; 0x1388
 800b30c:	2137      	movs	r1, #55	; 0x37
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 f8f4 	bl	800b4fc <SDMMC_GetCmdResp1>
 800b314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b316:	69fb      	ldr	r3, [r7, #28]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3720      	adds	r7, #32
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b088      	sub	sp, #32
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	4b0d      	ldr	r3, [pc, #52]	; (800b364 <SDMMC_CmdAppOperCommand+0x44>)
 800b32e:	4313      	orrs	r3, r2
 800b330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b332:	2329      	movs	r3, #41	; 0x29
 800b334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b336:	2340      	movs	r3, #64	; 0x40
 800b338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b33a:	2300      	movs	r3, #0
 800b33c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b33e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b344:	f107 0308 	add.w	r3, r7, #8
 800b348:	4619      	mov	r1, r3
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f7ff fece 	bl	800b0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 fa05 	bl	800b760 <SDMMC_GetCmdResp3>
 800b356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b358:	69fb      	ldr	r3, [r7, #28]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3720      	adds	r7, #32
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	80100000 	.word	0x80100000

0800b368 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b088      	sub	sp, #32
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b376:	2306      	movs	r3, #6
 800b378:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b37a:	2340      	movs	r3, #64	; 0x40
 800b37c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b37e:	2300      	movs	r3, #0
 800b380:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b386:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b388:	f107 0308 	add.w	r3, r7, #8
 800b38c:	4619      	mov	r1, r3
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f7ff feac 	bl	800b0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b394:	f241 3288 	movw	r2, #5000	; 0x1388
 800b398:	2106      	movs	r1, #6
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 f8ae 	bl	800b4fc <SDMMC_GetCmdResp1>
 800b3a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3a2:	69fb      	ldr	r3, [r7, #28]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3720      	adds	r7, #32
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b088      	sub	sp, #32
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b3b8:	2333      	movs	r3, #51	; 0x33
 800b3ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3bc:	2340      	movs	r3, #64	; 0x40
 800b3be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3ca:	f107 0308 	add.w	r3, r7, #8
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7ff fe8b 	bl	800b0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b3d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3da:	2133      	movs	r1, #51	; 0x33
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 f88d 	bl	800b4fc <SDMMC_GetCmdResp1>
 800b3e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3e4:	69fb      	ldr	r3, [r7, #28]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3720      	adds	r7, #32
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b088      	sub	sp, #32
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b3fe:	23c0      	movs	r3, #192	; 0xc0
 800b400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b402:	2300      	movs	r3, #0
 800b404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b40a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b40c:	f107 0308 	add.w	r3, r7, #8
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7ff fe6a 	bl	800b0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 f95b 	bl	800b6d4 <SDMMC_GetCmdResp2>
 800b41e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b420:	69fb      	ldr	r3, [r7, #28]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3720      	adds	r7, #32
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b088      	sub	sp, #32
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b438:	2309      	movs	r3, #9
 800b43a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b43c:	23c0      	movs	r3, #192	; 0xc0
 800b43e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b440:	2300      	movs	r3, #0
 800b442:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b448:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b44a:	f107 0308 	add.w	r3, r7, #8
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7ff fe4b 	bl	800b0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 f93c 	bl	800b6d4 <SDMMC_GetCmdResp2>
 800b45c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b45e:	69fb      	ldr	r3, [r7, #28]
}
 800b460:	4618      	mov	r0, r3
 800b462:	3720      	adds	r7, #32
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b088      	sub	sp, #32
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b472:	2300      	movs	r3, #0
 800b474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b476:	2303      	movs	r3, #3
 800b478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b47a:	2340      	movs	r3, #64	; 0x40
 800b47c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b486:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b488:	f107 0308 	add.w	r3, r7, #8
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7ff fe2c 	bl	800b0ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	2103      	movs	r1, #3
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f99b 	bl	800b7d4 <SDMMC_GetCmdResp6>
 800b49e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4a0:	69fb      	ldr	r3, [r7, #28]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3720      	adds	r7, #32
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
	...

0800b4ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b4ac:	b490      	push	{r4, r7}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4b4:	4b0f      	ldr	r3, [pc, #60]	; (800b4f4 <SDMMC_GetCmdError+0x48>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a0f      	ldr	r2, [pc, #60]	; (800b4f8 <SDMMC_GetCmdError+0x4c>)
 800b4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b4be:	0a5b      	lsrs	r3, r3, #9
 800b4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b4c8:	4623      	mov	r3, r4
 800b4ca:	1e5c      	subs	r4, r3, #1
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d102      	bne.n	800b4d6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4d4:	e009      	b.n	800b4ea <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0f2      	beq.n	800b4c8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	22c5      	movs	r2, #197	; 0xc5
 800b4e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bc90      	pop	{r4, r7}
 800b4f2:	4770      	bx	lr
 800b4f4:	20000000 	.word	0x20000000
 800b4f8:	10624dd3 	.word	0x10624dd3

0800b4fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b4fc:	b590      	push	{r4, r7, lr}
 800b4fe:	b087      	sub	sp, #28
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	460b      	mov	r3, r1
 800b506:	607a      	str	r2, [r7, #4]
 800b508:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b50a:	4b6f      	ldr	r3, [pc, #444]	; (800b6c8 <SDMMC_GetCmdResp1+0x1cc>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a6f      	ldr	r2, [pc, #444]	; (800b6cc <SDMMC_GetCmdResp1+0x1d0>)
 800b510:	fba2 2303 	umull	r2, r3, r2, r3
 800b514:	0a5b      	lsrs	r3, r3, #9
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b51c:	4623      	mov	r3, r4
 800b51e:	1e5c      	subs	r4, r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	d102      	bne.n	800b52a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b528:	e0c9      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b52e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0f0      	beq.n	800b51c <SDMMC_GetCmdResp1+0x20>
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1eb      	bne.n	800b51c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b548:	f003 0304 	and.w	r3, r3, #4
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d004      	beq.n	800b55a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2204      	movs	r2, #4
 800b554:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b556:	2304      	movs	r3, #4
 800b558:	e0b1      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b55e:	f003 0301 	and.w	r3, r3, #1
 800b562:	2b00      	cmp	r3, #0
 800b564:	d004      	beq.n	800b570 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2201      	movs	r2, #1
 800b56a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e0a6      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	22c5      	movs	r2, #197	; 0xc5
 800b574:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f7ff fde2 	bl	800b140 <SDMMC_GetCommandResponse>
 800b57c:	4603      	mov	r3, r0
 800b57e:	461a      	mov	r2, r3
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	4293      	cmp	r3, r2
 800b584:	d001      	beq.n	800b58a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b586:	2301      	movs	r3, #1
 800b588:	e099      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b58a:	2100      	movs	r1, #0
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f7ff fde4 	bl	800b15a <SDMMC_GetResponse>
 800b592:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	4b4e      	ldr	r3, [pc, #312]	; (800b6d0 <SDMMC_GetCmdResp1+0x1d4>)
 800b598:	4013      	ands	r3, r2
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d101      	bne.n	800b5a2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e08d      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	da02      	bge.n	800b5ae <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b5a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5ac:	e087      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b5b8:	2340      	movs	r3, #64	; 0x40
 800b5ba:	e080      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d001      	beq.n	800b5ca <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b5c6:	2380      	movs	r3, #128	; 0x80
 800b5c8:	e079      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b5d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5d8:	e071      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d002      	beq.n	800b5ea <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b5e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5e8:	e069      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d002      	beq.n	800b5fa <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b5f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5f8:	e061      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b600:	2b00      	cmp	r3, #0
 800b602:	d002      	beq.n	800b60a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b608:	e059      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b610:	2b00      	cmp	r3, #0
 800b612:	d002      	beq.n	800b61a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b618:	e051      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b628:	e049      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d002      	beq.n	800b63a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b638:	e041      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b640:	2b00      	cmp	r3, #0
 800b642:	d002      	beq.n	800b64a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b648:	e039      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b658:	e031      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b664:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b668:	e029      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b674:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b678:	e021      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b680:	2b00      	cmp	r3, #0
 800b682:	d002      	beq.n	800b68a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b684:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b688:	e019      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d002      	beq.n	800b69a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b694:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b698:	e011      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b6a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b6a8:	e009      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	f003 0308 	and.w	r3, r3, #8
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b6b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b6b8:	e001      	b.n	800b6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b6ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	371c      	adds	r7, #28
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd90      	pop	{r4, r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20000000 	.word	0x20000000
 800b6cc:	10624dd3 	.word	0x10624dd3
 800b6d0:	fdffe008 	.word	0xfdffe008

0800b6d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b6d4:	b490      	push	{r4, r7}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b6dc:	4b1e      	ldr	r3, [pc, #120]	; (800b758 <SDMMC_GetCmdResp2+0x84>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a1e      	ldr	r2, [pc, #120]	; (800b75c <SDMMC_GetCmdResp2+0x88>)
 800b6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b6e6:	0a5b      	lsrs	r3, r3, #9
 800b6e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b6f0:	4623      	mov	r3, r4
 800b6f2:	1e5c      	subs	r4, r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d102      	bne.n	800b6fe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6fc:	e026      	b.n	800b74c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b702:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d0f0      	beq.n	800b6f0 <SDMMC_GetCmdResp2+0x1c>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1eb      	bne.n	800b6f0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	d004      	beq.n	800b72e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2204      	movs	r2, #4
 800b728:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b72a:	2304      	movs	r3, #4
 800b72c:	e00e      	b.n	800b74c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b732:	f003 0301 	and.w	r3, r3, #1
 800b736:	2b00      	cmp	r3, #0
 800b738:	d004      	beq.n	800b744 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b740:	2301      	movs	r3, #1
 800b742:	e003      	b.n	800b74c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	22c5      	movs	r2, #197	; 0xc5
 800b748:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bc90      	pop	{r4, r7}
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	20000000 	.word	0x20000000
 800b75c:	10624dd3 	.word	0x10624dd3

0800b760 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b760:	b490      	push	{r4, r7}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b768:	4b18      	ldr	r3, [pc, #96]	; (800b7cc <SDMMC_GetCmdResp3+0x6c>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a18      	ldr	r2, [pc, #96]	; (800b7d0 <SDMMC_GetCmdResp3+0x70>)
 800b76e:	fba2 2303 	umull	r2, r3, r2, r3
 800b772:	0a5b      	lsrs	r3, r3, #9
 800b774:	f241 3288 	movw	r2, #5000	; 0x1388
 800b778:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b77c:	4623      	mov	r3, r4
 800b77e:	1e5c      	subs	r4, r3, #1
 800b780:	2b00      	cmp	r3, #0
 800b782:	d102      	bne.n	800b78a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b788:	e01b      	b.n	800b7c2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b78e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0f0      	beq.n	800b77c <SDMMC_GetCmdResp3+0x1c>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d1eb      	bne.n	800b77c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a8:	f003 0304 	and.w	r3, r3, #4
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d004      	beq.n	800b7ba <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2204      	movs	r2, #4
 800b7b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7b6:	2304      	movs	r3, #4
 800b7b8:	e003      	b.n	800b7c2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	22c5      	movs	r2, #197	; 0xc5
 800b7be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bc90      	pop	{r4, r7}
 800b7ca:	4770      	bx	lr
 800b7cc:	20000000 	.word	0x20000000
 800b7d0:	10624dd3 	.word	0x10624dd3

0800b7d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b7d4:	b590      	push	{r4, r7, lr}
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	460b      	mov	r3, r1
 800b7de:	607a      	str	r2, [r7, #4]
 800b7e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7e2:	4b34      	ldr	r3, [pc, #208]	; (800b8b4 <SDMMC_GetCmdResp6+0xe0>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a34      	ldr	r2, [pc, #208]	; (800b8b8 <SDMMC_GetCmdResp6+0xe4>)
 800b7e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ec:	0a5b      	lsrs	r3, r3, #9
 800b7ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7f2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7f6:	4623      	mov	r3, r4
 800b7f8:	1e5c      	subs	r4, r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d102      	bne.n	800b804 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b802:	e052      	b.n	800b8aa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b808:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0f0      	beq.n	800b7f6 <SDMMC_GetCmdResp6+0x22>
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1eb      	bne.n	800b7f6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b822:	f003 0304 	and.w	r3, r3, #4
 800b826:	2b00      	cmp	r3, #0
 800b828:	d004      	beq.n	800b834 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2204      	movs	r2, #4
 800b82e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b830:	2304      	movs	r3, #4
 800b832:	e03a      	b.n	800b8aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d004      	beq.n	800b84a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2201      	movs	r2, #1
 800b844:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b846:	2301      	movs	r3, #1
 800b848:	e02f      	b.n	800b8aa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f7ff fc78 	bl	800b140 <SDMMC_GetCommandResponse>
 800b850:	4603      	mov	r3, r0
 800b852:	461a      	mov	r2, r3
 800b854:	7afb      	ldrb	r3, [r7, #11]
 800b856:	4293      	cmp	r3, r2
 800b858:	d001      	beq.n	800b85e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e025      	b.n	800b8aa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	22c5      	movs	r2, #197	; 0xc5
 800b862:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b864:	2100      	movs	r1, #0
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f7ff fc77 	bl	800b15a <SDMMC_GetResponse>
 800b86c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b874:	2b00      	cmp	r3, #0
 800b876:	d106      	bne.n	800b886 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	0c1b      	lsrs	r3, r3, #16
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b882:	2300      	movs	r3, #0
 800b884:	e011      	b.n	800b8aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d002      	beq.n	800b896 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b894:	e009      	b.n	800b8aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8a4:	e001      	b.n	800b8aa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b8a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	371c      	adds	r7, #28
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd90      	pop	{r4, r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20000000 	.word	0x20000000
 800b8b8:	10624dd3 	.word	0x10624dd3

0800b8bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b8bc:	b490      	push	{r4, r7}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8c4:	4b21      	ldr	r3, [pc, #132]	; (800b94c <SDMMC_GetCmdResp7+0x90>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a21      	ldr	r2, [pc, #132]	; (800b950 <SDMMC_GetCmdResp7+0x94>)
 800b8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ce:	0a5b      	lsrs	r3, r3, #9
 800b8d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b8d8:	4623      	mov	r3, r4
 800b8da:	1e5c      	subs	r4, r3, #1
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d102      	bne.n	800b8e6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8e4:	e02c      	b.n	800b940 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8ea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d0f0      	beq.n	800b8d8 <SDMMC_GetCmdResp7+0x1c>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1eb      	bne.n	800b8d8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b904:	f003 0304 	and.w	r3, r3, #4
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d004      	beq.n	800b916 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2204      	movs	r2, #4
 800b910:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b912:	2304      	movs	r3, #4
 800b914:	e014      	b.n	800b940 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b91a:	f003 0301 	and.w	r3, r3, #1
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d004      	beq.n	800b92c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2201      	movs	r2, #1
 800b926:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b928:	2301      	movs	r3, #1
 800b92a:	e009      	b.n	800b940 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2240      	movs	r2, #64	; 0x40
 800b93c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b93e:	2300      	movs	r3, #0
  
}
 800b940:	4618      	mov	r0, r3
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bc90      	pop	{r4, r7}
 800b948:	4770      	bx	lr
 800b94a:	bf00      	nop
 800b94c:	20000000 	.word	0x20000000
 800b950:	10624dd3 	.word	0x10624dd3

0800b954 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b08c      	sub	sp, #48	; 0x30
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a51      	ldr	r2, [pc, #324]	; (800baa4 <I2Cx_MspInit+0x150>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d14d      	bne.n	800ba00 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b964:	4b50      	ldr	r3, [pc, #320]	; (800baa8 <I2Cx_MspInit+0x154>)
 800b966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b968:	4a4f      	ldr	r2, [pc, #316]	; (800baa8 <I2Cx_MspInit+0x154>)
 800b96a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b96e:	6313      	str	r3, [r2, #48]	; 0x30
 800b970:	4b4d      	ldr	r3, [pc, #308]	; (800baa8 <I2Cx_MspInit+0x154>)
 800b972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b978:	61bb      	str	r3, [r7, #24]
 800b97a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800b97c:	2380      	movs	r3, #128	; 0x80
 800b97e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b980:	2312      	movs	r3, #18
 800b982:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b984:	2300      	movs	r3, #0
 800b986:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b988:	2302      	movs	r3, #2
 800b98a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800b98c:	2304      	movs	r3, #4
 800b98e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b990:	f107 031c 	add.w	r3, r7, #28
 800b994:	4619      	mov	r1, r3
 800b996:	4845      	ldr	r0, [pc, #276]	; (800baac <I2Cx_MspInit+0x158>)
 800b998:	f7f9 fa3a 	bl	8004e10 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800b99c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b9a2:	f107 031c 	add.w	r3, r7, #28
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	4840      	ldr	r0, [pc, #256]	; (800baac <I2Cx_MspInit+0x158>)
 800b9aa:	f7f9 fa31 	bl	8004e10 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800b9ae:	4b3e      	ldr	r3, [pc, #248]	; (800baa8 <I2Cx_MspInit+0x154>)
 800b9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b2:	4a3d      	ldr	r2, [pc, #244]	; (800baa8 <I2Cx_MspInit+0x154>)
 800b9b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9b8:	6413      	str	r3, [r2, #64]	; 0x40
 800b9ba:	4b3b      	ldr	r3, [pc, #236]	; (800baa8 <I2Cx_MspInit+0x154>)
 800b9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9c2:	617b      	str	r3, [r7, #20]
 800b9c4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800b9c6:	4b38      	ldr	r3, [pc, #224]	; (800baa8 <I2Cx_MspInit+0x154>)
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	4a37      	ldr	r2, [pc, #220]	; (800baa8 <I2Cx_MspInit+0x154>)
 800b9cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9d0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800b9d2:	4b35      	ldr	r3, [pc, #212]	; (800baa8 <I2Cx_MspInit+0x154>)
 800b9d4:	6a1b      	ldr	r3, [r3, #32]
 800b9d6:	4a34      	ldr	r2, [pc, #208]	; (800baa8 <I2Cx_MspInit+0x154>)
 800b9d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b9dc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800b9de:	2200      	movs	r2, #0
 800b9e0:	210f      	movs	r1, #15
 800b9e2:	2048      	movs	r0, #72	; 0x48
 800b9e4:	f7f8 fc18 	bl	8004218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800b9e8:	2048      	movs	r0, #72	; 0x48
 800b9ea:	f7f8 fc31 	bl	8004250 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	210f      	movs	r1, #15
 800b9f2:	2049      	movs	r0, #73	; 0x49
 800b9f4:	f7f8 fc10 	bl	8004218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800b9f8:	2049      	movs	r0, #73	; 0x49
 800b9fa:	f7f8 fc29 	bl	8004250 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800b9fe:	e04d      	b.n	800ba9c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800ba00:	4b29      	ldr	r3, [pc, #164]	; (800baa8 <I2Cx_MspInit+0x154>)
 800ba02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba04:	4a28      	ldr	r2, [pc, #160]	; (800baa8 <I2Cx_MspInit+0x154>)
 800ba06:	f043 0302 	orr.w	r3, r3, #2
 800ba0a:	6313      	str	r3, [r2, #48]	; 0x30
 800ba0c:	4b26      	ldr	r3, [pc, #152]	; (800baa8 <I2Cx_MspInit+0x154>)
 800ba0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba10:	f003 0302 	and.w	r3, r3, #2
 800ba14:	613b      	str	r3, [r7, #16]
 800ba16:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800ba18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba1c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800ba1e:	2312      	movs	r3, #18
 800ba20:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800ba22:	2300      	movs	r3, #0
 800ba24:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800ba26:	2302      	movs	r3, #2
 800ba28:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800ba2a:	2304      	movs	r3, #4
 800ba2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ba2e:	f107 031c 	add.w	r3, r7, #28
 800ba32:	4619      	mov	r1, r3
 800ba34:	481e      	ldr	r0, [pc, #120]	; (800bab0 <I2Cx_MspInit+0x15c>)
 800ba36:	f7f9 f9eb 	bl	8004e10 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800ba3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800ba40:	f107 031c 	add.w	r3, r7, #28
 800ba44:	4619      	mov	r1, r3
 800ba46:	481a      	ldr	r0, [pc, #104]	; (800bab0 <I2Cx_MspInit+0x15c>)
 800ba48:	f7f9 f9e2 	bl	8004e10 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800ba4c:	4b16      	ldr	r3, [pc, #88]	; (800baa8 <I2Cx_MspInit+0x154>)
 800ba4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba50:	4a15      	ldr	r2, [pc, #84]	; (800baa8 <I2Cx_MspInit+0x154>)
 800ba52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba56:	6413      	str	r3, [r2, #64]	; 0x40
 800ba58:	4b13      	ldr	r3, [pc, #76]	; (800baa8 <I2Cx_MspInit+0x154>)
 800ba5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba60:	60fb      	str	r3, [r7, #12]
 800ba62:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800ba64:	4b10      	ldr	r3, [pc, #64]	; (800baa8 <I2Cx_MspInit+0x154>)
 800ba66:	6a1b      	ldr	r3, [r3, #32]
 800ba68:	4a0f      	ldr	r2, [pc, #60]	; (800baa8 <I2Cx_MspInit+0x154>)
 800ba6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba6e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800ba70:	4b0d      	ldr	r3, [pc, #52]	; (800baa8 <I2Cx_MspInit+0x154>)
 800ba72:	6a1b      	ldr	r3, [r3, #32]
 800ba74:	4a0c      	ldr	r2, [pc, #48]	; (800baa8 <I2Cx_MspInit+0x154>)
 800ba76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba7a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	210f      	movs	r1, #15
 800ba80:	201f      	movs	r0, #31
 800ba82:	f7f8 fbc9 	bl	8004218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800ba86:	201f      	movs	r0, #31
 800ba88:	f7f8 fbe2 	bl	8004250 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	210f      	movs	r1, #15
 800ba90:	2020      	movs	r0, #32
 800ba92:	f7f8 fbc1 	bl	8004218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800ba96:	2020      	movs	r0, #32
 800ba98:	f7f8 fbda 	bl	8004250 <HAL_NVIC_EnableIRQ>
}
 800ba9c:	bf00      	nop
 800ba9e:	3730      	adds	r7, #48	; 0x30
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	200000d0 	.word	0x200000d0
 800baa8:	40023800 	.word	0x40023800
 800baac:	40021c00 	.word	0x40021c00
 800bab0:	40020400 	.word	0x40020400

0800bab4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7f9 ff87 	bl	80059d0 <HAL_I2C_GetState>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d125      	bne.n	800bb14 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4a14      	ldr	r2, [pc, #80]	; (800bb1c <I2Cx_Init+0x68>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d103      	bne.n	800bad8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4a13      	ldr	r2, [pc, #76]	; (800bb20 <I2Cx_Init+0x6c>)
 800bad4:	601a      	str	r2, [r3, #0]
 800bad6:	e002      	b.n	800bade <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a12      	ldr	r2, [pc, #72]	; (800bb24 <I2Cx_Init+0x70>)
 800badc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a11      	ldr	r2, [pc, #68]	; (800bb28 <I2Cx_Init+0x74>)
 800bae2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2200      	movs	r2, #0
 800baf4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff ff23 	bl	800b954 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7f9 fc70 	bl	80053f4 <HAL_I2C_Init>
  }
}
 800bb14:	bf00      	nop
 800bb16:	3708      	adds	r7, #8
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	200000d0 	.word	0x200000d0
 800bb20:	40005c00 	.word	0x40005c00
 800bb24:	40005400 	.word	0x40005400
 800bb28:	40912732 	.word	0x40912732

0800bb2c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	; 0x28
 800bb30:	af04      	add	r7, sp, #16
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	4608      	mov	r0, r1
 800bb36:	4611      	mov	r1, r2
 800bb38:	461a      	mov	r2, r3
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	72fb      	strb	r3, [r7, #11]
 800bb3e:	460b      	mov	r3, r1
 800bb40:	813b      	strh	r3, [r7, #8]
 800bb42:	4613      	mov	r3, r2
 800bb44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800bb4a:	7afb      	ldrb	r3, [r7, #11]
 800bb4c:	b299      	uxth	r1, r3
 800bb4e:	88f8      	ldrh	r0, [r7, #6]
 800bb50:	893a      	ldrh	r2, [r7, #8]
 800bb52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb56:	9302      	str	r3, [sp, #8]
 800bb58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bb5a:	9301      	str	r3, [sp, #4]
 800bb5c:	6a3b      	ldr	r3, [r7, #32]
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	4603      	mov	r3, r0
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7f9 fe1a 	bl	800579c <HAL_I2C_Mem_Read>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d004      	beq.n	800bb7c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800bb72:	7afb      	ldrb	r3, [r7, #11]
 800bb74:	4619      	mov	r1, r3
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f000 f832 	bl	800bbe0 <I2Cx_Error>
  }
  return status;    
 800bb7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b08a      	sub	sp, #40	; 0x28
 800bb8a:	af04      	add	r7, sp, #16
 800bb8c:	60f8      	str	r0, [r7, #12]
 800bb8e:	4608      	mov	r0, r1
 800bb90:	4611      	mov	r1, r2
 800bb92:	461a      	mov	r2, r3
 800bb94:	4603      	mov	r3, r0
 800bb96:	72fb      	strb	r3, [r7, #11]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	813b      	strh	r3, [r7, #8]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800bba4:	7afb      	ldrb	r3, [r7, #11]
 800bba6:	b299      	uxth	r1, r3
 800bba8:	88f8      	ldrh	r0, [r7, #6]
 800bbaa:	893a      	ldrh	r2, [r7, #8]
 800bbac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bbb0:	9302      	str	r3, [sp, #8]
 800bbb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbb4:	9301      	str	r3, [sp, #4]
 800bbb6:	6a3b      	ldr	r3, [r7, #32]
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	4603      	mov	r3, r0
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f7f9 fcd9 	bl	8005574 <HAL_I2C_Mem_Write>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800bbc6:	7dfb      	ldrb	r3, [r7, #23]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d004      	beq.n	800bbd6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800bbcc:	7afb      	ldrb	r3, [r7, #11]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	f000 f805 	bl	800bbe0 <I2Cx_Error>
  }
  return status;
 800bbd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7f9 fc91 	bl	8005514 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7ff ff5e 	bl	800bab4 <I2Cx_Init>
}
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800bc04:	4802      	ldr	r0, [pc, #8]	; (800bc10 <TS_IO_Init+0x10>)
 800bc06:	f7ff ff55 	bl	800bab4 <I2Cx_Init>
}
 800bc0a:	bf00      	nop
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	200000d0 	.word	0x200000d0

0800bc14 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af02      	add	r7, sp, #8
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	71fb      	strb	r3, [r7, #7]
 800bc1e:	460b      	mov	r3, r1
 800bc20:	71bb      	strb	r3, [r7, #6]
 800bc22:	4613      	mov	r3, r2
 800bc24:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800bc26:	79bb      	ldrb	r3, [r7, #6]
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	79f9      	ldrb	r1, [r7, #7]
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	9301      	str	r3, [sp, #4]
 800bc30:	1d7b      	adds	r3, r7, #5
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	2301      	movs	r3, #1
 800bc36:	4803      	ldr	r0, [pc, #12]	; (800bc44 <TS_IO_Write+0x30>)
 800bc38:	f7ff ffa5 	bl	800bb86 <I2Cx_WriteMultiple>
}
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	200000d0 	.word	0x200000d0

0800bc48 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af02      	add	r7, sp, #8
 800bc4e:	4603      	mov	r3, r0
 800bc50:	460a      	mov	r2, r1
 800bc52:	71fb      	strb	r3, [r7, #7]
 800bc54:	4613      	mov	r3, r2
 800bc56:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800bc5c:	79bb      	ldrb	r3, [r7, #6]
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	79f9      	ldrb	r1, [r7, #7]
 800bc62:	2301      	movs	r3, #1
 800bc64:	9301      	str	r3, [sp, #4]
 800bc66:	f107 030f 	add.w	r3, r7, #15
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	4804      	ldr	r0, [pc, #16]	; (800bc80 <TS_IO_Read+0x38>)
 800bc70:	f7ff ff5c 	bl	800bb2c <I2Cx_ReadMultiple>

  return read_value;
 800bc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	200000d0 	.word	0x200000d0

0800bc84 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7f7 ff61 	bl	8003b54 <HAL_Delay>
}
 800bc92:	bf00      	nop
 800bc94:	3708      	adds	r7, #8
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
	...

0800bc9c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800bca0:	4b31      	ldr	r3, [pc, #196]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bca2:	2228      	movs	r2, #40	; 0x28
 800bca4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800bca6:	4b30      	ldr	r3, [pc, #192]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bca8:	2209      	movs	r2, #9
 800bcaa:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800bcac:	4b2e      	ldr	r3, [pc, #184]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bcae:	2235      	movs	r2, #53	; 0x35
 800bcb0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800bcb2:	4b2d      	ldr	r3, [pc, #180]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bcb4:	220b      	movs	r2, #11
 800bcb6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800bcb8:	4b2b      	ldr	r3, [pc, #172]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bcba:	f240 121b 	movw	r2, #283	; 0x11b
 800bcbe:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800bcc0:	4b29      	ldr	r3, [pc, #164]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bcc2:	f240 2215 	movw	r2, #533	; 0x215
 800bcc6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800bcc8:	4b27      	ldr	r3, [pc, #156]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bcca:	f240 121d 	movw	r2, #285	; 0x11d
 800bcce:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800bcd0:	4b25      	ldr	r3, [pc, #148]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bcd2:	f240 2235 	movw	r2, #565	; 0x235
 800bcd6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800bcd8:	2100      	movs	r1, #0
 800bcda:	4823      	ldr	r0, [pc, #140]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bcdc:	f000 fe1a 	bl	800c914 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800bce0:	4b21      	ldr	r3, [pc, #132]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bce2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bce6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800bce8:	4b1f      	ldr	r3, [pc, #124]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bcea:	f44f 7288 	mov.w	r2, #272	; 0x110
 800bcee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800bcf0:	4b1d      	ldr	r3, [pc, #116]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800bcf8:	4b1b      	ldr	r3, [pc, #108]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800bd00:	4b19      	ldr	r3, [pc, #100]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800bd08:	4b17      	ldr	r3, [pc, #92]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800bd0e:	4b16      	ldr	r3, [pc, #88]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bd10:	2200      	movs	r2, #0
 800bd12:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800bd14:	4b14      	ldr	r3, [pc, #80]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bd16:	2200      	movs	r2, #0
 800bd18:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800bd1a:	4b13      	ldr	r3, [pc, #76]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800bd20:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bd22:	4a12      	ldr	r2, [pc, #72]	; (800bd6c <BSP_LCD_Init+0xd0>)
 800bd24:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800bd26:	4810      	ldr	r0, [pc, #64]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bd28:	f7fa fae4 	bl	80062f4 <HAL_LTDC_GetState>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d103      	bne.n	800bd3a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800bd32:	2100      	movs	r1, #0
 800bd34:	480c      	ldr	r0, [pc, #48]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bd36:	f000 fd13 	bl	800c760 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800bd3a:	480b      	ldr	r0, [pc, #44]	; (800bd68 <BSP_LCD_Init+0xcc>)
 800bd3c:	f7fa f90a 	bl	8005f54 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800bd40:	2201      	movs	r2, #1
 800bd42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bd46:	480a      	ldr	r0, [pc, #40]	; (800bd70 <BSP_LCD_Init+0xd4>)
 800bd48:	f7f9 fb16 	bl	8005378 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	2108      	movs	r1, #8
 800bd50:	4808      	ldr	r0, [pc, #32]	; (800bd74 <BSP_LCD_Init+0xd8>)
 800bd52:	f7f9 fb11 	bl	8005378 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800bd56:	f000 fefd 	bl	800cb54 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800bd5a:	4807      	ldr	r0, [pc, #28]	; (800bd78 <BSP_LCD_Init+0xdc>)
 800bd5c:	f000 f8d8 	bl	800bf10 <BSP_LCD_SetFont>
  
  return LCD_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20000a9c 	.word	0x20000a9c
 800bd6c:	40016800 	.word	0x40016800
 800bd70:	40022000 	.word	0x40022000
 800bd74:	40022800 	.word	0x40022800
 800bd78:	2000000c 	.word	0x2000000c

0800bd7c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800bd80:	4b06      	ldr	r3, [pc, #24]	; (800bd9c <BSP_LCD_GetXSize+0x20>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a06      	ldr	r2, [pc, #24]	; (800bda0 <BSP_LCD_GetXSize+0x24>)
 800bd86:	2134      	movs	r1, #52	; 0x34
 800bd88:	fb01 f303 	mul.w	r3, r1, r3
 800bd8c:	4413      	add	r3, r2
 800bd8e:	3360      	adds	r3, #96	; 0x60
 800bd90:	681b      	ldr	r3, [r3, #0]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	2000015c 	.word	0x2000015c
 800bda0:	20000a9c 	.word	0x20000a9c

0800bda4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800bda4:	b480      	push	{r7}
 800bda6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800bda8:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <BSP_LCD_GetYSize+0x20>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a06      	ldr	r2, [pc, #24]	; (800bdc8 <BSP_LCD_GetYSize+0x24>)
 800bdae:	2134      	movs	r1, #52	; 0x34
 800bdb0:	fb01 f303 	mul.w	r3, r1, r3
 800bdb4:	4413      	add	r3, r2
 800bdb6:	3364      	adds	r3, #100	; 0x64
 800bdb8:	681b      	ldr	r3, [r3, #0]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	2000015c 	.word	0x2000015c
 800bdc8:	20000a9c 	.word	0x20000a9c

0800bdcc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b090      	sub	sp, #64	; 0x40
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	6039      	str	r1, [r7, #0]
 800bdd6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800bddc:	f7ff ffce 	bl	800bd7c <BSP_LCD_GetXSize>
 800bde0:	4603      	mov	r3, r0
 800bde2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800bde8:	f7ff ffdc 	bl	800bda4 <BSP_LCD_GetYSize>
 800bdec:	4603      	mov	r3, r0
 800bdee:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800bdf8:	23ff      	movs	r3, #255	; 0xff
 800bdfa:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800be00:	2300      	movs	r3, #0
 800be02:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800be06:	2300      	movs	r3, #0
 800be08:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 800be0c:	2300      	movs	r3, #0
 800be0e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800be12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800be16:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800be18:	2307      	movs	r3, #7
 800be1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800be1c:	f7ff ffae 	bl	800bd7c <BSP_LCD_GetXSize>
 800be20:	4603      	mov	r3, r0
 800be22:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800be24:	f7ff ffbe 	bl	800bda4 <BSP_LCD_GetYSize>
 800be28:	4603      	mov	r3, r0
 800be2a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800be2c:	88fa      	ldrh	r2, [r7, #6]
 800be2e:	f107 030c 	add.w	r3, r7, #12
 800be32:	4619      	mov	r1, r3
 800be34:	4812      	ldr	r0, [pc, #72]	; (800be80 <BSP_LCD_LayerDefaultInit+0xb4>)
 800be36:	f7fa fa1f 	bl	8006278 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800be3a:	88fa      	ldrh	r2, [r7, #6]
 800be3c:	4911      	ldr	r1, [pc, #68]	; (800be84 <BSP_LCD_LayerDefaultInit+0xb8>)
 800be3e:	4613      	mov	r3, r2
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	4413      	add	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	440b      	add	r3, r1
 800be48:	3304      	adds	r3, #4
 800be4a:	f04f 32ff 	mov.w	r2, #4294967295
 800be4e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800be50:	88fa      	ldrh	r2, [r7, #6]
 800be52:	490c      	ldr	r1, [pc, #48]	; (800be84 <BSP_LCD_LayerDefaultInit+0xb8>)
 800be54:	4613      	mov	r3, r2
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	4413      	add	r3, r2
 800be5a:	009b      	lsls	r3, r3, #2
 800be5c:	440b      	add	r3, r1
 800be5e:	3308      	adds	r3, #8
 800be60:	4a09      	ldr	r2, [pc, #36]	; (800be88 <BSP_LCD_LayerDefaultInit+0xbc>)
 800be62:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800be64:	88fa      	ldrh	r2, [r7, #6]
 800be66:	4907      	ldr	r1, [pc, #28]	; (800be84 <BSP_LCD_LayerDefaultInit+0xb8>)
 800be68:	4613      	mov	r3, r2
 800be6a:	005b      	lsls	r3, r3, #1
 800be6c:	4413      	add	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	440b      	add	r3, r1
 800be72:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800be76:	601a      	str	r2, [r3, #0]
}
 800be78:	bf00      	nop
 800be7a:	3740      	adds	r7, #64	; 0x40
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	20000a9c 	.word	0x20000a9c
 800be84:	20000160 	.word	0x20000160
 800be88:	2000000c 	.word	0x2000000c

0800be8c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800be94:	4a04      	ldr	r2, [pc, #16]	; (800bea8 <BSP_LCD_SelectLayer+0x1c>)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6013      	str	r3, [r2, #0]
} 
 800be9a:	bf00      	nop
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	2000015c 	.word	0x2000015c

0800beac <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800beb4:	4b07      	ldr	r3, [pc, #28]	; (800bed4 <BSP_LCD_SetTextColor+0x28>)
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	4907      	ldr	r1, [pc, #28]	; (800bed8 <BSP_LCD_SetTextColor+0x2c>)
 800beba:	4613      	mov	r3, r2
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	601a      	str	r2, [r3, #0]
}
 800bec8:	bf00      	nop
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr
 800bed4:	2000015c 	.word	0x2000015c
 800bed8:	20000160 	.word	0x20000160

0800bedc <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800bee4:	4b08      	ldr	r3, [pc, #32]	; (800bf08 <BSP_LCD_SetBackColor+0x2c>)
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	4908      	ldr	r1, [pc, #32]	; (800bf0c <BSP_LCD_SetBackColor+0x30>)
 800beea:	4613      	mov	r3, r2
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	4413      	add	r3, r2
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	440b      	add	r3, r1
 800bef4:	3304      	adds	r3, #4
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	601a      	str	r2, [r3, #0]
}
 800befa:	bf00      	nop
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	2000015c 	.word	0x2000015c
 800bf0c:	20000160 	.word	0x20000160

0800bf10 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b083      	sub	sp, #12
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800bf18:	4b08      	ldr	r3, [pc, #32]	; (800bf3c <BSP_LCD_SetFont+0x2c>)
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	4908      	ldr	r1, [pc, #32]	; (800bf40 <BSP_LCD_SetFont+0x30>)
 800bf1e:	4613      	mov	r3, r2
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	4413      	add	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	440b      	add	r3, r1
 800bf28:	3308      	adds	r3, #8
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	601a      	str	r2, [r3, #0]
}
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	2000015c 	.word	0x2000015c
 800bf40:	20000160 	.word	0x20000160

0800bf44 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800bf44:	b480      	push	{r7}
 800bf46:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800bf48:	4b07      	ldr	r3, [pc, #28]	; (800bf68 <BSP_LCD_GetFont+0x24>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	4907      	ldr	r1, [pc, #28]	; (800bf6c <BSP_LCD_GetFont+0x28>)
 800bf4e:	4613      	mov	r3, r2
 800bf50:	005b      	lsls	r3, r3, #1
 800bf52:	4413      	add	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	440b      	add	r3, r1
 800bf58:	3308      	adds	r3, #8
 800bf5a:	681b      	ldr	r3, [r3, #0]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	2000015c 	.word	0x2000015c
 800bf6c:	20000160 	.word	0x20000160

0800bf70 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800bf70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af02      	add	r7, sp, #8
 800bf76:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800bf78:	4b0f      	ldr	r3, [pc, #60]	; (800bfb8 <BSP_LCD_Clear+0x48>)
 800bf7a:	681c      	ldr	r4, [r3, #0]
 800bf7c:	4b0e      	ldr	r3, [pc, #56]	; (800bfb8 <BSP_LCD_Clear+0x48>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a0e      	ldr	r2, [pc, #56]	; (800bfbc <BSP_LCD_Clear+0x4c>)
 800bf82:	2134      	movs	r1, #52	; 0x34
 800bf84:	fb01 f303 	mul.w	r3, r1, r3
 800bf88:	4413      	add	r3, r2
 800bf8a:	335c      	adds	r3, #92	; 0x5c
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	461d      	mov	r5, r3
 800bf90:	f7ff fef4 	bl	800bd7c <BSP_LCD_GetXSize>
 800bf94:	4606      	mov	r6, r0
 800bf96:	f7ff ff05 	bl	800bda4 <BSP_LCD_GetYSize>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	4613      	mov	r3, r2
 800bfa6:	4632      	mov	r2, r6
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f000 fd86 	bl	800cabc <LL_FillBuffer>
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb8:	2000015c 	.word	0x2000015c
 800bfbc:	20000a9c 	.word	0x20000a9c

0800bfc0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800bfc0:	b590      	push	{r4, r7, lr}
 800bfc2:	b083      	sub	sp, #12
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	80fb      	strh	r3, [r7, #6]
 800bfca:	460b      	mov	r3, r1
 800bfcc:	80bb      	strh	r3, [r7, #4]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800bfd2:	4b1b      	ldr	r3, [pc, #108]	; (800c040 <BSP_LCD_DisplayChar+0x80>)
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	491b      	ldr	r1, [pc, #108]	; (800c044 <BSP_LCD_DisplayChar+0x84>)
 800bfd8:	4613      	mov	r3, r2
 800bfda:	005b      	lsls	r3, r3, #1
 800bfdc:	4413      	add	r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	440b      	add	r3, r1
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6819      	ldr	r1, [r3, #0]
 800bfe8:	78fb      	ldrb	r3, [r7, #3]
 800bfea:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800bfee:	4b14      	ldr	r3, [pc, #80]	; (800c040 <BSP_LCD_DisplayChar+0x80>)
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	4c14      	ldr	r4, [pc, #80]	; (800c044 <BSP_LCD_DisplayChar+0x84>)
 800bff4:	4613      	mov	r3, r2
 800bff6:	005b      	lsls	r3, r3, #1
 800bff8:	4413      	add	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4423      	add	r3, r4
 800bffe:	3308      	adds	r3, #8
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800c004:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800c008:	4b0d      	ldr	r3, [pc, #52]	; (800c040 <BSP_LCD_DisplayChar+0x80>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	4c0d      	ldr	r4, [pc, #52]	; (800c044 <BSP_LCD_DisplayChar+0x84>)
 800c00e:	4613      	mov	r3, r2
 800c010:	005b      	lsls	r3, r3, #1
 800c012:	4413      	add	r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4423      	add	r3, r4
 800c018:	3308      	adds	r3, #8
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	889b      	ldrh	r3, [r3, #4]
 800c01e:	3307      	adds	r3, #7
 800c020:	2b00      	cmp	r3, #0
 800c022:	da00      	bge.n	800c026 <BSP_LCD_DisplayChar+0x66>
 800c024:	3307      	adds	r3, #7
 800c026:	10db      	asrs	r3, r3, #3
 800c028:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800c02c:	18ca      	adds	r2, r1, r3
 800c02e:	88b9      	ldrh	r1, [r7, #4]
 800c030:	88fb      	ldrh	r3, [r7, #6]
 800c032:	4618      	mov	r0, r3
 800c034:	f000 fc8a 	bl	800c94c <DrawChar>
}
 800c038:	bf00      	nop
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd90      	pop	{r4, r7, pc}
 800c040:	2000015c 	.word	0x2000015c
 800c044:	20000160 	.word	0x20000160

0800c048 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800c048:	b5b0      	push	{r4, r5, r7, lr}
 800c04a:	b088      	sub	sp, #32
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60ba      	str	r2, [r7, #8]
 800c050:	461a      	mov	r2, r3
 800c052:	4603      	mov	r3, r0
 800c054:	81fb      	strh	r3, [r7, #14]
 800c056:	460b      	mov	r3, r1
 800c058:	81bb      	strh	r3, [r7, #12]
 800c05a:	4613      	mov	r3, r2
 800c05c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800c05e:	2301      	movs	r3, #1
 800c060:	83fb      	strh	r3, [r7, #30]
 800c062:	2300      	movs	r3, #0
 800c064:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800c066:	2300      	movs	r3, #0
 800c068:	61bb      	str	r3, [r7, #24]
 800c06a:	2300      	movs	r3, #0
 800c06c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800c072:	e002      	b.n	800c07a <BSP_LCD_DisplayStringAt+0x32>
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	3301      	adds	r3, #1
 800c078:	61bb      	str	r3, [r7, #24]
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	617a      	str	r2, [r7, #20]
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1f6      	bne.n	800c074 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800c086:	f7ff fe79 	bl	800bd7c <BSP_LCD_GetXSize>
 800c08a:	4b4f      	ldr	r3, [pc, #316]	; (800c1c8 <BSP_LCD_DisplayStringAt+0x180>)
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	494f      	ldr	r1, [pc, #316]	; (800c1cc <BSP_LCD_DisplayStringAt+0x184>)
 800c090:	4613      	mov	r3, r2
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	4413      	add	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	440b      	add	r3, r1
 800c09a:	3308      	adds	r3, #8
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	889b      	ldrh	r3, [r3, #4]
 800c0a0:	fbb0 f3f3 	udiv	r3, r0, r3
 800c0a4:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800c0a6:	79fb      	ldrb	r3, [r7, #7]
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d01c      	beq.n	800c0e6 <BSP_LCD_DisplayStringAt+0x9e>
 800c0ac:	2b03      	cmp	r3, #3
 800c0ae:	d017      	beq.n	800c0e0 <BSP_LCD_DisplayStringAt+0x98>
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d12e      	bne.n	800c112 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800c0b4:	693a      	ldr	r2, [r7, #16]
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	1ad1      	subs	r1, r2, r3
 800c0ba:	4b43      	ldr	r3, [pc, #268]	; (800c1c8 <BSP_LCD_DisplayStringAt+0x180>)
 800c0bc:	681a      	ldr	r2, [r3, #0]
 800c0be:	4843      	ldr	r0, [pc, #268]	; (800c1cc <BSP_LCD_DisplayStringAt+0x184>)
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	4403      	add	r3, r0
 800c0ca:	3308      	adds	r3, #8
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	889b      	ldrh	r3, [r3, #4]
 800c0d0:	fb03 f301 	mul.w	r3, r3, r1
 800c0d4:	085b      	lsrs	r3, r3, #1
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	89fb      	ldrh	r3, [r7, #14]
 800c0da:	4413      	add	r3, r2
 800c0dc:	83fb      	strh	r3, [r7, #30]
      break;
 800c0de:	e01b      	b.n	800c118 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800c0e0:	89fb      	ldrh	r3, [r7, #14]
 800c0e2:	83fb      	strh	r3, [r7, #30]
      break;
 800c0e4:	e018      	b.n	800c118 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800c0e6:	693a      	ldr	r2, [r7, #16]
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	1ad3      	subs	r3, r2, r3
 800c0ec:	b299      	uxth	r1, r3
 800c0ee:	4b36      	ldr	r3, [pc, #216]	; (800c1c8 <BSP_LCD_DisplayStringAt+0x180>)
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	4836      	ldr	r0, [pc, #216]	; (800c1cc <BSP_LCD_DisplayStringAt+0x184>)
 800c0f4:	4613      	mov	r3, r2
 800c0f6:	005b      	lsls	r3, r3, #1
 800c0f8:	4413      	add	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4403      	add	r3, r0
 800c0fe:	3308      	adds	r3, #8
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	889b      	ldrh	r3, [r3, #4]
 800c104:	fb11 f303 	smulbb	r3, r1, r3
 800c108:	b29a      	uxth	r2, r3
 800c10a:	89fb      	ldrh	r3, [r7, #14]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	83fb      	strh	r3, [r7, #30]
      break;
 800c110:	e002      	b.n	800c118 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800c112:	89fb      	ldrh	r3, [r7, #14]
 800c114:	83fb      	strh	r3, [r7, #30]
      break;
 800c116:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800c118:	8bfb      	ldrh	r3, [r7, #30]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d003      	beq.n	800c126 <BSP_LCD_DisplayStringAt+0xde>
 800c11e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c122:	2b00      	cmp	r3, #0
 800c124:	da1d      	bge.n	800c162 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 800c126:	2301      	movs	r3, #1
 800c128:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800c12a:	e01a      	b.n	800c162 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	781a      	ldrb	r2, [r3, #0]
 800c130:	89b9      	ldrh	r1, [r7, #12]
 800c132:	8bfb      	ldrh	r3, [r7, #30]
 800c134:	4618      	mov	r0, r3
 800c136:	f7ff ff43 	bl	800bfc0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800c13a:	4b23      	ldr	r3, [pc, #140]	; (800c1c8 <BSP_LCD_DisplayStringAt+0x180>)
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	4923      	ldr	r1, [pc, #140]	; (800c1cc <BSP_LCD_DisplayStringAt+0x184>)
 800c140:	4613      	mov	r3, r2
 800c142:	005b      	lsls	r3, r3, #1
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	440b      	add	r3, r1
 800c14a:	3308      	adds	r3, #8
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	889a      	ldrh	r2, [r3, #4]
 800c150:	8bfb      	ldrh	r3, [r7, #30]
 800c152:	4413      	add	r3, r2
 800c154:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	3301      	adds	r3, #1
 800c15a:	60bb      	str	r3, [r7, #8]
    i++;
 800c15c:	8bbb      	ldrh	r3, [r7, #28]
 800c15e:	3301      	adds	r3, #1
 800c160:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	bf14      	ite	ne
 800c16a:	2301      	movne	r3, #1
 800c16c:	2300      	moveq	r3, #0
 800c16e:	b2dc      	uxtb	r4, r3
 800c170:	f7ff fe04 	bl	800bd7c <BSP_LCD_GetXSize>
 800c174:	4605      	mov	r5, r0
 800c176:	8bb9      	ldrh	r1, [r7, #28]
 800c178:	4b13      	ldr	r3, [pc, #76]	; (800c1c8 <BSP_LCD_DisplayStringAt+0x180>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	4813      	ldr	r0, [pc, #76]	; (800c1cc <BSP_LCD_DisplayStringAt+0x184>)
 800c17e:	4613      	mov	r3, r2
 800c180:	005b      	lsls	r3, r3, #1
 800c182:	4413      	add	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4403      	add	r3, r0
 800c188:	3308      	adds	r3, #8
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	889b      	ldrh	r3, [r3, #4]
 800c18e:	fb03 f301 	mul.w	r3, r3, r1
 800c192:	1aeb      	subs	r3, r5, r3
 800c194:	b299      	uxth	r1, r3
 800c196:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <BSP_LCD_DisplayStringAt+0x180>)
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	480c      	ldr	r0, [pc, #48]	; (800c1cc <BSP_LCD_DisplayStringAt+0x184>)
 800c19c:	4613      	mov	r3, r2
 800c19e:	005b      	lsls	r3, r3, #1
 800c1a0:	4413      	add	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4403      	add	r3, r0
 800c1a6:	3308      	adds	r3, #8
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	889b      	ldrh	r3, [r3, #4]
 800c1ac:	4299      	cmp	r1, r3
 800c1ae:	bf2c      	ite	cs
 800c1b0:	2301      	movcs	r3, #1
 800c1b2:	2300      	movcc	r3, #0
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	4023      	ands	r3, r4
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1b6      	bne.n	800c12c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 800c1be:	bf00      	nop
 800c1c0:	3720      	adds	r7, #32
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bdb0      	pop	{r4, r5, r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	2000015c 	.word	0x2000015c
 800c1cc:	20000160 	.word	0x20000160

0800c1d0 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b082      	sub	sp, #8
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	6039      	str	r1, [r7, #0]
 800c1da:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800c1dc:	f7ff feb2 	bl	800bf44 <BSP_LCD_GetFont>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	88db      	ldrh	r3, [r3, #6]
 800c1e4:	88fa      	ldrh	r2, [r7, #6]
 800c1e6:	fb12 f303 	smulbb	r3, r2, r3
 800c1ea:	b299      	uxth	r1, r3
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	f7ff ff29 	bl	800c048 <BSP_LCD_DisplayStringAt>
}
 800c1f6:	bf00      	nop
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
	...

0800c200 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800c200:	b5b0      	push	{r4, r5, r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af02      	add	r7, sp, #8
 800c206:	4603      	mov	r3, r0
 800c208:	80fb      	strh	r3, [r7, #6]
 800c20a:	460b      	mov	r3, r1
 800c20c:	80bb      	strh	r3, [r7, #4]
 800c20e:	4613      	mov	r3, r2
 800c210:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800c212:	2300      	movs	r3, #0
 800c214:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800c216:	4b26      	ldr	r3, [pc, #152]	; (800c2b0 <BSP_LCD_DrawHLine+0xb0>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4a26      	ldr	r2, [pc, #152]	; (800c2b4 <BSP_LCD_DrawHLine+0xb4>)
 800c21c:	2134      	movs	r1, #52	; 0x34
 800c21e:	fb01 f303 	mul.w	r3, r1, r3
 800c222:	4413      	add	r3, r2
 800c224:	3348      	adds	r3, #72	; 0x48
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b02      	cmp	r3, #2
 800c22a:	d114      	bne.n	800c256 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800c22c:	4b20      	ldr	r3, [pc, #128]	; (800c2b0 <BSP_LCD_DrawHLine+0xb0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	4a20      	ldr	r2, [pc, #128]	; (800c2b4 <BSP_LCD_DrawHLine+0xb4>)
 800c232:	2134      	movs	r1, #52	; 0x34
 800c234:	fb01 f303 	mul.w	r3, r1, r3
 800c238:	4413      	add	r3, r2
 800c23a:	335c      	adds	r3, #92	; 0x5c
 800c23c:	681c      	ldr	r4, [r3, #0]
 800c23e:	f7ff fd9d 	bl	800bd7c <BSP_LCD_GetXSize>
 800c242:	4602      	mov	r2, r0
 800c244:	88bb      	ldrh	r3, [r7, #4]
 800c246:	fb03 f202 	mul.w	r2, r3, r2
 800c24a:	88fb      	ldrh	r3, [r7, #6]
 800c24c:	4413      	add	r3, r2
 800c24e:	005b      	lsls	r3, r3, #1
 800c250:	4423      	add	r3, r4
 800c252:	60fb      	str	r3, [r7, #12]
 800c254:	e013      	b.n	800c27e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800c256:	4b16      	ldr	r3, [pc, #88]	; (800c2b0 <BSP_LCD_DrawHLine+0xb0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a16      	ldr	r2, [pc, #88]	; (800c2b4 <BSP_LCD_DrawHLine+0xb4>)
 800c25c:	2134      	movs	r1, #52	; 0x34
 800c25e:	fb01 f303 	mul.w	r3, r1, r3
 800c262:	4413      	add	r3, r2
 800c264:	335c      	adds	r3, #92	; 0x5c
 800c266:	681c      	ldr	r4, [r3, #0]
 800c268:	f7ff fd88 	bl	800bd7c <BSP_LCD_GetXSize>
 800c26c:	4602      	mov	r2, r0
 800c26e:	88bb      	ldrh	r3, [r7, #4]
 800c270:	fb03 f202 	mul.w	r2, r3, r2
 800c274:	88fb      	ldrh	r3, [r7, #6]
 800c276:	4413      	add	r3, r2
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4423      	add	r3, r4
 800c27c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800c27e:	4b0c      	ldr	r3, [pc, #48]	; (800c2b0 <BSP_LCD_DrawHLine+0xb0>)
 800c280:	6818      	ldr	r0, [r3, #0]
 800c282:	68fc      	ldr	r4, [r7, #12]
 800c284:	887d      	ldrh	r5, [r7, #2]
 800c286:	4b0a      	ldr	r3, [pc, #40]	; (800c2b0 <BSP_LCD_DrawHLine+0xb0>)
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	490b      	ldr	r1, [pc, #44]	; (800c2b8 <BSP_LCD_DrawHLine+0xb8>)
 800c28c:	4613      	mov	r3, r2
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	4413      	add	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	440b      	add	r3, r1
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	9301      	str	r3, [sp, #4]
 800c29a:	2300      	movs	r3, #0
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	2301      	movs	r3, #1
 800c2a0:	462a      	mov	r2, r5
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	f000 fc0a 	bl	800cabc <LL_FillBuffer>
}
 800c2a8:	bf00      	nop
 800c2aa:	3710      	adds	r7, #16
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bdb0      	pop	{r4, r5, r7, pc}
 800c2b0:	2000015c 	.word	0x2000015c
 800c2b4:	20000a9c 	.word	0x20000a9c
 800c2b8:	20000160 	.word	0x20000160

0800c2bc <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800c2bc:	b590      	push	{r4, r7, lr}
 800c2be:	b087      	sub	sp, #28
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	80fb      	strh	r3, [r7, #6]
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	80bb      	strh	r3, [r7, #4]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800c2ce:	887b      	ldrh	r3, [r7, #2]
 800c2d0:	005b      	lsls	r3, r3, #1
 800c2d2:	f1c3 0303 	rsb	r3, r3, #3
 800c2d6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800c2dc:	887b      	ldrh	r3, [r7, #2]
 800c2de:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 800c2e0:	e0cf      	b.n	800c482 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	b29a      	uxth	r2, r3
 800c2e6:	88fb      	ldrh	r3, [r7, #6]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	b298      	uxth	r0, r3
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	88ba      	ldrh	r2, [r7, #4]
 800c2f2:	1ad3      	subs	r3, r2, r3
 800c2f4:	b29c      	uxth	r4, r3
 800c2f6:	4b67      	ldr	r3, [pc, #412]	; (800c494 <BSP_LCD_DrawCircle+0x1d8>)
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	4967      	ldr	r1, [pc, #412]	; (800c498 <BSP_LCD_DrawCircle+0x1dc>)
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	005b      	lsls	r3, r3, #1
 800c300:	4413      	add	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	440b      	add	r3, r1
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	461a      	mov	r2, r3
 800c30a:	4621      	mov	r1, r4
 800c30c:	f000 f8c6 	bl	800c49c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	b29b      	uxth	r3, r3
 800c314:	88fa      	ldrh	r2, [r7, #6]
 800c316:	1ad3      	subs	r3, r2, r3
 800c318:	b298      	uxth	r0, r3
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	88ba      	ldrh	r2, [r7, #4]
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	b29c      	uxth	r4, r3
 800c324:	4b5b      	ldr	r3, [pc, #364]	; (800c494 <BSP_LCD_DrawCircle+0x1d8>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	495b      	ldr	r1, [pc, #364]	; (800c498 <BSP_LCD_DrawCircle+0x1dc>)
 800c32a:	4613      	mov	r3, r2
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	4413      	add	r3, r2
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	440b      	add	r3, r1
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	4621      	mov	r1, r4
 800c33a:	f000 f8af 	bl	800c49c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	b29a      	uxth	r2, r3
 800c342:	88fb      	ldrh	r3, [r7, #6]
 800c344:	4413      	add	r3, r2
 800c346:	b298      	uxth	r0, r3
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	88ba      	ldrh	r2, [r7, #4]
 800c34e:	1ad3      	subs	r3, r2, r3
 800c350:	b29c      	uxth	r4, r3
 800c352:	4b50      	ldr	r3, [pc, #320]	; (800c494 <BSP_LCD_DrawCircle+0x1d8>)
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	4950      	ldr	r1, [pc, #320]	; (800c498 <BSP_LCD_DrawCircle+0x1dc>)
 800c358:	4613      	mov	r3, r2
 800c35a:	005b      	lsls	r3, r3, #1
 800c35c:	4413      	add	r3, r2
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	440b      	add	r3, r1
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	461a      	mov	r2, r3
 800c366:	4621      	mov	r1, r4
 800c368:	f000 f898 	bl	800c49c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	b29b      	uxth	r3, r3
 800c370:	88fa      	ldrh	r2, [r7, #6]
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	b298      	uxth	r0, r3
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	b29b      	uxth	r3, r3
 800c37a:	88ba      	ldrh	r2, [r7, #4]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	b29c      	uxth	r4, r3
 800c380:	4b44      	ldr	r3, [pc, #272]	; (800c494 <BSP_LCD_DrawCircle+0x1d8>)
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	4944      	ldr	r1, [pc, #272]	; (800c498 <BSP_LCD_DrawCircle+0x1dc>)
 800c386:	4613      	mov	r3, r2
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	4413      	add	r3, r2
 800c38c:	009b      	lsls	r3, r3, #2
 800c38e:	440b      	add	r3, r1
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	461a      	mov	r2, r3
 800c394:	4621      	mov	r1, r4
 800c396:	f000 f881 	bl	800c49c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	88fb      	ldrh	r3, [r7, #6]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	b298      	uxth	r0, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	88bb      	ldrh	r3, [r7, #4]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	b29c      	uxth	r4, r3
 800c3ae:	4b39      	ldr	r3, [pc, #228]	; (800c494 <BSP_LCD_DrawCircle+0x1d8>)
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	4939      	ldr	r1, [pc, #228]	; (800c498 <BSP_LCD_DrawCircle+0x1dc>)
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	005b      	lsls	r3, r3, #1
 800c3b8:	4413      	add	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	440b      	add	r3, r1
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	4621      	mov	r1, r4
 800c3c4:	f000 f86a 	bl	800c49c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	88fa      	ldrh	r2, [r7, #6]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	b298      	uxth	r0, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	88bb      	ldrh	r3, [r7, #4]
 800c3d8:	4413      	add	r3, r2
 800c3da:	b29c      	uxth	r4, r3
 800c3dc:	4b2d      	ldr	r3, [pc, #180]	; (800c494 <BSP_LCD_DrawCircle+0x1d8>)
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	492d      	ldr	r1, [pc, #180]	; (800c498 <BSP_LCD_DrawCircle+0x1dc>)
 800c3e2:	4613      	mov	r3, r2
 800c3e4:	005b      	lsls	r3, r3, #1
 800c3e6:	4413      	add	r3, r2
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	440b      	add	r3, r1
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	f000 f853 	bl	800c49c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	88fb      	ldrh	r3, [r7, #6]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	b298      	uxth	r0, r3
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	b29a      	uxth	r2, r3
 800c404:	88bb      	ldrh	r3, [r7, #4]
 800c406:	4413      	add	r3, r2
 800c408:	b29c      	uxth	r4, r3
 800c40a:	4b22      	ldr	r3, [pc, #136]	; (800c494 <BSP_LCD_DrawCircle+0x1d8>)
 800c40c:	681a      	ldr	r2, [r3, #0]
 800c40e:	4922      	ldr	r1, [pc, #136]	; (800c498 <BSP_LCD_DrawCircle+0x1dc>)
 800c410:	4613      	mov	r3, r2
 800c412:	005b      	lsls	r3, r3, #1
 800c414:	4413      	add	r3, r2
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	440b      	add	r3, r1
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	461a      	mov	r2, r3
 800c41e:	4621      	mov	r1, r4
 800c420:	f000 f83c 	bl	800c49c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	b29b      	uxth	r3, r3
 800c428:	88fa      	ldrh	r2, [r7, #6]
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	b298      	uxth	r0, r3
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	b29a      	uxth	r2, r3
 800c432:	88bb      	ldrh	r3, [r7, #4]
 800c434:	4413      	add	r3, r2
 800c436:	b29c      	uxth	r4, r3
 800c438:	4b16      	ldr	r3, [pc, #88]	; (800c494 <BSP_LCD_DrawCircle+0x1d8>)
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	4916      	ldr	r1, [pc, #88]	; (800c498 <BSP_LCD_DrawCircle+0x1dc>)
 800c43e:	4613      	mov	r3, r2
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	4413      	add	r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	440b      	add	r3, r1
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	461a      	mov	r2, r3
 800c44c:	4621      	mov	r1, r4
 800c44e:	f000 f825 	bl	800c49c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	2b00      	cmp	r3, #0
 800c456:	da06      	bge.n	800c466 <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	009a      	lsls	r2, r3, #2
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	4413      	add	r3, r2
 800c460:	3306      	adds	r3, #6
 800c462:	617b      	str	r3, [r7, #20]
 800c464:	e00a      	b.n	800c47c <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800c466:	693a      	ldr	r2, [r7, #16]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	009a      	lsls	r2, r3, #2
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	4413      	add	r3, r2
 800c472:	330a      	adds	r3, #10
 800c474:	617b      	str	r3, [r7, #20]
      current_y--;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	3b01      	subs	r3, #1
 800c47a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	3301      	adds	r3, #1
 800c480:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800c482:	693a      	ldr	r2, [r7, #16]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	429a      	cmp	r2, r3
 800c488:	f67f af2b 	bls.w	800c2e2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800c48c:	bf00      	nop
 800c48e:	371c      	adds	r7, #28
 800c490:	46bd      	mov	sp, r7
 800c492:	bd90      	pop	{r4, r7, pc}
 800c494:	2000015c 	.word	0x2000015c
 800c498:	20000160 	.word	0x20000160

0800c49c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800c49c:	b5b0      	push	{r4, r5, r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	603a      	str	r2, [r7, #0]
 800c4a6:	80fb      	strh	r3, [r7, #6]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800c4ac:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <BSP_LCD_DrawPixel+0x88>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a1d      	ldr	r2, [pc, #116]	; (800c528 <BSP_LCD_DrawPixel+0x8c>)
 800c4b2:	2134      	movs	r1, #52	; 0x34
 800c4b4:	fb01 f303 	mul.w	r3, r1, r3
 800c4b8:	4413      	add	r3, r2
 800c4ba:	3348      	adds	r3, #72	; 0x48
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b02      	cmp	r3, #2
 800c4c0:	d116      	bne.n	800c4f0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800c4c2:	4b18      	ldr	r3, [pc, #96]	; (800c524 <BSP_LCD_DrawPixel+0x88>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a18      	ldr	r2, [pc, #96]	; (800c528 <BSP_LCD_DrawPixel+0x8c>)
 800c4c8:	2134      	movs	r1, #52	; 0x34
 800c4ca:	fb01 f303 	mul.w	r3, r1, r3
 800c4ce:	4413      	add	r3, r2
 800c4d0:	335c      	adds	r3, #92	; 0x5c
 800c4d2:	681c      	ldr	r4, [r3, #0]
 800c4d4:	88bd      	ldrh	r5, [r7, #4]
 800c4d6:	f7ff fc51 	bl	800bd7c <BSP_LCD_GetXSize>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	fb03 f205 	mul.w	r2, r3, r5
 800c4e0:	88fb      	ldrh	r3, [r7, #6]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	4423      	add	r3, r4
 800c4e8:	683a      	ldr	r2, [r7, #0]
 800c4ea:	b292      	uxth	r2, r2
 800c4ec:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800c4ee:	e015      	b.n	800c51c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800c4f0:	4b0c      	ldr	r3, [pc, #48]	; (800c524 <BSP_LCD_DrawPixel+0x88>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	4a0c      	ldr	r2, [pc, #48]	; (800c528 <BSP_LCD_DrawPixel+0x8c>)
 800c4f6:	2134      	movs	r1, #52	; 0x34
 800c4f8:	fb01 f303 	mul.w	r3, r1, r3
 800c4fc:	4413      	add	r3, r2
 800c4fe:	335c      	adds	r3, #92	; 0x5c
 800c500:	681c      	ldr	r4, [r3, #0]
 800c502:	88bd      	ldrh	r5, [r7, #4]
 800c504:	f7ff fc3a 	bl	800bd7c <BSP_LCD_GetXSize>
 800c508:	4603      	mov	r3, r0
 800c50a:	fb03 f205 	mul.w	r2, r3, r5
 800c50e:	88fb      	ldrh	r3, [r7, #6]
 800c510:	4413      	add	r3, r2
 800c512:	009b      	lsls	r3, r3, #2
 800c514:	4423      	add	r3, r4
 800c516:	461a      	mov	r2, r3
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	6013      	str	r3, [r2, #0]
}
 800c51c:	bf00      	nop
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bdb0      	pop	{r4, r5, r7, pc}
 800c524:	2000015c 	.word	0x2000015c
 800c528:	20000a9c 	.word	0x20000a9c

0800c52c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800c52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c530:	b086      	sub	sp, #24
 800c532:	af02      	add	r7, sp, #8
 800c534:	4604      	mov	r4, r0
 800c536:	4608      	mov	r0, r1
 800c538:	4611      	mov	r1, r2
 800c53a:	461a      	mov	r2, r3
 800c53c:	4623      	mov	r3, r4
 800c53e:	80fb      	strh	r3, [r7, #6]
 800c540:	4603      	mov	r3, r0
 800c542:	80bb      	strh	r3, [r7, #4]
 800c544:	460b      	mov	r3, r1
 800c546:	807b      	strh	r3, [r7, #2]
 800c548:	4613      	mov	r3, r2
 800c54a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800c550:	4b30      	ldr	r3, [pc, #192]	; (800c614 <BSP_LCD_FillRect+0xe8>)
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	4930      	ldr	r1, [pc, #192]	; (800c618 <BSP_LCD_FillRect+0xec>)
 800c556:	4613      	mov	r3, r2
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	4413      	add	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	440b      	add	r3, r1
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff fca2 	bl	800beac <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800c568:	4b2a      	ldr	r3, [pc, #168]	; (800c614 <BSP_LCD_FillRect+0xe8>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a2b      	ldr	r2, [pc, #172]	; (800c61c <BSP_LCD_FillRect+0xf0>)
 800c56e:	2134      	movs	r1, #52	; 0x34
 800c570:	fb01 f303 	mul.w	r3, r1, r3
 800c574:	4413      	add	r3, r2
 800c576:	3348      	adds	r3, #72	; 0x48
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	d114      	bne.n	800c5a8 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800c57e:	4b25      	ldr	r3, [pc, #148]	; (800c614 <BSP_LCD_FillRect+0xe8>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a26      	ldr	r2, [pc, #152]	; (800c61c <BSP_LCD_FillRect+0xf0>)
 800c584:	2134      	movs	r1, #52	; 0x34
 800c586:	fb01 f303 	mul.w	r3, r1, r3
 800c58a:	4413      	add	r3, r2
 800c58c:	335c      	adds	r3, #92	; 0x5c
 800c58e:	681c      	ldr	r4, [r3, #0]
 800c590:	f7ff fbf4 	bl	800bd7c <BSP_LCD_GetXSize>
 800c594:	4602      	mov	r2, r0
 800c596:	88bb      	ldrh	r3, [r7, #4]
 800c598:	fb03 f202 	mul.w	r2, r3, r2
 800c59c:	88fb      	ldrh	r3, [r7, #6]
 800c59e:	4413      	add	r3, r2
 800c5a0:	005b      	lsls	r3, r3, #1
 800c5a2:	4423      	add	r3, r4
 800c5a4:	60fb      	str	r3, [r7, #12]
 800c5a6:	e013      	b.n	800c5d0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800c5a8:	4b1a      	ldr	r3, [pc, #104]	; (800c614 <BSP_LCD_FillRect+0xe8>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a1b      	ldr	r2, [pc, #108]	; (800c61c <BSP_LCD_FillRect+0xf0>)
 800c5ae:	2134      	movs	r1, #52	; 0x34
 800c5b0:	fb01 f303 	mul.w	r3, r1, r3
 800c5b4:	4413      	add	r3, r2
 800c5b6:	335c      	adds	r3, #92	; 0x5c
 800c5b8:	681c      	ldr	r4, [r3, #0]
 800c5ba:	f7ff fbdf 	bl	800bd7c <BSP_LCD_GetXSize>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	88bb      	ldrh	r3, [r7, #4]
 800c5c2:	fb03 f202 	mul.w	r2, r3, r2
 800c5c6:	88fb      	ldrh	r3, [r7, #6]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4423      	add	r3, r4
 800c5ce:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800c5d0:	4b10      	ldr	r3, [pc, #64]	; (800c614 <BSP_LCD_FillRect+0xe8>)
 800c5d2:	681c      	ldr	r4, [r3, #0]
 800c5d4:	68fd      	ldr	r5, [r7, #12]
 800c5d6:	887e      	ldrh	r6, [r7, #2]
 800c5d8:	f8b7 8000 	ldrh.w	r8, [r7]
 800c5dc:	f7ff fbce 	bl	800bd7c <BSP_LCD_GetXSize>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	887b      	ldrh	r3, [r7, #2]
 800c5e4:	1ad1      	subs	r1, r2, r3
 800c5e6:	4b0b      	ldr	r3, [pc, #44]	; (800c614 <BSP_LCD_FillRect+0xe8>)
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	480b      	ldr	r0, [pc, #44]	; (800c618 <BSP_LCD_FillRect+0xec>)
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	005b      	lsls	r3, r3, #1
 800c5f0:	4413      	add	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4403      	add	r3, r0
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	9301      	str	r3, [sp, #4]
 800c5fa:	9100      	str	r1, [sp, #0]
 800c5fc:	4643      	mov	r3, r8
 800c5fe:	4632      	mov	r2, r6
 800c600:	4629      	mov	r1, r5
 800c602:	4620      	mov	r0, r4
 800c604:	f000 fa5a 	bl	800cabc <LL_FillBuffer>
}
 800c608:	bf00      	nop
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c612:	bf00      	nop
 800c614:	2000015c 	.word	0x2000015c
 800c618:	20000160 	.word	0x20000160
 800c61c:	20000a9c 	.word	0x20000a9c

0800c620 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	4603      	mov	r3, r0
 800c628:	80fb      	strh	r3, [r7, #6]
 800c62a:	460b      	mov	r3, r1
 800c62c:	80bb      	strh	r3, [r7, #4]
 800c62e:	4613      	mov	r3, r2
 800c630:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800c632:	887b      	ldrh	r3, [r7, #2]
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	f1c3 0303 	rsb	r3, r3, #3
 800c63a:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 800c63c:	2300      	movs	r3, #0
 800c63e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800c640:	887b      	ldrh	r3, [r7, #2]
 800c642:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800c644:	4b44      	ldr	r3, [pc, #272]	; (800c758 <BSP_LCD_FillCircle+0x138>)
 800c646:	681a      	ldr	r2, [r3, #0]
 800c648:	4944      	ldr	r1, [pc, #272]	; (800c75c <BSP_LCD_FillCircle+0x13c>)
 800c64a:	4613      	mov	r3, r2
 800c64c:	005b      	lsls	r3, r3, #1
 800c64e:	4413      	add	r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	440b      	add	r3, r1
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4618      	mov	r0, r3
 800c658:	f7ff fc28 	bl	800beac <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 800c65c:	e061      	b.n	800c722 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d021      	beq.n	800c6a8 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	b29b      	uxth	r3, r3
 800c668:	88fa      	ldrh	r2, [r7, #6]
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	b298      	uxth	r0, r3
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	b29a      	uxth	r2, r3
 800c672:	88bb      	ldrh	r3, [r7, #4]
 800c674:	4413      	add	r3, r2
 800c676:	b299      	uxth	r1, r3
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	005b      	lsls	r3, r3, #1
 800c67e:	b29b      	uxth	r3, r3
 800c680:	461a      	mov	r2, r3
 800c682:	f7ff fdbd 	bl	800c200 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	b29b      	uxth	r3, r3
 800c68a:	88fa      	ldrh	r2, [r7, #6]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	b298      	uxth	r0, r3
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	b29b      	uxth	r3, r3
 800c694:	88ba      	ldrh	r2, [r7, #4]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	b299      	uxth	r1, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	005b      	lsls	r3, r3, #1
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	f7ff fdac 	bl	800c200 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d021      	beq.n	800c6f2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	88fa      	ldrh	r2, [r7, #6]
 800c6b4:	1ad3      	subs	r3, r2, r3
 800c6b6:	b298      	uxth	r0, r3
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	88ba      	ldrh	r2, [r7, #4]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	b299      	uxth	r1, r3
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	f7ff fd98 	bl	800c200 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	88fa      	ldrh	r2, [r7, #6]
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	b298      	uxth	r0, r3
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	88bb      	ldrh	r3, [r7, #4]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	b299      	uxth	r1, r3
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	005b      	lsls	r3, r3, #1
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	f7ff fd87 	bl	800c200 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	da06      	bge.n	800c706 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	009a      	lsls	r2, r3, #2
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	4413      	add	r3, r2
 800c700:	3306      	adds	r3, #6
 800c702:	617b      	str	r3, [r7, #20]
 800c704:	e00a      	b.n	800c71c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800c706:	693a      	ldr	r2, [r7, #16]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	1ad3      	subs	r3, r2, r3
 800c70c:	009a      	lsls	r2, r3, #2
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	4413      	add	r3, r2
 800c712:	330a      	adds	r3, #10
 800c714:	617b      	str	r3, [r7, #20]
      current_y--;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3b01      	subs	r3, #1
 800c71a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	3301      	adds	r3, #1
 800c720:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	429a      	cmp	r2, r3
 800c728:	d999      	bls.n	800c65e <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800c72a:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <BSP_LCD_FillCircle+0x138>)
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	490b      	ldr	r1, [pc, #44]	; (800c75c <BSP_LCD_FillCircle+0x13c>)
 800c730:	4613      	mov	r3, r2
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	4413      	add	r3, r2
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	440b      	add	r3, r1
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff fbb5 	bl	800beac <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800c742:	887a      	ldrh	r2, [r7, #2]
 800c744:	88b9      	ldrh	r1, [r7, #4]
 800c746:	88fb      	ldrh	r3, [r7, #6]
 800c748:	4618      	mov	r0, r3
 800c74a:	f7ff fdb7 	bl	800c2bc <BSP_LCD_DrawCircle>
}
 800c74e:	bf00      	nop
 800c750:	3718      	adds	r7, #24
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	2000015c 	.word	0x2000015c
 800c75c:	20000160 	.word	0x20000160

0800c760 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b090      	sub	sp, #64	; 0x40
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800c76a:	4b64      	ldr	r3, [pc, #400]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c76e:	4a63      	ldr	r2, [pc, #396]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c774:	6453      	str	r3, [r2, #68]	; 0x44
 800c776:	4b61      	ldr	r3, [pc, #388]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c77a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c77e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c780:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800c782:	4b5e      	ldr	r3, [pc, #376]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c786:	4a5d      	ldr	r2, [pc, #372]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c78c:	6313      	str	r3, [r2, #48]	; 0x30
 800c78e:	4b5b      	ldr	r3, [pc, #364]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c792:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c796:	627b      	str	r3, [r7, #36]	; 0x24
 800c798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c79a:	4b58      	ldr	r3, [pc, #352]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c79e:	4a57      	ldr	r2, [pc, #348]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7a0:	f043 0310 	orr.w	r3, r3, #16
 800c7a4:	6313      	str	r3, [r2, #48]	; 0x30
 800c7a6:	4b55      	ldr	r3, [pc, #340]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7aa:	f003 0310 	and.w	r3, r3, #16
 800c7ae:	623b      	str	r3, [r7, #32]
 800c7b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c7b2:	4b52      	ldr	r3, [pc, #328]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b6:	4a51      	ldr	r2, [pc, #324]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7bc:	6313      	str	r3, [r2, #48]	; 0x30
 800c7be:	4b4f      	ldr	r3, [pc, #316]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7c6:	61fb      	str	r3, [r7, #28]
 800c7c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800c7ca:	4b4c      	ldr	r3, [pc, #304]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ce:	4a4b      	ldr	r2, [pc, #300]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7d4:	6313      	str	r3, [r2, #48]	; 0x30
 800c7d6:	4b49      	ldr	r3, [pc, #292]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7de:	61bb      	str	r3, [r7, #24]
 800c7e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800c7e2:	4b46      	ldr	r3, [pc, #280]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e6:	4a45      	ldr	r2, [pc, #276]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c7ec:	6313      	str	r3, [r2, #48]	; 0x30
 800c7ee:	4b43      	ldr	r3, [pc, #268]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c7f6:	617b      	str	r3, [r7, #20]
 800c7f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800c7fa:	4b40      	ldr	r3, [pc, #256]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7fe:	4a3f      	ldr	r2, [pc, #252]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c804:	6313      	str	r3, [r2, #48]	; 0x30
 800c806:	4b3d      	ldr	r3, [pc, #244]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c80e:	613b      	str	r3, [r7, #16]
 800c810:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800c812:	4b3a      	ldr	r3, [pc, #232]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c816:	4a39      	ldr	r2, [pc, #228]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c81c:	6313      	str	r3, [r2, #48]	; 0x30
 800c81e:	4b37      	ldr	r3, [pc, #220]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800c82a:	4b34      	ldr	r3, [pc, #208]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c82e:	4a33      	ldr	r2, [pc, #204]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c830:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c834:	6313      	str	r3, [r2, #48]	; 0x30
 800c836:	4b31      	ldr	r3, [pc, #196]	; (800c8fc <BSP_LCD_MspInit+0x19c>)
 800c838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c83a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c83e:	60bb      	str	r3, [r7, #8]
 800c840:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800c842:	2310      	movs	r3, #16
 800c844:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c846:	2302      	movs	r3, #2
 800c848:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c84a:	2300      	movs	r3, #0
 800c84c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800c84e:	2302      	movs	r3, #2
 800c850:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800c852:	230e      	movs	r3, #14
 800c854:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800c856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c85a:	4619      	mov	r1, r3
 800c85c:	4828      	ldr	r0, [pc, #160]	; (800c900 <BSP_LCD_MspInit+0x1a0>)
 800c85e:	f7f8 fad7 	bl	8004e10 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800c862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c866:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c868:	2302      	movs	r3, #2
 800c86a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800c86c:	2309      	movs	r3, #9
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c874:	4619      	mov	r1, r3
 800c876:	4823      	ldr	r0, [pc, #140]	; (800c904 <BSP_LCD_MspInit+0x1a4>)
 800c878:	f7f8 faca 	bl	8004e10 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800c87c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800c880:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c882:	2302      	movs	r3, #2
 800c884:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800c886:	230e      	movs	r3, #14
 800c888:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800c88a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c88e:	4619      	mov	r1, r3
 800c890:	481d      	ldr	r0, [pc, #116]	; (800c908 <BSP_LCD_MspInit+0x1a8>)
 800c892:	f7f8 fabd 	bl	8004e10 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800c896:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800c89a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c89c:	2302      	movs	r3, #2
 800c89e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800c8a0:	230e      	movs	r3, #14
 800c8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800c8a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	4818      	ldr	r0, [pc, #96]	; (800c90c <BSP_LCD_MspInit+0x1ac>)
 800c8ac:	f7f8 fab0 	bl	8004e10 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800c8b0:	23f7      	movs	r3, #247	; 0xf7
 800c8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c8b4:	2302      	movs	r3, #2
 800c8b6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800c8b8:	230e      	movs	r3, #14
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800c8bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4813      	ldr	r0, [pc, #76]	; (800c910 <BSP_LCD_MspInit+0x1b0>)
 800c8c4:	f7f8 faa4 	bl	8004e10 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800c8c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800c8d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	480b      	ldr	r0, [pc, #44]	; (800c908 <BSP_LCD_MspInit+0x1a8>)
 800c8da:	f7f8 fa99 	bl	8004e10 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800c8de:	2308      	movs	r3, #8
 800c8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800c8e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	4808      	ldr	r0, [pc, #32]	; (800c910 <BSP_LCD_MspInit+0x1b0>)
 800c8ee:	f7f8 fa8f 	bl	8004e10 <HAL_GPIO_Init>
}
 800c8f2:	bf00      	nop
 800c8f4:	3740      	adds	r7, #64	; 0x40
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	40023800 	.word	0x40023800
 800c900:	40021000 	.word	0x40021000
 800c904:	40021800 	.word	0x40021800
 800c908:	40022000 	.word	0x40022000
 800c90c:	40022400 	.word	0x40022400
 800c910:	40022800 	.word	0x40022800

0800c914 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800c91e:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <BSP_LCD_ClockConfig+0x34>)
 800c920:	2208      	movs	r2, #8
 800c922:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800c924:	4b08      	ldr	r3, [pc, #32]	; (800c948 <BSP_LCD_ClockConfig+0x34>)
 800c926:	22c0      	movs	r2, #192	; 0xc0
 800c928:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800c92a:	4b07      	ldr	r3, [pc, #28]	; (800c948 <BSP_LCD_ClockConfig+0x34>)
 800c92c:	2205      	movs	r2, #5
 800c92e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800c930:	4b05      	ldr	r3, [pc, #20]	; (800c948 <BSP_LCD_ClockConfig+0x34>)
 800c932:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c936:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800c938:	4803      	ldr	r0, [pc, #12]	; (800c948 <BSP_LCD_ClockConfig+0x34>)
 800c93a:	f7fa fc4d 	bl	80071d8 <HAL_RCCEx_PeriphCLKConfig>
}
 800c93e:	bf00      	nop
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	20000178 	.word	0x20000178

0800c94c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b088      	sub	sp, #32
 800c950:	af00      	add	r7, sp, #0
 800c952:	4603      	mov	r3, r0
 800c954:	603a      	str	r2, [r7, #0]
 800c956:	80fb      	strh	r3, [r7, #6]
 800c958:	460b      	mov	r3, r1
 800c95a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	61fb      	str	r3, [r7, #28]
 800c960:	2300      	movs	r3, #0
 800c962:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800c964:	4b53      	ldr	r3, [pc, #332]	; (800cab4 <DrawChar+0x168>)
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	4953      	ldr	r1, [pc, #332]	; (800cab8 <DrawChar+0x16c>)
 800c96a:	4613      	mov	r3, r2
 800c96c:	005b      	lsls	r3, r3, #1
 800c96e:	4413      	add	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	440b      	add	r3, r1
 800c974:	3308      	adds	r3, #8
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	88db      	ldrh	r3, [r3, #6]
 800c97a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800c97c:	4b4d      	ldr	r3, [pc, #308]	; (800cab4 <DrawChar+0x168>)
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	494d      	ldr	r1, [pc, #308]	; (800cab8 <DrawChar+0x16c>)
 800c982:	4613      	mov	r3, r2
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	4413      	add	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	440b      	add	r3, r1
 800c98c:	3308      	adds	r3, #8
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	889b      	ldrh	r3, [r3, #4]
 800c992:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800c994:	8a3b      	ldrh	r3, [r7, #16]
 800c996:	3307      	adds	r3, #7
 800c998:	2b00      	cmp	r3, #0
 800c99a:	da00      	bge.n	800c99e <DrawChar+0x52>
 800c99c:	3307      	adds	r3, #7
 800c99e:	10db      	asrs	r3, r3, #3
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	00db      	lsls	r3, r3, #3
 800c9a4:	b2da      	uxtb	r2, r3
 800c9a6:	8a3b      	ldrh	r3, [r7, #16]
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	61fb      	str	r3, [r7, #28]
 800c9b2:	e076      	b.n	800caa2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800c9b4:	8a3b      	ldrh	r3, [r7, #16]
 800c9b6:	3307      	adds	r3, #7
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	da00      	bge.n	800c9be <DrawChar+0x72>
 800c9bc:	3307      	adds	r3, #7
 800c9be:	10db      	asrs	r3, r3, #3
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	fb03 f302 	mul.w	r3, r3, r2
 800c9c8:	683a      	ldr	r2, [r7, #0]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800c9ce:	8a3b      	ldrh	r3, [r7, #16]
 800c9d0:	3307      	adds	r3, #7
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	da00      	bge.n	800c9d8 <DrawChar+0x8c>
 800c9d6:	3307      	adds	r3, #7
 800c9d8:	10db      	asrs	r3, r3, #3
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d002      	beq.n	800c9e4 <DrawChar+0x98>
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d004      	beq.n	800c9ec <DrawChar+0xa0>
 800c9e2:	e00c      	b.n	800c9fe <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	617b      	str	r3, [r7, #20]
      break;
 800c9ea:	e016      	b.n	800ca1a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	021b      	lsls	r3, r3, #8
 800c9f2:	68ba      	ldr	r2, [r7, #8]
 800c9f4:	3201      	adds	r2, #1
 800c9f6:	7812      	ldrb	r2, [r2, #0]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	617b      	str	r3, [r7, #20]
      break;
 800c9fc:	e00d      	b.n	800ca1a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	041a      	lsls	r2, r3, #16
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	3301      	adds	r3, #1
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	021b      	lsls	r3, r3, #8
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	3202      	adds	r2, #2
 800ca12:	7812      	ldrb	r2, [r2, #0]
 800ca14:	4313      	orrs	r3, r2
 800ca16:	617b      	str	r3, [r7, #20]
      break;
 800ca18:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	61bb      	str	r3, [r7, #24]
 800ca1e:	e036      	b.n	800ca8e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800ca20:	8a3a      	ldrh	r2, [r7, #16]
 800ca22:	69bb      	ldr	r3, [r7, #24]
 800ca24:	1ad2      	subs	r2, r2, r3
 800ca26:	7bfb      	ldrb	r3, [r7, #15]
 800ca28:	4413      	add	r3, r2
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca32:	461a      	mov	r2, r3
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	4013      	ands	r3, r2
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d012      	beq.n	800ca62 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	88fb      	ldrh	r3, [r7, #6]
 800ca42:	4413      	add	r3, r2
 800ca44:	b298      	uxth	r0, r3
 800ca46:	4b1b      	ldr	r3, [pc, #108]	; (800cab4 <DrawChar+0x168>)
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	491b      	ldr	r1, [pc, #108]	; (800cab8 <DrawChar+0x16c>)
 800ca4c:	4613      	mov	r3, r2
 800ca4e:	005b      	lsls	r3, r3, #1
 800ca50:	4413      	add	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	440b      	add	r3, r1
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	88bb      	ldrh	r3, [r7, #4]
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	f7ff fd1e 	bl	800c49c <BSP_LCD_DrawPixel>
 800ca60:	e012      	b.n	800ca88 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	88fb      	ldrh	r3, [r7, #6]
 800ca68:	4413      	add	r3, r2
 800ca6a:	b298      	uxth	r0, r3
 800ca6c:	4b11      	ldr	r3, [pc, #68]	; (800cab4 <DrawChar+0x168>)
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	4911      	ldr	r1, [pc, #68]	; (800cab8 <DrawChar+0x16c>)
 800ca72:	4613      	mov	r3, r2
 800ca74:	005b      	lsls	r3, r3, #1
 800ca76:	4413      	add	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	440b      	add	r3, r1
 800ca7c:	3304      	adds	r3, #4
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	88bb      	ldrh	r3, [r7, #4]
 800ca82:	4619      	mov	r1, r3
 800ca84:	f7ff fd0a 	bl	800c49c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	61bb      	str	r3, [r7, #24]
 800ca8e:	8a3b      	ldrh	r3, [r7, #16]
 800ca90:	69ba      	ldr	r2, [r7, #24]
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d3c4      	bcc.n	800ca20 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800ca96:	88bb      	ldrh	r3, [r7, #4]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	61fb      	str	r3, [r7, #28]
 800caa2:	8a7b      	ldrh	r3, [r7, #18]
 800caa4:	69fa      	ldr	r2, [r7, #28]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d384      	bcc.n	800c9b4 <DrawChar+0x68>
  }
}
 800caaa:	bf00      	nop
 800caac:	3720      	adds	r7, #32
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	2000015c 	.word	0x2000015c
 800cab8:	20000160 	.word	0x20000160

0800cabc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af02      	add	r7, sp, #8
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
 800cac8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800caca:	4b1e      	ldr	r3, [pc, #120]	; (800cb44 <LL_FillBuffer+0x88>)
 800cacc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800cad0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800cad2:	4b1d      	ldr	r3, [pc, #116]	; (800cb48 <LL_FillBuffer+0x8c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a1d      	ldr	r2, [pc, #116]	; (800cb4c <LL_FillBuffer+0x90>)
 800cad8:	2134      	movs	r1, #52	; 0x34
 800cada:	fb01 f303 	mul.w	r3, r1, r3
 800cade:	4413      	add	r3, r2
 800cae0:	3348      	adds	r3, #72	; 0x48
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d103      	bne.n	800caf0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800cae8:	4b16      	ldr	r3, [pc, #88]	; (800cb44 <LL_FillBuffer+0x88>)
 800caea:	2202      	movs	r2, #2
 800caec:	609a      	str	r2, [r3, #8]
 800caee:	e002      	b.n	800caf6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800caf0:	4b14      	ldr	r3, [pc, #80]	; (800cb44 <LL_FillBuffer+0x88>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800caf6:	4a13      	ldr	r2, [pc, #76]	; (800cb44 <LL_FillBuffer+0x88>)
 800caf8:	69bb      	ldr	r3, [r7, #24]
 800cafa:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800cafc:	4b11      	ldr	r3, [pc, #68]	; (800cb44 <LL_FillBuffer+0x88>)
 800cafe:	4a14      	ldr	r2, [pc, #80]	; (800cb50 <LL_FillBuffer+0x94>)
 800cb00:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800cb02:	4810      	ldr	r0, [pc, #64]	; (800cb44 <LL_FillBuffer+0x88>)
 800cb04:	f7f7 fde8 	bl	80046d8 <HAL_DMA2D_Init>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d115      	bne.n	800cb3a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800cb0e:	68f9      	ldr	r1, [r7, #12]
 800cb10:	480c      	ldr	r0, [pc, #48]	; (800cb44 <LL_FillBuffer+0x88>)
 800cb12:	f7f8 f84f 	bl	8004bb4 <HAL_DMA2D_ConfigLayer>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10e      	bne.n	800cb3a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800cb1c:	68ba      	ldr	r2, [r7, #8]
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	69f9      	ldr	r1, [r7, #28]
 800cb26:	4807      	ldr	r0, [pc, #28]	; (800cb44 <LL_FillBuffer+0x88>)
 800cb28:	f7f7 fe20 	bl	800476c <HAL_DMA2D_Start>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d103      	bne.n	800cb3a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800cb32:	210a      	movs	r1, #10
 800cb34:	4803      	ldr	r0, [pc, #12]	; (800cb44 <LL_FillBuffer+0x88>)
 800cb36:	f7f7 fe44 	bl	80047c2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800cb3a:	bf00      	nop
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	2000011c 	.word	0x2000011c
 800cb48:	2000015c 	.word	0x2000015c
 800cb4c:	20000a9c 	.word	0x20000a9c
 800cb50:	4002b000 	.word	0x4002b000

0800cb54 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800cb54:	b580      	push	{r7, lr}
 800cb56:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800cb58:	4b29      	ldr	r3, [pc, #164]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cb5a:	4a2a      	ldr	r2, [pc, #168]	; (800cc04 <BSP_SDRAM_Init+0xb0>)
 800cb5c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800cb5e:	4b2a      	ldr	r3, [pc, #168]	; (800cc08 <BSP_SDRAM_Init+0xb4>)
 800cb60:	2202      	movs	r2, #2
 800cb62:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800cb64:	4b28      	ldr	r3, [pc, #160]	; (800cc08 <BSP_SDRAM_Init+0xb4>)
 800cb66:	2207      	movs	r2, #7
 800cb68:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800cb6a:	4b27      	ldr	r3, [pc, #156]	; (800cc08 <BSP_SDRAM_Init+0xb4>)
 800cb6c:	2204      	movs	r2, #4
 800cb6e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800cb70:	4b25      	ldr	r3, [pc, #148]	; (800cc08 <BSP_SDRAM_Init+0xb4>)
 800cb72:	2207      	movs	r2, #7
 800cb74:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800cb76:	4b24      	ldr	r3, [pc, #144]	; (800cc08 <BSP_SDRAM_Init+0xb4>)
 800cb78:	2202      	movs	r2, #2
 800cb7a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800cb7c:	4b22      	ldr	r3, [pc, #136]	; (800cc08 <BSP_SDRAM_Init+0xb4>)
 800cb7e:	2202      	movs	r2, #2
 800cb80:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800cb82:	4b21      	ldr	r3, [pc, #132]	; (800cc08 <BSP_SDRAM_Init+0xb4>)
 800cb84:	2202      	movs	r2, #2
 800cb86:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800cb88:	4b1d      	ldr	r3, [pc, #116]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800cb8e:	4b1c      	ldr	r3, [pc, #112]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800cb94:	4b1a      	ldr	r3, [pc, #104]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cb96:	2204      	movs	r2, #4
 800cb98:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800cb9a:	4b19      	ldr	r3, [pc, #100]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cb9c:	2210      	movs	r2, #16
 800cb9e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800cba0:	4b17      	ldr	r3, [pc, #92]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cba2:	2240      	movs	r2, #64	; 0x40
 800cba4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800cba6:	4b16      	ldr	r3, [pc, #88]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cbac:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800cbae:	4b14      	ldr	r3, [pc, #80]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800cbb4:	4b12      	ldr	r3, [pc, #72]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cbb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbba:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800cbbc:	4b10      	ldr	r3, [pc, #64]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cbbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cbc2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800cbc4:	4b0e      	ldr	r3, [pc, #56]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800cbca:	2100      	movs	r1, #0
 800cbcc:	480c      	ldr	r0, [pc, #48]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cbce:	f000 f87f 	bl	800ccd0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800cbd2:	490d      	ldr	r1, [pc, #52]	; (800cc08 <BSP_SDRAM_Init+0xb4>)
 800cbd4:	480a      	ldr	r0, [pc, #40]	; (800cc00 <BSP_SDRAM_Init+0xac>)
 800cbd6:	f7fc faff 	bl	80091d8 <HAL_SDRAM_Init>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d003      	beq.n	800cbe8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800cbe0:	4b0a      	ldr	r3, [pc, #40]	; (800cc0c <BSP_SDRAM_Init+0xb8>)
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	701a      	strb	r2, [r3, #0]
 800cbe6:	e002      	b.n	800cbee <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800cbe8:	4b08      	ldr	r3, [pc, #32]	; (800cc0c <BSP_SDRAM_Init+0xb8>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800cbee:	f240 6003 	movw	r0, #1539	; 0x603
 800cbf2:	f000 f80d 	bl	800cc10 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800cbf6:	4b05      	ldr	r3, [pc, #20]	; (800cc0c <BSP_SDRAM_Init+0xb8>)
 800cbf8:	781b      	ldrb	r3, [r3, #0]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	20000b44 	.word	0x20000b44
 800cc04:	a0000140 	.word	0xa0000140
 800cc08:	200001fc 	.word	0x200001fc
 800cc0c:	20000014 	.word	0x20000014

0800cc10 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800cc1c:	4b2a      	ldr	r3, [pc, #168]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc1e:	2201      	movs	r2, #1
 800cc20:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800cc22:	4b29      	ldr	r3, [pc, #164]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc24:	2210      	movs	r2, #16
 800cc26:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800cc28:	4b27      	ldr	r3, [pc, #156]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800cc2e:	4b26      	ldr	r3, [pc, #152]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800cc34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc38:	4923      	ldr	r1, [pc, #140]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc3a:	4824      	ldr	r0, [pc, #144]	; (800cccc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800cc3c:	f7fc fb00 	bl	8009240 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800cc40:	2001      	movs	r0, #1
 800cc42:	f7f6 ff87 	bl	8003b54 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800cc46:	4b20      	ldr	r3, [pc, #128]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc48:	2202      	movs	r2, #2
 800cc4a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800cc4c:	4b1e      	ldr	r3, [pc, #120]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc4e:	2210      	movs	r2, #16
 800cc50:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800cc52:	4b1d      	ldr	r3, [pc, #116]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc54:	2201      	movs	r2, #1
 800cc56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800cc58:	4b1b      	ldr	r3, [pc, #108]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800cc5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc62:	4919      	ldr	r1, [pc, #100]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc64:	4819      	ldr	r0, [pc, #100]	; (800cccc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800cc66:	f7fc faeb 	bl	8009240 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800cc6a:	4b17      	ldr	r3, [pc, #92]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc6c:	2203      	movs	r2, #3
 800cc6e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800cc70:	4b15      	ldr	r3, [pc, #84]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc72:	2210      	movs	r2, #16
 800cc74:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800cc76:	4b14      	ldr	r3, [pc, #80]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc78:	2208      	movs	r2, #8
 800cc7a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800cc7c:	4b12      	ldr	r3, [pc, #72]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800cc82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc86:	4910      	ldr	r1, [pc, #64]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc88:	4810      	ldr	r0, [pc, #64]	; (800cccc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800cc8a:	f7fc fad9 	bl	8009240 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800cc8e:	f44f 7308 	mov.w	r3, #544	; 0x220
 800cc92:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800cc94:	4b0c      	ldr	r3, [pc, #48]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc96:	2204      	movs	r2, #4
 800cc98:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800cc9a:	4b0b      	ldr	r3, [pc, #44]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cc9c:	2210      	movs	r2, #16
 800cc9e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800cca0:	4b09      	ldr	r3, [pc, #36]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800cca2:	2201      	movs	r2, #1
 800cca4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	4a07      	ldr	r2, [pc, #28]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ccaa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800ccac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ccb0:	4905      	ldr	r1, [pc, #20]	; (800ccc8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800ccb2:	4806      	ldr	r0, [pc, #24]	; (800cccc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ccb4:	f7fc fac4 	bl	8009240 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	4804      	ldr	r0, [pc, #16]	; (800cccc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800ccbc:	f7fc faeb 	bl	8009296 <HAL_SDRAM_ProgramRefreshRate>
}
 800ccc0:	bf00      	nop
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	20000218 	.word	0x20000218
 800cccc:	20000b44 	.word	0x20000b44

0800ccd0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b090      	sub	sp, #64	; 0x40
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800ccda:	4b70      	ldr	r3, [pc, #448]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800ccdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccde:	4a6f      	ldr	r2, [pc, #444]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cce0:	f043 0301 	orr.w	r3, r3, #1
 800cce4:	6393      	str	r3, [r2, #56]	; 0x38
 800cce6:	4b6d      	ldr	r3, [pc, #436]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccea:	f003 0301 	and.w	r3, r3, #1
 800ccee:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800ccf2:	4b6a      	ldr	r3, [pc, #424]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800ccf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf6:	4a69      	ldr	r2, [pc, #420]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800ccf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ccfc:	6313      	str	r3, [r2, #48]	; 0x30
 800ccfe:	4b67      	ldr	r3, [pc, #412]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd06:	627b      	str	r3, [r7, #36]	; 0x24
 800cd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cd0a:	4b64      	ldr	r3, [pc, #400]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd0e:	4a63      	ldr	r2, [pc, #396]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd10:	f043 0304 	orr.w	r3, r3, #4
 800cd14:	6313      	str	r3, [r2, #48]	; 0x30
 800cd16:	4b61      	ldr	r3, [pc, #388]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd1a:	f003 0304 	and.w	r3, r3, #4
 800cd1e:	623b      	str	r3, [r7, #32]
 800cd20:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cd22:	4b5e      	ldr	r3, [pc, #376]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd26:	4a5d      	ldr	r2, [pc, #372]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd28:	f043 0308 	orr.w	r3, r3, #8
 800cd2c:	6313      	str	r3, [r2, #48]	; 0x30
 800cd2e:	4b5b      	ldr	r3, [pc, #364]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd32:	f003 0308 	and.w	r3, r3, #8
 800cd36:	61fb      	str	r3, [r7, #28]
 800cd38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800cd3a:	4b58      	ldr	r3, [pc, #352]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd3e:	4a57      	ldr	r2, [pc, #348]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd40:	f043 0310 	orr.w	r3, r3, #16
 800cd44:	6313      	str	r3, [r2, #48]	; 0x30
 800cd46:	4b55      	ldr	r3, [pc, #340]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4a:	f003 0310 	and.w	r3, r3, #16
 800cd4e:	61bb      	str	r3, [r7, #24]
 800cd50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800cd52:	4b52      	ldr	r3, [pc, #328]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd56:	4a51      	ldr	r2, [pc, #324]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd58:	f043 0320 	orr.w	r3, r3, #32
 800cd5c:	6313      	str	r3, [r2, #48]	; 0x30
 800cd5e:	4b4f      	ldr	r3, [pc, #316]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd62:	f003 0320 	and.w	r3, r3, #32
 800cd66:	617b      	str	r3, [r7, #20]
 800cd68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800cd6a:	4b4c      	ldr	r3, [pc, #304]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd6e:	4a4b      	ldr	r2, [pc, #300]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd74:	6313      	str	r3, [r2, #48]	; 0x30
 800cd76:	4b49      	ldr	r3, [pc, #292]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd7e:	613b      	str	r3, [r7, #16]
 800cd80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cd82:	4b46      	ldr	r3, [pc, #280]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd86:	4a45      	ldr	r2, [pc, #276]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd8c:	6313      	str	r3, [r2, #48]	; 0x30
 800cd8e:	4b43      	ldr	r3, [pc, #268]	; (800ce9c <BSP_SDRAM_MspInit+0x1cc>)
 800cd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd96:	60fb      	str	r3, [r7, #12]
 800cd98:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800cd9a:	2302      	movs	r3, #2
 800cd9c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800cd9e:	2301      	movs	r3, #1
 800cda0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800cda2:	2302      	movs	r3, #2
 800cda4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800cda6:	230c      	movs	r3, #12
 800cda8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800cdaa:	2308      	movs	r3, #8
 800cdac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800cdae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	483a      	ldr	r0, [pc, #232]	; (800cea0 <BSP_SDRAM_MspInit+0x1d0>)
 800cdb6:	f7f8 f82b 	bl	8004e10 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800cdba:	f24c 7303 	movw	r3, #50947	; 0xc703
 800cdbe:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800cdc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4837      	ldr	r0, [pc, #220]	; (800cea4 <BSP_SDRAM_MspInit+0x1d4>)
 800cdc8:	f7f8 f822 	bl	8004e10 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800cdcc:	f64f 7383 	movw	r3, #65411	; 0xff83
 800cdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800cdd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	4833      	ldr	r0, [pc, #204]	; (800cea8 <BSP_SDRAM_MspInit+0x1d8>)
 800cdda:	f7f8 f819 	bl	8004e10 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800cdde:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800cde2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800cde4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cde8:	4619      	mov	r1, r3
 800cdea:	4830      	ldr	r0, [pc, #192]	; (800ceac <BSP_SDRAM_MspInit+0x1dc>)
 800cdec:	f7f8 f810 	bl	8004e10 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800cdf0:	f248 1333 	movw	r3, #33075	; 0x8133
 800cdf4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800cdf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	482c      	ldr	r0, [pc, #176]	; (800ceb0 <BSP_SDRAM_MspInit+0x1e0>)
 800cdfe:	f7f8 f807 	bl	8004e10 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800ce02:	2328      	movs	r3, #40	; 0x28
 800ce04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800ce06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	4829      	ldr	r0, [pc, #164]	; (800ceb4 <BSP_SDRAM_MspInit+0x1e4>)
 800ce0e:	f7f7 ffff 	bl	8004e10 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800ce12:	4b29      	ldr	r3, [pc, #164]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce14:	2200      	movs	r2, #0
 800ce16:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800ce18:	4b27      	ldr	r3, [pc, #156]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce1a:	2280      	movs	r2, #128	; 0x80
 800ce1c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800ce1e:	4b26      	ldr	r3, [pc, #152]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce24:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800ce26:	4b24      	ldr	r3, [pc, #144]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce2c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ce2e:	4b22      	ldr	r3, [pc, #136]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ce34:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800ce36:	4b20      	ldr	r3, [pc, #128]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ce3c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800ce3e:	4b1e      	ldr	r3, [pc, #120]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce40:	2200      	movs	r2, #0
 800ce42:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800ce44:	4b1c      	ldr	r3, [pc, #112]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ce4a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800ce4c:	4b1a      	ldr	r3, [pc, #104]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce4e:	2200      	movs	r2, #0
 800ce50:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800ce52:	4b19      	ldr	r3, [pc, #100]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce54:	2203      	movs	r2, #3
 800ce56:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800ce58:	4b17      	ldr	r3, [pc, #92]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800ce5e:	4b16      	ldr	r3, [pc, #88]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800ce64:	4b14      	ldr	r3, [pc, #80]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce66:	4a15      	ldr	r2, [pc, #84]	; (800cebc <BSP_SDRAM_MspInit+0x1ec>)
 800ce68:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4a12      	ldr	r2, [pc, #72]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce6e:	631a      	str	r2, [r3, #48]	; 0x30
 800ce70:	4a11      	ldr	r2, [pc, #68]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800ce76:	4810      	ldr	r0, [pc, #64]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce78:	f7f7 fb20 	bl	80044bc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800ce7c:	480e      	ldr	r0, [pc, #56]	; (800ceb8 <BSP_SDRAM_MspInit+0x1e8>)
 800ce7e:	f7f7 fa6f 	bl	8004360 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800ce82:	2200      	movs	r2, #0
 800ce84:	210f      	movs	r1, #15
 800ce86:	2038      	movs	r0, #56	; 0x38
 800ce88:	f7f7 f9c6 	bl	8004218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800ce8c:	2038      	movs	r0, #56	; 0x38
 800ce8e:	f7f7 f9df 	bl	8004250 <HAL_NVIC_EnableIRQ>
}
 800ce92:	bf00      	nop
 800ce94:	3740      	adds	r7, #64	; 0x40
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	40023800 	.word	0x40023800
 800cea0:	40020800 	.word	0x40020800
 800cea4:	40020c00 	.word	0x40020c00
 800cea8:	40021000 	.word	0x40021000
 800ceac:	40021400 	.word	0x40021400
 800ceb0:	40021800 	.word	0x40021800
 800ceb4:	40021c00 	.word	0x40021c00
 800ceb8:	20000228 	.word	0x20000228
 800cebc:	40026410 	.word	0x40026410

0800cec0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	4603      	mov	r3, r0
 800cec8:	460a      	mov	r2, r1
 800ceca:	80fb      	strh	r3, [r7, #6]
 800cecc:	4613      	mov	r3, r2
 800cece:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800ced0:	2300      	movs	r3, #0
 800ced2:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800ced4:	4a14      	ldr	r2, [pc, #80]	; (800cf28 <BSP_TS_Init+0x68>)
 800ced6:	88fb      	ldrh	r3, [r7, #6]
 800ced8:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800ceda:	4a14      	ldr	r2, [pc, #80]	; (800cf2c <BSP_TS_Init+0x6c>)
 800cedc:	88bb      	ldrh	r3, [r7, #4]
 800cede:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800cee0:	4b13      	ldr	r3, [pc, #76]	; (800cf30 <BSP_TS_Init+0x70>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2070      	movs	r0, #112	; 0x70
 800cee6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800cee8:	4b11      	ldr	r3, [pc, #68]	; (800cf30 <BSP_TS_Init+0x70>)
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	2070      	movs	r0, #112	; 0x70
 800ceee:	4798      	blx	r3
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b51      	cmp	r3, #81	; 0x51
 800cef4:	d111      	bne.n	800cf1a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800cef6:	4b0f      	ldr	r3, [pc, #60]	; (800cf34 <BSP_TS_Init+0x74>)
 800cef8:	4a0d      	ldr	r2, [pc, #52]	; (800cf30 <BSP_TS_Init+0x70>)
 800cefa:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800cefc:	4b0e      	ldr	r3, [pc, #56]	; (800cf38 <BSP_TS_Init+0x78>)
 800cefe:	2270      	movs	r2, #112	; 0x70
 800cf00:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800cf02:	4b0e      	ldr	r3, [pc, #56]	; (800cf3c <BSP_TS_Init+0x7c>)
 800cf04:	2208      	movs	r2, #8
 800cf06:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800cf08:	4b0a      	ldr	r3, [pc, #40]	; (800cf34 <BSP_TS_Init+0x74>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	4a0a      	ldr	r2, [pc, #40]	; (800cf38 <BSP_TS_Init+0x78>)
 800cf10:	7812      	ldrb	r2, [r2, #0]
 800cf12:	b292      	uxth	r2, r2
 800cf14:	4610      	mov	r0, r2
 800cf16:	4798      	blx	r3
 800cf18:	e001      	b.n	800cf1e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800cf1a:	2303      	movs	r3, #3
 800cf1c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cf1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3710      	adds	r7, #16
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	2000028c 	.word	0x2000028c
 800cf2c:	2000028e 	.word	0x2000028e
 800cf30:	20000018 	.word	0x20000018
 800cf34:	20000288 	.word	0x20000288
 800cf38:	20000291 	.word	0x20000291
 800cf3c:	20000290 	.word	0x20000290

0800cf40 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800cf40:	b590      	push	{r4, r7, lr}
 800cf42:	b097      	sub	sp, #92	; 0x5c
 800cf44:	af02      	add	r7, sp, #8
 800cf46:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800cf52:	2300      	movs	r3, #0
 800cf54:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800cf56:	2300      	movs	r3, #0
 800cf58:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800cf5a:	4b97      	ldr	r3, [pc, #604]	; (800d1b8 <BSP_TS_GetState+0x278>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	4a96      	ldr	r2, [pc, #600]	; (800d1bc <BSP_TS_GetState+0x27c>)
 800cf62:	7812      	ldrb	r2, [r2, #0]
 800cf64:	b292      	uxth	r2, r2
 800cf66:	4610      	mov	r0, r2
 800cf68:	4798      	blx	r3
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	f000 81a8 	beq.w	800d2cc <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf80:	e197      	b.n	800d2b2 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800cf82:	4b8d      	ldr	r3, [pc, #564]	; (800d1b8 <BSP_TS_GetState+0x278>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	695b      	ldr	r3, [r3, #20]
 800cf88:	4a8c      	ldr	r2, [pc, #560]	; (800d1bc <BSP_TS_GetState+0x27c>)
 800cf8a:	7812      	ldrb	r2, [r2, #0]
 800cf8c:	b290      	uxth	r0, r2
 800cf8e:	f107 0120 	add.w	r1, r7, #32
 800cf92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf94:	0052      	lsls	r2, r2, #1
 800cf96:	188c      	adds	r4, r1, r2
 800cf98:	f107 0114 	add.w	r1, r7, #20
 800cf9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf9e:	0052      	lsls	r2, r2, #1
 800cfa0:	440a      	add	r2, r1
 800cfa2:	4621      	mov	r1, r4
 800cfa4:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800cfa6:	4b86      	ldr	r3, [pc, #536]	; (800d1c0 <BSP_TS_GetState+0x280>)
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d11b      	bne.n	800cfe6 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800cfae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfb0:	005b      	lsls	r3, r3, #1
 800cfb2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800cfbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800cfc4:	440b      	add	r3, r1
 800cfc6:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800cfca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfcc:	005b      	lsls	r3, r3, #1
 800cfce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800cfd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfda:	005b      	lsls	r3, r3, #1
 800cfdc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800cfe0:	440b      	add	r3, r1
 800cfe2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800cfe6:	4b76      	ldr	r3, [pc, #472]	; (800d1c0 <BSP_TS_GetState+0x280>)
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	f003 0302 	and.w	r3, r3, #2
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d010      	beq.n	800d014 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800cff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cff4:	005b      	lsls	r3, r3, #1
 800cff6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800cffa:	4413      	add	r3, r2
 800cffc:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800d000:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800d004:	b29a      	uxth	r2, r3
 800d006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d008:	005b      	lsls	r3, r3, #1
 800d00a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d00e:	440b      	add	r3, r1
 800d010:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800d014:	4b6a      	ldr	r3, [pc, #424]	; (800d1c0 <BSP_TS_GetState+0x280>)
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	f003 0304 	and.w	r3, r3, #4
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d010      	beq.n	800d042 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800d020:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d022:	005b      	lsls	r3, r3, #1
 800d024:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d028:	4413      	add	r3, r2
 800d02a:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800d02e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800d032:	b29a      	uxth	r2, r3
 800d034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d036:	005b      	lsls	r3, r3, #1
 800d038:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d03c:	440b      	add	r3, r1
 800d03e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800d042:	4b5f      	ldr	r3, [pc, #380]	; (800d1c0 <BSP_TS_GetState+0x280>)
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	f003 0308 	and.w	r3, r3, #8
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d01b      	beq.n	800d086 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800d04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d050:	005b      	lsls	r3, r3, #1
 800d052:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d056:	4413      	add	r3, r2
 800d058:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800d05c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d064:	440b      	add	r3, r1
 800d066:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800d06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d06c:	005b      	lsls	r3, r3, #1
 800d06e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d072:	4413      	add	r3, r2
 800d074:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800d078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d07a:	005b      	lsls	r3, r3, #1
 800d07c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d080:	440b      	add	r3, r1
 800d082:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800d086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d088:	005b      	lsls	r3, r3, #1
 800d08a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d08e:	4413      	add	r3, r2
 800d090:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800d094:	4619      	mov	r1, r3
 800d096:	4a4b      	ldr	r2, [pc, #300]	; (800d1c4 <BSP_TS_GetState+0x284>)
 800d098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d09e:	4299      	cmp	r1, r3
 800d0a0:	d90e      	bls.n	800d0c0 <BSP_TS_GetState+0x180>
 800d0a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0a4:	005b      	lsls	r3, r3, #1
 800d0a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d0aa:	4413      	add	r3, r2
 800d0ac:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800d0b0:	4944      	ldr	r1, [pc, #272]	; (800d1c4 <BSP_TS_GetState+0x284>)
 800d0b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	1ad3      	subs	r3, r2, r3
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	e00d      	b.n	800d0dc <BSP_TS_GetState+0x19c>
 800d0c0:	4a40      	ldr	r2, [pc, #256]	; (800d1c4 <BSP_TS_GetState+0x284>)
 800d0c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0cc:	005b      	lsls	r3, r3, #1
 800d0ce:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d0d2:	440b      	add	r3, r1
 800d0d4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800d0d8:	1ad3      	subs	r3, r2, r3
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800d0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d0e8:	4413      	add	r3, r2
 800d0ea:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	4a35      	ldr	r2, [pc, #212]	; (800d1c8 <BSP_TS_GetState+0x288>)
 800d0f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0f8:	4299      	cmp	r1, r3
 800d0fa:	d90e      	bls.n	800d11a <BSP_TS_GetState+0x1da>
 800d0fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0fe:	005b      	lsls	r3, r3, #1
 800d100:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d104:	4413      	add	r3, r2
 800d106:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800d10a:	492f      	ldr	r1, [pc, #188]	; (800d1c8 <BSP_TS_GetState+0x288>)
 800d10c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d10e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d112:	b29b      	uxth	r3, r3
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	b29b      	uxth	r3, r3
 800d118:	e00d      	b.n	800d136 <BSP_TS_GetState+0x1f6>
 800d11a:	4a2b      	ldr	r2, [pc, #172]	; (800d1c8 <BSP_TS_GetState+0x288>)
 800d11c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d122:	b29a      	uxth	r2, r3
 800d124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800d12c:	440b      	add	r3, r1
 800d12e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800d132:	1ad3      	subs	r3, r2, r3
 800d134:	b29b      	uxth	r3, r3
 800d136:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800d13a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d13e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d142:	4413      	add	r3, r2
 800d144:	2b05      	cmp	r3, #5
 800d146:	dd17      	ble.n	800d178 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800d148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d14a:	005b      	lsls	r3, r3, #1
 800d14c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d150:	4413      	add	r3, r2
 800d152:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800d156:	4619      	mov	r1, r3
 800d158:	4a1a      	ldr	r2, [pc, #104]	; (800d1c4 <BSP_TS_GetState+0x284>)
 800d15a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d15c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800d160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d162:	005b      	lsls	r3, r3, #1
 800d164:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d168:	4413      	add	r3, r2
 800d16a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800d16e:	4619      	mov	r1, r3
 800d170:	4a15      	ldr	r2, [pc, #84]	; (800d1c8 <BSP_TS_GetState+0x288>)
 800d172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d174:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800d178:	4b10      	ldr	r3, [pc, #64]	; (800d1bc <BSP_TS_GetState+0x27c>)
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	2b70      	cmp	r3, #112	; 0x70
 800d17e:	d125      	bne.n	800d1cc <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800d180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d182:	005b      	lsls	r3, r3, #1
 800d184:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d188:	4413      	add	r3, r2
 800d18a:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d192:	005b      	lsls	r3, r3, #1
 800d194:	4413      	add	r3, r2
 800d196:	460a      	mov	r2, r1
 800d198:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800d19a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	005b      	lsls	r3, r3, #1
 800d1b0:	4413      	add	r3, r2
 800d1b2:	460a      	mov	r2, r1
 800d1b4:	809a      	strh	r2, [r3, #4]
 800d1b6:	e02c      	b.n	800d212 <BSP_TS_GetState+0x2d2>
 800d1b8:	20000288 	.word	0x20000288
 800d1bc:	20000291 	.word	0x20000291
 800d1c0:	20000290 	.word	0x20000290
 800d1c4:	20000294 	.word	0x20000294
 800d1c8:	200002a8 	.word	0x200002a8
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800d1cc:	4b42      	ldr	r3, [pc, #264]	; (800d2d8 <BSP_TS_GetState+0x398>)
 800d1ce:	881b      	ldrh	r3, [r3, #0]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	4a42      	ldr	r2, [pc, #264]	; (800d2dc <BSP_TS_GetState+0x39c>)
 800d1d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1da:	fb03 f301 	mul.w	r3, r3, r1
 800d1de:	0b1b      	lsrs	r3, r3, #12
 800d1e0:	b299      	uxth	r1, r3
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1e6:	005b      	lsls	r3, r3, #1
 800d1e8:	4413      	add	r3, r2
 800d1ea:	460a      	mov	r2, r1
 800d1ec:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800d1ee:	4b3c      	ldr	r3, [pc, #240]	; (800d2e0 <BSP_TS_GetState+0x3a0>)
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	4a3b      	ldr	r2, [pc, #236]	; (800d2e4 <BSP_TS_GetState+0x3a4>)
 800d1f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1fc:	fb03 f301 	mul.w	r3, r3, r1
 800d200:	0b1b      	lsrs	r3, r3, #12
 800d202:	b299      	uxth	r1, r3
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d208:	3304      	adds	r3, #4
 800d20a:	005b      	lsls	r3, r3, #1
 800d20c:	4413      	add	r3, r2
 800d20e:	460a      	mov	r2, r1
 800d210:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800d212:	4b35      	ldr	r3, [pc, #212]	; (800d2e8 <BSP_TS_GetState+0x3a8>)
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	b298      	uxth	r0, r3
 800d218:	f107 010c 	add.w	r1, r7, #12
 800d21c:	f107 0210 	add.w	r2, r7, #16
 800d220:	f107 0308 	add.w	r3, r7, #8
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	460b      	mov	r3, r1
 800d228:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d22a:	f000 fa73 	bl	800d714 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	b2d9      	uxtb	r1, r3
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d236:	4413      	add	r3, r2
 800d238:	3316      	adds	r3, #22
 800d23a:	460a      	mov	r2, r1
 800d23c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	b2d9      	uxtb	r1, r3
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d246:	4413      	add	r3, r2
 800d248:	3320      	adds	r3, #32
 800d24a:	460a      	mov	r2, r1
 800d24c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	2b03      	cmp	r3, #3
 800d252:	d827      	bhi.n	800d2a4 <BSP_TS_GetState+0x364>
 800d254:	a201      	add	r2, pc, #4	; (adr r2, 800d25c <BSP_TS_GetState+0x31c>)
 800d256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d25a:	bf00      	nop
 800d25c:	0800d26d 	.word	0x0800d26d
 800d260:	0800d27b 	.word	0x0800d27b
 800d264:	0800d289 	.word	0x0800d289
 800d268:	0800d297 	.word	0x0800d297
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d270:	4413      	add	r3, r2
 800d272:	331b      	adds	r3, #27
 800d274:	2201      	movs	r2, #1
 800d276:	701a      	strb	r2, [r3, #0]
          break;
 800d278:	e018      	b.n	800d2ac <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800d27a:	687a      	ldr	r2, [r7, #4]
 800d27c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d27e:	4413      	add	r3, r2
 800d280:	331b      	adds	r3, #27
 800d282:	2202      	movs	r2, #2
 800d284:	701a      	strb	r2, [r3, #0]
          break;
 800d286:	e011      	b.n	800d2ac <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d28c:	4413      	add	r3, r2
 800d28e:	331b      	adds	r3, #27
 800d290:	2203      	movs	r2, #3
 800d292:	701a      	strb	r2, [r3, #0]
          break;
 800d294:	e00a      	b.n	800d2ac <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d29a:	4413      	add	r3, r2
 800d29c:	331b      	adds	r3, #27
 800d29e:	2200      	movs	r2, #0
 800d2a0:	701a      	strb	r2, [r3, #0]
          break;
 800d2a2:	e003      	b.n	800d2ac <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800d2aa:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800d2ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	f4ff ae61 	bcc.w	800cf82 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 f813 	bl	800d2ec <BSP_TS_Get_GestureId>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800d2cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3754      	adds	r7, #84	; 0x54
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd90      	pop	{r4, r7, pc}
 800d2d8:	2000028c 	.word	0x2000028c
 800d2dc:	20000294 	.word	0x20000294
 800d2e0:	2000028e 	.word	0x2000028e
 800d2e4:	200002a8 	.word	0x200002a8
 800d2e8:	20000291 	.word	0x20000291

0800d2ec <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800d2fc:	4b1f      	ldr	r3, [pc, #124]	; (800d37c <BSP_TS_Get_GestureId+0x90>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	b29b      	uxth	r3, r3
 800d302:	f107 0208 	add.w	r2, r7, #8
 800d306:	4611      	mov	r1, r2
 800d308:	4618      	mov	r0, r3
 800d30a:	f000 f9ea 	bl	800d6e2 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	2b18      	cmp	r3, #24
 800d312:	d01b      	beq.n	800d34c <BSP_TS_Get_GestureId+0x60>
 800d314:	2b18      	cmp	r3, #24
 800d316:	d806      	bhi.n	800d326 <BSP_TS_Get_GestureId+0x3a>
 800d318:	2b10      	cmp	r3, #16
 800d31a:	d00f      	beq.n	800d33c <BSP_TS_Get_GestureId+0x50>
 800d31c:	2b14      	cmp	r3, #20
 800d31e:	d011      	beq.n	800d344 <BSP_TS_Get_GestureId+0x58>
 800d320:	2b00      	cmp	r3, #0
 800d322:	d007      	beq.n	800d334 <BSP_TS_Get_GestureId+0x48>
 800d324:	e022      	b.n	800d36c <BSP_TS_Get_GestureId+0x80>
 800d326:	2b40      	cmp	r3, #64	; 0x40
 800d328:	d018      	beq.n	800d35c <BSP_TS_Get_GestureId+0x70>
 800d32a:	2b49      	cmp	r3, #73	; 0x49
 800d32c:	d01a      	beq.n	800d364 <BSP_TS_Get_GestureId+0x78>
 800d32e:	2b1c      	cmp	r3, #28
 800d330:	d010      	beq.n	800d354 <BSP_TS_Get_GestureId+0x68>
 800d332:	e01b      	b.n	800d36c <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800d33a:	e01a      	b.n	800d372 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800d342:	e016      	b.n	800d372 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2202      	movs	r2, #2
 800d348:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800d34a:	e012      	b.n	800d372 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2203      	movs	r2, #3
 800d350:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800d352:	e00e      	b.n	800d372 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2204      	movs	r2, #4
 800d358:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800d35a:	e00a      	b.n	800d372 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2205      	movs	r2, #5
 800d360:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800d362:	e006      	b.n	800d372 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2206      	movs	r2, #6
 800d368:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800d36a:	e002      	b.n	800d372 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 800d36c:	2301      	movs	r3, #1
 800d36e:	73fb      	strb	r3, [r7, #15]
      break;
 800d370:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800d372:	7bfb      	ldrb	r3, [r7, #15]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	20000291 	.word	0x20000291

0800d380 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b082      	sub	sp, #8
 800d384:	af00      	add	r7, sp, #0
 800d386:	4603      	mov	r3, r0
 800d388:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800d38a:	20c8      	movs	r0, #200	; 0xc8
 800d38c:	f7fe fc7a 	bl	800bc84 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800d390:	f000 fa7a 	bl	800d888 <ft5336_I2C_InitializeIfRequired>
}
 800d394:	bf00      	nop
 800d396:	3708      	adds	r7, #8
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800d3a6:	bf00      	nop
 800d3a8:	370c      	adds	r7, #12
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr

0800d3b2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b084      	sub	sp, #16
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800d3c8:	f000 fa5e 	bl	800d888 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	73fb      	strb	r3, [r7, #15]
 800d3d0:	e010      	b.n	800d3f4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800d3d2:	88fb      	ldrh	r3, [r7, #6]
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	21a8      	movs	r1, #168	; 0xa8
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7fe fc35 	bl	800bc48 <TS_IO_Read>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800d3e2:	7b7b      	ldrb	r3, [r7, #13]
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	2b51      	cmp	r3, #81	; 0x51
 800d3e8:	d101      	bne.n	800d3ee <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800d3ee:	7bfb      	ldrb	r3, [r7, #15]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	73fb      	strb	r3, [r7, #15]
 800d3f4:	7bfb      	ldrb	r3, [r7, #15]
 800d3f6:	2b02      	cmp	r3, #2
 800d3f8:	d802      	bhi.n	800d400 <ft5336_ReadID+0x4e>
 800d3fa:	7bbb      	ldrb	r3, [r7, #14]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d0e8      	beq.n	800d3d2 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800d400:	7b7b      	ldrb	r3, [r7, #13]
 800d402:	b2db      	uxtb	r3, r3
 800d404:	b29b      	uxth	r3, r3
}
 800d406:	4618      	mov	r0, r3
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800d40e:	b580      	push	{r7, lr}
 800d410:	b082      	sub	sp, #8
 800d412:	af00      	add	r7, sp, #0
 800d414:	4603      	mov	r3, r0
 800d416:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800d418:	88fb      	ldrh	r3, [r7, #6]
 800d41a:	4618      	mov	r0, r3
 800d41c:	f000 fa44 	bl	800d8a8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800d420:	88fb      	ldrh	r3, [r7, #6]
 800d422:	4618      	mov	r0, r3
 800d424:	f000 f932 	bl	800d68c <ft5336_TS_DisableIT>
}
 800d428:	bf00      	nop
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	4603      	mov	r3, r0
 800d438:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800d43e:	88fb      	ldrh	r3, [r7, #6]
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2102      	movs	r1, #2
 800d444:	4618      	mov	r0, r3
 800d446:	f7fe fbff 	bl	800bc48 <TS_IO_Read>
 800d44a:	4603      	mov	r3, r0
 800d44c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800d44e:	7bfb      	ldrb	r3, [r7, #15]
 800d450:	b2db      	uxtb	r3, r3
 800d452:	f003 030f 	and.w	r3, r3, #15
 800d456:	b2db      	uxtb	r3, r3
 800d458:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	2b05      	cmp	r3, #5
 800d460:	d901      	bls.n	800d466 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800d462:	2300      	movs	r3, #0
 800d464:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800d466:	7bfb      	ldrb	r3, [r7, #15]
 800d468:	b2da      	uxtb	r2, r3
 800d46a:	4b05      	ldr	r3, [pc, #20]	; (800d480 <ft5336_TS_DetectTouch+0x50>)
 800d46c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800d46e:	4b04      	ldr	r3, [pc, #16]	; (800d480 <ft5336_TS_DetectTouch+0x50>)
 800d470:	2200      	movs	r2, #0
 800d472:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800d474:	7bfb      	ldrb	r3, [r7, #15]
 800d476:	b2db      	uxtb	r3, r3
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	200002bc 	.word	0x200002bc

0800d484 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b086      	sub	sp, #24
 800d488:	af00      	add	r7, sp, #0
 800d48a:	4603      	mov	r3, r0
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	607a      	str	r2, [r7, #4]
 800d490:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800d492:	2300      	movs	r3, #0
 800d494:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800d496:	2300      	movs	r3, #0
 800d498:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800d49a:	2300      	movs	r3, #0
 800d49c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800d4a6:	4b6d      	ldr	r3, [pc, #436]	; (800d65c <ft5336_TS_GetXY+0x1d8>)
 800d4a8:	789a      	ldrb	r2, [r3, #2]
 800d4aa:	4b6c      	ldr	r3, [pc, #432]	; (800d65c <ft5336_TS_GetXY+0x1d8>)
 800d4ac:	785b      	ldrb	r3, [r3, #1]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	f080 80cf 	bcs.w	800d652 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800d4b4:	4b69      	ldr	r3, [pc, #420]	; (800d65c <ft5336_TS_GetXY+0x1d8>)
 800d4b6:	789b      	ldrb	r3, [r3, #2]
 800d4b8:	2b09      	cmp	r3, #9
 800d4ba:	d871      	bhi.n	800d5a0 <ft5336_TS_GetXY+0x11c>
 800d4bc:	a201      	add	r2, pc, #4	; (adr r2, 800d4c4 <ft5336_TS_GetXY+0x40>)
 800d4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c2:	bf00      	nop
 800d4c4:	0800d4ed 	.word	0x0800d4ed
 800d4c8:	0800d4ff 	.word	0x0800d4ff
 800d4cc:	0800d511 	.word	0x0800d511
 800d4d0:	0800d523 	.word	0x0800d523
 800d4d4:	0800d535 	.word	0x0800d535
 800d4d8:	0800d547 	.word	0x0800d547
 800d4dc:	0800d559 	.word	0x0800d559
 800d4e0:	0800d56b 	.word	0x0800d56b
 800d4e4:	0800d57d 	.word	0x0800d57d
 800d4e8:	0800d58f 	.word	0x0800d58f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800d4ec:	2304      	movs	r3, #4
 800d4ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 800d4f0:	2303      	movs	r3, #3
 800d4f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800d4f4:	2306      	movs	r3, #6
 800d4f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 800d4f8:	2305      	movs	r3, #5
 800d4fa:	753b      	strb	r3, [r7, #20]
      break;
 800d4fc:	e051      	b.n	800d5a2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800d4fe:	230a      	movs	r3, #10
 800d500:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800d502:	2309      	movs	r3, #9
 800d504:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800d506:	230c      	movs	r3, #12
 800d508:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800d50a:	230b      	movs	r3, #11
 800d50c:	753b      	strb	r3, [r7, #20]
      break;
 800d50e:	e048      	b.n	800d5a2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800d510:	2310      	movs	r3, #16
 800d512:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800d514:	230f      	movs	r3, #15
 800d516:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800d518:	2312      	movs	r3, #18
 800d51a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800d51c:	2311      	movs	r3, #17
 800d51e:	753b      	strb	r3, [r7, #20]
      break;
 800d520:	e03f      	b.n	800d5a2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800d522:	2316      	movs	r3, #22
 800d524:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800d526:	2315      	movs	r3, #21
 800d528:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800d52a:	2318      	movs	r3, #24
 800d52c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800d52e:	2317      	movs	r3, #23
 800d530:	753b      	strb	r3, [r7, #20]
      break;
 800d532:	e036      	b.n	800d5a2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800d534:	231c      	movs	r3, #28
 800d536:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 800d538:	231b      	movs	r3, #27
 800d53a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800d53c:	231e      	movs	r3, #30
 800d53e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800d540:	231d      	movs	r3, #29
 800d542:	753b      	strb	r3, [r7, #20]
      break;
 800d544:	e02d      	b.n	800d5a2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800d546:	2322      	movs	r3, #34	; 0x22
 800d548:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800d54a:	2321      	movs	r3, #33	; 0x21
 800d54c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800d54e:	2324      	movs	r3, #36	; 0x24
 800d550:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800d552:	2323      	movs	r3, #35	; 0x23
 800d554:	753b      	strb	r3, [r7, #20]
      break;
 800d556:	e024      	b.n	800d5a2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800d558:	2328      	movs	r3, #40	; 0x28
 800d55a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800d55c:	2327      	movs	r3, #39	; 0x27
 800d55e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800d560:	232a      	movs	r3, #42	; 0x2a
 800d562:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 800d564:	2329      	movs	r3, #41	; 0x29
 800d566:	753b      	strb	r3, [r7, #20]
      break;
 800d568:	e01b      	b.n	800d5a2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800d56a:	232e      	movs	r3, #46	; 0x2e
 800d56c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800d56e:	232d      	movs	r3, #45	; 0x2d
 800d570:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800d572:	2330      	movs	r3, #48	; 0x30
 800d574:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800d576:	232f      	movs	r3, #47	; 0x2f
 800d578:	753b      	strb	r3, [r7, #20]
      break;
 800d57a:	e012      	b.n	800d5a2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800d57c:	2334      	movs	r3, #52	; 0x34
 800d57e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800d580:	2333      	movs	r3, #51	; 0x33
 800d582:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800d584:	2336      	movs	r3, #54	; 0x36
 800d586:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 800d588:	2335      	movs	r3, #53	; 0x35
 800d58a:	753b      	strb	r3, [r7, #20]
      break;
 800d58c:	e009      	b.n	800d5a2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800d58e:	233a      	movs	r3, #58	; 0x3a
 800d590:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800d592:	2339      	movs	r3, #57	; 0x39
 800d594:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800d596:	233c      	movs	r3, #60	; 0x3c
 800d598:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800d59a:	233b      	movs	r3, #59	; 0x3b
 800d59c:	753b      	strb	r3, [r7, #20]
      break;
 800d59e:	e000      	b.n	800d5a2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800d5a0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800d5a2:	89fb      	ldrh	r3, [r7, #14]
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	7dfa      	ldrb	r2, [r7, #23]
 800d5a8:	4611      	mov	r1, r2
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fe fb4c 	bl	800bc48 <TS_IO_Read>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800d5b4:	7cfb      	ldrb	r3, [r7, #19]
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	b29a      	uxth	r2, r3
 800d5ba:	4b29      	ldr	r3, [pc, #164]	; (800d660 <ft5336_TS_GetXY+0x1dc>)
 800d5bc:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800d5be:	89fb      	ldrh	r3, [r7, #14]
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	7dba      	ldrb	r2, [r7, #22]
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fe fb3e 	bl	800bc48 <TS_IO_Read>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800d5d0:	7cfb      	ldrb	r3, [r7, #19]
 800d5d2:	b2db      	uxtb	r3, r3
 800d5d4:	021b      	lsls	r3, r3, #8
 800d5d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d5da:	b21a      	sxth	r2, r3
 800d5dc:	4b20      	ldr	r3, [pc, #128]	; (800d660 <ft5336_TS_GetXY+0x1dc>)
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	b21b      	sxth	r3, r3
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	b21b      	sxth	r3, r3
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	4b1d      	ldr	r3, [pc, #116]	; (800d660 <ft5336_TS_GetXY+0x1dc>)
 800d5ea:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800d5ec:	4b1c      	ldr	r3, [pc, #112]	; (800d660 <ft5336_TS_GetXY+0x1dc>)
 800d5ee:	881a      	ldrh	r2, [r3, #0]
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800d5f4:	89fb      	ldrh	r3, [r7, #14]
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	7d7a      	ldrb	r2, [r7, #21]
 800d5fa:	4611      	mov	r1, r2
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fe fb23 	bl	800bc48 <TS_IO_Read>
 800d602:	4603      	mov	r3, r0
 800d604:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800d606:	7cfb      	ldrb	r3, [r7, #19]
 800d608:	b2db      	uxtb	r3, r3
 800d60a:	b29a      	uxth	r2, r3
 800d60c:	4b14      	ldr	r3, [pc, #80]	; (800d660 <ft5336_TS_GetXY+0x1dc>)
 800d60e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800d610:	89fb      	ldrh	r3, [r7, #14]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	7d3a      	ldrb	r2, [r7, #20]
 800d616:	4611      	mov	r1, r2
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fe fb15 	bl	800bc48 <TS_IO_Read>
 800d61e:	4603      	mov	r3, r0
 800d620:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800d622:	7cfb      	ldrb	r3, [r7, #19]
 800d624:	b2db      	uxtb	r3, r3
 800d626:	021b      	lsls	r3, r3, #8
 800d628:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800d62c:	b21a      	sxth	r2, r3
 800d62e:	4b0c      	ldr	r3, [pc, #48]	; (800d660 <ft5336_TS_GetXY+0x1dc>)
 800d630:	881b      	ldrh	r3, [r3, #0]
 800d632:	b21b      	sxth	r3, r3
 800d634:	4313      	orrs	r3, r2
 800d636:	b21b      	sxth	r3, r3
 800d638:	b29a      	uxth	r2, r3
 800d63a:	4b09      	ldr	r3, [pc, #36]	; (800d660 <ft5336_TS_GetXY+0x1dc>)
 800d63c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800d63e:	4b08      	ldr	r3, [pc, #32]	; (800d660 <ft5336_TS_GetXY+0x1dc>)
 800d640:	881a      	ldrh	r2, [r3, #0]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800d646:	4b05      	ldr	r3, [pc, #20]	; (800d65c <ft5336_TS_GetXY+0x1d8>)
 800d648:	789b      	ldrb	r3, [r3, #2]
 800d64a:	3301      	adds	r3, #1
 800d64c:	b2da      	uxtb	r2, r3
 800d64e:	4b03      	ldr	r3, [pc, #12]	; (800d65c <ft5336_TS_GetXY+0x1d8>)
 800d650:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800d652:	bf00      	nop
 800d654:	3718      	adds	r7, #24
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	200002bc 	.word	0x200002bc
 800d660:	200002c0 	.word	0x200002c0

0800d664 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	4603      	mov	r3, r0
 800d66c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800d66e:	2300      	movs	r3, #0
 800d670:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800d672:	2301      	movs	r3, #1
 800d674:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800d676:	88fb      	ldrh	r3, [r7, #6]
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	7bfa      	ldrb	r2, [r7, #15]
 800d67c:	21a4      	movs	r1, #164	; 0xa4
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fe fac8 	bl	800bc14 <TS_IO_Write>
}
 800d684:	bf00      	nop
 800d686:	3710      	adds	r7, #16
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	4603      	mov	r3, r0
 800d694:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800d696:	2300      	movs	r3, #0
 800d698:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800d69a:	2300      	movs	r3, #0
 800d69c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800d69e:	88fb      	ldrh	r3, [r7, #6]
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	7bfa      	ldrb	r2, [r7, #15]
 800d6a4:	21a4      	movs	r1, #164	; 0xa4
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fe fab4 	bl	800bc14 <TS_IO_Write>
}
 800d6ac:	bf00      	nop
 800d6ae:	3710      	adds	r7, #16
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800d6be:	2300      	movs	r3, #0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	370c      	adds	r7, #12
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800d6d6:	bf00      	nop
 800d6d8:	370c      	adds	r7, #12
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr

0800d6e2 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b084      	sub	sp, #16
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	6039      	str	r1, [r7, #0]
 800d6ec:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800d6f2:	88fb      	ldrh	r3, [r7, #6]
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	2101      	movs	r1, #1
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fe faa5 	bl	800bc48 <TS_IO_Read>
 800d6fe:	4603      	mov	r3, r0
 800d700:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800d702:	7bfb      	ldrb	r3, [r7, #15]
 800d704:	b2db      	uxtb	r3, r3
 800d706:	461a      	mov	r2, r3
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	601a      	str	r2, [r3, #0]
}
 800d70c:	bf00      	nop
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60b9      	str	r1, [r7, #8]
 800d71c:	607a      	str	r2, [r7, #4]
 800d71e:	603b      	str	r3, [r7, #0]
 800d720:	4603      	mov	r3, r0
 800d722:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800d724:	2300      	movs	r3, #0
 800d726:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 800d728:	2300      	movs	r3, #0
 800d72a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800d72c:	2300      	movs	r3, #0
 800d72e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 800d730:	2300      	movs	r3, #0
 800d732:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800d734:	4b4d      	ldr	r3, [pc, #308]	; (800d86c <ft5336_TS_GetTouchInfo+0x158>)
 800d736:	785b      	ldrb	r3, [r3, #1]
 800d738:	461a      	mov	r2, r3
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	4293      	cmp	r3, r2
 800d73e:	f080 8090 	bcs.w	800d862 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	2b09      	cmp	r3, #9
 800d746:	d85d      	bhi.n	800d804 <ft5336_TS_GetTouchInfo+0xf0>
 800d748:	a201      	add	r2, pc, #4	; (adr r2, 800d750 <ft5336_TS_GetTouchInfo+0x3c>)
 800d74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d74e:	bf00      	nop
 800d750:	0800d779 	.word	0x0800d779
 800d754:	0800d787 	.word	0x0800d787
 800d758:	0800d795 	.word	0x0800d795
 800d75c:	0800d7a3 	.word	0x0800d7a3
 800d760:	0800d7b1 	.word	0x0800d7b1
 800d764:	0800d7bf 	.word	0x0800d7bf
 800d768:	0800d7cd 	.word	0x0800d7cd
 800d76c:	0800d7db 	.word	0x0800d7db
 800d770:	0800d7e9 	.word	0x0800d7e9
 800d774:	0800d7f7 	.word	0x0800d7f7
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 800d778:	2303      	movs	r3, #3
 800d77a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 800d77c:	2307      	movs	r3, #7
 800d77e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800d780:	2308      	movs	r3, #8
 800d782:	757b      	strb	r3, [r7, #21]
      break;
 800d784:	e03f      	b.n	800d806 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 800d786:	2309      	movs	r3, #9
 800d788:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800d78a:	230d      	movs	r3, #13
 800d78c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800d78e:	230e      	movs	r3, #14
 800d790:	757b      	strb	r3, [r7, #21]
      break;
 800d792:	e038      	b.n	800d806 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 800d794:	230f      	movs	r3, #15
 800d796:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 800d798:	2313      	movs	r3, #19
 800d79a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800d79c:	2314      	movs	r3, #20
 800d79e:	757b      	strb	r3, [r7, #21]
      break;
 800d7a0:	e031      	b.n	800d806 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800d7a2:	2315      	movs	r3, #21
 800d7a4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 800d7a6:	2319      	movs	r3, #25
 800d7a8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800d7aa:	231a      	movs	r3, #26
 800d7ac:	757b      	strb	r3, [r7, #21]
      break;
 800d7ae:	e02a      	b.n	800d806 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800d7b0:	231b      	movs	r3, #27
 800d7b2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 800d7b4:	231f      	movs	r3, #31
 800d7b6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 800d7b8:	2320      	movs	r3, #32
 800d7ba:	757b      	strb	r3, [r7, #21]
      break;
 800d7bc:	e023      	b.n	800d806 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800d7be:	2321      	movs	r3, #33	; 0x21
 800d7c0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800d7c2:	2325      	movs	r3, #37	; 0x25
 800d7c4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 800d7c6:	2326      	movs	r3, #38	; 0x26
 800d7c8:	757b      	strb	r3, [r7, #21]
      break;
 800d7ca:	e01c      	b.n	800d806 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800d7cc:	2327      	movs	r3, #39	; 0x27
 800d7ce:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800d7d0:	232b      	movs	r3, #43	; 0x2b
 800d7d2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 800d7d4:	232c      	movs	r3, #44	; 0x2c
 800d7d6:	757b      	strb	r3, [r7, #21]
      break;
 800d7d8:	e015      	b.n	800d806 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800d7da:	232d      	movs	r3, #45	; 0x2d
 800d7dc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800d7de:	2331      	movs	r3, #49	; 0x31
 800d7e0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800d7e2:	2332      	movs	r3, #50	; 0x32
 800d7e4:	757b      	strb	r3, [r7, #21]
      break;
 800d7e6:	e00e      	b.n	800d806 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 800d7e8:	2333      	movs	r3, #51	; 0x33
 800d7ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800d7ec:	2337      	movs	r3, #55	; 0x37
 800d7ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 800d7f0:	2338      	movs	r3, #56	; 0x38
 800d7f2:	757b      	strb	r3, [r7, #21]
      break;
 800d7f4:	e007      	b.n	800d806 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800d7f6:	2339      	movs	r3, #57	; 0x39
 800d7f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800d7fa:	233d      	movs	r3, #61	; 0x3d
 800d7fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800d7fe:	233e      	movs	r3, #62	; 0x3e
 800d800:	757b      	strb	r3, [r7, #21]
      break;
 800d802:	e000      	b.n	800d806 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800d804:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800d806:	89fb      	ldrh	r3, [r7, #14]
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	7dfa      	ldrb	r2, [r7, #23]
 800d80c:	4611      	mov	r1, r2
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fe fa1a 	bl	800bc48 <TS_IO_Read>
 800d814:	4603      	mov	r3, r0
 800d816:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800d818:	7d3b      	ldrb	r3, [r7, #20]
 800d81a:	b2db      	uxtb	r3, r3
 800d81c:	119b      	asrs	r3, r3, #6
 800d81e:	f003 0203 	and.w	r2, r3, #3
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800d826:	89fb      	ldrh	r3, [r7, #14]
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	7dba      	ldrb	r2, [r7, #22]
 800d82c:	4611      	mov	r1, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fe fa0a 	bl	800bc48 <TS_IO_Read>
 800d834:	4603      	mov	r3, r0
 800d836:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800d838:	7d3b      	ldrb	r3, [r7, #20]
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	461a      	mov	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800d842:	89fb      	ldrh	r3, [r7, #14]
 800d844:	b2db      	uxtb	r3, r3
 800d846:	7d7a      	ldrb	r2, [r7, #21]
 800d848:	4611      	mov	r1, r2
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fe f9fc 	bl	800bc48 <TS_IO_Read>
 800d850:	4603      	mov	r3, r0
 800d852:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800d854:	7d3b      	ldrb	r3, [r7, #20]
 800d856:	b2db      	uxtb	r3, r3
 800d858:	111b      	asrs	r3, r3, #4
 800d85a:	f003 0204 	and.w	r2, r3, #4
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800d862:	bf00      	nop
 800d864:	3718      	adds	r7, #24
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	200002bc 	.word	0x200002bc

0800d870 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800d870:	b480      	push	{r7}
 800d872:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800d874:	4b03      	ldr	r3, [pc, #12]	; (800d884 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800d876:	781b      	ldrb	r3, [r3, #0]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	200002bc 	.word	0x200002bc

0800d888 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800d88c:	f7ff fff0 	bl	800d870 <ft5336_Get_I2C_InitializedStatus>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d104      	bne.n	800d8a0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800d896:	f7fe f9b3 	bl	800bc00 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800d89a:	4b02      	ldr	r3, [pc, #8]	; (800d8a4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800d89c:	2201      	movs	r2, #1
 800d89e:	701a      	strb	r2, [r3, #0]
  }
}
 800d8a0:	bf00      	nop
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	200002bc 	.word	0x200002bc

0800d8a8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3714      	adds	r7, #20
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr

0800d8c4 <__errno>:
 800d8c4:	4b01      	ldr	r3, [pc, #4]	; (800d8cc <__errno+0x8>)
 800d8c6:	6818      	ldr	r0, [r3, #0]
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	20000040 	.word	0x20000040

0800d8d0 <__libc_init_array>:
 800d8d0:	b570      	push	{r4, r5, r6, lr}
 800d8d2:	4e0d      	ldr	r6, [pc, #52]	; (800d908 <__libc_init_array+0x38>)
 800d8d4:	4c0d      	ldr	r4, [pc, #52]	; (800d90c <__libc_init_array+0x3c>)
 800d8d6:	1ba4      	subs	r4, r4, r6
 800d8d8:	10a4      	asrs	r4, r4, #2
 800d8da:	2500      	movs	r5, #0
 800d8dc:	42a5      	cmp	r5, r4
 800d8de:	d109      	bne.n	800d8f4 <__libc_init_array+0x24>
 800d8e0:	4e0b      	ldr	r6, [pc, #44]	; (800d910 <__libc_init_array+0x40>)
 800d8e2:	4c0c      	ldr	r4, [pc, #48]	; (800d914 <__libc_init_array+0x44>)
 800d8e4:	f000 fcba 	bl	800e25c <_init>
 800d8e8:	1ba4      	subs	r4, r4, r6
 800d8ea:	10a4      	asrs	r4, r4, #2
 800d8ec:	2500      	movs	r5, #0
 800d8ee:	42a5      	cmp	r5, r4
 800d8f0:	d105      	bne.n	800d8fe <__libc_init_array+0x2e>
 800d8f2:	bd70      	pop	{r4, r5, r6, pc}
 800d8f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8f8:	4798      	blx	r3
 800d8fa:	3501      	adds	r5, #1
 800d8fc:	e7ee      	b.n	800d8dc <__libc_init_array+0xc>
 800d8fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d902:	4798      	blx	r3
 800d904:	3501      	adds	r5, #1
 800d906:	e7f2      	b.n	800d8ee <__libc_init_array+0x1e>
 800d908:	0800fddc 	.word	0x0800fddc
 800d90c:	0800fddc 	.word	0x0800fddc
 800d910:	0800fddc 	.word	0x0800fddc
 800d914:	0800fde0 	.word	0x0800fde0

0800d918 <memset>:
 800d918:	4402      	add	r2, r0
 800d91a:	4603      	mov	r3, r0
 800d91c:	4293      	cmp	r3, r2
 800d91e:	d100      	bne.n	800d922 <memset+0xa>
 800d920:	4770      	bx	lr
 800d922:	f803 1b01 	strb.w	r1, [r3], #1
 800d926:	e7f9      	b.n	800d91c <memset+0x4>

0800d928 <srand>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4b0d      	ldr	r3, [pc, #52]	; (800d960 <srand+0x38>)
 800d92c:	681c      	ldr	r4, [r3, #0]
 800d92e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d930:	4605      	mov	r5, r0
 800d932:	b97b      	cbnz	r3, 800d954 <srand+0x2c>
 800d934:	2018      	movs	r0, #24
 800d936:	f000 f89b 	bl	800da70 <malloc>
 800d93a:	4a0a      	ldr	r2, [pc, #40]	; (800d964 <srand+0x3c>)
 800d93c:	4b0a      	ldr	r3, [pc, #40]	; (800d968 <srand+0x40>)
 800d93e:	63a0      	str	r0, [r4, #56]	; 0x38
 800d940:	e9c0 2300 	strd	r2, r3, [r0]
 800d944:	4b09      	ldr	r3, [pc, #36]	; (800d96c <srand+0x44>)
 800d946:	6083      	str	r3, [r0, #8]
 800d948:	230b      	movs	r3, #11
 800d94a:	8183      	strh	r3, [r0, #12]
 800d94c:	2201      	movs	r2, #1
 800d94e:	2300      	movs	r3, #0
 800d950:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d956:	2200      	movs	r2, #0
 800d958:	611d      	str	r5, [r3, #16]
 800d95a:	615a      	str	r2, [r3, #20]
 800d95c:	bd38      	pop	{r3, r4, r5, pc}
 800d95e:	bf00      	nop
 800d960:	20000040 	.word	0x20000040
 800d964:	abcd330e 	.word	0xabcd330e
 800d968:	e66d1234 	.word	0xe66d1234
 800d96c:	0005deec 	.word	0x0005deec

0800d970 <rand>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	4b13      	ldr	r3, [pc, #76]	; (800d9c0 <rand+0x50>)
 800d974:	681c      	ldr	r4, [r3, #0]
 800d976:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d978:	b97b      	cbnz	r3, 800d99a <rand+0x2a>
 800d97a:	2018      	movs	r0, #24
 800d97c:	f000 f878 	bl	800da70 <malloc>
 800d980:	4a10      	ldr	r2, [pc, #64]	; (800d9c4 <rand+0x54>)
 800d982:	4b11      	ldr	r3, [pc, #68]	; (800d9c8 <rand+0x58>)
 800d984:	63a0      	str	r0, [r4, #56]	; 0x38
 800d986:	e9c0 2300 	strd	r2, r3, [r0]
 800d98a:	4b10      	ldr	r3, [pc, #64]	; (800d9cc <rand+0x5c>)
 800d98c:	6083      	str	r3, [r0, #8]
 800d98e:	230b      	movs	r3, #11
 800d990:	8183      	strh	r3, [r0, #12]
 800d992:	2201      	movs	r2, #1
 800d994:	2300      	movs	r3, #0
 800d996:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d99a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d99c:	480c      	ldr	r0, [pc, #48]	; (800d9d0 <rand+0x60>)
 800d99e:	690a      	ldr	r2, [r1, #16]
 800d9a0:	694b      	ldr	r3, [r1, #20]
 800d9a2:	4c0c      	ldr	r4, [pc, #48]	; (800d9d4 <rand+0x64>)
 800d9a4:	4350      	muls	r0, r2
 800d9a6:	fb04 0003 	mla	r0, r4, r3, r0
 800d9aa:	fba2 2304 	umull	r2, r3, r2, r4
 800d9ae:	4403      	add	r3, r0
 800d9b0:	1c54      	adds	r4, r2, #1
 800d9b2:	f143 0500 	adc.w	r5, r3, #0
 800d9b6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800d9ba:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800d9be:	bd38      	pop	{r3, r4, r5, pc}
 800d9c0:	20000040 	.word	0x20000040
 800d9c4:	abcd330e 	.word	0xabcd330e
 800d9c8:	e66d1234 	.word	0xe66d1234
 800d9cc:	0005deec 	.word	0x0005deec
 800d9d0:	5851f42d 	.word	0x5851f42d
 800d9d4:	4c957f2d 	.word	0x4c957f2d

0800d9d8 <siprintf>:
 800d9d8:	b40e      	push	{r1, r2, r3}
 800d9da:	b500      	push	{lr}
 800d9dc:	b09c      	sub	sp, #112	; 0x70
 800d9de:	ab1d      	add	r3, sp, #116	; 0x74
 800d9e0:	9002      	str	r0, [sp, #8]
 800d9e2:	9006      	str	r0, [sp, #24]
 800d9e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d9e8:	4809      	ldr	r0, [pc, #36]	; (800da10 <siprintf+0x38>)
 800d9ea:	9107      	str	r1, [sp, #28]
 800d9ec:	9104      	str	r1, [sp, #16]
 800d9ee:	4909      	ldr	r1, [pc, #36]	; (800da14 <siprintf+0x3c>)
 800d9f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9f4:	9105      	str	r1, [sp, #20]
 800d9f6:	6800      	ldr	r0, [r0, #0]
 800d9f8:	9301      	str	r3, [sp, #4]
 800d9fa:	a902      	add	r1, sp, #8
 800d9fc:	f000 f942 	bl	800dc84 <_svfiprintf_r>
 800da00:	9b02      	ldr	r3, [sp, #8]
 800da02:	2200      	movs	r2, #0
 800da04:	701a      	strb	r2, [r3, #0]
 800da06:	b01c      	add	sp, #112	; 0x70
 800da08:	f85d eb04 	ldr.w	lr, [sp], #4
 800da0c:	b003      	add	sp, #12
 800da0e:	4770      	bx	lr
 800da10:	20000040 	.word	0x20000040
 800da14:	ffff0208 	.word	0xffff0208

0800da18 <time>:
 800da18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da1a:	4b0b      	ldr	r3, [pc, #44]	; (800da48 <time+0x30>)
 800da1c:	4604      	mov	r4, r0
 800da1e:	2200      	movs	r2, #0
 800da20:	4669      	mov	r1, sp
 800da22:	6818      	ldr	r0, [r3, #0]
 800da24:	f000 f812 	bl	800da4c <_gettimeofday_r>
 800da28:	2800      	cmp	r0, #0
 800da2a:	da05      	bge.n	800da38 <time+0x20>
 800da2c:	f04f 32ff 	mov.w	r2, #4294967295
 800da30:	f04f 33ff 	mov.w	r3, #4294967295
 800da34:	e9cd 2300 	strd	r2, r3, [sp]
 800da38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da3c:	b10c      	cbz	r4, 800da42 <time+0x2a>
 800da3e:	e9c4 0100 	strd	r0, r1, [r4]
 800da42:	b004      	add	sp, #16
 800da44:	bd10      	pop	{r4, pc}
 800da46:	bf00      	nop
 800da48:	20000040 	.word	0x20000040

0800da4c <_gettimeofday_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4c07      	ldr	r4, [pc, #28]	; (800da6c <_gettimeofday_r+0x20>)
 800da50:	2300      	movs	r3, #0
 800da52:	4605      	mov	r5, r0
 800da54:	4608      	mov	r0, r1
 800da56:	4611      	mov	r1, r2
 800da58:	6023      	str	r3, [r4, #0]
 800da5a:	f000 fbf7 	bl	800e24c <_gettimeofday>
 800da5e:	1c43      	adds	r3, r0, #1
 800da60:	d102      	bne.n	800da68 <_gettimeofday_r+0x1c>
 800da62:	6823      	ldr	r3, [r4, #0]
 800da64:	b103      	cbz	r3, 800da68 <_gettimeofday_r+0x1c>
 800da66:	602b      	str	r3, [r5, #0]
 800da68:	bd38      	pop	{r3, r4, r5, pc}
 800da6a:	bf00      	nop
 800da6c:	20000b78 	.word	0x20000b78

0800da70 <malloc>:
 800da70:	4b02      	ldr	r3, [pc, #8]	; (800da7c <malloc+0xc>)
 800da72:	4601      	mov	r1, r0
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	f000 b851 	b.w	800db1c <_malloc_r>
 800da7a:	bf00      	nop
 800da7c:	20000040 	.word	0x20000040

0800da80 <_free_r>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	4605      	mov	r5, r0
 800da84:	2900      	cmp	r1, #0
 800da86:	d045      	beq.n	800db14 <_free_r+0x94>
 800da88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da8c:	1f0c      	subs	r4, r1, #4
 800da8e:	2b00      	cmp	r3, #0
 800da90:	bfb8      	it	lt
 800da92:	18e4      	addlt	r4, r4, r3
 800da94:	f000 fbaa 	bl	800e1ec <__malloc_lock>
 800da98:	4a1f      	ldr	r2, [pc, #124]	; (800db18 <_free_r+0x98>)
 800da9a:	6813      	ldr	r3, [r2, #0]
 800da9c:	4610      	mov	r0, r2
 800da9e:	b933      	cbnz	r3, 800daae <_free_r+0x2e>
 800daa0:	6063      	str	r3, [r4, #4]
 800daa2:	6014      	str	r4, [r2, #0]
 800daa4:	4628      	mov	r0, r5
 800daa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daaa:	f000 bba0 	b.w	800e1ee <__malloc_unlock>
 800daae:	42a3      	cmp	r3, r4
 800dab0:	d90c      	bls.n	800dacc <_free_r+0x4c>
 800dab2:	6821      	ldr	r1, [r4, #0]
 800dab4:	1862      	adds	r2, r4, r1
 800dab6:	4293      	cmp	r3, r2
 800dab8:	bf04      	itt	eq
 800daba:	681a      	ldreq	r2, [r3, #0]
 800dabc:	685b      	ldreq	r3, [r3, #4]
 800dabe:	6063      	str	r3, [r4, #4]
 800dac0:	bf04      	itt	eq
 800dac2:	1852      	addeq	r2, r2, r1
 800dac4:	6022      	streq	r2, [r4, #0]
 800dac6:	6004      	str	r4, [r0, #0]
 800dac8:	e7ec      	b.n	800daa4 <_free_r+0x24>
 800daca:	4613      	mov	r3, r2
 800dacc:	685a      	ldr	r2, [r3, #4]
 800dace:	b10a      	cbz	r2, 800dad4 <_free_r+0x54>
 800dad0:	42a2      	cmp	r2, r4
 800dad2:	d9fa      	bls.n	800daca <_free_r+0x4a>
 800dad4:	6819      	ldr	r1, [r3, #0]
 800dad6:	1858      	adds	r0, r3, r1
 800dad8:	42a0      	cmp	r0, r4
 800dada:	d10b      	bne.n	800daf4 <_free_r+0x74>
 800dadc:	6820      	ldr	r0, [r4, #0]
 800dade:	4401      	add	r1, r0
 800dae0:	1858      	adds	r0, r3, r1
 800dae2:	4282      	cmp	r2, r0
 800dae4:	6019      	str	r1, [r3, #0]
 800dae6:	d1dd      	bne.n	800daa4 <_free_r+0x24>
 800dae8:	6810      	ldr	r0, [r2, #0]
 800daea:	6852      	ldr	r2, [r2, #4]
 800daec:	605a      	str	r2, [r3, #4]
 800daee:	4401      	add	r1, r0
 800daf0:	6019      	str	r1, [r3, #0]
 800daf2:	e7d7      	b.n	800daa4 <_free_r+0x24>
 800daf4:	d902      	bls.n	800dafc <_free_r+0x7c>
 800daf6:	230c      	movs	r3, #12
 800daf8:	602b      	str	r3, [r5, #0]
 800dafa:	e7d3      	b.n	800daa4 <_free_r+0x24>
 800dafc:	6820      	ldr	r0, [r4, #0]
 800dafe:	1821      	adds	r1, r4, r0
 800db00:	428a      	cmp	r2, r1
 800db02:	bf04      	itt	eq
 800db04:	6811      	ldreq	r1, [r2, #0]
 800db06:	6852      	ldreq	r2, [r2, #4]
 800db08:	6062      	str	r2, [r4, #4]
 800db0a:	bf04      	itt	eq
 800db0c:	1809      	addeq	r1, r1, r0
 800db0e:	6021      	streq	r1, [r4, #0]
 800db10:	605c      	str	r4, [r3, #4]
 800db12:	e7c7      	b.n	800daa4 <_free_r+0x24>
 800db14:	bd38      	pop	{r3, r4, r5, pc}
 800db16:	bf00      	nop
 800db18:	200002c4 	.word	0x200002c4

0800db1c <_malloc_r>:
 800db1c:	b570      	push	{r4, r5, r6, lr}
 800db1e:	1ccd      	adds	r5, r1, #3
 800db20:	f025 0503 	bic.w	r5, r5, #3
 800db24:	3508      	adds	r5, #8
 800db26:	2d0c      	cmp	r5, #12
 800db28:	bf38      	it	cc
 800db2a:	250c      	movcc	r5, #12
 800db2c:	2d00      	cmp	r5, #0
 800db2e:	4606      	mov	r6, r0
 800db30:	db01      	blt.n	800db36 <_malloc_r+0x1a>
 800db32:	42a9      	cmp	r1, r5
 800db34:	d903      	bls.n	800db3e <_malloc_r+0x22>
 800db36:	230c      	movs	r3, #12
 800db38:	6033      	str	r3, [r6, #0]
 800db3a:	2000      	movs	r0, #0
 800db3c:	bd70      	pop	{r4, r5, r6, pc}
 800db3e:	f000 fb55 	bl	800e1ec <__malloc_lock>
 800db42:	4a21      	ldr	r2, [pc, #132]	; (800dbc8 <_malloc_r+0xac>)
 800db44:	6814      	ldr	r4, [r2, #0]
 800db46:	4621      	mov	r1, r4
 800db48:	b991      	cbnz	r1, 800db70 <_malloc_r+0x54>
 800db4a:	4c20      	ldr	r4, [pc, #128]	; (800dbcc <_malloc_r+0xb0>)
 800db4c:	6823      	ldr	r3, [r4, #0]
 800db4e:	b91b      	cbnz	r3, 800db58 <_malloc_r+0x3c>
 800db50:	4630      	mov	r0, r6
 800db52:	f000 fb17 	bl	800e184 <_sbrk_r>
 800db56:	6020      	str	r0, [r4, #0]
 800db58:	4629      	mov	r1, r5
 800db5a:	4630      	mov	r0, r6
 800db5c:	f000 fb12 	bl	800e184 <_sbrk_r>
 800db60:	1c43      	adds	r3, r0, #1
 800db62:	d124      	bne.n	800dbae <_malloc_r+0x92>
 800db64:	230c      	movs	r3, #12
 800db66:	6033      	str	r3, [r6, #0]
 800db68:	4630      	mov	r0, r6
 800db6a:	f000 fb40 	bl	800e1ee <__malloc_unlock>
 800db6e:	e7e4      	b.n	800db3a <_malloc_r+0x1e>
 800db70:	680b      	ldr	r3, [r1, #0]
 800db72:	1b5b      	subs	r3, r3, r5
 800db74:	d418      	bmi.n	800dba8 <_malloc_r+0x8c>
 800db76:	2b0b      	cmp	r3, #11
 800db78:	d90f      	bls.n	800db9a <_malloc_r+0x7e>
 800db7a:	600b      	str	r3, [r1, #0]
 800db7c:	50cd      	str	r5, [r1, r3]
 800db7e:	18cc      	adds	r4, r1, r3
 800db80:	4630      	mov	r0, r6
 800db82:	f000 fb34 	bl	800e1ee <__malloc_unlock>
 800db86:	f104 000b 	add.w	r0, r4, #11
 800db8a:	1d23      	adds	r3, r4, #4
 800db8c:	f020 0007 	bic.w	r0, r0, #7
 800db90:	1ac3      	subs	r3, r0, r3
 800db92:	d0d3      	beq.n	800db3c <_malloc_r+0x20>
 800db94:	425a      	negs	r2, r3
 800db96:	50e2      	str	r2, [r4, r3]
 800db98:	e7d0      	b.n	800db3c <_malloc_r+0x20>
 800db9a:	428c      	cmp	r4, r1
 800db9c:	684b      	ldr	r3, [r1, #4]
 800db9e:	bf16      	itet	ne
 800dba0:	6063      	strne	r3, [r4, #4]
 800dba2:	6013      	streq	r3, [r2, #0]
 800dba4:	460c      	movne	r4, r1
 800dba6:	e7eb      	b.n	800db80 <_malloc_r+0x64>
 800dba8:	460c      	mov	r4, r1
 800dbaa:	6849      	ldr	r1, [r1, #4]
 800dbac:	e7cc      	b.n	800db48 <_malloc_r+0x2c>
 800dbae:	1cc4      	adds	r4, r0, #3
 800dbb0:	f024 0403 	bic.w	r4, r4, #3
 800dbb4:	42a0      	cmp	r0, r4
 800dbb6:	d005      	beq.n	800dbc4 <_malloc_r+0xa8>
 800dbb8:	1a21      	subs	r1, r4, r0
 800dbba:	4630      	mov	r0, r6
 800dbbc:	f000 fae2 	bl	800e184 <_sbrk_r>
 800dbc0:	3001      	adds	r0, #1
 800dbc2:	d0cf      	beq.n	800db64 <_malloc_r+0x48>
 800dbc4:	6025      	str	r5, [r4, #0]
 800dbc6:	e7db      	b.n	800db80 <_malloc_r+0x64>
 800dbc8:	200002c4 	.word	0x200002c4
 800dbcc:	200002c8 	.word	0x200002c8

0800dbd0 <__ssputs_r>:
 800dbd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbd4:	688e      	ldr	r6, [r1, #8]
 800dbd6:	429e      	cmp	r6, r3
 800dbd8:	4682      	mov	sl, r0
 800dbda:	460c      	mov	r4, r1
 800dbdc:	4690      	mov	r8, r2
 800dbde:	4699      	mov	r9, r3
 800dbe0:	d837      	bhi.n	800dc52 <__ssputs_r+0x82>
 800dbe2:	898a      	ldrh	r2, [r1, #12]
 800dbe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dbe8:	d031      	beq.n	800dc4e <__ssputs_r+0x7e>
 800dbea:	6825      	ldr	r5, [r4, #0]
 800dbec:	6909      	ldr	r1, [r1, #16]
 800dbee:	1a6f      	subs	r7, r5, r1
 800dbf0:	6965      	ldr	r5, [r4, #20]
 800dbf2:	2302      	movs	r3, #2
 800dbf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dbf8:	fb95 f5f3 	sdiv	r5, r5, r3
 800dbfc:	f109 0301 	add.w	r3, r9, #1
 800dc00:	443b      	add	r3, r7
 800dc02:	429d      	cmp	r5, r3
 800dc04:	bf38      	it	cc
 800dc06:	461d      	movcc	r5, r3
 800dc08:	0553      	lsls	r3, r2, #21
 800dc0a:	d530      	bpl.n	800dc6e <__ssputs_r+0x9e>
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	f7ff ff85 	bl	800db1c <_malloc_r>
 800dc12:	4606      	mov	r6, r0
 800dc14:	b950      	cbnz	r0, 800dc2c <__ssputs_r+0x5c>
 800dc16:	230c      	movs	r3, #12
 800dc18:	f8ca 3000 	str.w	r3, [sl]
 800dc1c:	89a3      	ldrh	r3, [r4, #12]
 800dc1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc22:	81a3      	strh	r3, [r4, #12]
 800dc24:	f04f 30ff 	mov.w	r0, #4294967295
 800dc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc2c:	463a      	mov	r2, r7
 800dc2e:	6921      	ldr	r1, [r4, #16]
 800dc30:	f000 fab8 	bl	800e1a4 <memcpy>
 800dc34:	89a3      	ldrh	r3, [r4, #12]
 800dc36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc3e:	81a3      	strh	r3, [r4, #12]
 800dc40:	6126      	str	r6, [r4, #16]
 800dc42:	6165      	str	r5, [r4, #20]
 800dc44:	443e      	add	r6, r7
 800dc46:	1bed      	subs	r5, r5, r7
 800dc48:	6026      	str	r6, [r4, #0]
 800dc4a:	60a5      	str	r5, [r4, #8]
 800dc4c:	464e      	mov	r6, r9
 800dc4e:	454e      	cmp	r6, r9
 800dc50:	d900      	bls.n	800dc54 <__ssputs_r+0x84>
 800dc52:	464e      	mov	r6, r9
 800dc54:	4632      	mov	r2, r6
 800dc56:	4641      	mov	r1, r8
 800dc58:	6820      	ldr	r0, [r4, #0]
 800dc5a:	f000 faae 	bl	800e1ba <memmove>
 800dc5e:	68a3      	ldr	r3, [r4, #8]
 800dc60:	1b9b      	subs	r3, r3, r6
 800dc62:	60a3      	str	r3, [r4, #8]
 800dc64:	6823      	ldr	r3, [r4, #0]
 800dc66:	441e      	add	r6, r3
 800dc68:	6026      	str	r6, [r4, #0]
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	e7dc      	b.n	800dc28 <__ssputs_r+0x58>
 800dc6e:	462a      	mov	r2, r5
 800dc70:	f000 fabe 	bl	800e1f0 <_realloc_r>
 800dc74:	4606      	mov	r6, r0
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d1e2      	bne.n	800dc40 <__ssputs_r+0x70>
 800dc7a:	6921      	ldr	r1, [r4, #16]
 800dc7c:	4650      	mov	r0, sl
 800dc7e:	f7ff feff 	bl	800da80 <_free_r>
 800dc82:	e7c8      	b.n	800dc16 <__ssputs_r+0x46>

0800dc84 <_svfiprintf_r>:
 800dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	461d      	mov	r5, r3
 800dc8a:	898b      	ldrh	r3, [r1, #12]
 800dc8c:	061f      	lsls	r7, r3, #24
 800dc8e:	b09d      	sub	sp, #116	; 0x74
 800dc90:	4680      	mov	r8, r0
 800dc92:	460c      	mov	r4, r1
 800dc94:	4616      	mov	r6, r2
 800dc96:	d50f      	bpl.n	800dcb8 <_svfiprintf_r+0x34>
 800dc98:	690b      	ldr	r3, [r1, #16]
 800dc9a:	b96b      	cbnz	r3, 800dcb8 <_svfiprintf_r+0x34>
 800dc9c:	2140      	movs	r1, #64	; 0x40
 800dc9e:	f7ff ff3d 	bl	800db1c <_malloc_r>
 800dca2:	6020      	str	r0, [r4, #0]
 800dca4:	6120      	str	r0, [r4, #16]
 800dca6:	b928      	cbnz	r0, 800dcb4 <_svfiprintf_r+0x30>
 800dca8:	230c      	movs	r3, #12
 800dcaa:	f8c8 3000 	str.w	r3, [r8]
 800dcae:	f04f 30ff 	mov.w	r0, #4294967295
 800dcb2:	e0c8      	b.n	800de46 <_svfiprintf_r+0x1c2>
 800dcb4:	2340      	movs	r3, #64	; 0x40
 800dcb6:	6163      	str	r3, [r4, #20]
 800dcb8:	2300      	movs	r3, #0
 800dcba:	9309      	str	r3, [sp, #36]	; 0x24
 800dcbc:	2320      	movs	r3, #32
 800dcbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcc2:	2330      	movs	r3, #48	; 0x30
 800dcc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcc8:	9503      	str	r5, [sp, #12]
 800dcca:	f04f 0b01 	mov.w	fp, #1
 800dcce:	4637      	mov	r7, r6
 800dcd0:	463d      	mov	r5, r7
 800dcd2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dcd6:	b10b      	cbz	r3, 800dcdc <_svfiprintf_r+0x58>
 800dcd8:	2b25      	cmp	r3, #37	; 0x25
 800dcda:	d13e      	bne.n	800dd5a <_svfiprintf_r+0xd6>
 800dcdc:	ebb7 0a06 	subs.w	sl, r7, r6
 800dce0:	d00b      	beq.n	800dcfa <_svfiprintf_r+0x76>
 800dce2:	4653      	mov	r3, sl
 800dce4:	4632      	mov	r2, r6
 800dce6:	4621      	mov	r1, r4
 800dce8:	4640      	mov	r0, r8
 800dcea:	f7ff ff71 	bl	800dbd0 <__ssputs_r>
 800dcee:	3001      	adds	r0, #1
 800dcf0:	f000 80a4 	beq.w	800de3c <_svfiprintf_r+0x1b8>
 800dcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf6:	4453      	add	r3, sl
 800dcf8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcfa:	783b      	ldrb	r3, [r7, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f000 809d 	beq.w	800de3c <_svfiprintf_r+0x1b8>
 800dd02:	2300      	movs	r3, #0
 800dd04:	f04f 32ff 	mov.w	r2, #4294967295
 800dd08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd0c:	9304      	str	r3, [sp, #16]
 800dd0e:	9307      	str	r3, [sp, #28]
 800dd10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd14:	931a      	str	r3, [sp, #104]	; 0x68
 800dd16:	462f      	mov	r7, r5
 800dd18:	2205      	movs	r2, #5
 800dd1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800dd1e:	4850      	ldr	r0, [pc, #320]	; (800de60 <_svfiprintf_r+0x1dc>)
 800dd20:	f7f2 fa76 	bl	8000210 <memchr>
 800dd24:	9b04      	ldr	r3, [sp, #16]
 800dd26:	b9d0      	cbnz	r0, 800dd5e <_svfiprintf_r+0xda>
 800dd28:	06d9      	lsls	r1, r3, #27
 800dd2a:	bf44      	itt	mi
 800dd2c:	2220      	movmi	r2, #32
 800dd2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd32:	071a      	lsls	r2, r3, #28
 800dd34:	bf44      	itt	mi
 800dd36:	222b      	movmi	r2, #43	; 0x2b
 800dd38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dd3c:	782a      	ldrb	r2, [r5, #0]
 800dd3e:	2a2a      	cmp	r2, #42	; 0x2a
 800dd40:	d015      	beq.n	800dd6e <_svfiprintf_r+0xea>
 800dd42:	9a07      	ldr	r2, [sp, #28]
 800dd44:	462f      	mov	r7, r5
 800dd46:	2000      	movs	r0, #0
 800dd48:	250a      	movs	r5, #10
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd50:	3b30      	subs	r3, #48	; 0x30
 800dd52:	2b09      	cmp	r3, #9
 800dd54:	d94d      	bls.n	800ddf2 <_svfiprintf_r+0x16e>
 800dd56:	b1b8      	cbz	r0, 800dd88 <_svfiprintf_r+0x104>
 800dd58:	e00f      	b.n	800dd7a <_svfiprintf_r+0xf6>
 800dd5a:	462f      	mov	r7, r5
 800dd5c:	e7b8      	b.n	800dcd0 <_svfiprintf_r+0x4c>
 800dd5e:	4a40      	ldr	r2, [pc, #256]	; (800de60 <_svfiprintf_r+0x1dc>)
 800dd60:	1a80      	subs	r0, r0, r2
 800dd62:	fa0b f000 	lsl.w	r0, fp, r0
 800dd66:	4318      	orrs	r0, r3
 800dd68:	9004      	str	r0, [sp, #16]
 800dd6a:	463d      	mov	r5, r7
 800dd6c:	e7d3      	b.n	800dd16 <_svfiprintf_r+0x92>
 800dd6e:	9a03      	ldr	r2, [sp, #12]
 800dd70:	1d11      	adds	r1, r2, #4
 800dd72:	6812      	ldr	r2, [r2, #0]
 800dd74:	9103      	str	r1, [sp, #12]
 800dd76:	2a00      	cmp	r2, #0
 800dd78:	db01      	blt.n	800dd7e <_svfiprintf_r+0xfa>
 800dd7a:	9207      	str	r2, [sp, #28]
 800dd7c:	e004      	b.n	800dd88 <_svfiprintf_r+0x104>
 800dd7e:	4252      	negs	r2, r2
 800dd80:	f043 0302 	orr.w	r3, r3, #2
 800dd84:	9207      	str	r2, [sp, #28]
 800dd86:	9304      	str	r3, [sp, #16]
 800dd88:	783b      	ldrb	r3, [r7, #0]
 800dd8a:	2b2e      	cmp	r3, #46	; 0x2e
 800dd8c:	d10c      	bne.n	800dda8 <_svfiprintf_r+0x124>
 800dd8e:	787b      	ldrb	r3, [r7, #1]
 800dd90:	2b2a      	cmp	r3, #42	; 0x2a
 800dd92:	d133      	bne.n	800ddfc <_svfiprintf_r+0x178>
 800dd94:	9b03      	ldr	r3, [sp, #12]
 800dd96:	1d1a      	adds	r2, r3, #4
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	9203      	str	r2, [sp, #12]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	bfb8      	it	lt
 800dda0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dda4:	3702      	adds	r7, #2
 800dda6:	9305      	str	r3, [sp, #20]
 800dda8:	4d2e      	ldr	r5, [pc, #184]	; (800de64 <_svfiprintf_r+0x1e0>)
 800ddaa:	7839      	ldrb	r1, [r7, #0]
 800ddac:	2203      	movs	r2, #3
 800ddae:	4628      	mov	r0, r5
 800ddb0:	f7f2 fa2e 	bl	8000210 <memchr>
 800ddb4:	b138      	cbz	r0, 800ddc6 <_svfiprintf_r+0x142>
 800ddb6:	2340      	movs	r3, #64	; 0x40
 800ddb8:	1b40      	subs	r0, r0, r5
 800ddba:	fa03 f000 	lsl.w	r0, r3, r0
 800ddbe:	9b04      	ldr	r3, [sp, #16]
 800ddc0:	4303      	orrs	r3, r0
 800ddc2:	3701      	adds	r7, #1
 800ddc4:	9304      	str	r3, [sp, #16]
 800ddc6:	7839      	ldrb	r1, [r7, #0]
 800ddc8:	4827      	ldr	r0, [pc, #156]	; (800de68 <_svfiprintf_r+0x1e4>)
 800ddca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddce:	2206      	movs	r2, #6
 800ddd0:	1c7e      	adds	r6, r7, #1
 800ddd2:	f7f2 fa1d 	bl	8000210 <memchr>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d038      	beq.n	800de4c <_svfiprintf_r+0x1c8>
 800ddda:	4b24      	ldr	r3, [pc, #144]	; (800de6c <_svfiprintf_r+0x1e8>)
 800dddc:	bb13      	cbnz	r3, 800de24 <_svfiprintf_r+0x1a0>
 800ddde:	9b03      	ldr	r3, [sp, #12]
 800dde0:	3307      	adds	r3, #7
 800dde2:	f023 0307 	bic.w	r3, r3, #7
 800dde6:	3308      	adds	r3, #8
 800dde8:	9303      	str	r3, [sp, #12]
 800ddea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddec:	444b      	add	r3, r9
 800ddee:	9309      	str	r3, [sp, #36]	; 0x24
 800ddf0:	e76d      	b.n	800dcce <_svfiprintf_r+0x4a>
 800ddf2:	fb05 3202 	mla	r2, r5, r2, r3
 800ddf6:	2001      	movs	r0, #1
 800ddf8:	460f      	mov	r7, r1
 800ddfa:	e7a6      	b.n	800dd4a <_svfiprintf_r+0xc6>
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	3701      	adds	r7, #1
 800de00:	9305      	str	r3, [sp, #20]
 800de02:	4619      	mov	r1, r3
 800de04:	250a      	movs	r5, #10
 800de06:	4638      	mov	r0, r7
 800de08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de0c:	3a30      	subs	r2, #48	; 0x30
 800de0e:	2a09      	cmp	r2, #9
 800de10:	d903      	bls.n	800de1a <_svfiprintf_r+0x196>
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0c8      	beq.n	800dda8 <_svfiprintf_r+0x124>
 800de16:	9105      	str	r1, [sp, #20]
 800de18:	e7c6      	b.n	800dda8 <_svfiprintf_r+0x124>
 800de1a:	fb05 2101 	mla	r1, r5, r1, r2
 800de1e:	2301      	movs	r3, #1
 800de20:	4607      	mov	r7, r0
 800de22:	e7f0      	b.n	800de06 <_svfiprintf_r+0x182>
 800de24:	ab03      	add	r3, sp, #12
 800de26:	9300      	str	r3, [sp, #0]
 800de28:	4622      	mov	r2, r4
 800de2a:	4b11      	ldr	r3, [pc, #68]	; (800de70 <_svfiprintf_r+0x1ec>)
 800de2c:	a904      	add	r1, sp, #16
 800de2e:	4640      	mov	r0, r8
 800de30:	f3af 8000 	nop.w
 800de34:	f1b0 3fff 	cmp.w	r0, #4294967295
 800de38:	4681      	mov	r9, r0
 800de3a:	d1d6      	bne.n	800ddea <_svfiprintf_r+0x166>
 800de3c:	89a3      	ldrh	r3, [r4, #12]
 800de3e:	065b      	lsls	r3, r3, #25
 800de40:	f53f af35 	bmi.w	800dcae <_svfiprintf_r+0x2a>
 800de44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de46:	b01d      	add	sp, #116	; 0x74
 800de48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de4c:	ab03      	add	r3, sp, #12
 800de4e:	9300      	str	r3, [sp, #0]
 800de50:	4622      	mov	r2, r4
 800de52:	4b07      	ldr	r3, [pc, #28]	; (800de70 <_svfiprintf_r+0x1ec>)
 800de54:	a904      	add	r1, sp, #16
 800de56:	4640      	mov	r0, r8
 800de58:	f000 f882 	bl	800df60 <_printf_i>
 800de5c:	e7ea      	b.n	800de34 <_svfiprintf_r+0x1b0>
 800de5e:	bf00      	nop
 800de60:	0800fda0 	.word	0x0800fda0
 800de64:	0800fda6 	.word	0x0800fda6
 800de68:	0800fdaa 	.word	0x0800fdaa
 800de6c:	00000000 	.word	0x00000000
 800de70:	0800dbd1 	.word	0x0800dbd1

0800de74 <_printf_common>:
 800de74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de78:	4691      	mov	r9, r2
 800de7a:	461f      	mov	r7, r3
 800de7c:	688a      	ldr	r2, [r1, #8]
 800de7e:	690b      	ldr	r3, [r1, #16]
 800de80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800de84:	4293      	cmp	r3, r2
 800de86:	bfb8      	it	lt
 800de88:	4613      	movlt	r3, r2
 800de8a:	f8c9 3000 	str.w	r3, [r9]
 800de8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800de92:	4606      	mov	r6, r0
 800de94:	460c      	mov	r4, r1
 800de96:	b112      	cbz	r2, 800de9e <_printf_common+0x2a>
 800de98:	3301      	adds	r3, #1
 800de9a:	f8c9 3000 	str.w	r3, [r9]
 800de9e:	6823      	ldr	r3, [r4, #0]
 800dea0:	0699      	lsls	r1, r3, #26
 800dea2:	bf42      	ittt	mi
 800dea4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dea8:	3302      	addmi	r3, #2
 800deaa:	f8c9 3000 	strmi.w	r3, [r9]
 800deae:	6825      	ldr	r5, [r4, #0]
 800deb0:	f015 0506 	ands.w	r5, r5, #6
 800deb4:	d107      	bne.n	800dec6 <_printf_common+0x52>
 800deb6:	f104 0a19 	add.w	sl, r4, #25
 800deba:	68e3      	ldr	r3, [r4, #12]
 800debc:	f8d9 2000 	ldr.w	r2, [r9]
 800dec0:	1a9b      	subs	r3, r3, r2
 800dec2:	42ab      	cmp	r3, r5
 800dec4:	dc28      	bgt.n	800df18 <_printf_common+0xa4>
 800dec6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800deca:	6822      	ldr	r2, [r4, #0]
 800decc:	3300      	adds	r3, #0
 800dece:	bf18      	it	ne
 800ded0:	2301      	movne	r3, #1
 800ded2:	0692      	lsls	r2, r2, #26
 800ded4:	d42d      	bmi.n	800df32 <_printf_common+0xbe>
 800ded6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800deda:	4639      	mov	r1, r7
 800dedc:	4630      	mov	r0, r6
 800dede:	47c0      	blx	r8
 800dee0:	3001      	adds	r0, #1
 800dee2:	d020      	beq.n	800df26 <_printf_common+0xb2>
 800dee4:	6823      	ldr	r3, [r4, #0]
 800dee6:	68e5      	ldr	r5, [r4, #12]
 800dee8:	f8d9 2000 	ldr.w	r2, [r9]
 800deec:	f003 0306 	and.w	r3, r3, #6
 800def0:	2b04      	cmp	r3, #4
 800def2:	bf08      	it	eq
 800def4:	1aad      	subeq	r5, r5, r2
 800def6:	68a3      	ldr	r3, [r4, #8]
 800def8:	6922      	ldr	r2, [r4, #16]
 800defa:	bf0c      	ite	eq
 800defc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df00:	2500      	movne	r5, #0
 800df02:	4293      	cmp	r3, r2
 800df04:	bfc4      	itt	gt
 800df06:	1a9b      	subgt	r3, r3, r2
 800df08:	18ed      	addgt	r5, r5, r3
 800df0a:	f04f 0900 	mov.w	r9, #0
 800df0e:	341a      	adds	r4, #26
 800df10:	454d      	cmp	r5, r9
 800df12:	d11a      	bne.n	800df4a <_printf_common+0xd6>
 800df14:	2000      	movs	r0, #0
 800df16:	e008      	b.n	800df2a <_printf_common+0xb6>
 800df18:	2301      	movs	r3, #1
 800df1a:	4652      	mov	r2, sl
 800df1c:	4639      	mov	r1, r7
 800df1e:	4630      	mov	r0, r6
 800df20:	47c0      	blx	r8
 800df22:	3001      	adds	r0, #1
 800df24:	d103      	bne.n	800df2e <_printf_common+0xba>
 800df26:	f04f 30ff 	mov.w	r0, #4294967295
 800df2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df2e:	3501      	adds	r5, #1
 800df30:	e7c3      	b.n	800deba <_printf_common+0x46>
 800df32:	18e1      	adds	r1, r4, r3
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	2030      	movs	r0, #48	; 0x30
 800df38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df3c:	4422      	add	r2, r4
 800df3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df46:	3302      	adds	r3, #2
 800df48:	e7c5      	b.n	800ded6 <_printf_common+0x62>
 800df4a:	2301      	movs	r3, #1
 800df4c:	4622      	mov	r2, r4
 800df4e:	4639      	mov	r1, r7
 800df50:	4630      	mov	r0, r6
 800df52:	47c0      	blx	r8
 800df54:	3001      	adds	r0, #1
 800df56:	d0e6      	beq.n	800df26 <_printf_common+0xb2>
 800df58:	f109 0901 	add.w	r9, r9, #1
 800df5c:	e7d8      	b.n	800df10 <_printf_common+0x9c>
	...

0800df60 <_printf_i>:
 800df60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800df68:	460c      	mov	r4, r1
 800df6a:	7e09      	ldrb	r1, [r1, #24]
 800df6c:	b085      	sub	sp, #20
 800df6e:	296e      	cmp	r1, #110	; 0x6e
 800df70:	4617      	mov	r7, r2
 800df72:	4606      	mov	r6, r0
 800df74:	4698      	mov	r8, r3
 800df76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df78:	f000 80b3 	beq.w	800e0e2 <_printf_i+0x182>
 800df7c:	d822      	bhi.n	800dfc4 <_printf_i+0x64>
 800df7e:	2963      	cmp	r1, #99	; 0x63
 800df80:	d036      	beq.n	800dff0 <_printf_i+0x90>
 800df82:	d80a      	bhi.n	800df9a <_printf_i+0x3a>
 800df84:	2900      	cmp	r1, #0
 800df86:	f000 80b9 	beq.w	800e0fc <_printf_i+0x19c>
 800df8a:	2958      	cmp	r1, #88	; 0x58
 800df8c:	f000 8083 	beq.w	800e096 <_printf_i+0x136>
 800df90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800df94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800df98:	e032      	b.n	800e000 <_printf_i+0xa0>
 800df9a:	2964      	cmp	r1, #100	; 0x64
 800df9c:	d001      	beq.n	800dfa2 <_printf_i+0x42>
 800df9e:	2969      	cmp	r1, #105	; 0x69
 800dfa0:	d1f6      	bne.n	800df90 <_printf_i+0x30>
 800dfa2:	6820      	ldr	r0, [r4, #0]
 800dfa4:	6813      	ldr	r3, [r2, #0]
 800dfa6:	0605      	lsls	r5, r0, #24
 800dfa8:	f103 0104 	add.w	r1, r3, #4
 800dfac:	d52a      	bpl.n	800e004 <_printf_i+0xa4>
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	6011      	str	r1, [r2, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	da03      	bge.n	800dfbe <_printf_i+0x5e>
 800dfb6:	222d      	movs	r2, #45	; 0x2d
 800dfb8:	425b      	negs	r3, r3
 800dfba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dfbe:	486f      	ldr	r0, [pc, #444]	; (800e17c <_printf_i+0x21c>)
 800dfc0:	220a      	movs	r2, #10
 800dfc2:	e039      	b.n	800e038 <_printf_i+0xd8>
 800dfc4:	2973      	cmp	r1, #115	; 0x73
 800dfc6:	f000 809d 	beq.w	800e104 <_printf_i+0x1a4>
 800dfca:	d808      	bhi.n	800dfde <_printf_i+0x7e>
 800dfcc:	296f      	cmp	r1, #111	; 0x6f
 800dfce:	d020      	beq.n	800e012 <_printf_i+0xb2>
 800dfd0:	2970      	cmp	r1, #112	; 0x70
 800dfd2:	d1dd      	bne.n	800df90 <_printf_i+0x30>
 800dfd4:	6823      	ldr	r3, [r4, #0]
 800dfd6:	f043 0320 	orr.w	r3, r3, #32
 800dfda:	6023      	str	r3, [r4, #0]
 800dfdc:	e003      	b.n	800dfe6 <_printf_i+0x86>
 800dfde:	2975      	cmp	r1, #117	; 0x75
 800dfe0:	d017      	beq.n	800e012 <_printf_i+0xb2>
 800dfe2:	2978      	cmp	r1, #120	; 0x78
 800dfe4:	d1d4      	bne.n	800df90 <_printf_i+0x30>
 800dfe6:	2378      	movs	r3, #120	; 0x78
 800dfe8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dfec:	4864      	ldr	r0, [pc, #400]	; (800e180 <_printf_i+0x220>)
 800dfee:	e055      	b.n	800e09c <_printf_i+0x13c>
 800dff0:	6813      	ldr	r3, [r2, #0]
 800dff2:	1d19      	adds	r1, r3, #4
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	6011      	str	r1, [r2, #0]
 800dff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e000:	2301      	movs	r3, #1
 800e002:	e08c      	b.n	800e11e <_printf_i+0x1be>
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	6011      	str	r1, [r2, #0]
 800e008:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e00c:	bf18      	it	ne
 800e00e:	b21b      	sxthne	r3, r3
 800e010:	e7cf      	b.n	800dfb2 <_printf_i+0x52>
 800e012:	6813      	ldr	r3, [r2, #0]
 800e014:	6825      	ldr	r5, [r4, #0]
 800e016:	1d18      	adds	r0, r3, #4
 800e018:	6010      	str	r0, [r2, #0]
 800e01a:	0628      	lsls	r0, r5, #24
 800e01c:	d501      	bpl.n	800e022 <_printf_i+0xc2>
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	e002      	b.n	800e028 <_printf_i+0xc8>
 800e022:	0668      	lsls	r0, r5, #25
 800e024:	d5fb      	bpl.n	800e01e <_printf_i+0xbe>
 800e026:	881b      	ldrh	r3, [r3, #0]
 800e028:	4854      	ldr	r0, [pc, #336]	; (800e17c <_printf_i+0x21c>)
 800e02a:	296f      	cmp	r1, #111	; 0x6f
 800e02c:	bf14      	ite	ne
 800e02e:	220a      	movne	r2, #10
 800e030:	2208      	moveq	r2, #8
 800e032:	2100      	movs	r1, #0
 800e034:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e038:	6865      	ldr	r5, [r4, #4]
 800e03a:	60a5      	str	r5, [r4, #8]
 800e03c:	2d00      	cmp	r5, #0
 800e03e:	f2c0 8095 	blt.w	800e16c <_printf_i+0x20c>
 800e042:	6821      	ldr	r1, [r4, #0]
 800e044:	f021 0104 	bic.w	r1, r1, #4
 800e048:	6021      	str	r1, [r4, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d13d      	bne.n	800e0ca <_printf_i+0x16a>
 800e04e:	2d00      	cmp	r5, #0
 800e050:	f040 808e 	bne.w	800e170 <_printf_i+0x210>
 800e054:	4665      	mov	r5, ip
 800e056:	2a08      	cmp	r2, #8
 800e058:	d10b      	bne.n	800e072 <_printf_i+0x112>
 800e05a:	6823      	ldr	r3, [r4, #0]
 800e05c:	07db      	lsls	r3, r3, #31
 800e05e:	d508      	bpl.n	800e072 <_printf_i+0x112>
 800e060:	6923      	ldr	r3, [r4, #16]
 800e062:	6862      	ldr	r2, [r4, #4]
 800e064:	429a      	cmp	r2, r3
 800e066:	bfde      	ittt	le
 800e068:	2330      	movle	r3, #48	; 0x30
 800e06a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e06e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e072:	ebac 0305 	sub.w	r3, ip, r5
 800e076:	6123      	str	r3, [r4, #16]
 800e078:	f8cd 8000 	str.w	r8, [sp]
 800e07c:	463b      	mov	r3, r7
 800e07e:	aa03      	add	r2, sp, #12
 800e080:	4621      	mov	r1, r4
 800e082:	4630      	mov	r0, r6
 800e084:	f7ff fef6 	bl	800de74 <_printf_common>
 800e088:	3001      	adds	r0, #1
 800e08a:	d14d      	bne.n	800e128 <_printf_i+0x1c8>
 800e08c:	f04f 30ff 	mov.w	r0, #4294967295
 800e090:	b005      	add	sp, #20
 800e092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e096:	4839      	ldr	r0, [pc, #228]	; (800e17c <_printf_i+0x21c>)
 800e098:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e09c:	6813      	ldr	r3, [r2, #0]
 800e09e:	6821      	ldr	r1, [r4, #0]
 800e0a0:	1d1d      	adds	r5, r3, #4
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	6015      	str	r5, [r2, #0]
 800e0a6:	060a      	lsls	r2, r1, #24
 800e0a8:	d50b      	bpl.n	800e0c2 <_printf_i+0x162>
 800e0aa:	07ca      	lsls	r2, r1, #31
 800e0ac:	bf44      	itt	mi
 800e0ae:	f041 0120 	orrmi.w	r1, r1, #32
 800e0b2:	6021      	strmi	r1, [r4, #0]
 800e0b4:	b91b      	cbnz	r3, 800e0be <_printf_i+0x15e>
 800e0b6:	6822      	ldr	r2, [r4, #0]
 800e0b8:	f022 0220 	bic.w	r2, r2, #32
 800e0bc:	6022      	str	r2, [r4, #0]
 800e0be:	2210      	movs	r2, #16
 800e0c0:	e7b7      	b.n	800e032 <_printf_i+0xd2>
 800e0c2:	064d      	lsls	r5, r1, #25
 800e0c4:	bf48      	it	mi
 800e0c6:	b29b      	uxthmi	r3, r3
 800e0c8:	e7ef      	b.n	800e0aa <_printf_i+0x14a>
 800e0ca:	4665      	mov	r5, ip
 800e0cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0d0:	fb02 3311 	mls	r3, r2, r1, r3
 800e0d4:	5cc3      	ldrb	r3, [r0, r3]
 800e0d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e0da:	460b      	mov	r3, r1
 800e0dc:	2900      	cmp	r1, #0
 800e0de:	d1f5      	bne.n	800e0cc <_printf_i+0x16c>
 800e0e0:	e7b9      	b.n	800e056 <_printf_i+0xf6>
 800e0e2:	6813      	ldr	r3, [r2, #0]
 800e0e4:	6825      	ldr	r5, [r4, #0]
 800e0e6:	6961      	ldr	r1, [r4, #20]
 800e0e8:	1d18      	adds	r0, r3, #4
 800e0ea:	6010      	str	r0, [r2, #0]
 800e0ec:	0628      	lsls	r0, r5, #24
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	d501      	bpl.n	800e0f6 <_printf_i+0x196>
 800e0f2:	6019      	str	r1, [r3, #0]
 800e0f4:	e002      	b.n	800e0fc <_printf_i+0x19c>
 800e0f6:	066a      	lsls	r2, r5, #25
 800e0f8:	d5fb      	bpl.n	800e0f2 <_printf_i+0x192>
 800e0fa:	8019      	strh	r1, [r3, #0]
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	6123      	str	r3, [r4, #16]
 800e100:	4665      	mov	r5, ip
 800e102:	e7b9      	b.n	800e078 <_printf_i+0x118>
 800e104:	6813      	ldr	r3, [r2, #0]
 800e106:	1d19      	adds	r1, r3, #4
 800e108:	6011      	str	r1, [r2, #0]
 800e10a:	681d      	ldr	r5, [r3, #0]
 800e10c:	6862      	ldr	r2, [r4, #4]
 800e10e:	2100      	movs	r1, #0
 800e110:	4628      	mov	r0, r5
 800e112:	f7f2 f87d 	bl	8000210 <memchr>
 800e116:	b108      	cbz	r0, 800e11c <_printf_i+0x1bc>
 800e118:	1b40      	subs	r0, r0, r5
 800e11a:	6060      	str	r0, [r4, #4]
 800e11c:	6863      	ldr	r3, [r4, #4]
 800e11e:	6123      	str	r3, [r4, #16]
 800e120:	2300      	movs	r3, #0
 800e122:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e126:	e7a7      	b.n	800e078 <_printf_i+0x118>
 800e128:	6923      	ldr	r3, [r4, #16]
 800e12a:	462a      	mov	r2, r5
 800e12c:	4639      	mov	r1, r7
 800e12e:	4630      	mov	r0, r6
 800e130:	47c0      	blx	r8
 800e132:	3001      	adds	r0, #1
 800e134:	d0aa      	beq.n	800e08c <_printf_i+0x12c>
 800e136:	6823      	ldr	r3, [r4, #0]
 800e138:	079b      	lsls	r3, r3, #30
 800e13a:	d413      	bmi.n	800e164 <_printf_i+0x204>
 800e13c:	68e0      	ldr	r0, [r4, #12]
 800e13e:	9b03      	ldr	r3, [sp, #12]
 800e140:	4298      	cmp	r0, r3
 800e142:	bfb8      	it	lt
 800e144:	4618      	movlt	r0, r3
 800e146:	e7a3      	b.n	800e090 <_printf_i+0x130>
 800e148:	2301      	movs	r3, #1
 800e14a:	464a      	mov	r2, r9
 800e14c:	4639      	mov	r1, r7
 800e14e:	4630      	mov	r0, r6
 800e150:	47c0      	blx	r8
 800e152:	3001      	adds	r0, #1
 800e154:	d09a      	beq.n	800e08c <_printf_i+0x12c>
 800e156:	3501      	adds	r5, #1
 800e158:	68e3      	ldr	r3, [r4, #12]
 800e15a:	9a03      	ldr	r2, [sp, #12]
 800e15c:	1a9b      	subs	r3, r3, r2
 800e15e:	42ab      	cmp	r3, r5
 800e160:	dcf2      	bgt.n	800e148 <_printf_i+0x1e8>
 800e162:	e7eb      	b.n	800e13c <_printf_i+0x1dc>
 800e164:	2500      	movs	r5, #0
 800e166:	f104 0919 	add.w	r9, r4, #25
 800e16a:	e7f5      	b.n	800e158 <_printf_i+0x1f8>
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d1ac      	bne.n	800e0ca <_printf_i+0x16a>
 800e170:	7803      	ldrb	r3, [r0, #0]
 800e172:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e176:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e17a:	e76c      	b.n	800e056 <_printf_i+0xf6>
 800e17c:	0800fdb1 	.word	0x0800fdb1
 800e180:	0800fdc2 	.word	0x0800fdc2

0800e184 <_sbrk_r>:
 800e184:	b538      	push	{r3, r4, r5, lr}
 800e186:	4c06      	ldr	r4, [pc, #24]	; (800e1a0 <_sbrk_r+0x1c>)
 800e188:	2300      	movs	r3, #0
 800e18a:	4605      	mov	r5, r0
 800e18c:	4608      	mov	r0, r1
 800e18e:	6023      	str	r3, [r4, #0]
 800e190:	f7f5 fc3e 	bl	8003a10 <_sbrk>
 800e194:	1c43      	adds	r3, r0, #1
 800e196:	d102      	bne.n	800e19e <_sbrk_r+0x1a>
 800e198:	6823      	ldr	r3, [r4, #0]
 800e19a:	b103      	cbz	r3, 800e19e <_sbrk_r+0x1a>
 800e19c:	602b      	str	r3, [r5, #0]
 800e19e:	bd38      	pop	{r3, r4, r5, pc}
 800e1a0:	20000b78 	.word	0x20000b78

0800e1a4 <memcpy>:
 800e1a4:	b510      	push	{r4, lr}
 800e1a6:	1e43      	subs	r3, r0, #1
 800e1a8:	440a      	add	r2, r1
 800e1aa:	4291      	cmp	r1, r2
 800e1ac:	d100      	bne.n	800e1b0 <memcpy+0xc>
 800e1ae:	bd10      	pop	{r4, pc}
 800e1b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1b8:	e7f7      	b.n	800e1aa <memcpy+0x6>

0800e1ba <memmove>:
 800e1ba:	4288      	cmp	r0, r1
 800e1bc:	b510      	push	{r4, lr}
 800e1be:	eb01 0302 	add.w	r3, r1, r2
 800e1c2:	d807      	bhi.n	800e1d4 <memmove+0x1a>
 800e1c4:	1e42      	subs	r2, r0, #1
 800e1c6:	4299      	cmp	r1, r3
 800e1c8:	d00a      	beq.n	800e1e0 <memmove+0x26>
 800e1ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e1d2:	e7f8      	b.n	800e1c6 <memmove+0xc>
 800e1d4:	4283      	cmp	r3, r0
 800e1d6:	d9f5      	bls.n	800e1c4 <memmove+0xa>
 800e1d8:	1881      	adds	r1, r0, r2
 800e1da:	1ad2      	subs	r2, r2, r3
 800e1dc:	42d3      	cmn	r3, r2
 800e1de:	d100      	bne.n	800e1e2 <memmove+0x28>
 800e1e0:	bd10      	pop	{r4, pc}
 800e1e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e1e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e1ea:	e7f7      	b.n	800e1dc <memmove+0x22>

0800e1ec <__malloc_lock>:
 800e1ec:	4770      	bx	lr

0800e1ee <__malloc_unlock>:
 800e1ee:	4770      	bx	lr

0800e1f0 <_realloc_r>:
 800e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f2:	4607      	mov	r7, r0
 800e1f4:	4614      	mov	r4, r2
 800e1f6:	460e      	mov	r6, r1
 800e1f8:	b921      	cbnz	r1, 800e204 <_realloc_r+0x14>
 800e1fa:	4611      	mov	r1, r2
 800e1fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e200:	f7ff bc8c 	b.w	800db1c <_malloc_r>
 800e204:	b922      	cbnz	r2, 800e210 <_realloc_r+0x20>
 800e206:	f7ff fc3b 	bl	800da80 <_free_r>
 800e20a:	4625      	mov	r5, r4
 800e20c:	4628      	mov	r0, r5
 800e20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e210:	f000 f814 	bl	800e23c <_malloc_usable_size_r>
 800e214:	42a0      	cmp	r0, r4
 800e216:	d20f      	bcs.n	800e238 <_realloc_r+0x48>
 800e218:	4621      	mov	r1, r4
 800e21a:	4638      	mov	r0, r7
 800e21c:	f7ff fc7e 	bl	800db1c <_malloc_r>
 800e220:	4605      	mov	r5, r0
 800e222:	2800      	cmp	r0, #0
 800e224:	d0f2      	beq.n	800e20c <_realloc_r+0x1c>
 800e226:	4631      	mov	r1, r6
 800e228:	4622      	mov	r2, r4
 800e22a:	f7ff ffbb 	bl	800e1a4 <memcpy>
 800e22e:	4631      	mov	r1, r6
 800e230:	4638      	mov	r0, r7
 800e232:	f7ff fc25 	bl	800da80 <_free_r>
 800e236:	e7e9      	b.n	800e20c <_realloc_r+0x1c>
 800e238:	4635      	mov	r5, r6
 800e23a:	e7e7      	b.n	800e20c <_realloc_r+0x1c>

0800e23c <_malloc_usable_size_r>:
 800e23c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e240:	1f18      	subs	r0, r3, #4
 800e242:	2b00      	cmp	r3, #0
 800e244:	bfbc      	itt	lt
 800e246:	580b      	ldrlt	r3, [r1, r0]
 800e248:	18c0      	addlt	r0, r0, r3
 800e24a:	4770      	bx	lr

0800e24c <_gettimeofday>:
 800e24c:	4b02      	ldr	r3, [pc, #8]	; (800e258 <_gettimeofday+0xc>)
 800e24e:	2258      	movs	r2, #88	; 0x58
 800e250:	601a      	str	r2, [r3, #0]
 800e252:	f04f 30ff 	mov.w	r0, #4294967295
 800e256:	4770      	bx	lr
 800e258:	20000b78 	.word	0x20000b78

0800e25c <_init>:
 800e25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e25e:	bf00      	nop
 800e260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e262:	bc08      	pop	{r3}
 800e264:	469e      	mov	lr, r3
 800e266:	4770      	bx	lr

0800e268 <_fini>:
 800e268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e26a:	bf00      	nop
 800e26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e26e:	bc08      	pop	{r3}
 800e270:	469e      	mov	lr, r3
 800e272:	4770      	bx	lr
