
lab02_ping_pong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b30  0800da88  0800da88  0001da88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5b8  0800f5b8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5b8  0800f5b8  0001f5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5c0  0800f5c0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5c0  0800f5c0  0001f5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5c4  0800f5c4  0001f5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800f5c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad4  200000a8  0800f670  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  0800f670  00020b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aae2  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c3a  00000000  00000000  0004abba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002680  00000000  00000000  0004f7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002430  00000000  00000000  00051e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ecb0  00000000  00000000  000542a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fb0c  00000000  00000000  00082f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011808b  00000000  00000000  000a2a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001baaef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a998  00000000  00000000  001bab6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  001c5504  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001c5528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800da70 	.word	0x0800da70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	0800da70 	.word	0x0800da70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b0a9      	sub	sp, #164	; 0xa4
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f002 feaa 	bl	800330e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 fb93 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f001 fbb3 	bl	8001d28 <MX_GPIO_Init>
  MX_ADC3_Init();
 80005c2:	f000 fc4f 	bl	8000e64 <MX_ADC3_Init>
  MX_DCMI_Init();
 80005c6:	f000 fc9f 	bl	8000f08 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80005ca:	f000 fcd1 	bl	8000f70 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005ce:	f001 fb5b 	bl	8001c88 <MX_FMC_Init>
  MX_I2C1_Init();
 80005d2:	f000 fcff 	bl	8000fd4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80005d6:	f000 fd3d 	bl	8001054 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005da:	f000 fd7b 	bl	80010d4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80005de:	f000 fe2f 	bl	8001240 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80005e2:	f000 fe59 	bl	8001298 <MX_RTC_Init>
  MX_SAI2_Init();
 80005e6:	f000 fefd 	bl	80013e4 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80005ea:	f000 ffa3 	bl	8001534 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80005ee:	f000 ffd1 	bl	8001594 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80005f2:	f000 ffff 	bl	80015f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 80005f6:	f001 f83b 	bl	8001670 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005fa:	f001 f8e5 	bl	80017c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005fe:	f001 f959 	bl	80018b4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000602:	f001 f9cf 	bl	80019a4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000606:	f001 fa45 	bl	8001a94 <MX_TIM8_Init>
  MX_TIM12_Init();
 800060a:	f001 fa97 	bl	8001b3c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800060e:	f001 fadb 	bl	8001bc8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000612:	f001 fb09 	bl	8001c28 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the LCD
  BSP_SDRAM_Init();
 8000616:	f00b fea7 	bl	800c368 <BSP_SDRAM_Init>
  BSP_LCD_Init();
 800061a:	f00a ff49 	bl	800b4b0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800061e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000622:	2000      	movs	r0, #0
 8000624:	f00a ffdc 	bl	800b5e0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8000628:	2000      	movs	r0, #0
 800062a:	f00b f839 	bl	800b6a0 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800062e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000632:	f00b f8a7 	bl	800b784 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000636:	f04f 30ff 	mov.w	r0, #4294967295
 800063a:	f00b f841 	bl	800b6c0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800063e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000642:	f00b f855 	bl	800b6f0 <BSP_LCD_SetBackColor>
  // Set font size
  BSP_LCD_SetFont(&Font24);
 8000646:	48bc      	ldr	r0, [pc, #752]	; (8000938 <main+0x388>)
 8000648:	f00b f86c 	bl	800b724 <BSP_LCD_SetFont>
  
  /** Initialize the board **/
  int speed = 5;
 800064c:	2305      	movs	r3, #5
 800064e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int delay_time = speed + 5;
 8000652:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000656:	3305      	adds	r3, #5
 8000658:	66fb      	str	r3, [r7, #108]	; 0x6c
  int access_0 = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int access_2 = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  // Touch screen
  int screen_width = 480;
 8000666:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800066a:	66bb      	str	r3, [r7, #104]	; 0x68
  int screen_height = 272;
 800066c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000670:	667b      	str	r3, [r7, #100]	; 0x64
  BSP_TS_Init(screen_width, screen_height);
 8000672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000674:	b29b      	uxth	r3, r3
 8000676:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000678:	b292      	uxth	r2, r2
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f00c f829 	bl	800c6d4 <BSP_TS_Init>
  // Drawing parameters
  int ball_radius = 5;
 8000682:	2305      	movs	r3, #5
 8000684:	663b      	str	r3, [r7, #96]	; 0x60
  int paddle_width = 5;
 8000686:	2305      	movs	r3, #5
 8000688:	65fb      	str	r3, [r7, #92]	; 0x5c
  int paddle_height = 60;
 800068a:	233c      	movs	r3, #60	; 0x3c
 800068c:	65bb      	str	r3, [r7, #88]	; 0x58
  // Default position of the ball
  int center_x = 240;
 800068e:	23f0      	movs	r3, #240	; 0xf0
 8000690:	657b      	str	r3, [r7, #84]	; 0x54
  int center_y = 136;
 8000692:	2388      	movs	r3, #136	; 0x88
 8000694:	653b      	str	r3, [r7, #80]	; 0x50
  int point_L = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  int point_R = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int ball_x_last = center_x;
 80006a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  int ball_y_last = center_y;
 80006a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  // String buffer
  char str[32];
  
  // Random displacement
  int distance_x, distance_y;
  srand(time(NULL));
 80006ae:	2000      	movs	r0, #0
 80006b0:	f00c fdbc 	bl	800d22c <time>
 80006b4:	4603      	mov	r3, r0
 80006b6:	460c      	mov	r4, r1
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00c fd3f 	bl	800d13c <srand>
  distance_x = (rand() % 2) + 1;
 80006be:	f00c fd61 	bl	800d184 <rand>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	bfb8      	it	lt
 80006cc:	425b      	neglt	r3, r3
 80006ce:	3301      	adds	r3, #1
 80006d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  distance_y = (rand() % 2) + 1;
 80006d4:	f00c fd56 	bl	800d184 <rand>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	bfb8      	it	lt
 80006e2:	425b      	neglt	r3, r3
 80006e4:	3301      	adds	r3, #1
 80006e6:	67fb      	str	r3, [r7, #124]	; 0x7c

  // Set time stamp
  // HAL_GetTick() provides a tick value in millisecond.
  uint32_t tick_current;
  // The previous tick refreshes touched coordinates.
  uint32_t tk_record_0 = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t tk_record_1 = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	677b      	str	r3, [r7, #116]	; 0x74
    //   point_L = 0;
    //   point_R = 0;
    //   access_2 = 0;
    // }

    if (mode == 1) {
 80006f0:	4b92      	ldr	r3, [pc, #584]	; (800093c <main+0x38c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	f040 80d1 	bne.w	800089c <main+0x2ec>
      if(access_0 == 0) {
 80006fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d12c      	bne.n	800075c <main+0x1ac>
        BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000702:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000706:	f00b f83d 	bl	800b784 <BSP_LCD_Clear>
        access_0 = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        ball.x = center_x;
 8000710:	4a8b      	ldr	r2, [pc, #556]	; (8000940 <main+0x390>)
 8000712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000714:	6013      	str	r3, [r2, #0]
        ball.y = center_y;
 8000716:	4a8a      	ldr	r2, [pc, #552]	; (8000940 <main+0x390>)
 8000718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800071a:	6053      	str	r3, [r2, #4]
        // Default position of paddles
        paddle_L.x = 30;
 800071c:	4b89      	ldr	r3, [pc, #548]	; (8000944 <main+0x394>)
 800071e:	221e      	movs	r2, #30
 8000720:	601a      	str	r2, [r3, #0]
        paddle_L.y = screen_height / 2;
 8000722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000724:	2b00      	cmp	r3, #0
 8000726:	da00      	bge.n	800072a <main+0x17a>
 8000728:	3301      	adds	r3, #1
 800072a:	105b      	asrs	r3, r3, #1
 800072c:	461a      	mov	r2, r3
 800072e:	4b85      	ldr	r3, [pc, #532]	; (8000944 <main+0x394>)
 8000730:	605a      	str	r2, [r3, #4]
        paddle_R.x = 450;
 8000732:	4b85      	ldr	r3, [pc, #532]	; (8000948 <main+0x398>)
 8000734:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000738:	601a      	str	r2, [r3, #0]
        paddle_R.y = screen_height / 2;
 800073a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800073c:	2b00      	cmp	r3, #0
 800073e:	da00      	bge.n	8000742 <main+0x192>
 8000740:	3301      	adds	r3, #1
 8000742:	105b      	asrs	r3, r3, #1
 8000744:	461a      	mov	r2, r3
 8000746:	4b80      	ldr	r3, [pc, #512]	; (8000948 <main+0x398>)
 8000748:	605a      	str	r2, [r3, #4]
        point_L = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        point_R = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        access_2 = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      // sprintf(str, "           SPEED      ");
      // BSP_LCD_DisplayStringAtLine(3, (uint8_t*) str);
      sprintf(str, "    SPEED - %2d  +    ", speed);
 800075c:	463b      	mov	r3, r7
 800075e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000762:	497a      	ldr	r1, [pc, #488]	; (800094c <main+0x39c>)
 8000764:	4618      	mov	r0, r3
 8000766:	f00c fd41 	bl	800d1ec <siprintf>
      BSP_LCD_DisplayStringAtLine(5, (uint8_t*) str);
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	2005      	movs	r0, #5
 8000770:	f00b f938 	bl	800b9e4 <BSP_LCD_DisplayStringAtLine>
      tick_current = HAL_GetTick();
 8000774:	f002 fdec 	bl	8003350 <HAL_GetTick>
 8000778:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (tick_current - tk_record_0 > 100) {
 800077a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800077c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	2b64      	cmp	r3, #100	; 0x64
 8000782:	f240 808b 	bls.w	800089c <main+0x2ec>
        tk_record_0 = tick_current;
 8000786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000788:	67bb      	str	r3, [r7, #120]	; 0x78
        BSP_TS_GetState(&TS_State);
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	4618      	mov	r0, r3
 8000790:	f00b ffe0 	bl	800c754 <BSP_TS_GetState>
        if (TS_State.touchDetected) {
 8000794:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d07f      	beq.n	800089c <main+0x2ec>
          if (TS_State.touchX[0] != 0) {
 800079c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d07c      	beq.n	800089c <main+0x2ec>
            if (TS_State.touchX[0] <= (screen_width / 2 - 40) && TS_State.touchX[0] >= (screen_width / 2 - 60)) {
 80007a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007a4:	461a      	mov	r2, r3
 80007a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	da00      	bge.n	80007ae <main+0x1fe>
 80007ac:	3301      	adds	r3, #1
 80007ae:	105b      	asrs	r3, r3, #1
 80007b0:	3b28      	subs	r3, #40	; 0x28
 80007b2:	429a      	cmp	r2, r3
 80007b4:	dc34      	bgt.n	8000820 <main+0x270>
 80007b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80007b8:	461a      	mov	r2, r3
 80007ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80007bc:	2b00      	cmp	r3, #0
 80007be:	da00      	bge.n	80007c2 <main+0x212>
 80007c0:	3301      	adds	r3, #1
 80007c2:	105b      	asrs	r3, r3, #1
 80007c4:	3b3c      	subs	r3, #60	; 0x3c
 80007c6:	429a      	cmp	r2, r3
 80007c8:	db2a      	blt.n	8000820 <main+0x270>
              if (TS_State.touchY[0] <= (screen_height / 2 + 30) && TS_State.touchY[0] >= (screen_height / 2 - 30)) {
 80007ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80007cc:	461a      	mov	r2, r3
 80007ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	da00      	bge.n	80007d6 <main+0x226>
 80007d4:	3301      	adds	r3, #1
 80007d6:	105b      	asrs	r3, r3, #1
 80007d8:	331e      	adds	r3, #30
 80007da:	429a      	cmp	r2, r3
 80007dc:	dc1b      	bgt.n	8000816 <main+0x266>
 80007de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80007e0:	461a      	mov	r2, r3
 80007e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	da00      	bge.n	80007ea <main+0x23a>
 80007e8:	3301      	adds	r3, #1
 80007ea:	105b      	asrs	r3, r3, #1
 80007ec:	3b1e      	subs	r3, #30
 80007ee:	429a      	cmp	r2, r3
 80007f0:	db11      	blt.n	8000816 <main+0x266>
                speed = speed - 1;
 80007f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80007f6:	3b01      	subs	r3, #1
 80007f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                if (speed < 1) {
 80007fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000800:	2b00      	cmp	r3, #0
 8000802:	dc08      	bgt.n	8000816 <main+0x266>
                  speed = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                }
              }
              while (TS_State.touchDetected) {
 800080a:	e004      	b.n	8000816 <main+0x266>
                BSP_TS_GetState(&TS_State);
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f00b ff9f 	bl	800c754 <BSP_TS_GetState>
              while (TS_State.touchDetected) {
 8000816:	f897 3020 	ldrb.w	r3, [r7, #32]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f6      	bne.n	800080c <main+0x25c>
            if (TS_State.touchX[0] <= (screen_width / 2 - 40) && TS_State.touchX[0] >= (screen_width / 2 - 60)) {
 800081e:	e03d      	b.n	800089c <main+0x2ec>
              }
            }
            else if (TS_State.touchX[0] >= (screen_width / 2 + 40) && TS_State.touchX[0] <= (screen_width / 2 + 60)) {
 8000820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000822:	461a      	mov	r2, r3
 8000824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000826:	2b00      	cmp	r3, #0
 8000828:	da00      	bge.n	800082c <main+0x27c>
 800082a:	3301      	adds	r3, #1
 800082c:	105b      	asrs	r3, r3, #1
 800082e:	3328      	adds	r3, #40	; 0x28
 8000830:	429a      	cmp	r2, r3
 8000832:	db33      	blt.n	800089c <main+0x2ec>
 8000834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000836:	461a      	mov	r2, r3
 8000838:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800083a:	2b00      	cmp	r3, #0
 800083c:	da00      	bge.n	8000840 <main+0x290>
 800083e:	3301      	adds	r3, #1
 8000840:	105b      	asrs	r3, r3, #1
 8000842:	333c      	adds	r3, #60	; 0x3c
 8000844:	429a      	cmp	r2, r3
 8000846:	dc29      	bgt.n	800089c <main+0x2ec>
              if (TS_State.touchY[0] <= (screen_height / 2 + 30) && TS_State.touchY[0] >= (screen_height / 2 - 30)) {
 8000848:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800084a:	461a      	mov	r2, r3
 800084c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800084e:	2b00      	cmp	r3, #0
 8000850:	da00      	bge.n	8000854 <main+0x2a4>
 8000852:	3301      	adds	r3, #1
 8000854:	105b      	asrs	r3, r3, #1
 8000856:	331e      	adds	r3, #30
 8000858:	429a      	cmp	r2, r3
 800085a:	dc1b      	bgt.n	8000894 <main+0x2e4>
 800085c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800085e:	461a      	mov	r2, r3
 8000860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000862:	2b00      	cmp	r3, #0
 8000864:	da00      	bge.n	8000868 <main+0x2b8>
 8000866:	3301      	adds	r3, #1
 8000868:	105b      	asrs	r3, r3, #1
 800086a:	3b1e      	subs	r3, #30
 800086c:	429a      	cmp	r2, r3
 800086e:	db11      	blt.n	8000894 <main+0x2e4>
                speed = speed + 1;
 8000870:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000874:	3301      	adds	r3, #1
 8000876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                if (speed > 10) {
 800087a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800087e:	2b0a      	cmp	r3, #10
 8000880:	dd08      	ble.n	8000894 <main+0x2e4>
                  speed = 10;
 8000882:	230a      	movs	r3, #10
 8000884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                }
              }
              while (TS_State.touchDetected) {
 8000888:	e004      	b.n	8000894 <main+0x2e4>
                BSP_TS_GetState(&TS_State);
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	4618      	mov	r0, r3
 8000890:	f00b ff60 	bl	800c754 <BSP_TS_GetState>
              while (TS_State.touchDetected) {
 8000894:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1f6      	bne.n	800088a <main+0x2da>
          }
        }
      }
    }

    if (mode == 2) {
 800089c:	4b27      	ldr	r3, [pc, #156]	; (800093c <main+0x38c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	f47f af25 	bne.w	80006f0 <main+0x140>
      if (access_2 == 0) {
 80008a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d109      	bne.n	80008c2 <main+0x312>
        BSP_LCD_Clear(LCD_COLOR_BLACK);
 80008ae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80008b2:	f00a ff67 	bl	800b784 <BSP_LCD_Clear>
        access_0 = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        access_2 = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      /** User input **/
      tick_current = HAL_GetTick();
 80008c2:	f002 fd45 	bl	8003350 <HAL_GetTick>
 80008c6:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (tick_current - tk_record_1 > 50) {
 80008c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80008ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	2b32      	cmp	r3, #50	; 0x32
 80008d0:	f240 80bf 	bls.w	8000a52 <main+0x4a2>
        tk_record_1 = tick_current;
 80008d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80008d6:	677b      	str	r3, [r7, #116]	; 0x74
        // Poll the state touch screen
        BSP_TS_GetState(&TS_State);
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	4618      	mov	r0, r3
 80008de:	f00b ff39 	bl	800c754 <BSP_TS_GetState>
        // The touch screen on the board is multi-touch
        if (TS_State.touchDetected) {
 80008e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f000 80b3 	beq.w	8000a52 <main+0x4a2>
          // default 2 fingers
          for (uint8_t i = 0; i < 2; i++) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 80008f2:	e0a9      	b.n	8000a48 <main+0x498>
            // the paddle cannot sink into the top of screen
            if (TS_State.touchY[i] <= paddle_height / 2) {
 80008f4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80008f8:	3304      	adds	r3, #4
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000900:	4413      	add	r3, r2
 8000902:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8000906:	461a      	mov	r2, r3
 8000908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800090a:	2b00      	cmp	r3, #0
 800090c:	da00      	bge.n	8000910 <main+0x360>
 800090e:	3301      	adds	r3, #1
 8000910:	105b      	asrs	r3, r3, #1
 8000912:	429a      	cmp	r2, r3
 8000914:	dc1c      	bgt.n	8000950 <main+0x3a0>
              TS_State.touchY[i] = paddle_height / 2;
 8000916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000918:	2b00      	cmp	r3, #0
 800091a:	da00      	bge.n	800091e <main+0x36e>
 800091c:	3301      	adds	r3, #1
 800091e:	105b      	asrs	r3, r3, #1
 8000920:	461a      	mov	r2, r3
 8000922:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000926:	b292      	uxth	r2, r2
 8000928:	3304      	adds	r3, #4
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000930:	440b      	add	r3, r1
 8000932:	f823 2c7c 	strh.w	r2, [r3, #-124]
 8000936:	e034      	b.n	80009a2 <main+0x3f2>
 8000938:	20000010 	.word	0x20000010
 800093c:	20000000 	.word	0x20000000
 8000940:	20000950 	.word	0x20000950
 8000944:	20000888 	.word	0x20000888
 8000948:	20000840 	.word	0x20000840
 800094c:	0800da88 	.word	0x0800da88
            }
            // the paddle cannot sink into the button of screen
            else if (TS_State.touchY[i] >= screen_height - paddle_height / 2) {
 8000950:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000954:	3304      	adds	r3, #4
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800095c:	4413      	add	r3, r2
 800095e:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8000962:	461a      	mov	r2, r3
 8000964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000966:	2b00      	cmp	r3, #0
 8000968:	da00      	bge.n	800096c <main+0x3bc>
 800096a:	3301      	adds	r3, #1
 800096c:	105b      	asrs	r3, r3, #1
 800096e:	425b      	negs	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000974:	440b      	add	r3, r1
 8000976:	429a      	cmp	r2, r3
 8000978:	db13      	blt.n	80009a2 <main+0x3f2>
              TS_State.touchY[i] = screen_height - paddle_height / 2;
 800097a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800097c:	2b00      	cmp	r3, #0
 800097e:	da00      	bge.n	8000982 <main+0x3d2>
 8000980:	3301      	adds	r3, #1
 8000982:	105b      	asrs	r3, r3, #1
 8000984:	425b      	negs	r3, r3
 8000986:	b299      	uxth	r1, r3
 8000988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800098a:	b29a      	uxth	r2, r3
 800098c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000990:	440a      	add	r2, r1
 8000992:	b292      	uxth	r2, r2
 8000994:	3304      	adds	r3, #4
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800099c:	440b      	add	r3, r1
 800099e:	f823 2c7c 	strh.w	r2, [r3, #-124]
            }
            // record the position of fingers of users
            if (TS_State.touchX[i] != 0) {
 80009a2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80009ac:	4413      	add	r3, r2
 80009ae:	f833 3c7e 	ldrh.w	r3, [r3, #-126]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d02a      	beq.n	8000a0c <main+0x45c>
              // left paddle
              if (TS_State.touchX[i] <= (screen_width / 2)) {
 80009b6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80009c0:	4413      	add	r3, r2
 80009c2:	f833 3c7e 	ldrh.w	r3, [r3, #-126]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	da00      	bge.n	80009d0 <main+0x420>
 80009ce:	3301      	adds	r3, #1
 80009d0:	105b      	asrs	r3, r3, #1
 80009d2:	429a      	cmp	r2, r3
 80009d4:	dc0e      	bgt.n	80009f4 <main+0x444>
                paddle_L.y = TS_State.touchY[i];
 80009d6:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80009da:	3304      	adds	r3, #4
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80009e2:	4413      	add	r3, r2
 80009e4:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 80009e8:	461a      	mov	r2, r3
 80009ea:	4b01      	ldr	r3, [pc, #4]	; (80009f0 <main+0x440>)
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	e00d      	b.n	8000a0c <main+0x45c>
 80009f0:	20000888 	.word	0x20000888
              }
              else {
                // right paddle
                paddle_R.y = TS_State.touchY[i];
 80009f4:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80009f8:	3304      	adds	r3, #4
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000a00:	4413      	add	r3, r2
 8000a02:	f833 3c7c 	ldrh.w	r3, [r3, #-124]
 8000a06:	461a      	mov	r2, r3
 8000a08:	4bb1      	ldr	r3, [pc, #708]	; (8000cd0 <main+0x720>)
 8000a0a:	605a      	str	r2, [r3, #4]
              }
            }
            // Reset the displayed coordinates if the screen is untouched(debugging)
            TS_State.touchX[i] = TS_State.touchY[i] = 0;
 8000a0c:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8000a10:	1d13      	adds	r3, r2, #4
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000a18:	440b      	add	r3, r1
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f823 1c7c 	strh.w	r1, [r3, #-124]
 8000a20:	f897 1073 	ldrb.w	r1, [r7, #115]	; 0x73
 8000a24:	1d13      	adds	r3, r2, #4
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000a2c:	4413      	add	r3, r2
 8000a2e:	f833 2c7c 	ldrh.w	r2, [r3, #-124]
 8000a32:	004b      	lsls	r3, r1, #1
 8000a34:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8000a38:	440b      	add	r3, r1
 8000a3a:	f823 2c7e 	strh.w	r2, [r3, #-126]
          for (uint8_t i = 0; i < 2; i++) {
 8000a3e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000a42:	3301      	adds	r3, #1
 8000a44:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8000a48:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	f67f af51 	bls.w	80008f4 <main+0x344>
        }
      }

      /** Logic of the game **/
      // change the speed of the ball
      delay_time = (-1 * speed + 11) + 5;
 8000a52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000a56:	f1c3 0310 	rsb	r3, r3, #16
 8000a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
      ball.x = ball.x + distance_x;
 8000a5c:	4b9d      	ldr	r3, [pc, #628]	; (8000cd4 <main+0x724>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a64:	4413      	add	r3, r2
 8000a66:	4a9b      	ldr	r2, [pc, #620]	; (8000cd4 <main+0x724>)
 8000a68:	6013      	str	r3, [r2, #0]
      ball.y = ball.y + distance_y;
 8000a6a:	4b9a      	ldr	r3, [pc, #616]	; (8000cd4 <main+0x724>)
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a70:	4413      	add	r3, r2
 8000a72:	4a98      	ldr	r2, [pc, #608]	; (8000cd4 <main+0x724>)
 8000a74:	6053      	str	r3, [r2, #4]
      // (debugging)
      // sprintf(str, "x: %03d, y: %03d", ball.x, ball.y);
      // BSP_LCD_DisplayStringAtLine(0, (uint8_t*) str);
      
      // the ball meets the upper and lower bounds
      if (ball.y <= 10 || ball.y >= screen_height - 10) {
 8000a76:	4b97      	ldr	r3, [pc, #604]	; (8000cd4 <main+0x724>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2b0a      	cmp	r3, #10
 8000a7c:	dd05      	ble.n	8000a8a <main+0x4da>
 8000a7e:	4b95      	ldr	r3, [pc, #596]	; (8000cd4 <main+0x724>)
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a84:	3b0a      	subs	r3, #10
 8000a86:	429a      	cmp	r2, r3
 8000a88:	db02      	blt.n	8000a90 <main+0x4e0>
        distance_y = -1 * distance_y;
 8000a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a8c:	425b      	negs	r3, r3
 8000a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      // the ball meets the left paddle
      if ((ball.x >= paddle_L.x + 5) && (ball.x <= paddle_L.x + 10)) {
 8000a90:	4b90      	ldr	r3, [pc, #576]	; (8000cd4 <main+0x724>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b90      	ldr	r3, [pc, #576]	; (8000cd8 <main+0x728>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3305      	adds	r3, #5
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	db26      	blt.n	8000aec <main+0x53c>
 8000a9e:	4b8d      	ldr	r3, [pc, #564]	; (8000cd4 <main+0x724>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4b8d      	ldr	r3, [pc, #564]	; (8000cd8 <main+0x728>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	330a      	adds	r3, #10
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	dc1f      	bgt.n	8000aec <main+0x53c>
        // upper bound and lower bound of the paddle
        if ((ball.y + 5 > paddle_L.y - paddle_height / 2) && (ball.y - 5 < paddle_L.y + paddle_height / 2)) {
 8000aac:	4b89      	ldr	r3, [pc, #548]	; (8000cd4 <main+0x724>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	1d5a      	adds	r2, r3, #5
 8000ab2:	4b89      	ldr	r3, [pc, #548]	; (8000cd8 <main+0x728>)
 8000ab4:	6859      	ldr	r1, [r3, #4]
 8000ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	da00      	bge.n	8000abe <main+0x50e>
 8000abc:	3301      	adds	r3, #1
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	425b      	negs	r3, r3
 8000ac2:	440b      	add	r3, r1
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dd11      	ble.n	8000aec <main+0x53c>
 8000ac8:	4b82      	ldr	r3, [pc, #520]	; (8000cd4 <main+0x724>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	1f5a      	subs	r2, r3, #5
 8000ace:	4b82      	ldr	r3, [pc, #520]	; (8000cd8 <main+0x728>)
 8000ad0:	6859      	ldr	r1, [r3, #4]
 8000ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	da00      	bge.n	8000ada <main+0x52a>
 8000ad8:	3301      	adds	r3, #1
 8000ada:	105b      	asrs	r3, r3, #1
 8000adc:	440b      	add	r3, r1
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	da04      	bge.n	8000aec <main+0x53c>
          distance_x = -1 * distance_x;
 8000ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000ae6:	425b      	negs	r3, r3
 8000ae8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }
      }
      // the ball meets the right paddle
      if ((ball.x >= paddle_R.x - 10) && (ball.x <= paddle_R.x - 5)) {
 8000aec:	4b79      	ldr	r3, [pc, #484]	; (8000cd4 <main+0x724>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b77      	ldr	r3, [pc, #476]	; (8000cd0 <main+0x720>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3b0a      	subs	r3, #10
 8000af6:	429a      	cmp	r2, r3
 8000af8:	db26      	blt.n	8000b48 <main+0x598>
 8000afa:	4b76      	ldr	r3, [pc, #472]	; (8000cd4 <main+0x724>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b74      	ldr	r3, [pc, #464]	; (8000cd0 <main+0x720>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3b05      	subs	r3, #5
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dc1f      	bgt.n	8000b48 <main+0x598>
        // upper bound and lower bound of the paddle
        if ((ball.y + 5 > paddle_R.y - paddle_height / 2) && (ball.y - 5  < paddle_R.y + paddle_height / 2)) {
 8000b08:	4b72      	ldr	r3, [pc, #456]	; (8000cd4 <main+0x724>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	1d5a      	adds	r2, r3, #5
 8000b0e:	4b70      	ldr	r3, [pc, #448]	; (8000cd0 <main+0x720>)
 8000b10:	6859      	ldr	r1, [r3, #4]
 8000b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	da00      	bge.n	8000b1a <main+0x56a>
 8000b18:	3301      	adds	r3, #1
 8000b1a:	105b      	asrs	r3, r3, #1
 8000b1c:	425b      	negs	r3, r3
 8000b1e:	440b      	add	r3, r1
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dd11      	ble.n	8000b48 <main+0x598>
 8000b24:	4b6b      	ldr	r3, [pc, #428]	; (8000cd4 <main+0x724>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	1f5a      	subs	r2, r3, #5
 8000b2a:	4b69      	ldr	r3, [pc, #420]	; (8000cd0 <main+0x720>)
 8000b2c:	6859      	ldr	r1, [r3, #4]
 8000b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da00      	bge.n	8000b36 <main+0x586>
 8000b34:	3301      	adds	r3, #1
 8000b36:	105b      	asrs	r3, r3, #1
 8000b38:	440b      	add	r3, r1
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	da04      	bge.n	8000b48 <main+0x598>
          distance_x = -1 * distance_x;
 8000b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b42:	425b      	negs	r3, r3
 8000b44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        }
      }

      // out of the left bound
      if (ball.x <= 5) {
 8000b48:	4b62      	ldr	r3, [pc, #392]	; (8000cd4 <main+0x724>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b05      	cmp	r3, #5
 8000b4e:	dc25      	bgt.n	8000b9c <main+0x5ec>
        point_R = point_R + 1;
 8000b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000b54:	3301      	adds	r3, #1
 8000b56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        ball.x = center_x;
 8000b5a:	4a5e      	ldr	r2, [pc, #376]	; (8000cd4 <main+0x724>)
 8000b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b5e:	6013      	str	r3, [r2, #0]
        ball.y = center_y;
 8000b60:	4a5c      	ldr	r2, [pc, #368]	; (8000cd4 <main+0x724>)
 8000b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b64:	6053      	str	r3, [r2, #4]
        distance_x = -1 * distance_x;
 8000b66:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b6a:	425b      	negs	r3, r3
 8000b6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        distance_y = -(2 * ((rand() % 2) + 1) - 2);
 8000b70:	f00c fb08 	bl	800d184 <rand>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	4613      	mov	r3, r2
 8000b84:	07db      	lsls	r3, r3, #31
 8000b86:	1a9b      	subs	r3, r3, r2
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
        if (distance_y == 0) {
 8000b8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <main+0x5e6>
          distance_y = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        HAL_Delay(200);
 8000b96:	20c8      	movs	r0, #200	; 0xc8
 8000b98:	f002 fbe6 	bl	8003368 <HAL_Delay>
      }

      // out of the right bound
      if (ball.x >= screen_width - 5) {
 8000b9c:	4b4d      	ldr	r3, [pc, #308]	; (8000cd4 <main+0x724>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ba2:	3b05      	subs	r3, #5
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	db25      	blt.n	8000bf4 <main+0x644>
        point_L = point_L + 1;
 8000ba8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000bac:	3301      	adds	r3, #1
 8000bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        ball.x = center_x;
 8000bb2:	4a48      	ldr	r2, [pc, #288]	; (8000cd4 <main+0x724>)
 8000bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bb6:	6013      	str	r3, [r2, #0]
        ball.y = center_y;
 8000bb8:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <main+0x724>)
 8000bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bbc:	6053      	str	r3, [r2, #4]
        distance_x = -1 * distance_x;
 8000bbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        distance_y = -(2 * ((rand() % 2) + 1) - 2);
 8000bc8:	f00c fadc 	bl	800d184 <rand>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4613      	mov	r3, r2
 8000bdc:	07db      	lsls	r3, r3, #31
 8000bde:	1a9b      	subs	r3, r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	67fb      	str	r3, [r7, #124]	; 0x7c
        if (distance_y == 0) {
 8000be4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <main+0x63e>
          distance_y = 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	67fb      	str	r3, [r7, #124]	; 0x7c
        }
        HAL_Delay(200);
 8000bee:	20c8      	movs	r0, #200	; 0xc8
 8000bf0:	f002 fbba 	bl	8003368 <HAL_Delay>
      }
      
      /** Drawing on the LCD **/
      /* Clear the LCD */
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000bf4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000bf8:	f00a fd62 	bl	800b6c0 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(ball_x_last, ball_y_last, ball_radius);
 8000bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000c06:	b291      	uxth	r1, r2
 8000c08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c0a:	b292      	uxth	r2, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f00b f911 	bl	800be34 <BSP_LCD_FillCircle>
      BSP_LCD_FillRect(paddle_L.x, 0, paddle_width, screen_height);
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <main+0x728>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	b298      	uxth	r0, r3
 8000c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	2100      	movs	r1, #0
 8000c22:	f00b f88d 	bl	800bd40 <BSP_LCD_FillRect>
      BSP_LCD_FillRect(paddle_R.x - 5, 0, paddle_width, screen_height);
 8000c26:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <main+0x720>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	3b05      	subs	r3, #5
 8000c2e:	b298      	uxth	r0, r3
 8000c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f00b f881 	bl	800bd40 <BSP_LCD_FillRect>
      /* Draw the item */
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c42:	f00a fd3d 	bl	800b6c0 <BSP_LCD_SetTextColor>
      // Ball
      BSP_LCD_FillCircle(ball.x, ball.y, ball_radius);
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <main+0x724>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	b298      	uxth	r0, r3
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <main+0x724>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000c54:	b292      	uxth	r2, r2
 8000c56:	4619      	mov	r1, r3
 8000c58:	f00b f8ec 	bl	800be34 <BSP_LCD_FillCircle>
      // Left paddle
      BSP_LCD_FillRect(paddle_L.x, paddle_L.y - 30, paddle_width, paddle_height);
 8000c5c:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <main+0x728>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	b298      	uxth	r0, r3
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <main+0x728>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	3b1e      	subs	r3, #30
 8000c6a:	b299      	uxth	r1, r3
 8000c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	f00b f864 	bl	800bd40 <BSP_LCD_FillRect>
      // Right paddle
      BSP_LCD_FillRect(paddle_R.x - 5, paddle_R.y - 30, paddle_width, paddle_height);
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <main+0x720>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	3b05      	subs	r3, #5
 8000c80:	b298      	uxth	r0, r3
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <main+0x720>)
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	3b1e      	subs	r3, #30
 8000c8a:	b299      	uxth	r1, r3
 8000c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	f00b f854 	bl	800bd40 <BSP_LCD_FillRect>
      // Counting the points
      sprintf(str, "%03d:%03d", point_L, point_R);
 8000c98:	4638      	mov	r0, r7
 8000c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c9e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000ca2:	490e      	ldr	r1, [pc, #56]	; (8000cdc <main+0x72c>)
 8000ca4:	f00c faa2 	bl	800d1ec <siprintf>
      BSP_LCD_DisplayStringAt(0, 0, (uint8_t*) str, CENTER_MODE);
 8000ca8:	463a      	mov	r2, r7
 8000caa:	2301      	movs	r3, #1
 8000cac:	2100      	movs	r1, #0
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f00a fdd4 	bl	800b85c <BSP_LCD_DisplayStringAt>
      
      HAL_Delay(delay_time);
 8000cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 fb56 	bl	8003368 <HAL_Delay>
      ball_x_last = ball.x;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <main+0x724>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      ball_y_last = ball.y;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <main+0x724>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000ccc:	e008      	b.n	8000ce0 <main+0x730>
 8000cce:	bf00      	nop
 8000cd0:	20000840 	.word	0x20000840
 8000cd4:	20000950 	.word	0x20000950
 8000cd8:	20000888 	.word	0x20000888
 8000cdc:	0800daa0 	.word	0x0800daa0
    if (mode == 1) {
 8000ce0:	e506      	b.n	80006f0 <main+0x140>
 8000ce2:	bf00      	nop

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0b4      	sub	sp, #208	; 0xd0
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000cee:	2230      	movs	r2, #48	; 0x30
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f00c fa1a 	bl	800d12c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	2284      	movs	r2, #132	; 0x84
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f00c fa0b 	bl	800d12c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d16:	f005 f89f 	bl	8005e58 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b4f      	ldr	r3, [pc, #316]	; (8000e58 <SystemClock_Config+0x174>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a4e      	ldr	r2, [pc, #312]	; (8000e58 <SystemClock_Config+0x174>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b4c      	ldr	r3, [pc, #304]	; (8000e58 <SystemClock_Config+0x174>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d32:	4b4a      	ldr	r3, [pc, #296]	; (8000e5c <SystemClock_Config+0x178>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a49      	ldr	r2, [pc, #292]	; (8000e5c <SystemClock_Config+0x178>)
 8000d38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4b47      	ldr	r3, [pc, #284]	; (8000e5c <SystemClock_Config+0x178>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d4a:	2309      	movs	r3, #9
 8000d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000d6c:	2319      	movs	r3, #25
 8000d6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000d72:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000d80:	2309      	movs	r3, #9
 8000d82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f005 f986 	bl	800609c <HAL_RCC_OscConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d96:	f001 f9f7 	bl	8002188 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d9a:	f005 f86d 	bl	8005e78 <HAL_PWREx_EnableOverDrive>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000da4:	f001 f9f0 	bl	8002188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da8:	230f      	movs	r3, #15
 8000daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dae:	2302      	movs	r3, #2
 8000db0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dbe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000dca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000dce:	2106      	movs	r1, #6
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f005 fc07 	bl	80065e4 <HAL_RCC_ClockConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000ddc:	f001 f9d4 	bl	8002188 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <SystemClock_Config+0x17c>)
 8000de2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000de4:	2364      	movs	r3, #100	; 0x64
 8000de6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000dec:	2302      	movs	r3, #2
 8000dee:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000df0:	2302      	movs	r3, #2
 8000df2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000df4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000df8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000dfa:	2305      	movs	r3, #5
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000e02:	2303      	movs	r3, #3
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e18:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e22:	2300      	movs	r3, #0
 8000e24:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000e2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	4618      	mov	r0, r3
 8000e42:	f005 fdd3 	bl	80069ec <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8000e4c:	f001 f99c 	bl	8002188 <Error_Handler>
  }
}
 8000e50:	bf00      	nop
 8000e52:	37d0      	adds	r7, #208	; 0xd0
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40007000 	.word	0x40007000
 8000e60:	01b14868 	.word	0x01b14868

08000e64 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <MX_ADC3_Init+0x9c>)
 8000e7a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e82:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_ADC3_Init+0x98>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <MX_ADC3_Init+0xa0>)
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <MX_ADC3_Init+0x98>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <MX_ADC3_Init+0x98>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000eb6:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_ADC3_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ec6:	f002 fa71 	bl	80033ac <HAL_ADC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000ed0:	f001 f95a 	bl	8002188 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ed4:	2304      	movs	r3, #4
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_ADC3_Init+0x98>)
 8000ee6:	f002 faa5 	bl	8003434 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000ef0:	f001 f94a 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000708 	.word	0x20000708
 8000f00:	40012200 	.word	0x40012200
 8000f04:	0f000001 	.word	0x0f000001

08000f08 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <MX_DCMI_Init+0x64>)
 8000f10:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000f24:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_DCMI_Init+0x60>)
 8000f56:	f002 fd93 	bl	8003a80 <HAL_DCMI_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000f60:	f001 f912 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000750 	.word	0x20000750
 8000f6c:	50050000 	.word	0x50050000

08000f70 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <MX_DMA2D_Init+0x5c>)
 8000f76:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <MX_DMA2D_Init+0x60>)
 8000f78:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_DMA2D_Init+0x5c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_DMA2D_Init+0x5c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_DMA2D_Init+0x5c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_DMA2D_Init+0x5c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_DMA2D_Init+0x5c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_DMA2D_Init+0x5c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_DMA2D_Init+0x5c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <MX_DMA2D_Init+0x5c>)
 8000fa6:	f002 ffa1 	bl	8003eec <HAL_DMA2D_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000fb0:	f001 f8ea 	bl	8002188 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_DMA2D_Init+0x5c>)
 8000fb8:	f003 fa06 	bl	80043c8 <HAL_DMA2D_ConfigLayer>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000fc2:	f001 f8e1 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000910 	.word	0x20000910
 8000fd0:	4002b000 	.word	0x4002b000

08000fd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd8:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fda:	4a1c      	ldr	r2, [pc, #112]	; (800104c <MX_I2C1_Init+0x78>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <MX_I2C1_Init+0x7c>)
 8000fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_I2C1_Init+0x74>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <MX_I2C1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_I2C1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_I2C1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800100e:	480e      	ldr	r0, [pc, #56]	; (8001048 <MX_I2C1_Init+0x74>)
 8001010:	f003 fdfa 	bl	8004c08 <HAL_I2C_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800101a:	f001 f8b5 	bl	8002188 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800101e:	2100      	movs	r1, #0
 8001020:	4809      	ldr	r0, [pc, #36]	; (8001048 <MX_I2C1_Init+0x74>)
 8001022:	f004 fb09 	bl	8005638 <HAL_I2CEx_ConfigAnalogFilter>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800102c:	f001 f8ac 	bl	8002188 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001030:	2100      	movs	r1, #0
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_I2C1_Init+0x74>)
 8001034:	f004 fb4b 	bl	80056ce <HAL_I2CEx_ConfigDigitalFilter>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800103e:	f001 f8a3 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000510 	.word	0x20000510
 800104c:	40005400 	.word	0x40005400
 8001050:	00c0eaff 	.word	0x00c0eaff

08001054 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_I2C3_Init+0x74>)
 800105a:	4a1c      	ldr	r2, [pc, #112]	; (80010cc <MX_I2C3_Init+0x78>)
 800105c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_I2C3_Init+0x74>)
 8001060:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <MX_I2C3_Init+0x7c>)
 8001062:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_I2C3_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106a:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_I2C3_Init+0x74>)
 800106c:	2201      	movs	r2, #1
 800106e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <MX_I2C3_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_I2C3_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_I2C3_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_I2C3_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_I2C3_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <MX_I2C3_Init+0x74>)
 8001090:	f003 fdba 	bl	8004c08 <HAL_I2C_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800109a:	f001 f875 	bl	8002188 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800109e:	2100      	movs	r1, #0
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <MX_I2C3_Init+0x74>)
 80010a2:	f004 fac9 	bl	8005638 <HAL_I2CEx_ConfigAnalogFilter>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80010ac:	f001 f86c 	bl	8002188 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_I2C3_Init+0x74>)
 80010b4:	f004 fb0b 	bl	80056ce <HAL_I2CEx_ConfigDigitalFilter>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80010be:	f001 f863 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000350 	.word	0x20000350
 80010cc:	40005c00 	.word	0x40005c00
 80010d0:	00c0eaff 	.word	0x00c0eaff

080010d4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b09a      	sub	sp, #104	; 0x68
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80010da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010de:	2234      	movs	r2, #52	; 0x34
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00c f822 	bl	800d12c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80010e8:	463b      	mov	r3, r7
 80010ea:	2234      	movs	r2, #52	; 0x34
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00c f81c 	bl	800d12c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80010f4:	4b50      	ldr	r3, [pc, #320]	; (8001238 <MX_LTDC_Init+0x164>)
 80010f6:	4a51      	ldr	r2, [pc, #324]	; (800123c <MX_LTDC_Init+0x168>)
 80010f8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010fa:	4b4f      	ldr	r3, [pc, #316]	; (8001238 <MX_LTDC_Init+0x164>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001100:	4b4d      	ldr	r3, [pc, #308]	; (8001238 <MX_LTDC_Init+0x164>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001106:	4b4c      	ldr	r3, [pc, #304]	; (8001238 <MX_LTDC_Init+0x164>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800110c:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <MX_LTDC_Init+0x164>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001112:	4b49      	ldr	r3, [pc, #292]	; (8001238 <MX_LTDC_Init+0x164>)
 8001114:	2228      	movs	r2, #40	; 0x28
 8001116:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001118:	4b47      	ldr	r3, [pc, #284]	; (8001238 <MX_LTDC_Init+0x164>)
 800111a:	2209      	movs	r2, #9
 800111c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800111e:	4b46      	ldr	r3, [pc, #280]	; (8001238 <MX_LTDC_Init+0x164>)
 8001120:	2235      	movs	r2, #53	; 0x35
 8001122:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001124:	4b44      	ldr	r3, [pc, #272]	; (8001238 <MX_LTDC_Init+0x164>)
 8001126:	220b      	movs	r2, #11
 8001128:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800112a:	4b43      	ldr	r3, [pc, #268]	; (8001238 <MX_LTDC_Init+0x164>)
 800112c:	f240 2215 	movw	r2, #533	; 0x215
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001132:	4b41      	ldr	r3, [pc, #260]	; (8001238 <MX_LTDC_Init+0x164>)
 8001134:	f240 121b 	movw	r2, #283	; 0x11b
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800113a:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <MX_LTDC_Init+0x164>)
 800113c:	f240 2235 	movw	r2, #565	; 0x235
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <MX_LTDC_Init+0x164>)
 8001144:	f240 121d 	movw	r2, #285	; 0x11d
 8001148:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <MX_LTDC_Init+0x164>)
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <MX_LTDC_Init+0x164>)
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800115a:	4b37      	ldr	r3, [pc, #220]	; (8001238 <MX_LTDC_Init+0x164>)
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001162:	4835      	ldr	r0, [pc, #212]	; (8001238 <MX_LTDC_Init+0x164>)
 8001164:	f004 fb00 	bl	8005768 <HAL_LTDC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800116e:	f001 f80b 	bl	8002188 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8001176:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800117a:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8001180:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001184:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001186:	2302      	movs	r3, #2
 8001188:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 800118a:	23ff      	movs	r3, #255	; 0xff
 800118c:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001192:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001196:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001198:	2307      	movs	r3, #7
 800119a:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 800119c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80011a0:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 80011a2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80011a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 80011a8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011ac:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80011c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	481b      	ldr	r0, [pc, #108]	; (8001238 <MX_LTDC_Init+0x164>)
 80011ca:	f004 fc5f 	bl	8005a8c <HAL_LTDC_ConfigLayer>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 80011d4:	f000 ffd8 	bl	8002188 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f4:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011f6:	2305      	movs	r3, #5
 80011f8:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	2201      	movs	r2, #1
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_LTDC_Init+0x164>)
 8001220:	f004 fc34 	bl	8005a8c <HAL_LTDC_ConfigLayer>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 800122a:	f000 ffad 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3768      	adds	r7, #104	; 0x68
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000660 	.word	0x20000660
 800123c:	40016800 	.word	0x40016800

08001240 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_QUADSPI_Init+0x50>)
 8001246:	4a13      	ldr	r2, [pc, #76]	; (8001294 <MX_QUADSPI_Init+0x54>)
 8001248:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_QUADSPI_Init+0x50>)
 800124c:	22ff      	movs	r2, #255	; 0xff
 800124e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_QUADSPI_Init+0x50>)
 8001252:	2201      	movs	r2, #1
 8001254:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_QUADSPI_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_QUADSPI_Init+0x50>)
 800125e:	2201      	movs	r2, #1
 8001260:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_QUADSPI_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_QUADSPI_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_QUADSPI_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_QUADSPI_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_QUADSPI_Init+0x50>)
 800127c:	f004 fe4c 	bl	8005f18 <HAL_QSPI_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001286:	f000 ff7f 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000a0c 	.word	0x20000a0c
 8001294:	a0001000 	.word	0xa0001000

08001298 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b092      	sub	sp, #72	; 0x48
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800129e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80012b0:	2300      	movs	r3, #0
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	222c      	movs	r2, #44	; 0x2c
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f00b ff36 	bl	800d12c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012c0:	4b46      	ldr	r3, [pc, #280]	; (80013dc <MX_RTC_Init+0x144>)
 80012c2:	4a47      	ldr	r2, [pc, #284]	; (80013e0 <MX_RTC_Init+0x148>)
 80012c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012c6:	4b45      	ldr	r3, [pc, #276]	; (80013dc <MX_RTC_Init+0x144>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012cc:	4b43      	ldr	r3, [pc, #268]	; (80013dc <MX_RTC_Init+0x144>)
 80012ce:	227f      	movs	r2, #127	; 0x7f
 80012d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012d2:	4b42      	ldr	r3, [pc, #264]	; (80013dc <MX_RTC_Init+0x144>)
 80012d4:	22ff      	movs	r2, #255	; 0xff
 80012d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012d8:	4b40      	ldr	r3, [pc, #256]	; (80013dc <MX_RTC_Init+0x144>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <MX_RTC_Init+0x144>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012e4:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <MX_RTC_Init+0x144>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012ea:	483c      	ldr	r0, [pc, #240]	; (80013dc <MX_RTC_Init+0x144>)
 80012ec:	f006 f8a0 	bl	8007430 <HAL_RTC_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80012f6:	f000 ff47 	bl	8002188 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001300:	2300      	movs	r3, #0
 8001302:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001306:	2300      	movs	r3, #0
 8001308:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001314:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001318:	2201      	movs	r2, #1
 800131a:	4619      	mov	r1, r3
 800131c:	482f      	ldr	r0, [pc, #188]	; (80013dc <MX_RTC_Init+0x144>)
 800131e:	f006 f903 	bl	8007528 <HAL_RTC_SetTime>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001328:	f000 ff2e 	bl	8002188 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800132c:	2301      	movs	r3, #1
 800132e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001332:	2301      	movs	r3, #1
 8001334:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001338:	2301      	movs	r3, #1
 800133a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001348:	2201      	movs	r2, #1
 800134a:	4619      	mov	r1, r3
 800134c:	4823      	ldr	r0, [pc, #140]	; (80013dc <MX_RTC_Init+0x144>)
 800134e:	f006 f9a9 	bl	80076a4 <HAL_RTC_SetDate>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001358:	f000 ff16 	bl	8002188 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800135c:	2300      	movs	r3, #0
 800135e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001360:	2300      	movs	r3, #0
 8001362:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001364:	2300      	movs	r3, #0
 8001366:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001368:	2300      	movs	r3, #0
 800136a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001380:	2301      	movs	r3, #1
 8001382:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800138c:	463b      	mov	r3, r7
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	4812      	ldr	r0, [pc, #72]	; (80013dc <MX_RTC_Init+0x144>)
 8001394:	f006 fa2e 	bl	80077f4 <HAL_RTC_SetAlarm>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800139e:	f000 fef3 	bl	8002188 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80013a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	2201      	movs	r2, #1
 80013ac:	4619      	mov	r1, r3
 80013ae:	480b      	ldr	r0, [pc, #44]	; (80013dc <MX_RTC_Init+0x144>)
 80013b0:	f006 fa20 	bl	80077f4 <HAL_RTC_SetAlarm>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80013ba:	f000 fee5 	bl	8002188 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80013be:	2202      	movs	r2, #2
 80013c0:	2100      	movs	r1, #0
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_RTC_Init+0x144>)
 80013c4:	f006 fba0 	bl	8007b08 <HAL_RTCEx_SetTimeStamp>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80013ce:	f000 fedb 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3748      	adds	r7, #72	; 0x48
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000820 	.word	0x20000820
 80013e0:	40002800 	.word	0x40002800

080013e4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80013e8:	4b4d      	ldr	r3, [pc, #308]	; (8001520 <MX_SAI2_Init+0x13c>)
 80013ea:	4a4e      	ldr	r2, [pc, #312]	; (8001524 <MX_SAI2_Init+0x140>)
 80013ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80013ee:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <MX_SAI2_Init+0x13c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80013f4:	4b4a      	ldr	r3, [pc, #296]	; (8001520 <MX_SAI2_Init+0x13c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80013fa:	4b49      	ldr	r3, [pc, #292]	; (8001520 <MX_SAI2_Init+0x13c>)
 80013fc:	2240      	movs	r2, #64	; 0x40
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001400:	4b47      	ldr	r3, [pc, #284]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001402:	2200      	movs	r2, #0
 8001404:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001406:	4b46      	ldr	r3, [pc, #280]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001408:	2200      	movs	r2, #0
 800140a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800140c:	4b44      	ldr	r3, [pc, #272]	; (8001520 <MX_SAI2_Init+0x13c>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001412:	4b43      	ldr	r3, [pc, #268]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001418:	4b41      	ldr	r3, [pc, #260]	; (8001520 <MX_SAI2_Init+0x13c>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800141e:	4b40      	ldr	r3, [pc, #256]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001424:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001426:	4a40      	ldr	r2, [pc, #256]	; (8001528 <MX_SAI2_Init+0x144>)
 8001428:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800142a:	4b3d      	ldr	r3, [pc, #244]	; (8001520 <MX_SAI2_Init+0x13c>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001430:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001432:	2200      	movs	r2, #0
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001436:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001438:	2200      	movs	r2, #0
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800143c:	4b38      	ldr	r3, [pc, #224]	; (8001520 <MX_SAI2_Init+0x13c>)
 800143e:	2200      	movs	r2, #0
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001444:	2208      	movs	r2, #8
 8001446:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001448:	4b35      	ldr	r3, [pc, #212]	; (8001520 <MX_SAI2_Init+0x13c>)
 800144a:	2201      	movs	r2, #1
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800144e:	4b34      	ldr	r3, [pc, #208]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001450:	2200      	movs	r2, #0
 8001452:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001454:	4b32      	ldr	r3, [pc, #200]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001456:	2200      	movs	r2, #0
 8001458:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800145a:	4b31      	ldr	r3, [pc, #196]	; (8001520 <MX_SAI2_Init+0x13c>)
 800145c:	2200      	movs	r2, #0
 800145e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001460:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001462:	2200      	movs	r2, #0
 8001464:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001466:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001468:	2200      	movs	r2, #0
 800146a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800146c:	4b2c      	ldr	r3, [pc, #176]	; (8001520 <MX_SAI2_Init+0x13c>)
 800146e:	2201      	movs	r2, #1
 8001470:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001472:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <MX_SAI2_Init+0x13c>)
 8001474:	2200      	movs	r2, #0
 8001476:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001478:	4829      	ldr	r0, [pc, #164]	; (8001520 <MX_SAI2_Init+0x13c>)
 800147a:	f006 fb9b 	bl	8007bb4 <HAL_SAI_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001484:	f000 fe80 	bl	8002188 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001488:	4b28      	ldr	r3, [pc, #160]	; (800152c <MX_SAI2_Init+0x148>)
 800148a:	4a29      	ldr	r2, [pc, #164]	; (8001530 <MX_SAI2_Init+0x14c>)
 800148c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <MX_SAI2_Init+0x148>)
 8001490:	2200      	movs	r2, #0
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <MX_SAI2_Init+0x148>)
 8001496:	2203      	movs	r2, #3
 8001498:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <MX_SAI2_Init+0x148>)
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <MX_SAI2_Init+0x148>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <MX_SAI2_Init+0x148>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_SAI2_Init+0x148>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <MX_SAI2_Init+0x148>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80014b8:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_SAI2_Init+0x148>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <MX_SAI2_Init+0x148>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80014c4:	4b19      	ldr	r3, [pc, #100]	; (800152c <MX_SAI2_Init+0x148>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_SAI2_Init+0x148>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_SAI2_Init+0x148>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_SAI2_Init+0x148>)
 80014d8:	2208      	movs	r2, #8
 80014da:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_SAI2_Init+0x148>)
 80014de:	2201      	movs	r2, #1
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_SAI2_Init+0x148>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <MX_SAI2_Init+0x148>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_SAI2_Init+0x148>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <MX_SAI2_Init+0x148>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_SAI2_Init+0x148>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <MX_SAI2_Init+0x148>)
 8001502:	2201      	movs	r2, #1
 8001504:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_SAI2_Init+0x148>)
 8001508:	2200      	movs	r2, #0
 800150a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800150c:	4807      	ldr	r0, [pc, #28]	; (800152c <MX_SAI2_Init+0x148>)
 800150e:	f006 fb51 	bl	8007bb4 <HAL_SAI_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8001518:	f000 fe36 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2000048c 	.word	0x2000048c
 8001524:	40015c04 	.word	0x40015c04
 8001528:	0002ee00 	.word	0x0002ee00
 800152c:	200002cc 	.word	0x200002cc
 8001530:	40015c24 	.word	0x40015c24

08001534 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_SDMMC1_SD_Init+0x58>)
 800153a:	4a15      	ldr	r2, [pc, #84]	; (8001590 <MX_SDMMC1_SD_Init+0x5c>)
 800153c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_SDMMC1_SD_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_SDMMC1_SD_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_SDMMC1_SD_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001550:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_SDMMC1_SD_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001556:	4b0d      	ldr	r3, [pc, #52]	; (800158c <MX_SDMMC1_SD_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_SDMMC1_SD_Init+0x58>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001562:	480a      	ldr	r0, [pc, #40]	; (800158c <MX_SDMMC1_SD_Init+0x58>)
 8001564:	f006 fcce 	bl	8007f04 <HAL_SD_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800156e:	f000 fe0b 	bl	8002188 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001572:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_SDMMC1_SD_Init+0x58>)
 8001578:	f006 ff00 	bl	800837c <HAL_SD_ConfigWideBusOperation>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8001582:	f000 fe01 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000055c 	.word	0x2000055c
 8001590:	40012c00 	.word	0x40012c00

08001594 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 800159a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800159e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80015be:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80015d0:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <MX_SPDIFRX_Init+0x5c>)
 80015de:	f007 fa85 	bl	8008aec <HAL_SPDIFRX_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80015e8:	f000 fdce 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000440 	.word	0x20000440

080015f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MX_SPI2_Init+0x74>)
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <MX_SPI2_Init+0x78>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_SPI2_Init+0x74>)
 8001600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001604:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <MX_SPI2_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_SPI2_Init+0x74>)
 800160e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001612:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_SPI2_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_SPI2_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_SPI2_Init+0x74>)
 8001622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001626:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_SPI2_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_SPI2_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_SPI2_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_SPI2_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_SPI2_Init+0x74>)
 8001642:	2207      	movs	r2, #7
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_SPI2_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_SPI2_Init+0x74>)
 800164e:	2208      	movs	r2, #8
 8001650:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_SPI2_Init+0x74>)
 8001654:	f007 faa6 	bl	8008ba4 <HAL_SPI_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800165e:	f000 fd93 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000039c 	.word	0x2000039c
 800166c:	40003800 	.word	0x40003800

08001670 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b09a      	sub	sp, #104	; 0x68
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
 80016a0:	615a      	str	r2, [r3, #20]
 80016a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	222c      	movs	r2, #44	; 0x2c
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f00b fd3e 	bl	800d12c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016b0:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <MX_TIM1_Init+0x150>)
 80016b2:	4a44      	ldr	r2, [pc, #272]	; (80017c4 <MX_TIM1_Init+0x154>)
 80016b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016b6:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <MX_TIM1_Init+0x150>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <MX_TIM1_Init+0x150>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016c2:	4b3f      	ldr	r3, [pc, #252]	; (80017c0 <MX_TIM1_Init+0x150>)
 80016c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <MX_TIM1_Init+0x150>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016d0:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <MX_TIM1_Init+0x150>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d6:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <MX_TIM1_Init+0x150>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016dc:	4838      	ldr	r0, [pc, #224]	; (80017c0 <MX_TIM1_Init+0x150>)
 80016de:	f007 faf3 	bl	8008cc8 <HAL_TIM_Base_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016e8:	f000 fd4e 	bl	8002188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016f6:	4619      	mov	r1, r3
 80016f8:	4831      	ldr	r0, [pc, #196]	; (80017c0 <MX_TIM1_Init+0x150>)
 80016fa:	f007 fd9d 	bl	8009238 <HAL_TIM_ConfigClockSource>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001704:	f000 fd40 	bl	8002188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001708:	482d      	ldr	r0, [pc, #180]	; (80017c0 <MX_TIM1_Init+0x150>)
 800170a:	f007 fb33 	bl	8008d74 <HAL_TIM_PWM_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001714:	f000 fd38 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001724:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001728:	4619      	mov	r1, r3
 800172a:	4825      	ldr	r0, [pc, #148]	; (80017c0 <MX_TIM1_Init+0x150>)
 800172c:	f008 f9fe 	bl	8009b2c <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001736:	f000 fd27 	bl	8002188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173a:	2360      	movs	r3, #96	; 0x60
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001742:	2300      	movs	r3, #0
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001746:	2300      	movs	r3, #0
 8001748:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001756:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	4818      	ldr	r0, [pc, #96]	; (80017c0 <MX_TIM1_Init+0x150>)
 8001760:	f007 fc52 	bl	8009008 <HAL_TIM_PWM_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800176a:	f000 fd0d 	bl	8002188 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001782:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001786:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001790:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4807      	ldr	r0, [pc, #28]	; (80017c0 <MX_TIM1_Init+0x150>)
 80017a4:	f008 fa50 	bl	8009c48 <HAL_TIMEx_ConfigBreakDeadTime>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80017ae:	f000 fceb 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017b2:	4803      	ldr	r0, [pc, #12]	; (80017c0 <MX_TIM1_Init+0x150>)
 80017b4:	f001 fa10 	bl	8002bd8 <HAL_TIM_MspPostInit>

}
 80017b8:	bf00      	nop
 80017ba:	3768      	adds	r7, #104	; 0x68
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000848 	.word	0x20000848
 80017c4:	40010000 	.word	0x40010000

080017c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08e      	sub	sp, #56	; 0x38
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e8:	463b      	mov	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
 80017f6:	615a      	str	r2, [r3, #20]
 80017f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <MX_TIM2_Init+0xe8>)
 80017fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001800:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <MX_TIM2_Init+0xe8>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <MX_TIM2_Init+0xe8>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <MX_TIM2_Init+0xe8>)
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <MX_TIM2_Init+0xe8>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <MX_TIM2_Init+0xe8>)
 800181e:	2200      	movs	r2, #0
 8001820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001822:	4823      	ldr	r0, [pc, #140]	; (80018b0 <MX_TIM2_Init+0xe8>)
 8001824:	f007 fa50 	bl	8008cc8 <HAL_TIM_Base_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800182e:	f000 fcab 	bl	8002188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183c:	4619      	mov	r1, r3
 800183e:	481c      	ldr	r0, [pc, #112]	; (80018b0 <MX_TIM2_Init+0xe8>)
 8001840:	f007 fcfa 	bl	8009238 <HAL_TIM_ConfigClockSource>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800184a:	f000 fc9d 	bl	8002188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800184e:	4818      	ldr	r0, [pc, #96]	; (80018b0 <MX_TIM2_Init+0xe8>)
 8001850:	f007 fa90 	bl	8008d74 <HAL_TIM_PWM_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800185a:	f000 fc95 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	4810      	ldr	r0, [pc, #64]	; (80018b0 <MX_TIM2_Init+0xe8>)
 800186e:	f008 f95d 	bl	8009b2c <HAL_TIMEx_MasterConfigSynchronization>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001878:	f000 fc86 	bl	8002188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187c:	2360      	movs	r3, #96	; 0x60
 800187e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188c:	463b      	mov	r3, r7
 800188e:	2200      	movs	r2, #0
 8001890:	4619      	mov	r1, r3
 8001892:	4807      	ldr	r0, [pc, #28]	; (80018b0 <MX_TIM2_Init+0xe8>)
 8001894:	f007 fbb8 	bl	8009008 <HAL_TIM_PWM_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800189e:	f000 fc73 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018a2:	4803      	ldr	r0, [pc, #12]	; (80018b0 <MX_TIM2_Init+0xe8>)
 80018a4:	f001 f998 	bl	8002bd8 <HAL_TIM_MspPostInit>

}
 80018a8:	bf00      	nop
 80018aa:	3738      	adds	r7, #56	; 0x38
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000958 	.word	0x20000958

080018b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08e      	sub	sp, #56	; 0x38
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d4:	463b      	mov	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <MX_TIM3_Init+0xe8>)
 80018e8:	4a2d      	ldr	r2, [pc, #180]	; (80019a0 <MX_TIM3_Init+0xec>)
 80018ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <MX_TIM3_Init+0xe8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <MX_TIM3_Init+0xe8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <MX_TIM3_Init+0xe8>)
 80018fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b26      	ldr	r3, [pc, #152]	; (800199c <MX_TIM3_Init+0xe8>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b25      	ldr	r3, [pc, #148]	; (800199c <MX_TIM3_Init+0xe8>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800190c:	4823      	ldr	r0, [pc, #140]	; (800199c <MX_TIM3_Init+0xe8>)
 800190e:	f007 f9db 	bl	8008cc8 <HAL_TIM_Base_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001918:	f000 fc36 	bl	8002188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001922:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001926:	4619      	mov	r1, r3
 8001928:	481c      	ldr	r0, [pc, #112]	; (800199c <MX_TIM3_Init+0xe8>)
 800192a:	f007 fc85 	bl	8009238 <HAL_TIM_ConfigClockSource>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001934:	f000 fc28 	bl	8002188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001938:	4818      	ldr	r0, [pc, #96]	; (800199c <MX_TIM3_Init+0xe8>)
 800193a:	f007 fa1b 	bl	8008d74 <HAL_TIM_PWM_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001944:	f000 fc20 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4811      	ldr	r0, [pc, #68]	; (800199c <MX_TIM3_Init+0xe8>)
 8001958:	f008 f8e8 	bl	8009b2c <HAL_TIMEx_MasterConfigSynchronization>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001962:	f000 fc11 	bl	8002188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001966:	2360      	movs	r3, #96	; 0x60
 8001968:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001976:	463b      	mov	r3, r7
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	4807      	ldr	r0, [pc, #28]	; (800199c <MX_TIM3_Init+0xe8>)
 800197e:	f007 fb43 	bl	8009008 <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001988:	f000 fbfe 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800198c:	4803      	ldr	r0, [pc, #12]	; (800199c <MX_TIM3_Init+0xe8>)
 800198e:	f001 f923 	bl	8002bd8 <HAL_TIM_MspPostInit>

}
 8001992:	bf00      	nop
 8001994:	3738      	adds	r7, #56	; 0x38
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000620 	.word	0x20000620
 80019a0:	40000400 	.word	0x40000400

080019a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08e      	sub	sp, #56	; 0x38
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019c4:	463b      	mov	r3, r7
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	615a      	str	r2, [r3, #20]
 80019d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <MX_TIM5_Init+0xe8>)
 80019d8:	4a2d      	ldr	r2, [pc, #180]	; (8001a90 <MX_TIM5_Init+0xec>)
 80019da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <MX_TIM5_Init+0xe8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	4b2a      	ldr	r3, [pc, #168]	; (8001a8c <MX_TIM5_Init+0xe8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80019e8:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <MX_TIM5_Init+0xe8>)
 80019ea:	f04f 32ff 	mov.w	r2, #4294967295
 80019ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f0:	4b26      	ldr	r3, [pc, #152]	; (8001a8c <MX_TIM5_Init+0xe8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <MX_TIM5_Init+0xe8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019fc:	4823      	ldr	r0, [pc, #140]	; (8001a8c <MX_TIM5_Init+0xe8>)
 80019fe:	f007 f963 	bl	8008cc8 <HAL_TIM_Base_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001a08:	f000 fbbe 	bl	8002188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a16:	4619      	mov	r1, r3
 8001a18:	481c      	ldr	r0, [pc, #112]	; (8001a8c <MX_TIM5_Init+0xe8>)
 8001a1a:	f007 fc0d 	bl	8009238 <HAL_TIM_ConfigClockSource>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001a24:	f000 fbb0 	bl	8002188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001a28:	4818      	ldr	r0, [pc, #96]	; (8001a8c <MX_TIM5_Init+0xe8>)
 8001a2a:	f007 f9a3 	bl	8008d74 <HAL_TIM_PWM_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001a34:	f000 fba8 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	4811      	ldr	r0, [pc, #68]	; (8001a8c <MX_TIM5_Init+0xe8>)
 8001a48:	f008 f870 	bl	8009b2c <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001a52:	f000 fb99 	bl	8002188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a56:	2360      	movs	r3, #96	; 0x60
 8001a58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a66:	463b      	mov	r3, r7
 8001a68:	220c      	movs	r2, #12
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4807      	ldr	r0, [pc, #28]	; (8001a8c <MX_TIM5_Init+0xe8>)
 8001a6e:	f007 facb 	bl	8009008 <HAL_TIM_PWM_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001a78:	f000 fb86 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <MX_TIM5_Init+0xe8>)
 8001a7e:	f001 f8ab 	bl	8002bd8 <HAL_TIM_MspPostInit>

}
 8001a82:	bf00      	nop
 8001a84:	3738      	adds	r7, #56	; 0x38
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200005e0 	.word	0x200005e0
 8001a90:	40000c00 	.word	0x40000c00

08001a94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ab2:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <MX_TIM8_Init+0xa0>)
 8001ab4:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <MX_TIM8_Init+0xa4>)
 8001ab6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <MX_TIM8_Init+0xa0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <MX_TIM8_Init+0xa0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_TIM8_Init+0xa0>)
 8001ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aca:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <MX_TIM8_Init+0xa0>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ad2:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <MX_TIM8_Init+0xa0>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad8:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <MX_TIM8_Init+0xa0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ade:	4815      	ldr	r0, [pc, #84]	; (8001b34 <MX_TIM8_Init+0xa0>)
 8001ae0:	f007 f8f2 	bl	8008cc8 <HAL_TIM_Base_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001aea:	f000 fb4d 	bl	8002188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	480e      	ldr	r0, [pc, #56]	; (8001b34 <MX_TIM8_Init+0xa0>)
 8001afc:	f007 fb9c 	bl	8009238 <HAL_TIM_ConfigClockSource>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001b06:	f000 fb3f 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_TIM8_Init+0xa0>)
 8001b1c:	f008 f806 	bl	8009b2c <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b26:	f000 fb2f 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000400 	.word	0x20000400
 8001b38:	40010400 	.word	0x40010400

08001b3c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	615a      	str	r2, [r3, #20]
 8001b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <MX_TIM12_Init+0x84>)
 8001b56:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <MX_TIM12_Init+0x88>)
 8001b58:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <MX_TIM12_Init+0x84>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <MX_TIM12_Init+0x84>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <MX_TIM12_Init+0x84>)
 8001b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_TIM12_Init+0x84>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <MX_TIM12_Init+0x84>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b7a:	4811      	ldr	r0, [pc, #68]	; (8001bc0 <MX_TIM12_Init+0x84>)
 8001b7c:	f007 f8fa 	bl	8008d74 <HAL_TIM_PWM_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001b86:	f000 faff 	bl	8002188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8a:	2360      	movs	r3, #96	; 0x60
 8001b8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <MX_TIM12_Init+0x84>)
 8001ba2:	f007 fa31 	bl	8009008 <HAL_TIM_PWM_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001bac:	f000 faec 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <MX_TIM12_Init+0x84>)
 8001bb2:	f001 f811 	bl	8002bd8 <HAL_TIM_MspPostInit>

}
 8001bb6:	bf00      	nop
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000998 	.word	0x20000998
 8001bc4:	40001800 	.word	0x40001800

08001bc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_USART1_UART_Init+0x58>)
 8001bce:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <MX_USART1_UART_Init+0x5c>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_USART1_UART_Init+0x58>)
 8001bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_USART1_UART_Init+0x58>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_USART1_UART_Init+0x58>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_USART1_UART_Init+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_USART1_UART_Init+0x58>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <MX_USART1_UART_Init+0x58>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_USART1_UART_Init+0x58>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <MX_USART1_UART_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_USART1_UART_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_USART1_UART_Init+0x58>)
 8001c0c:	f008 f8b8 	bl	8009d80 <HAL_UART_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c16:	f000 fab7 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200007a0 	.word	0x200007a0
 8001c24:	40011000 	.word	0x40011000

08001c28 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <MX_USART6_UART_Init+0x58>)
 8001c2e:	4a15      	ldr	r2, [pc, #84]	; (8001c84 <MX_USART6_UART_Init+0x5c>)
 8001c30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <MX_USART6_UART_Init+0x58>)
 8001c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_USART6_UART_Init+0x58>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <MX_USART6_UART_Init+0x58>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_USART6_UART_Init+0x58>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <MX_USART6_UART_Init+0x58>)
 8001c4e:	220c      	movs	r2, #12
 8001c50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <MX_USART6_UART_Init+0x58>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <MX_USART6_UART_Init+0x58>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <MX_USART6_UART_Init+0x58>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <MX_USART6_UART_Init+0x58>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c6a:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_USART6_UART_Init+0x58>)
 8001c6c:	f008 f888 	bl	8009d80 <HAL_UART_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001c76:	f000 fa87 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000890 	.word	0x20000890
 8001c84:	40011400 	.word	0x40011400

08001c88 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
 8001c9c:	615a      	str	r2, [r3, #20]
 8001c9e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001ca0:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <MX_FMC_Init+0x98>)
 8001ca2:	4a20      	ldr	r2, [pc, #128]	; (8001d24 <MX_FMC_Init+0x9c>)
 8001ca4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	; (8001d20 <MX_FMC_Init+0x98>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001cac:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <MX_FMC_Init+0x98>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <MX_FMC_Init+0x98>)
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <MX_FMC_Init+0x98>)
 8001cba:	2210      	movs	r2, #16
 8001cbc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_FMC_Init+0x98>)
 8001cc0:	2240      	movs	r2, #64	; 0x40
 8001cc2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <MX_FMC_Init+0x98>)
 8001cc6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001cca:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <MX_FMC_Init+0x98>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <MX_FMC_Init+0x98>)
 8001cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cd8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_FMC_Init+0x98>)
 8001cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_FMC_Init+0x98>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001cec:	2307      	movs	r3, #7
 8001cee:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_FMC_Init+0x98>)
 8001d0a:	f006 fe6f 	bl	80089ec <HAL_SDRAM_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001d14:	f000 fa38 	bl	8002188 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001d18:	bf00      	nop
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	200009d8 	.word	0x200009d8
 8001d24:	a0000140 	.word	0xa0000140

08001d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b090      	sub	sp, #64	; 0x40
 8001d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
 8001d3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d3e:	4baf      	ldr	r3, [pc, #700]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4aae      	ldr	r2, [pc, #696]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d44:	f043 0310 	orr.w	r3, r3, #16
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4bac      	ldr	r3, [pc, #688]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d56:	4ba9      	ldr	r3, [pc, #676]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4aa8      	ldr	r2, [pc, #672]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4ba6      	ldr	r3, [pc, #664]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	4ba3      	ldr	r3, [pc, #652]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4aa2      	ldr	r2, [pc, #648]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4ba0      	ldr	r3, [pc, #640]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d86:	4b9d      	ldr	r3, [pc, #628]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a9c      	ldr	r2, [pc, #624]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d8c:	f043 0308 	orr.w	r3, r3, #8
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b9a      	ldr	r3, [pc, #616]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	4b97      	ldr	r3, [pc, #604]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a96      	ldr	r2, [pc, #600]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b94      	ldr	r3, [pc, #592]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b91      	ldr	r3, [pc, #580]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a90      	ldr	r2, [pc, #576]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b8e      	ldr	r3, [pc, #568]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001dce:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a8a      	ldr	r2, [pc, #552]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001dd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001de6:	4b85      	ldr	r3, [pc, #532]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a84      	ldr	r2, [pc, #528]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b82      	ldr	r3, [pc, #520]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a7e      	ldr	r2, [pc, #504]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001e04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b7c      	ldr	r3, [pc, #496]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e16:	4b79      	ldr	r3, [pc, #484]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a78      	ldr	r2, [pc, #480]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001e1c:	f043 0320 	orr.w	r3, r3, #32
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e2e:	4b73      	ldr	r3, [pc, #460]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a72      	ldr	r2, [pc, #456]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b70      	ldr	r3, [pc, #448]	; (8001ffc <MX_GPIO_Init+0x2d4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001e46:	2201      	movs	r2, #1
 8001e48:	2120      	movs	r1, #32
 8001e4a:	486d      	ldr	r0, [pc, #436]	; (8002000 <MX_GPIO_Init+0x2d8>)
 8001e4c:	f002 fe9e 	bl	8004b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	210c      	movs	r1, #12
 8001e54:	486b      	ldr	r0, [pc, #428]	; (8002004 <MX_GPIO_Init+0x2dc>)
 8001e56:	f002 fe99 	bl	8004b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2108      	movs	r1, #8
 8001e5e:	486a      	ldr	r0, [pc, #424]	; (8002008 <MX_GPIO_Init+0x2e0>)
 8001e60:	f002 fe94 	bl	8004b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6a:	4866      	ldr	r0, [pc, #408]	; (8002004 <MX_GPIO_Init+0x2dc>)
 8001e6c:	f002 fe8e 	bl	8004b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e76:	4865      	ldr	r0, [pc, #404]	; (800200c <MX_GPIO_Init+0x2e4>)
 8001e78:	f002 fe88 	bl	8004b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	21c8      	movs	r1, #200	; 0xc8
 8001e80:	4863      	ldr	r0, [pc, #396]	; (8002010 <MX_GPIO_Init+0x2e8>)
 8001e82:	f002 fe83 	bl	8004b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001e86:	2308      	movs	r3, #8
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e96:	4619      	mov	r1, r3
 8001e98:	485e      	ldr	r0, [pc, #376]	; (8002014 <MX_GPIO_Init+0x2ec>)
 8001e9a:	f002 fbc3 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e9e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eb0:	230b      	movs	r3, #11
 8001eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4855      	ldr	r0, [pc, #340]	; (8002010 <MX_GPIO_Init+0x2e8>)
 8001ebc:	f002 fbb2 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001ec0:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eda:	4619      	mov	r1, r3
 8001edc:	484e      	ldr	r0, [pc, #312]	; (8002018 <MX_GPIO_Init+0x2f0>)
 8001ede:	f002 fba1 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4849      	ldr	r0, [pc, #292]	; (800201c <MX_GPIO_Init+0x2f4>)
 8001ef8:	f002 fb94 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001efc:	2340      	movs	r3, #64	; 0x40
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f00:	4b47      	ldr	r3, [pc, #284]	; (8002020 <MX_GPIO_Init+0x2f8>)
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	483c      	ldr	r0, [pc, #240]	; (8002000 <MX_GPIO_Init+0x2d8>)
 8001f10:	f002 fb88 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001f14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f22:	2303      	movs	r3, #3
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f26:	230a      	movs	r3, #10
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f2e:	4619      	mov	r1, r3
 8001f30:	483c      	ldr	r0, [pc, #240]	; (8002024 <MX_GPIO_Init+0x2fc>)
 8001f32:	f002 fb77 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001f36:	2320      	movs	r3, #32
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	482c      	ldr	r0, [pc, #176]	; (8002000 <MX_GPIO_Init+0x2d8>)
 8001f4e:	f002 fb69 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001f52:	f241 030c 	movw	r3, #4108	; 0x100c
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4826      	ldr	r0, [pc, #152]	; (8002004 <MX_GPIO_Init+0x2dc>)
 8001f6c:	f002 fb5a 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f82:	4619      	mov	r1, r3
 8001f84:	4828      	ldr	r0, [pc, #160]	; (8002028 <MX_GPIO_Init+0x300>)
 8001f86:	f002 fb4d 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001f9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4819      	ldr	r0, [pc, #100]	; (8002008 <MX_GPIO_Init+0x2e0>)
 8001fa2:	f002 fb3f 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001fa6:	2310      	movs	r3, #16
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001faa:	2300      	movs	r3, #0
 8001fac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4811      	ldr	r0, [pc, #68]	; (8002000 <MX_GPIO_Init+0x2d8>)
 8001fba:	f002 fb33 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001fbe:	f248 0304 	movw	r3, #32772	; 0x8004
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480e      	ldr	r0, [pc, #56]	; (800200c <MX_GPIO_Init+0x2e4>)
 8001fd4:	f002 fb26 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4806      	ldr	r0, [pc, #24]	; (800200c <MX_GPIO_Init+0x2e4>)
 8001ff2:	f002 fb17 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ff6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ffa:	e017      	b.n	800202c <MX_GPIO_Init+0x304>
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40022000 	.word	0x40022000
 8002008:	40022800 	.word	0x40022800
 800200c:	40021c00 	.word	0x40021c00
 8002010:	40021800 	.word	0x40021800
 8002014:	40021000 	.word	0x40021000
 8002018:	40020400 	.word	0x40020400
 800201c:	40022400 	.word	0x40022400
 8002020:	10120000 	.word	0x10120000
 8002024:	40020000 	.word	0x40020000
 8002028:	40020800 	.word	0x40020800
 800202c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800202e:	4b46      	ldr	r3, [pc, #280]	; (8002148 <MX_GPIO_Init+0x420>)
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800203a:	4619      	mov	r1, r3
 800203c:	4843      	ldr	r0, [pc, #268]	; (800214c <MX_GPIO_Init+0x424>)
 800203e:	f002 faf1 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002048:	4b41      	ldr	r3, [pc, #260]	; (8002150 <MX_GPIO_Init+0x428>)
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002054:	4619      	mov	r1, r3
 8002056:	483d      	ldr	r0, [pc, #244]	; (800214c <MX_GPIO_Init+0x424>)
 8002058:	f002 fae4 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800205c:	2310      	movs	r3, #16
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800206c:	230a      	movs	r3, #10
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002074:	4619      	mov	r1, r3
 8002076:	4837      	ldr	r0, [pc, #220]	; (8002154 <MX_GPIO_Init+0x42c>)
 8002078:	f002 fad4 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800207c:	23c8      	movs	r3, #200	; 0xc8
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002080:	2301      	movs	r3, #1
 8002082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002088:	2300      	movs	r3, #0
 800208a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800208c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002090:	4619      	mov	r1, r3
 8002092:	4831      	ldr	r0, [pc, #196]	; (8002158 <MX_GPIO_Init+0x430>)
 8002094:	f002 fac6 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002098:	2305      	movs	r3, #5
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	2302      	movs	r3, #2
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a4:	2303      	movs	r3, #3
 80020a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80020a8:	230a      	movs	r3, #10
 80020aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020b0:	4619      	mov	r1, r3
 80020b2:	482a      	ldr	r0, [pc, #168]	; (800215c <MX_GPIO_Init+0x434>)
 80020b4:	f002 fab6 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80020b8:	2332      	movs	r3, #50	; 0x32
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020c8:	230b      	movs	r3, #11
 80020ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020d0:	4619      	mov	r1, r3
 80020d2:	4822      	ldr	r0, [pc, #136]	; (800215c <MX_GPIO_Init+0x434>)
 80020d4:	f002 faa6 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80020d8:	2304      	movs	r3, #4
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80020e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e8:	4619      	mov	r1, r3
 80020ea:	481b      	ldr	r0, [pc, #108]	; (8002158 <MX_GPIO_Init+0x430>)
 80020ec:	f002 fa9a 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80020f0:	2386      	movs	r3, #134	; 0x86
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002100:	230b      	movs	r3, #11
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002108:	4619      	mov	r1, r3
 800210a:	4815      	ldr	r0, [pc, #84]	; (8002160 <MX_GPIO_Init+0x438>)
 800210c:	f002 fa8a 	bl	8004624 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002110:	2328      	movs	r3, #40	; 0x28
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002120:	230a      	movs	r3, #10
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002128:	4619      	mov	r1, r3
 800212a:	480d      	ldr	r0, [pc, #52]	; (8002160 <MX_GPIO_Init+0x438>)
 800212c:	f002 fa7a 	bl	8004624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2101      	movs	r1, #1
 8002134:	2028      	movs	r0, #40	; 0x28
 8002136:	f001 fc79 	bl	8003a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800213a:	2028      	movs	r0, #40	; 0x28
 800213c:	f001 fc92 	bl	8003a64 <HAL_NVIC_EnableIRQ>

}
 8002140:	bf00      	nop
 8002142:	3740      	adds	r7, #64	; 0x40
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	10210000 	.word	0x10210000
 800214c:	40022000 	.word	0x40022000
 8002150:	10120000 	.word	0x10120000
 8002154:	40021c00 	.word	0x40021c00
 8002158:	40021800 	.word	0x40021800
 800215c:	40020800 	.word	0x40020800
 8002160:	40020000 	.word	0x40020000

08002164 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a04      	ldr	r2, [pc, #16]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002176:	f001 f8d7 	bl	8003328 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40001000 	.word	0x40001000

08002188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
	...

08002198 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	4b11      	ldr	r3, [pc, #68]	; (80021e4 <HAL_MspInit+0x4c>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	4a10      	ldr	r2, [pc, #64]	; (80021e4 <HAL_MspInit+0x4c>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	6413      	str	r3, [r2, #64]	; 0x40
 80021aa:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_MspInit+0x4c>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_MspInit+0x4c>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_MspInit+0x4c>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_MspInit+0x4c>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	210f      	movs	r1, #15
 80021d2:	f06f 0001 	mvn.w	r0, #1
 80021d6:	f001 fc29 	bl	8003a2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	; 0x28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a21      	ldr	r2, [pc, #132]	; (800228c <HAL_ADC_MspInit+0xa4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d13c      	bne.n	8002284 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800220a:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_ADC_MspInit+0xa8>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a20      	ldr	r2, [pc, #128]	; (8002290 <HAL_ADC_MspInit+0xa8>)
 8002210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <HAL_ADC_MspInit+0xa8>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <HAL_ADC_MspInit+0xa8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a1a      	ldr	r2, [pc, #104]	; (8002290 <HAL_ADC_MspInit+0xa8>)
 8002228:	f043 0320 	orr.w	r3, r3, #32
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_ADC_MspInit+0xa8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_ADC_MspInit+0xa8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a14      	ldr	r2, [pc, #80]	; (8002290 <HAL_ADC_MspInit+0xa8>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_ADC_MspInit+0xa8>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002252:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002256:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002258:	2303      	movs	r3, #3
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	480b      	ldr	r0, [pc, #44]	; (8002294 <HAL_ADC_MspInit+0xac>)
 8002268:	f002 f9dc 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800226c:	2301      	movs	r3, #1
 800226e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002270:	2303      	movs	r3, #3
 8002272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4619      	mov	r1, r3
 800227e:	4806      	ldr	r0, [pc, #24]	; (8002298 <HAL_ADC_MspInit+0xb0>)
 8002280:	f002 f9d0 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40012200 	.word	0x40012200
 8002290:	40023800 	.word	0x40023800
 8002294:	40021400 	.word	0x40021400
 8002298:	40020000 	.word	0x40020000

0800229c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08e      	sub	sp, #56	; 0x38
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a50      	ldr	r2, [pc, #320]	; (80023fc <HAL_DCMI_MspInit+0x160>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	f040 809a 	bne.w	80023f4 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80022c0:	4b4f      	ldr	r3, [pc, #316]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 80022c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c4:	4a4e      	ldr	r2, [pc, #312]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6353      	str	r3, [r2, #52]	; 0x34
 80022cc:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 80022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	623b      	str	r3, [r7, #32]
 80022d6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022d8:	4b49      	ldr	r3, [pc, #292]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	4a48      	ldr	r2, [pc, #288]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 80022de:	f043 0310 	orr.w	r3, r3, #16
 80022e2:	6313      	str	r3, [r2, #48]	; 0x30
 80022e4:	4b46      	ldr	r3, [pc, #280]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	f003 0310 	and.w	r3, r3, #16
 80022ec:	61fb      	str	r3, [r7, #28]
 80022ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f0:	4b43      	ldr	r3, [pc, #268]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	4a42      	ldr	r2, [pc, #264]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 80022f6:	f043 0308 	orr.w	r3, r3, #8
 80022fa:	6313      	str	r3, [r2, #48]	; 0x30
 80022fc:	4b40      	ldr	r3, [pc, #256]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	61bb      	str	r3, [r7, #24]
 8002306:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002308:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	4a3c      	ldr	r2, [pc, #240]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 800230e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002312:	6313      	str	r3, [r2, #48]	; 0x30
 8002314:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002320:	4b37      	ldr	r3, [pc, #220]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	4a36      	ldr	r2, [pc, #216]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 8002326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232a:	6313      	str	r3, [r2, #48]	; 0x30
 800232c:	4b34      	ldr	r3, [pc, #208]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002338:	4b31      	ldr	r3, [pc, #196]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	4a30      	ldr	r2, [pc, #192]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6313      	str	r3, [r2, #48]	; 0x30
 8002344:	4b2e      	ldr	r3, [pc, #184]	; (8002400 <HAL_DCMI_MspInit+0x164>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002350:	2360      	movs	r3, #96	; 0x60
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002360:	230d      	movs	r3, #13
 8002362:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002368:	4619      	mov	r1, r3
 800236a:	4826      	ldr	r0, [pc, #152]	; (8002404 <HAL_DCMI_MspInit+0x168>)
 800236c:	f002 f95a 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8002370:	2308      	movs	r3, #8
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002380:	230d      	movs	r3, #13
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8002384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002388:	4619      	mov	r1, r3
 800238a:	481f      	ldr	r0, [pc, #124]	; (8002408 <HAL_DCMI_MspInit+0x16c>)
 800238c:	f002 f94a 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8002390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023a2:	230d      	movs	r3, #13
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80023a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023aa:	4619      	mov	r1, r3
 80023ac:	4817      	ldr	r0, [pc, #92]	; (800240c <HAL_DCMI_MspInit+0x170>)
 80023ae:	f002 f939 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80023b2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023c4:	230d      	movs	r3, #13
 80023c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	4619      	mov	r1, r3
 80023ce:	4810      	ldr	r0, [pc, #64]	; (8002410 <HAL_DCMI_MspInit+0x174>)
 80023d0:	f002 f928 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80023d4:	2350      	movs	r3, #80	; 0x50
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80023e4:	230d      	movs	r3, #13
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ec:	4619      	mov	r1, r3
 80023ee:	4809      	ldr	r0, [pc, #36]	; (8002414 <HAL_DCMI_MspInit+0x178>)
 80023f0:	f002 f918 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80023f4:	bf00      	nop
 80023f6:	3738      	adds	r7, #56	; 0x38
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	50050000 	.word	0x50050000
 8002400:	40023800 	.word	0x40023800
 8002404:	40021000 	.word	0x40021000
 8002408:	40020c00 	.word	0x40020c00
 800240c:	40021800 	.word	0x40021800
 8002410:	40021c00 	.word	0x40021c00
 8002414:	40020000 	.word	0x40020000

08002418 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <HAL_DMA2D_MspInit+0x44>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d113      	bne.n	8002452 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <HAL_DMA2D_MspInit+0x48>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <HAL_DMA2D_MspInit+0x48>)
 8002430:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_DMA2D_MspInit+0x48>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	205a      	movs	r0, #90	; 0x5a
 8002448:	f001 faf0 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800244c:	205a      	movs	r0, #90	; 0x5a
 800244e:	f001 fb09 	bl	8003a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	4002b000 	.word	0x4002b000
 8002460:	40023800 	.word	0x40023800

08002464 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2f      	ldr	r2, [pc, #188]	; (8002540 <HAL_I2C_MspInit+0xdc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d129      	bne.n	80024da <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002486:	4b2f      	ldr	r3, [pc, #188]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a2e      	ldr	r2, [pc, #184]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b2c      	ldr	r3, [pc, #176]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800249e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a4:	2312      	movs	r3, #18
 80024a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024b0:	2304      	movs	r3, #4
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	4619      	mov	r1, r3
 80024ba:	4823      	ldr	r0, [pc, #140]	; (8002548 <HAL_I2C_MspInit+0xe4>)
 80024bc:	f002 f8b2 	bl	8004624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 80024c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024ca:	6413      	str	r3, [r2, #64]	; 0x40
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80024d8:	e02d      	b.n	8002536 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a1b      	ldr	r2, [pc, #108]	; (800254c <HAL_I2C_MspInit+0xe8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d128      	bne.n	8002536 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80024e4:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	4a16      	ldr	r2, [pc, #88]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 80024ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ee:	6313      	str	r3, [r2, #48]	; 0x30
 80024f0:	4b14      	ldr	r3, [pc, #80]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80024fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002502:	2312      	movs	r3, #18
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002506:	2301      	movs	r3, #1
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250a:	2303      	movs	r3, #3
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800250e:	2304      	movs	r3, #4
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	4619      	mov	r1, r3
 8002518:	480d      	ldr	r0, [pc, #52]	; (8002550 <HAL_I2C_MspInit+0xec>)
 800251a:	f002 f883 	bl	8004624 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a08      	ldr	r2, [pc, #32]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 8002524:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <HAL_I2C_MspInit+0xe0>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
}
 8002536:	bf00      	nop
 8002538:	3730      	adds	r7, #48	; 0x30
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40005400 	.word	0x40005400
 8002544:	40023800 	.word	0x40023800
 8002548:	40020400 	.word	0x40020400
 800254c:	40005c00 	.word	0x40005c00
 8002550:	40021c00 	.word	0x40021c00

08002554 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a15      	ldr	r2, [pc, #84]	; (80025b8 <HAL_I2C_MspDeInit+0x64>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d110      	bne.n	8002588 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_I2C_MspDeInit+0x68>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a14      	ldr	r2, [pc, #80]	; (80025bc <HAL_I2C_MspDeInit+0x68>)
 800256c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002576:	4812      	ldr	r0, [pc, #72]	; (80025c0 <HAL_I2C_MspDeInit+0x6c>)
 8002578:	f002 f9fe 	bl	8004978 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 800257c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002580:	480f      	ldr	r0, [pc, #60]	; (80025c0 <HAL_I2C_MspDeInit+0x6c>)
 8002582:	f002 f9f9 	bl	8004978 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8002586:	e013      	b.n	80025b0 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_I2C_MspDeInit+0x70>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d10e      	bne.n	80025b0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_I2C_MspDeInit+0x68>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4a09      	ldr	r2, [pc, #36]	; (80025bc <HAL_I2C_MspDeInit+0x68>)
 8002598:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800259c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800259e:	2180      	movs	r1, #128	; 0x80
 80025a0:	4809      	ldr	r0, [pc, #36]	; (80025c8 <HAL_I2C_MspDeInit+0x74>)
 80025a2:	f002 f9e9 	bl	8004978 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80025a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025aa:	4807      	ldr	r0, [pc, #28]	; (80025c8 <HAL_I2C_MspDeInit+0x74>)
 80025ac:	f002 f9e4 	bl	8004978 <HAL_GPIO_DeInit>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40005400 	.word	0x40005400
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020400 	.word	0x40020400
 80025c4:	40005c00 	.word	0x40005c00
 80025c8:	40021c00 	.word	0x40021c00

080025cc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08e      	sub	sp, #56	; 0x38
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a55      	ldr	r2, [pc, #340]	; (8002740 <HAL_LTDC_MspInit+0x174>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	f040 80a3 	bne.w	8002736 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80025f0:	4b54      	ldr	r3, [pc, #336]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	4a53      	ldr	r2, [pc, #332]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 80025f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025fa:	6453      	str	r3, [r2, #68]	; 0x44
 80025fc:	4b51      	ldr	r3, [pc, #324]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002608:	4b4e      	ldr	r3, [pc, #312]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	4a4d      	ldr	r2, [pc, #308]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 800260e:	f043 0310 	orr.w	r3, r3, #16
 8002612:	6313      	str	r3, [r2, #48]	; 0x30
 8002614:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002620:	4b48      	ldr	r3, [pc, #288]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 8002626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262a:	6313      	str	r3, [r2, #48]	; 0x30
 800262c:	4b45      	ldr	r3, [pc, #276]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	4a41      	ldr	r2, [pc, #260]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 800263e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002642:	6313      	str	r3, [r2, #48]	; 0x30
 8002644:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002650:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4a3b      	ldr	r2, [pc, #236]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 8002656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800265a:	6313      	str	r3, [r2, #48]	; 0x30
 800265c:	4b39      	ldr	r3, [pc, #228]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002668:	4b36      	ldr	r3, [pc, #216]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	4a35      	ldr	r2, [pc, #212]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 800266e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002672:	6313      	str	r3, [r2, #48]	; 0x30
 8002674:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_LTDC_MspInit+0x178>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002680:	2310      	movs	r3, #16
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002690:	230e      	movs	r3, #14
 8002692:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002698:	4619      	mov	r1, r3
 800269a:	482b      	ldr	r0, [pc, #172]	; (8002748 <HAL_LTDC_MspInit+0x17c>)
 800269c:	f001 ffc2 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80026a0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026b2:	230e      	movs	r3, #14
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80026b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ba:	4619      	mov	r1, r3
 80026bc:	4823      	ldr	r0, [pc, #140]	; (800274c <HAL_LTDC_MspInit+0x180>)
 80026be:	f001 ffb1 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80026c2:	23f7      	movs	r3, #247	; 0xf7
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026d2:	230e      	movs	r3, #14
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80026d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026da:	4619      	mov	r1, r3
 80026dc:	481c      	ldr	r0, [pc, #112]	; (8002750 <HAL_LTDC_MspInit+0x184>)
 80026de:	f001 ffa1 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80026e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e8:	2302      	movs	r3, #2
 80026ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2300      	movs	r3, #0
 80026f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026f4:	2309      	movs	r3, #9
 80026f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80026f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026fc:	4619      	mov	r1, r3
 80026fe:	4815      	ldr	r0, [pc, #84]	; (8002754 <HAL_LTDC_MspInit+0x188>)
 8002700:	f001 ff90 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002704:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002716:	230e      	movs	r3, #14
 8002718:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800271a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800271e:	4619      	mov	r1, r3
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <HAL_LTDC_MspInit+0x18c>)
 8002722:	f001 ff7f 	bl	8004624 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	2058      	movs	r0, #88	; 0x58
 800272c:	f001 f97e 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002730:	2058      	movs	r0, #88	; 0x58
 8002732:	f001 f997 	bl	8003a64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002736:	bf00      	nop
 8002738:	3738      	adds	r7, #56	; 0x38
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40016800 	.word	0x40016800
 8002744:	40023800 	.word	0x40023800
 8002748:	40021000 	.word	0x40021000
 800274c:	40022400 	.word	0x40022400
 8002750:	40022800 	.word	0x40022800
 8002754:	40021800 	.word	0x40021800
 8002758:	40022000 	.word	0x40022000

0800275c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	; 0x30
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a3b      	ldr	r2, [pc, #236]	; (8002868 <HAL_QSPI_MspInit+0x10c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d170      	bne.n	8002860 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <HAL_QSPI_MspInit+0x110>)
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	4a3a      	ldr	r2, [pc, #232]	; (800286c <HAL_QSPI_MspInit+0x110>)
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	6393      	str	r3, [r2, #56]	; 0x38
 800278a:	4b38      	ldr	r3, [pc, #224]	; (800286c <HAL_QSPI_MspInit+0x110>)
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	61bb      	str	r3, [r7, #24]
 8002794:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002796:	4b35      	ldr	r3, [pc, #212]	; (800286c <HAL_QSPI_MspInit+0x110>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a34      	ldr	r2, [pc, #208]	; (800286c <HAL_QSPI_MspInit+0x110>)
 800279c:	f043 0310 	orr.w	r3, r3, #16
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b32      	ldr	r3, [pc, #200]	; (800286c <HAL_QSPI_MspInit+0x110>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ae:	4b2f      	ldr	r3, [pc, #188]	; (800286c <HAL_QSPI_MspInit+0x110>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a2e      	ldr	r2, [pc, #184]	; (800286c <HAL_QSPI_MspInit+0x110>)
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b2c      	ldr	r3, [pc, #176]	; (800286c <HAL_QSPI_MspInit+0x110>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c6:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_QSPI_MspInit+0x110>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a28      	ldr	r2, [pc, #160]	; (800286c <HAL_QSPI_MspInit+0x110>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <HAL_QSPI_MspInit+0x110>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80027de:	2304      	movs	r3, #4
 80027e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80027ee:	2309      	movs	r3, #9
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	4619      	mov	r1, r3
 80027f8:	481d      	ldr	r0, [pc, #116]	; (8002870 <HAL_QSPI_MspInit+0x114>)
 80027fa:	f001 ff13 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80027fe:	2340      	movs	r3, #64	; 0x40
 8002800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800280e:	230a      	movs	r3, #10
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 031c 	add.w	r3, r7, #28
 8002816:	4619      	mov	r1, r3
 8002818:	4816      	ldr	r0, [pc, #88]	; (8002874 <HAL_QSPI_MspInit+0x118>)
 800281a:	f001 ff03 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800281e:	2304      	movs	r3, #4
 8002820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282a:	2303      	movs	r3, #3
 800282c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800282e:	2309      	movs	r3, #9
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002832:	f107 031c 	add.w	r3, r7, #28
 8002836:	4619      	mov	r1, r3
 8002838:	480e      	ldr	r0, [pc, #56]	; (8002874 <HAL_QSPI_MspInit+0x118>)
 800283a:	f001 fef3 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800283e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002850:	2309      	movs	r3, #9
 8002852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	4619      	mov	r1, r3
 800285a:	4807      	ldr	r0, [pc, #28]	; (8002878 <HAL_QSPI_MspInit+0x11c>)
 800285c:	f001 fee2 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002860:	bf00      	nop
 8002862:	3730      	adds	r7, #48	; 0x30
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	a0001000 	.word	0xa0001000
 800286c:	40023800 	.word	0x40023800
 8002870:	40021000 	.word	0x40021000
 8002874:	40020400 	.word	0x40020400
 8002878:	40020c00 	.word	0x40020c00

0800287c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a07      	ldr	r2, [pc, #28]	; (80028a8 <HAL_RTC_MspInit+0x2c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d105      	bne.n	800289a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_RTC_MspInit+0x30>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a06      	ldr	r2, [pc, #24]	; (80028ac <HAL_RTC_MspInit+0x30>)
 8002894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40002800 	.word	0x40002800
 80028ac:	40023800 	.word	0x40023800

080028b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a25      	ldr	r2, [pc, #148]	; (8002964 <HAL_SD_MspInit+0xb4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d144      	bne.n	800295c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80028d2:	4b25      	ldr	r3, [pc, #148]	; (8002968 <HAL_SD_MspInit+0xb8>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	4a24      	ldr	r2, [pc, #144]	; (8002968 <HAL_SD_MspInit+0xb8>)
 80028d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028dc:	6453      	str	r3, [r2, #68]	; 0x44
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_SD_MspInit+0xb8>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ea:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <HAL_SD_MspInit+0xb8>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <HAL_SD_MspInit+0xb8>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_SD_MspInit+0xb8>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_SD_MspInit+0xb8>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_SD_MspInit+0xb8>)
 8002908:	f043 0308 	orr.w	r3, r3, #8
 800290c:	6313      	str	r3, [r2, #48]	; 0x30
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_SD_MspInit+0xb8>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800291a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800291e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800292c:	230c      	movs	r3, #12
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	480d      	ldr	r0, [pc, #52]	; (800296c <HAL_SD_MspInit+0xbc>)
 8002938:	f001 fe74 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800293c:	2304      	movs	r3, #4
 800293e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800294c:	230c      	movs	r3, #12
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4619      	mov	r1, r3
 8002956:	4806      	ldr	r0, [pc, #24]	; (8002970 <HAL_SD_MspInit+0xc0>)
 8002958:	f001 fe64 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800295c:	bf00      	nop
 800295e:	3728      	adds	r7, #40	; 0x28
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40023800 	.word	0x40023800
 800296c:	40020800 	.word	0x40020800
 8002970:	40020c00 	.word	0x40020c00

08002974 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002994:	d127      	bne.n	80029e6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002996:	4b16      	ldr	r3, [pc, #88]	; (80029f0 <HAL_SPDIFRX_MspInit+0x7c>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <HAL_SPDIFRX_MspInit+0x7c>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a0f      	ldr	r2, [pc, #60]	; (80029f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_SPDIFRX_MspInit+0x7c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80029d6:	2308      	movs	r3, #8
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80029da:	f107 0314 	add.w	r3, r7, #20
 80029de:	4619      	mov	r1, r3
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <HAL_SPDIFRX_MspInit+0x80>)
 80029e2:	f001 fe1f 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80029e6:	bf00      	nop
 80029e8:	3728      	adds	r7, #40	; 0x28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40020c00 	.word	0x40020c00

080029f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	; 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a25      	ldr	r2, [pc, #148]	; (8002aac <HAL_SPI_MspInit+0xb4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d144      	bne.n	8002aa4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a1a:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_SPI_MspInit+0xb8>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <HAL_SPI_MspInit+0xb8>)
 8002a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_SPI_MspInit+0xb8>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a32:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <HAL_SPI_MspInit+0xb8>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	4a1e      	ldr	r2, [pc, #120]	; (8002ab0 <HAL_SPI_MspInit+0xb8>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <HAL_SPI_MspInit+0xb8>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4a:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_SPI_MspInit+0xb8>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <HAL_SPI_MspInit+0xb8>)
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_SPI_MspInit+0xb8>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002a62:	2302      	movs	r3, #2
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a72:	2305      	movs	r3, #5
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <HAL_SPI_MspInit+0xbc>)
 8002a7e:	f001 fdd1 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002a82:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a90:	2300      	movs	r3, #0
 8002a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a94:	2305      	movs	r3, #5
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4806      	ldr	r0, [pc, #24]	; (8002ab8 <HAL_SPI_MspInit+0xc0>)
 8002aa0:	f001 fdc0 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002aa4:	bf00      	nop
 8002aa6:	3728      	adds	r7, #40	; 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40003800 	.word	0x40003800
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40022000 	.word	0x40022000
 8002ab8:	40020400 	.word	0x40020400

08002abc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <HAL_TIM_Base_MspInit+0xc8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10c      	bne.n	8002ae8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ace:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ae6:	e046      	b.n	8002b76 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af0:	d10c      	bne.n	8002b0c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002af2:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a24      	ldr	r2, [pc, #144]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	69bb      	ldr	r3, [r7, #24]
}
 8002b0a:	e034      	b.n	8002b76 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <HAL_TIM_Base_MspInit+0xd0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10c      	bne.n	8002b30 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b16:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a1b      	ldr	r2, [pc, #108]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
}
 8002b2e:	e022      	b.n	8002b76 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a16      	ldr	r2, [pc, #88]	; (8002b90 <HAL_TIM_Base_MspInit+0xd4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d10c      	bne.n	8002b54 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002b3a:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002b40:	f043 0308 	orr.w	r3, r3, #8
 8002b44:	6413      	str	r3, [r2, #64]	; 0x40
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
}
 8002b52:	e010      	b.n	8002b76 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0e      	ldr	r2, [pc, #56]	; (8002b94 <HAL_TIM_Base_MspInit+0xd8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10b      	bne.n	8002b76 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002b64:	f043 0302 	orr.w	r3, r3, #2
 8002b68:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_TIM_Base_MspInit+0xcc>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
}
 8002b76:	bf00      	nop
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40010400 	.word	0x40010400

08002b98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_TIM_PWM_MspInit+0x38>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40001800 	.word	0x40001800
 8002bd4:	40023800 	.word	0x40023800

08002bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08c      	sub	sp, #48	; 0x30
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a56      	ldr	r2, [pc, #344]	; (8002d50 <HAL_TIM_MspPostInit+0x178>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d11d      	bne.n	8002c36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	4b56      	ldr	r3, [pc, #344]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4a55      	ldr	r2, [pc, #340]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8002c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002c28:	f107 031c 	add.w	r3, r7, #28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	484a      	ldr	r0, [pc, #296]	; (8002d58 <HAL_TIM_MspPostInit+0x180>)
 8002c30:	f001 fcf8 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002c34:	e087      	b.n	8002d46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3e:	d11d      	bne.n	8002c7c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c40:	4b44      	ldr	r3, [pc, #272]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	4a43      	ldr	r2, [pc, #268]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4c:	4b41      	ldr	r3, [pc, #260]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002c58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002c6e:	f107 031c 	add.w	r3, r7, #28
 8002c72:	4619      	mov	r1, r3
 8002c74:	4838      	ldr	r0, [pc, #224]	; (8002d58 <HAL_TIM_MspPostInit+0x180>)
 8002c76:	f001 fcd5 	bl	8004624 <HAL_GPIO_Init>
}
 8002c7a:	e064      	b.n	8002d46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a36      	ldr	r2, [pc, #216]	; (8002d5c <HAL_TIM_MspPostInit+0x184>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d11c      	bne.n	8002cc0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	4b33      	ldr	r3, [pc, #204]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	4a32      	ldr	r2, [pc, #200]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002c9e:	2310      	movs	r3, #16
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4829      	ldr	r0, [pc, #164]	; (8002d60 <HAL_TIM_MspPostInit+0x188>)
 8002cba:	f001 fcb3 	bl	8004624 <HAL_GPIO_Init>
}
 8002cbe:	e042      	b.n	8002d46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <HAL_TIM_MspPostInit+0x18c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d11c      	bne.n	8002d04 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a21      	ldr	r2, [pc, #132]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b1f      	ldr	r3, [pc, #124]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002cf6:	f107 031c 	add.w	r3, r7, #28
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	481a      	ldr	r0, [pc, #104]	; (8002d68 <HAL_TIM_MspPostInit+0x190>)
 8002cfe:	f001 fc91 	bl	8004624 <HAL_GPIO_Init>
}
 8002d02:	e020      	b.n	8002d46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a18      	ldr	r2, [pc, #96]	; (8002d6c <HAL_TIM_MspPostInit+0x194>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d11b      	bne.n	8002d46 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a10      	ldr	r2, [pc, #64]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_TIM_MspPostInit+0x17c>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002d26:	2340      	movs	r3, #64	; 0x40
 8002d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d32:	2300      	movs	r3, #0
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002d36:	2309      	movs	r3, #9
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002d3a:	f107 031c 	add.w	r3, r7, #28
 8002d3e:	4619      	mov	r1, r3
 8002d40:	480b      	ldr	r0, [pc, #44]	; (8002d70 <HAL_TIM_MspPostInit+0x198>)
 8002d42:	f001 fc6f 	bl	8004624 <HAL_GPIO_Init>
}
 8002d46:	bf00      	nop
 8002d48:	3730      	adds	r7, #48	; 0x30
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40010000 	.word	0x40010000
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020000 	.word	0x40020000
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40020400 	.word	0x40020400
 8002d64:	40000c00 	.word	0x40000c00
 8002d68:	40022000 	.word	0x40022000
 8002d6c:	40001800 	.word	0x40001800
 8002d70:	40021c00 	.word	0x40021c00

08002d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08c      	sub	sp, #48	; 0x30
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 031c 	add.w	r3, r7, #28
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a3c      	ldr	r2, [pc, #240]	; (8002e84 <HAL_UART_MspInit+0x110>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d145      	bne.n	8002e22 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d96:	4b3c      	ldr	r3, [pc, #240]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a3b      	ldr	r2, [pc, #236]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002d9c:	f043 0310 	orr.w	r3, r3, #16
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dae:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a35      	ldr	r2, [pc, #212]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b33      	ldr	r3, [pc, #204]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a2f      	ldr	r2, [pc, #188]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dee:	2307      	movs	r3, #7
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002df2:	f107 031c 	add.w	r3, r7, #28
 8002df6:	4619      	mov	r1, r3
 8002df8:	4824      	ldr	r0, [pc, #144]	; (8002e8c <HAL_UART_MspInit+0x118>)
 8002dfa:	f001 fc13 	bl	8004624 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e10:	2307      	movs	r3, #7
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481d      	ldr	r0, [pc, #116]	; (8002e90 <HAL_UART_MspInit+0x11c>)
 8002e1c:	f001 fc02 	bl	8004624 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e20:	e02c      	b.n	8002e7c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_UART_MspInit+0x120>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d127      	bne.n	8002e7c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e2c:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002e32:	f043 0320 	orr.w	r3, r3, #32
 8002e36:	6453      	str	r3, [r2, #68]	; 0x44
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	4a0f      	ldr	r2, [pc, #60]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e50:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <HAL_UART_MspInit+0x114>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002e5c:	23c0      	movs	r3, #192	; 0xc0
 8002e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e6c:	2308      	movs	r3, #8
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e70:	f107 031c 	add.w	r3, r7, #28
 8002e74:	4619      	mov	r1, r3
 8002e76:	4808      	ldr	r0, [pc, #32]	; (8002e98 <HAL_UART_MspInit+0x124>)
 8002e78:	f001 fbd4 	bl	8004624 <HAL_GPIO_Init>
}
 8002e7c:	bf00      	nop
 8002e7e:	3730      	adds	r7, #48	; 0x30
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40011000 	.word	0x40011000
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40020400 	.word	0x40020400
 8002e90:	40020000 	.word	0x40020000
 8002e94:	40011400 	.word	0x40011400
 8002e98:	40020800 	.word	0x40020800

08002e9c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002ea2:	1d3b      	adds	r3, r7, #4
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002eb0:	4b3a      	ldr	r3, [pc, #232]	; (8002f9c <HAL_FMC_MspInit+0x100>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d16d      	bne.n	8002f94 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002eb8:	4b38      	ldr	r3, [pc, #224]	; (8002f9c <HAL_FMC_MspInit+0x100>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ebe:	4b38      	ldr	r3, [pc, #224]	; (8002fa0 <HAL_FMC_MspInit+0x104>)
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	4a37      	ldr	r2, [pc, #220]	; (8002fa0 <HAL_FMC_MspInit+0x104>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6393      	str	r3, [r2, #56]	; 0x38
 8002eca:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <HAL_FMC_MspInit+0x104>)
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002ed6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002eda:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ee8:	230c      	movs	r3, #12
 8002eea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	4619      	mov	r1, r3
 8002ef0:	482c      	ldr	r0, [pc, #176]	; (8002fa4 <HAL_FMC_MspInit+0x108>)
 8002ef2:	f001 fb97 	bl	8004624 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002ef6:	f248 1333 	movw	r3, #33075	; 0x8133
 8002efa:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f04:	2303      	movs	r3, #3
 8002f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f08:	230c      	movs	r3, #12
 8002f0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4825      	ldr	r0, [pc, #148]	; (8002fa8 <HAL_FMC_MspInit+0x10c>)
 8002f12:	f001 fb87 	bl	8004624 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002f16:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002f1a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f24:	2303      	movs	r3, #3
 8002f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f28:	230c      	movs	r3, #12
 8002f2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	4619      	mov	r1, r3
 8002f30:	481e      	ldr	r0, [pc, #120]	; (8002fac <HAL_FMC_MspInit+0x110>)
 8002f32:	f001 fb77 	bl	8004624 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002f36:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002f3a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f44:	2303      	movs	r3, #3
 8002f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f48:	230c      	movs	r3, #12
 8002f4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f4c:	1d3b      	adds	r3, r7, #4
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4817      	ldr	r0, [pc, #92]	; (8002fb0 <HAL_FMC_MspInit+0x114>)
 8002f52:	f001 fb67 	bl	8004624 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002f56:	2328      	movs	r3, #40	; 0x28
 8002f58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f62:	2303      	movs	r3, #3
 8002f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f66:	230c      	movs	r3, #12
 8002f68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002f6a:	1d3b      	adds	r3, r7, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4811      	ldr	r0, [pc, #68]	; (8002fb4 <HAL_FMC_MspInit+0x118>)
 8002f70:	f001 fb58 	bl	8004624 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002f74:	2308      	movs	r3, #8
 8002f76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f84:	230c      	movs	r3, #12
 8002f86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	480a      	ldr	r0, [pc, #40]	; (8002fb8 <HAL_FMC_MspInit+0x11c>)
 8002f8e:	f001 fb49 	bl	8004624 <HAL_GPIO_Init>
 8002f92:	e000      	b.n	8002f96 <HAL_FMC_MspInit+0xfa>
    return;
 8002f94:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	200000c4 	.word	0x200000c4
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40021800 	.word	0x40021800
 8002fac:	40020c00 	.word	0x40020c00
 8002fb0:	40021400 	.word	0x40021400
 8002fb4:	40021c00 	.word	0x40021c00
 8002fb8:	40020800 	.word	0x40020800

08002fbc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002fc4:	f7ff ff6a 	bl	8002e9c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	; 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a2b      	ldr	r2, [pc, #172]	; (800308c <HAL_SAI_MspInit+0xbc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d124      	bne.n	800302c <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <HAL_SAI_MspInit+0xc0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002fea:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_SAI_MspInit+0xc4>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	4a29      	ldr	r2, [pc, #164]	; (8003094 <HAL_SAI_MspInit+0xc4>)
 8002ff0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ff6:	4b27      	ldr	r3, [pc, #156]	; (8003094 <HAL_SAI_MspInit+0xc4>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <HAL_SAI_MspInit+0xc0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	4a21      	ldr	r2, [pc, #132]	; (8003090 <HAL_SAI_MspInit+0xc0>)
 800300a:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800300c:	23f0      	movs	r3, #240	; 0xf0
 800300e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800301c:	230a      	movs	r3, #10
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	4619      	mov	r1, r3
 8003026:	481c      	ldr	r0, [pc, #112]	; (8003098 <HAL_SAI_MspInit+0xc8>)
 8003028:	f001 fafc 	bl	8004624 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1a      	ldr	r2, [pc, #104]	; (800309c <HAL_SAI_MspInit+0xcc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d125      	bne.n	8003082 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8003036:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_SAI_MspInit+0xc0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10b      	bne.n	8003056 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_SAI_MspInit+0xc4>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	4a14      	ldr	r2, [pc, #80]	; (8003094 <HAL_SAI_MspInit+0xc4>)
 8003044:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003048:	6453      	str	r3, [r2, #68]	; 0x44
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_SAI_MspInit+0xc4>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_SAI_MspInit+0xc0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <HAL_SAI_MspInit+0xc0>)
 800305e:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003072:	230a      	movs	r3, #10
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003076:	f107 0314 	add.w	r3, r7, #20
 800307a:	4619      	mov	r1, r3
 800307c:	4808      	ldr	r0, [pc, #32]	; (80030a0 <HAL_SAI_MspInit+0xd0>)
 800307e:	f001 fad1 	bl	8004624 <HAL_GPIO_Init>

    }
}
 8003082:	bf00      	nop
 8003084:	3728      	adds	r7, #40	; 0x28
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40015c04 	.word	0x40015c04
 8003090:	200000c8 	.word	0x200000c8
 8003094:	40023800 	.word	0x40023800
 8003098:	40022000 	.word	0x40022000
 800309c:	40015c24 	.word	0x40015c24
 80030a0:	40021800 	.word	0x40021800

080030a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08c      	sub	sp, #48	; 0x30
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80030b4:	2200      	movs	r2, #0
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	2036      	movs	r0, #54	; 0x36
 80030ba:	f000 fcb7 	bl	8003a2c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80030be:	2036      	movs	r0, #54	; 0x36
 80030c0:	f000 fcd0 	bl	8003a64 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80030c4:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <HAL_InitTick+0xa0>)
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <HAL_InitTick+0xa0>)
 80030ca:	f043 0310 	orr.w	r3, r3, #16
 80030ce:	6413      	str	r3, [r2, #64]	; 0x40
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <HAL_InitTick+0xa0>)
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030dc:	f107 0210 	add.w	r2, r7, #16
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 fc4e 	bl	8006988 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80030ec:	f003 fc24 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 80030f0:	4603      	mov	r3, r0
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80030f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f8:	4a13      	ldr	r2, [pc, #76]	; (8003148 <HAL_InitTick+0xa4>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	0c9b      	lsrs	r3, r3, #18
 8003100:	3b01      	subs	r3, #1
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003104:	4b11      	ldr	r3, [pc, #68]	; (800314c <HAL_InitTick+0xa8>)
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <HAL_InitTick+0xac>)
 8003108:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <HAL_InitTick+0xa8>)
 800310c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003110:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003112:	4a0e      	ldr	r2, [pc, #56]	; (800314c <HAL_InitTick+0xa8>)
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_InitTick+0xa8>)
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_InitTick+0xa8>)
 8003120:	2200      	movs	r2, #0
 8003122:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003124:	4809      	ldr	r0, [pc, #36]	; (800314c <HAL_InitTick+0xa8>)
 8003126:	f005 fdcf 	bl	8008cc8 <HAL_TIM_Base_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003130:	4806      	ldr	r0, [pc, #24]	; (800314c <HAL_InitTick+0xa8>)
 8003132:	f005 fdf5 	bl	8008d20 <HAL_TIM_Base_Start_IT>
 8003136:	4603      	mov	r3, r0
 8003138:	e000      	b.n	800313c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
}
 800313c:	4618      	mov	r0, r3
 800313e:	3730      	adds	r7, #48	; 0x30
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	431bde83 	.word	0x431bde83
 800314c:	20000a58 	.word	0x20000a58
 8003150:	40001000 	.word	0x40001000

08003154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003166:	e7fe      	b.n	8003166 <HardFault_Handler+0x4>

08003168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800316c:	e7fe      	b.n	800316c <MemManage_Handler+0x4>

0800316e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003172:	e7fe      	b.n	8003172 <BusFault_Handler+0x4>

08003174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003178:	e7fe      	b.n	8003178 <UsageFault_Handler+0x4>

0800317a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80031b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80031bc:	f001 fd00 	bl	8004bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  HAL_Delay(300);
 80031c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80031c4:	f000 f8d0 	bl	8003368 <HAL_Delay>
  mode = mode + 1;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <EXTI15_10_IRQHandler+0x30>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	4a05      	ldr	r2, [pc, #20]	; (80031e4 <EXTI15_10_IRQHandler+0x30>)
 80031d0:	6013      	str	r3, [r2, #0]
  
  if (mode > 2) {
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <EXTI15_10_IRQHandler+0x30>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	dd02      	ble.n	80031e0 <EXTI15_10_IRQHandler+0x2c>
    mode = 1;
 80031da:	4b02      	ldr	r3, [pc, #8]	; (80031e4 <EXTI15_10_IRQHandler+0x30>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]
  }
  
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000000 	.word	0x20000000

080031e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031ec:	4802      	ldr	r0, [pc, #8]	; (80031f8 <TIM6_DAC_IRQHandler+0x10>)
 80031ee:	f005 fdec 	bl	8008dca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000a58 	.word	0x20000a58

080031fc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003200:	4802      	ldr	r0, [pc, #8]	; (800320c <LTDC_IRQHandler+0x10>)
 8003202:	f002 fb81 	bl	8005908 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000660 	.word	0x20000660

08003210 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <DMA2D_IRQHandler+0x10>)
 8003216:	f000 ffc7 	bl	80041a8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000910 	.word	0x20000910

08003224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800322c:	4a14      	ldr	r2, [pc, #80]	; (8003280 <_sbrk+0x5c>)
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <_sbrk+0x60>)
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003238:	4b13      	ldr	r3, [pc, #76]	; (8003288 <_sbrk+0x64>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d102      	bne.n	8003246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003240:	4b11      	ldr	r3, [pc, #68]	; (8003288 <_sbrk+0x64>)
 8003242:	4a12      	ldr	r2, [pc, #72]	; (800328c <_sbrk+0x68>)
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <_sbrk+0x64>)
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4413      	add	r3, r2
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	429a      	cmp	r2, r3
 8003252:	d207      	bcs.n	8003264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003254:	f009 ff40 	bl	800d0d8 <__errno>
 8003258:	4602      	mov	r2, r0
 800325a:	230c      	movs	r3, #12
 800325c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800325e:	f04f 33ff 	mov.w	r3, #4294967295
 8003262:	e009      	b.n	8003278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <_sbrk+0x64>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <_sbrk+0x64>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	4a05      	ldr	r2, [pc, #20]	; (8003288 <_sbrk+0x64>)
 8003274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003276:	68fb      	ldr	r3, [r7, #12]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20050000 	.word	0x20050000
 8003284:	00000400 	.word	0x00000400
 8003288:	200000cc 	.word	0x200000cc
 800328c:	20000b80 	.word	0x20000b80

08003290 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <SystemInit+0x28>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <SystemInit+0x28>)
 800329c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032a4:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <SystemInit+0x28>)
 80032a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032aa:	609a      	str	r2, [r3, #8]
#endif
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032c2:	e003      	b.n	80032cc <LoopCopyDataInit>

080032c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032ca:	3104      	adds	r1, #4

080032cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032cc:	480b      	ldr	r0, [pc, #44]	; (80032fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032ce:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032d4:	d3f6      	bcc.n	80032c4 <CopyDataInit>
  ldr  r2, =_sbss
 80032d6:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032d8:	e002      	b.n	80032e0 <LoopFillZerobss>

080032da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032dc:	f842 3b04 	str.w	r3, [r2], #4

080032e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032e4:	d3f9      	bcc.n	80032da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032e6:	f7ff ffd3 	bl	8003290 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032ea:	f009 fefb 	bl	800d0e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ee:	f7fd f95f 	bl	80005b0 <main>
  bx  lr    
 80032f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032f4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80032f8:	0800f5c8 	.word	0x0800f5c8
  ldr  r0, =_sdata
 80032fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003300:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8003304:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8003308:	20000b7c 	.word	0x20000b7c

0800330c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800330c:	e7fe      	b.n	800330c <ADC_IRQHandler>

0800330e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003312:	2003      	movs	r0, #3
 8003314:	f000 fb7f 	bl	8003a16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003318:	2000      	movs	r0, #0
 800331a:	f7ff fec3 	bl	80030a4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800331e:	f7fe ff3b 	bl	8002198 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <HAL_IncTick+0x20>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <HAL_IncTick+0x24>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4413      	add	r3, r2
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <HAL_IncTick+0x24>)
 800333a:	6013      	str	r3, [r2, #0]
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	2000000c 	.word	0x2000000c
 800334c:	20000a98 	.word	0x20000a98

08003350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return uwTick;
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <HAL_GetTick+0x14>)
 8003356:	681b      	ldr	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000a98 	.word	0x20000a98

08003368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7ff ffee 	bl	8003350 <HAL_GetTick>
 8003374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d005      	beq.n	800338e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_Delay+0x40>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800338e:	bf00      	nop
 8003390:	f7ff ffde 	bl	8003350 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	429a      	cmp	r2, r3
 800339e:	d8f7      	bhi.n	8003390 <HAL_Delay+0x28>
  {
  }
}
 80033a0:	bf00      	nop
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	2000000c 	.word	0x2000000c

080033ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e031      	b.n	8003426 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fe ff0c 	bl	80021e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d116      	bne.n	8003418 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <HAL_ADC_Init+0x84>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	f043 0202 	orr.w	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f964 	bl	80036c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f023 0303 	bic.w	r3, r3, #3
 800340e:	f043 0201 	orr.w	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
 8003416:	e001      	b.n	800341c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003424:	7bfb      	ldrb	r3, [r7, #15]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	ffffeefd 	.word	0xffffeefd

08003434 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x1c>
 800344c:	2302      	movs	r3, #2
 800344e:	e12a      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x272>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b09      	cmp	r3, #9
 800345e:	d93a      	bls.n	80034d6 <HAL_ADC_ConfigChannel+0xa2>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003468:	d035      	beq.n	80034d6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68d9      	ldr	r1, [r3, #12]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	3b1e      	subs	r3, #30
 8003480:	2207      	movs	r2, #7
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	43da      	mvns	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	400a      	ands	r2, r1
 800348e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a87      	ldr	r2, [pc, #540]	; (80036b4 <HAL_ADC_ConfigChannel+0x280>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10a      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68d9      	ldr	r1, [r3, #12]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	061a      	lsls	r2, r3, #24
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ae:	e035      	b.n	800351c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68d9      	ldr	r1, [r3, #12]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	4618      	mov	r0, r3
 80034c2:	4603      	mov	r3, r0
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4403      	add	r3, r0
 80034c8:	3b1e      	subs	r3, #30
 80034ca:	409a      	lsls	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034d4:	e022      	b.n	800351c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6919      	ldr	r1, [r3, #16]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	2207      	movs	r2, #7
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43da      	mvns	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	400a      	ands	r2, r1
 80034f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6919      	ldr	r1, [r3, #16]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	4618      	mov	r0, r3
 800350c:	4603      	mov	r3, r0
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4403      	add	r3, r0
 8003512:	409a      	lsls	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b06      	cmp	r3, #6
 8003522:	d824      	bhi.n	800356e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	3b05      	subs	r3, #5
 8003536:	221f      	movs	r2, #31
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43da      	mvns	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	400a      	ands	r2, r1
 8003544:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	4618      	mov	r0, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	3b05      	subs	r3, #5
 8003560:	fa00 f203 	lsl.w	r2, r0, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	635a      	str	r2, [r3, #52]	; 0x34
 800356c:	e04c      	b.n	8003608 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d824      	bhi.n	80035c0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	3b23      	subs	r3, #35	; 0x23
 8003588:	221f      	movs	r2, #31
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43da      	mvns	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	400a      	ands	r2, r1
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	4618      	mov	r0, r3
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	3b23      	subs	r3, #35	; 0x23
 80035b2:	fa00 f203 	lsl.w	r2, r0, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
 80035be:	e023      	b.n	8003608 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	3b41      	subs	r3, #65	; 0x41
 80035d2:	221f      	movs	r2, #31
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43da      	mvns	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	400a      	ands	r2, r1
 80035e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	4618      	mov	r0, r3
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	3b41      	subs	r3, #65	; 0x41
 80035fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2a      	ldr	r2, [pc, #168]	; (80036b8 <HAL_ADC_ConfigChannel+0x284>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d10a      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x1f4>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800361a:	d105      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800361c:	4b27      	ldr	r3, [pc, #156]	; (80036bc <HAL_ADC_ConfigChannel+0x288>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4a26      	ldr	r2, [pc, #152]	; (80036bc <HAL_ADC_ConfigChannel+0x288>)
 8003622:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003626:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <HAL_ADC_ConfigChannel+0x284>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d109      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x212>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b12      	cmp	r3, #18
 8003638:	d105      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800363a:	4b20      	ldr	r3, [pc, #128]	; (80036bc <HAL_ADC_ConfigChannel+0x288>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <HAL_ADC_ConfigChannel+0x288>)
 8003640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003644:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <HAL_ADC_ConfigChannel+0x284>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d125      	bne.n	800369c <HAL_ADC_ConfigChannel+0x268>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_ADC_ConfigChannel+0x280>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d003      	beq.n	8003662 <HAL_ADC_ConfigChannel+0x22e>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b11      	cmp	r3, #17
 8003660:	d11c      	bne.n	800369c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <HAL_ADC_ConfigChannel+0x288>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4a15      	ldr	r2, [pc, #84]	; (80036bc <HAL_ADC_ConfigChannel+0x288>)
 8003668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800366c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a10      	ldr	r2, [pc, #64]	; (80036b4 <HAL_ADC_ConfigChannel+0x280>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d111      	bne.n	800369c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <HAL_ADC_ConfigChannel+0x28c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a11      	ldr	r2, [pc, #68]	; (80036c4 <HAL_ADC_ConfigChannel+0x290>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	0c9a      	lsrs	r2, r3, #18
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800368e:	e002      	b.n	8003696 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3b01      	subs	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1f9      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	10000012 	.word	0x10000012
 80036b8:	40012000 	.word	0x40012000
 80036bc:	40012300 	.word	0x40012300
 80036c0:	20000004 	.word	0x20000004
 80036c4:	431bde83 	.word	0x431bde83

080036c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80036d0:	4b78      	ldr	r3, [pc, #480]	; (80038b4 <ADC_Init+0x1ec>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	4a77      	ldr	r2, [pc, #476]	; (80038b4 <ADC_Init+0x1ec>)
 80036d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80036da:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80036dc:	4b75      	ldr	r3, [pc, #468]	; (80038b4 <ADC_Init+0x1ec>)
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4973      	ldr	r1, [pc, #460]	; (80038b4 <ADC_Init+0x1ec>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	021a      	lsls	r2, r3, #8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800371c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800373e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6899      	ldr	r1, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003756:	4a58      	ldr	r2, [pc, #352]	; (80038b8 <ADC_Init+0x1f0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d022      	beq.n	80037a2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800376a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800378c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	e00f      	b.n	80037c2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0202 	bic.w	r2, r2, #2
 80037d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6899      	ldr	r1, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	005a      	lsls	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01b      	beq.n	8003828 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800380e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	3b01      	subs	r3, #1
 800381c:	035a      	lsls	r2, r3, #13
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	e007      	b.n	8003838 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003836:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003846:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	3b01      	subs	r3, #1
 8003854:	051a      	lsls	r2, r3, #20
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800386c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6899      	ldr	r1, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800387a:	025a      	lsls	r2, r3, #9
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6899      	ldr	r1, [r3, #8]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	029a      	lsls	r2, r3, #10
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40012300 	.word	0x40012300
 80038b8:	0f000001 	.word	0x0f000001

080038bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <__NVIC_SetPriorityGrouping+0x40>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ea:	4a04      	ldr	r2, [pc, #16]	; (80038fc <__NVIC_SetPriorityGrouping+0x40>)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	60d3      	str	r3, [r2, #12]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000ed00 	.word	0xe000ed00
 8003900:	05fa0000 	.word	0x05fa0000

08003904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <__NVIC_GetPriorityGrouping+0x18>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	f003 0307 	and.w	r3, r3, #7
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db0b      	blt.n	800394a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	4907      	ldr	r1, [pc, #28]	; (8003958 <__NVIC_EnableIRQ+0x38>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2001      	movs	r0, #1
 8003942:	fa00 f202 	lsl.w	r2, r0, r2
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	; (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	; (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf28      	it	cs
 80039ce:	2304      	movcs	r3, #4
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b03      	subs	r3, #3
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	401a      	ands	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	4313      	orrs	r3, r2
         );
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	; 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ff4c 	bl	80038bc <__NVIC_SetPriorityGrouping>
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a3e:	f7ff ff61 	bl	8003904 <__NVIC_GetPriorityGrouping>
 8003a42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	6978      	ldr	r0, [r7, #20]
 8003a4a:	f7ff ffb1 	bl	80039b0 <NVIC_EncodePriority>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff ff80 	bl	800395c <__NVIC_SetPriority>
}
 8003a5c:	bf00      	nop
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff ff54 	bl	8003920 <__NVIC_EnableIRQ>
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e069      	b.n	8003b66 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fe fbfc 	bl	800229c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6819      	ldr	r1, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <HAL_DCMI_Init+0xf0>)
 8003ac6:	400b      	ands	r3, r1
 8003ac8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6819      	ldr	r1, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003ade:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003aea:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003af6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003b02:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003b0e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d112      	bne.n	8003b46 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7f1b      	ldrb	r3, [r3, #28]
 8003b24:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	7f5b      	ldrb	r3, [r3, #29]
 8003b2a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003b2c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	7f9b      	ldrb	r3, [r3, #30]
 8003b32:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003b34:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	7fdb      	ldrb	r3, [r3, #31]
 8003b3c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003b42:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003b44:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 021e 	orr.w	r2, r2, #30
 8003b54:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	ffe0f007 	.word	0xffe0f007

08003b74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b80:	f7ff fbe6 	bl	8003350 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e099      	b.n	8003cc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb0:	e00f      	b.n	8003bd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bb2:	f7ff fbcd 	bl	8003350 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d908      	bls.n	8003bd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2203      	movs	r2, #3
 8003bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e078      	b.n	8003cc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1e8      	bne.n	8003bb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4b38      	ldr	r3, [pc, #224]	; (8003ccc <HAL_DMA_Init+0x158>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d107      	bne.n	8003c3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	4313      	orrs	r3, r2
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f023 0307 	bic.w	r3, r3, #7
 8003c52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d117      	bne.n	8003c96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00e      	beq.n	8003c96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f8bd 	bl	8003df8 <DMA_CheckFifoParam>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2240      	movs	r2, #64	; 0x40
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c92:	2301      	movs	r3, #1
 8003c94:	e016      	b.n	8003cc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f874 	bl	8003d8c <DMA_CalcBaseAndBitshift>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cac:	223f      	movs	r2, #63	; 0x3f
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	f010803f 	.word	0xf010803f

08003cd0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e050      	b.n	8003d84 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d101      	bne.n	8003cf2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e048      	b.n	8003d84 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2200      	movs	r2, #0
 8003d18:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2221      	movs	r2, #33	; 0x21
 8003d30:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f82a 	bl	8003d8c <DMA_CalcBaseAndBitshift>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	223f      	movs	r2, #63	; 0x3f
 8003d42:	409a      	lsls	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3b10      	subs	r3, #16
 8003d9c:	4a13      	ldr	r2, [pc, #76]	; (8003dec <DMA_CalcBaseAndBitshift+0x60>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003da6:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <DMA_CalcBaseAndBitshift+0x64>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d908      	bls.n	8003dcc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <DMA_CalcBaseAndBitshift+0x68>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	1d1a      	adds	r2, r3, #4
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	659a      	str	r2, [r3, #88]	; 0x58
 8003dca:	e006      	b.n	8003dda <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <DMA_CalcBaseAndBitshift+0x68>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	aaaaaaab 	.word	0xaaaaaaab
 8003df0:	0800dac4 	.word	0x0800dac4
 8003df4:	fffffc00 	.word	0xfffffc00

08003df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d11f      	bne.n	8003e52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d855      	bhi.n	8003ec4 <DMA_CheckFifoParam+0xcc>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <DMA_CheckFifoParam+0x28>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e31 	.word	0x08003e31
 8003e24:	08003e43 	.word	0x08003e43
 8003e28:	08003e31 	.word	0x08003e31
 8003e2c:	08003ec5 	.word	0x08003ec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d045      	beq.n	8003ec8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e40:	e042      	b.n	8003ec8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e4a:	d13f      	bne.n	8003ecc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e50:	e03c      	b.n	8003ecc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5a:	d121      	bne.n	8003ea0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d836      	bhi.n	8003ed0 <DMA_CheckFifoParam+0xd8>
 8003e62:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <DMA_CheckFifoParam+0x70>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003e79 	.word	0x08003e79
 8003e6c:	08003e7f 	.word	0x08003e7f
 8003e70:	08003e79 	.word	0x08003e79
 8003e74:	08003e91 	.word	0x08003e91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7c:	e02f      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d024      	beq.n	8003ed4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8e:	e021      	b.n	8003ed4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e98:	d11e      	bne.n	8003ed8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e9e:	e01b      	b.n	8003ed8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d902      	bls.n	8003eac <DMA_CheckFifoParam+0xb4>
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d003      	beq.n	8003eb2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003eaa:	e018      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb0:	e015      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00e      	beq.n	8003edc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec2:	e00b      	b.n	8003edc <DMA_CheckFifoParam+0xe4>
      break;
 8003ec4:	bf00      	nop
 8003ec6:	e00a      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
      break;
 8003ec8:	bf00      	nop
 8003eca:	e008      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
      break;
 8003ecc:	bf00      	nop
 8003ece:	e006      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
      break;
 8003ed0:	bf00      	nop
 8003ed2:	e004      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
      break;
 8003ed4:	bf00      	nop
 8003ed6:	e002      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
      break;   
 8003ed8:	bf00      	nop
 8003eda:	e000      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
      break;
 8003edc:	bf00      	nop
    }
  } 
  
  return status; 
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e039      	b.n	8003f72 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fe fa80 	bl	8002418 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3c:	f023 0107 	bic.w	r1, r3, #7
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <HAL_DMA2D_Init+0x90>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	68d1      	ldr	r1, [r2, #12]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	ffffc000 	.word	0xffffc000

08003f80 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_DMA2D_Start+0x1c>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e018      	b.n	8003fce <HAL_DMA2D_Start+0x4e>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fa98 	bl	80044ec <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d056      	beq.n	80040a0 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003ff2:	f7ff f9ad 	bl	8003350 <HAL_GetTick>
 8003ff6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003ff8:	e04b      	b.n	8004092 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004008:	2b00      	cmp	r3, #0
 800400a:	d023      	beq.n	8004054 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	f043 0202 	orr.w	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004030:	f043 0201 	orr.w	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2221      	movs	r2, #33	; 0x21
 800403e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2204      	movs	r2, #4
 8004044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0a5      	b.n	80041a0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d01a      	beq.n	8004092 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800405c:	f7ff f978 	bl	8003350 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d302      	bcc.n	8004072 <HAL_DMA2D_PollForTransfer+0x9c>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10f      	bne.n	8004092 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	f043 0220 	orr.w	r2, r3, #32
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2203      	movs	r2, #3
 8004082:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e086      	b.n	80041a0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ac      	beq.n	8003ffa <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d061      	beq.n	8004186 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80040c2:	f7ff f945 	bl	8003350 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80040c8:	e056      	b.n	8004178 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d02e      	beq.n	800413a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ea:	f043 0204 	orr.w	r2, r3, #4
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	f043 0202 	orr.w	r2, r3, #2
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004116:	f043 0201 	orr.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2229      	movs	r2, #41	; 0x29
 8004124:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2204      	movs	r2, #4
 800412a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e032      	b.n	80041a0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d01a      	beq.n	8004178 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004142:	f7ff f905 	bl	8003350 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <HAL_DMA2D_PollForTransfer+0x182>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10f      	bne.n	8004178 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2203      	movs	r2, #3
 8004168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e013      	b.n	80041a0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 0310 	and.w	r3, r3, #16
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0a1      	beq.n	80040ca <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2212      	movs	r2, #18
 800418c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d026      	beq.n	8004218 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d021      	beq.n	8004218 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e8:	f043 0201 	orr.w	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2201      	movs	r2, #1
 80041f6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2204      	movs	r2, #4
 80041fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d026      	beq.n	8004270 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d021      	beq.n	8004270 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800423a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2220      	movs	r2, #32
 8004242:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004248:	f043 0202 	orr.w	r2, r3, #2
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2204      	movs	r2, #4
 8004254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d026      	beq.n	80042c8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004280:	2b00      	cmp	r3, #0
 8004282:	d021      	beq.n	80042c8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004292:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2208      	movs	r2, #8
 800429a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a0:	f043 0204 	orr.w	r2, r3, #4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2204      	movs	r2, #4
 80042ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d013      	beq.n	80042fa <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00e      	beq.n	80042fa <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ea:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2204      	movs	r2, #4
 80042f2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f853 	bl	80043a0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d024      	beq.n	800434e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01f      	beq.n	800434e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800431c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2202      	movs	r2, #2
 8004324:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01f      	beq.n	8004398 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01a      	beq.n	8004398 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004370:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2210      	movs	r2, #16
 8004378:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f80e 	bl	80043b4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004398:	bf00      	nop
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_DMA2D_ConfigLayer+0x20>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e079      	b.n	80044dc <HAL_DMA2D_ConfigLayer+0x114>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	3318      	adds	r3, #24
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	4313      	orrs	r3, r2
 8004410:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004412:	4b35      	ldr	r3, [pc, #212]	; (80044e8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004414:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b0a      	cmp	r3, #10
 800441c:	d003      	beq.n	8004426 <HAL_DMA2D_ConfigLayer+0x5e>
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b09      	cmp	r3, #9
 8004424:	d107      	bne.n	8004436 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e005      	b.n	8004442 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	061b      	lsls	r3, r3, #24
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	4313      	orrs	r3, r2
 8004440:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d120      	bne.n	800448a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	43db      	mvns	r3, r3
 8004452:	ea02 0103 	and.w	r1, r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	430a      	orrs	r2, r1
 800445e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b0a      	cmp	r3, #10
 8004470:	d003      	beq.n	800447a <HAL_DMA2D_ConfigLayer+0xb2>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b09      	cmp	r3, #9
 8004478:	d127      	bne.n	80044ca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004486:	629a      	str	r2, [r3, #40]	; 0x28
 8004488:	e01f      	b.n	80044ca <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69da      	ldr	r2, [r3, #28]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	43db      	mvns	r3, r3
 8004494:	ea02 0103 	and.w	r1, r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	430a      	orrs	r2, r1
 80044a0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b0a      	cmp	r3, #10
 80044b2:	d003      	beq.n	80044bc <HAL_DMA2D_ConfigLayer+0xf4>
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2b09      	cmp	r3, #9
 80044ba:	d106      	bne.n	80044ca <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044c8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	ff03000f 	.word	0xff03000f

080044ec <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b08b      	sub	sp, #44	; 0x2c
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004500:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	041a      	lsls	r2, r3, #16
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	431a      	orrs	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004524:	d174      	bne.n	8004610 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800452c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004534:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800453c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d108      	bne.n	800455e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	431a      	orrs	r2, r3
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	4313      	orrs	r3, r2
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4313      	orrs	r3, r2
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
 800455c:	e053      	b.n	8004606 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d106      	bne.n	8004574 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	4313      	orrs	r3, r2
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	e048      	b.n	8004606 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d111      	bne.n	80045a0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	0cdb      	lsrs	r3, r3, #19
 8004580:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	0a9b      	lsrs	r3, r3, #10
 8004586:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	08db      	lsrs	r3, r3, #3
 800458c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	02db      	lsls	r3, r3, #11
 8004596:	4313      	orrs	r3, r2
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
 800459e:	e032      	b.n	8004606 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d117      	bne.n	80045d8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	0fdb      	lsrs	r3, r3, #31
 80045ac:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	0cdb      	lsrs	r3, r3, #19
 80045b2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	0adb      	lsrs	r3, r3, #11
 80045b8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	08db      	lsrs	r3, r3, #3
 80045be:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	029b      	lsls	r3, r3, #10
 80045c8:	431a      	orrs	r2, r3
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	03db      	lsls	r3, r3, #15
 80045ce:	4313      	orrs	r3, r2
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
 80045d6:	e016      	b.n	8004606 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	0f1b      	lsrs	r3, r3, #28
 80045dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	0d1b      	lsrs	r3, r3, #20
 80045e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	0b1b      	lsrs	r3, r3, #12
 80045e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	011a      	lsls	r2, r3, #4
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	431a      	orrs	r2, r3
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	031b      	lsls	r3, r3, #12
 80045fe:	4313      	orrs	r3, r2
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800460e:	e003      	b.n	8004618 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	60da      	str	r2, [r3, #12]
}
 8004618:	bf00      	nop
 800461a:	372c      	adds	r7, #44	; 0x2c
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	; 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800463a:	2300      	movs	r3, #0
 800463c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e175      	b.n	8004930 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004644:	2201      	movs	r2, #1
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	4013      	ands	r3, r2
 8004656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	429a      	cmp	r2, r3
 800465e:	f040 8164 	bne.w	800492a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d00b      	beq.n	8004682 <HAL_GPIO_Init+0x5e>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d007      	beq.n	8004682 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004676:	2b11      	cmp	r3, #17
 8004678:	d003      	beq.n	8004682 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b12      	cmp	r3, #18
 8004680:	d130      	bne.n	80046e4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	2203      	movs	r2, #3
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69ba      	ldr	r2, [r7, #24]
 80046b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046b8:	2201      	movs	r2, #1
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 0201 	and.w	r2, r3, #1
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	2203      	movs	r2, #3
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4313      	orrs	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d003      	beq.n	8004724 <HAL_GPIO_Init+0x100>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b12      	cmp	r3, #18
 8004722:	d123      	bne.n	800476c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	08da      	lsrs	r2, r3, #3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3208      	adds	r2, #8
 800472c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	220f      	movs	r2, #15
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	4013      	ands	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	08da      	lsrs	r2, r3, #3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3208      	adds	r2, #8
 8004766:	69b9      	ldr	r1, [r7, #24]
 8004768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	2203      	movs	r2, #3
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 0203 	and.w	r2, r3, #3
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80be 	beq.w	800492a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ae:	4b65      	ldr	r3, [pc, #404]	; (8004944 <HAL_GPIO_Init+0x320>)
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	4a64      	ldr	r2, [pc, #400]	; (8004944 <HAL_GPIO_Init+0x320>)
 80047b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047b8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ba:	4b62      	ldr	r3, [pc, #392]	; (8004944 <HAL_GPIO_Init+0x320>)
 80047bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c2:	60fb      	str	r3, [r7, #12]
 80047c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047c6:	4a60      	ldr	r2, [pc, #384]	; (8004948 <HAL_GPIO_Init+0x324>)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	3302      	adds	r3, #2
 80047ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a57      	ldr	r2, [pc, #348]	; (800494c <HAL_GPIO_Init+0x328>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d037      	beq.n	8004862 <HAL_GPIO_Init+0x23e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a56      	ldr	r2, [pc, #344]	; (8004950 <HAL_GPIO_Init+0x32c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d031      	beq.n	800485e <HAL_GPIO_Init+0x23a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a55      	ldr	r2, [pc, #340]	; (8004954 <HAL_GPIO_Init+0x330>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d02b      	beq.n	800485a <HAL_GPIO_Init+0x236>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a54      	ldr	r2, [pc, #336]	; (8004958 <HAL_GPIO_Init+0x334>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d025      	beq.n	8004856 <HAL_GPIO_Init+0x232>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a53      	ldr	r2, [pc, #332]	; (800495c <HAL_GPIO_Init+0x338>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d01f      	beq.n	8004852 <HAL_GPIO_Init+0x22e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a52      	ldr	r2, [pc, #328]	; (8004960 <HAL_GPIO_Init+0x33c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d019      	beq.n	800484e <HAL_GPIO_Init+0x22a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a51      	ldr	r2, [pc, #324]	; (8004964 <HAL_GPIO_Init+0x340>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_GPIO_Init+0x226>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a50      	ldr	r2, [pc, #320]	; (8004968 <HAL_GPIO_Init+0x344>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00d      	beq.n	8004846 <HAL_GPIO_Init+0x222>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a4f      	ldr	r2, [pc, #316]	; (800496c <HAL_GPIO_Init+0x348>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d007      	beq.n	8004842 <HAL_GPIO_Init+0x21e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a4e      	ldr	r2, [pc, #312]	; (8004970 <HAL_GPIO_Init+0x34c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_GPIO_Init+0x21a>
 800483a:	2309      	movs	r3, #9
 800483c:	e012      	b.n	8004864 <HAL_GPIO_Init+0x240>
 800483e:	230a      	movs	r3, #10
 8004840:	e010      	b.n	8004864 <HAL_GPIO_Init+0x240>
 8004842:	2308      	movs	r3, #8
 8004844:	e00e      	b.n	8004864 <HAL_GPIO_Init+0x240>
 8004846:	2307      	movs	r3, #7
 8004848:	e00c      	b.n	8004864 <HAL_GPIO_Init+0x240>
 800484a:	2306      	movs	r3, #6
 800484c:	e00a      	b.n	8004864 <HAL_GPIO_Init+0x240>
 800484e:	2305      	movs	r3, #5
 8004850:	e008      	b.n	8004864 <HAL_GPIO_Init+0x240>
 8004852:	2304      	movs	r3, #4
 8004854:	e006      	b.n	8004864 <HAL_GPIO_Init+0x240>
 8004856:	2303      	movs	r3, #3
 8004858:	e004      	b.n	8004864 <HAL_GPIO_Init+0x240>
 800485a:	2302      	movs	r3, #2
 800485c:	e002      	b.n	8004864 <HAL_GPIO_Init+0x240>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_GPIO_Init+0x240>
 8004862:	2300      	movs	r3, #0
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	f002 0203 	and.w	r2, r2, #3
 800486a:	0092      	lsls	r2, r2, #2
 800486c:	4093      	lsls	r3, r2
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4313      	orrs	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004874:	4934      	ldr	r1, [pc, #208]	; (8004948 <HAL_GPIO_Init+0x324>)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	089b      	lsrs	r3, r3, #2
 800487a:	3302      	adds	r3, #2
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004882:	4b3c      	ldr	r3, [pc, #240]	; (8004974 <HAL_GPIO_Init+0x350>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	43db      	mvns	r3, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4013      	ands	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048a6:	4a33      	ldr	r2, [pc, #204]	; (8004974 <HAL_GPIO_Init+0x350>)
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048ac:	4b31      	ldr	r3, [pc, #196]	; (8004974 <HAL_GPIO_Init+0x350>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	43db      	mvns	r3, r3
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4013      	ands	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048d0:	4a28      	ldr	r2, [pc, #160]	; (8004974 <HAL_GPIO_Init+0x350>)
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048d6:	4b27      	ldr	r3, [pc, #156]	; (8004974 <HAL_GPIO_Init+0x350>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	43db      	mvns	r3, r3
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	4013      	ands	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048fa:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <HAL_GPIO_Init+0x350>)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004900:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <HAL_GPIO_Init+0x350>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	43db      	mvns	r3, r3
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	4013      	ands	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004924:	4a13      	ldr	r2, [pc, #76]	; (8004974 <HAL_GPIO_Init+0x350>)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3301      	adds	r3, #1
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b0f      	cmp	r3, #15
 8004934:	f67f ae86 	bls.w	8004644 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004938:	bf00      	nop
 800493a:	3724      	adds	r7, #36	; 0x24
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	40023800 	.word	0x40023800
 8004948:	40013800 	.word	0x40013800
 800494c:	40020000 	.word	0x40020000
 8004950:	40020400 	.word	0x40020400
 8004954:	40020800 	.word	0x40020800
 8004958:	40020c00 	.word	0x40020c00
 800495c:	40021000 	.word	0x40021000
 8004960:	40021400 	.word	0x40021400
 8004964:	40021800 	.word	0x40021800
 8004968:	40021c00 	.word	0x40021c00
 800496c:	40022000 	.word	0x40022000
 8004970:	40022400 	.word	0x40022400
 8004974:	40013c00 	.word	0x40013c00

08004978 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800498a:	2300      	movs	r3, #0
 800498c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	e0d9      	b.n	8004b48 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004994:	2201      	movs	r2, #1
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4013      	ands	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	f040 80c9 	bne.w	8004b42 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80049b0:	4a6a      	ldr	r2, [pc, #424]	; (8004b5c <HAL_GPIO_DeInit+0x1e4>)
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	3302      	adds	r3, #2
 80049b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049bc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	220f      	movs	r2, #15
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a62      	ldr	r2, [pc, #392]	; (8004b60 <HAL_GPIO_DeInit+0x1e8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d037      	beq.n	8004a4a <HAL_GPIO_DeInit+0xd2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a61      	ldr	r2, [pc, #388]	; (8004b64 <HAL_GPIO_DeInit+0x1ec>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d031      	beq.n	8004a46 <HAL_GPIO_DeInit+0xce>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a60      	ldr	r2, [pc, #384]	; (8004b68 <HAL_GPIO_DeInit+0x1f0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02b      	beq.n	8004a42 <HAL_GPIO_DeInit+0xca>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a5f      	ldr	r2, [pc, #380]	; (8004b6c <HAL_GPIO_DeInit+0x1f4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d025      	beq.n	8004a3e <HAL_GPIO_DeInit+0xc6>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a5e      	ldr	r2, [pc, #376]	; (8004b70 <HAL_GPIO_DeInit+0x1f8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <HAL_GPIO_DeInit+0xc2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <HAL_GPIO_DeInit+0x1fc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d019      	beq.n	8004a36 <HAL_GPIO_DeInit+0xbe>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a5c      	ldr	r2, [pc, #368]	; (8004b78 <HAL_GPIO_DeInit+0x200>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_GPIO_DeInit+0xba>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a5b      	ldr	r2, [pc, #364]	; (8004b7c <HAL_GPIO_DeInit+0x204>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00d      	beq.n	8004a2e <HAL_GPIO_DeInit+0xb6>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a5a      	ldr	r2, [pc, #360]	; (8004b80 <HAL_GPIO_DeInit+0x208>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <HAL_GPIO_DeInit+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a59      	ldr	r2, [pc, #356]	; (8004b84 <HAL_GPIO_DeInit+0x20c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d101      	bne.n	8004a26 <HAL_GPIO_DeInit+0xae>
 8004a22:	2309      	movs	r3, #9
 8004a24:	e012      	b.n	8004a4c <HAL_GPIO_DeInit+0xd4>
 8004a26:	230a      	movs	r3, #10
 8004a28:	e010      	b.n	8004a4c <HAL_GPIO_DeInit+0xd4>
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	e00e      	b.n	8004a4c <HAL_GPIO_DeInit+0xd4>
 8004a2e:	2307      	movs	r3, #7
 8004a30:	e00c      	b.n	8004a4c <HAL_GPIO_DeInit+0xd4>
 8004a32:	2306      	movs	r3, #6
 8004a34:	e00a      	b.n	8004a4c <HAL_GPIO_DeInit+0xd4>
 8004a36:	2305      	movs	r3, #5
 8004a38:	e008      	b.n	8004a4c <HAL_GPIO_DeInit+0xd4>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	e006      	b.n	8004a4c <HAL_GPIO_DeInit+0xd4>
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e004      	b.n	8004a4c <HAL_GPIO_DeInit+0xd4>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e002      	b.n	8004a4c <HAL_GPIO_DeInit+0xd4>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <HAL_GPIO_DeInit+0xd4>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	f002 0203 	and.w	r2, r2, #3
 8004a52:	0092      	lsls	r2, r2, #2
 8004a54:	4093      	lsls	r3, r2
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d132      	bne.n	8004ac2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004a5c:	4b4a      	ldr	r3, [pc, #296]	; (8004b88 <HAL_GPIO_DeInit+0x210>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	4948      	ldr	r1, [pc, #288]	; (8004b88 <HAL_GPIO_DeInit+0x210>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004a6a:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_GPIO_DeInit+0x210>)
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	43db      	mvns	r3, r3
 8004a72:	4945      	ldr	r1, [pc, #276]	; (8004b88 <HAL_GPIO_DeInit+0x210>)
 8004a74:	4013      	ands	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004a78:	4b43      	ldr	r3, [pc, #268]	; (8004b88 <HAL_GPIO_DeInit+0x210>)
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	4941      	ldr	r1, [pc, #260]	; (8004b88 <HAL_GPIO_DeInit+0x210>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004a86:	4b40      	ldr	r3, [pc, #256]	; (8004b88 <HAL_GPIO_DeInit+0x210>)
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	493e      	ldr	r1, [pc, #248]	; (8004b88 <HAL_GPIO_DeInit+0x210>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	220f      	movs	r2, #15
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004aa4:	4a2d      	ldr	r2, [pc, #180]	; (8004b5c <HAL_GPIO_DeInit+0x1e4>)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	3302      	adds	r3, #2
 8004aac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	43da      	mvns	r2, r3
 8004ab4:	4829      	ldr	r0, [pc, #164]	; (8004b5c <HAL_GPIO_DeInit+0x1e4>)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	089b      	lsrs	r3, r3, #2
 8004aba:	400a      	ands	r2, r1
 8004abc:	3302      	adds	r3, #2
 8004abe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	2103      	movs	r1, #3
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	401a      	ands	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	08da      	lsrs	r2, r3, #3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3208      	adds	r2, #8
 8004ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	220f      	movs	r2, #15
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	43db      	mvns	r3, r3
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	08d2      	lsrs	r2, r2, #3
 8004af8:	4019      	ands	r1, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3208      	adds	r2, #8
 8004afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	2103      	movs	r1, #3
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	401a      	ands	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	fa01 f303 	lsl.w	r3, r1, r3
 8004b24:	43db      	mvns	r3, r3
 8004b26:	401a      	ands	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	2103      	movs	r1, #3
 8004b36:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	401a      	ands	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	3301      	adds	r3, #1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b0f      	cmp	r3, #15
 8004b4c:	f67f af22 	bls.w	8004994 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004b50:	bf00      	nop
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	40013800 	.word	0x40013800
 8004b60:	40020000 	.word	0x40020000
 8004b64:	40020400 	.word	0x40020400
 8004b68:	40020800 	.word	0x40020800
 8004b6c:	40020c00 	.word	0x40020c00
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40021400 	.word	0x40021400
 8004b78:	40021800 	.word	0x40021800
 8004b7c:	40021c00 	.word	0x40021c00
 8004b80:	40022000 	.word	0x40022000
 8004b84:	40022400 	.word	0x40022400
 8004b88:	40013c00 	.word	0x40013c00

08004b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	807b      	strh	r3, [r7, #2]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b9c:	787b      	ldrb	r3, [r7, #1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ba2:	887a      	ldrh	r2, [r7, #2]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ba8:	e003      	b.n	8004bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004baa:	887b      	ldrh	r3, [r7, #2]
 8004bac:	041a      	lsls	r2, r3, #16
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	619a      	str	r2, [r3, #24]
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bcc:	695a      	ldr	r2, [r3, #20]
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d006      	beq.n	8004be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bd6:	4a05      	ldr	r2, [pc, #20]	; (8004bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f806 	bl	8004bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	40013c00 	.word	0x40013c00

08004bf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e07f      	b.n	8004d1a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fd fc18 	bl	8002464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2224      	movs	r2, #36	; 0x24
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0201 	bic.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d107      	bne.n	8004c82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	e006      	b.n	8004c90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d104      	bne.n	8004ca2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ca0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6859      	ldr	r1, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <HAL_I2C_Init+0x11c>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	ea42 0103 	orr.w	r1, r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69d9      	ldr	r1, [r3, #28]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a1a      	ldr	r2, [r3, #32]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	02008000 	.word	0x02008000

08004d28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e021      	b.n	8004d7e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2224      	movs	r2, #36	; 0x24
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0201 	bic.w	r2, r2, #1
 8004d50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fd fbfe 	bl	8002554 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	4608      	mov	r0, r1
 8004d92:	4611      	mov	r1, r2
 8004d94:	461a      	mov	r2, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	817b      	strh	r3, [r7, #10]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	813b      	strh	r3, [r7, #8]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b20      	cmp	r3, #32
 8004dac:	f040 80f9 	bne.w	8004fa2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <HAL_I2C_Mem_Write+0x34>
 8004db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0ed      	b.n	8004fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <HAL_I2C_Mem_Write+0x4e>
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	e0e6      	b.n	8004fa4 <HAL_I2C_Mem_Write+0x21c>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dde:	f7fe fab7 	bl	8003350 <HAL_GetTick>
 8004de2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	2319      	movs	r3, #25
 8004dea:	2201      	movs	r2, #1
 8004dec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fad1 	bl	8005398 <I2C_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0d1      	b.n	8004fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2221      	movs	r2, #33	; 0x21
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2240      	movs	r2, #64	; 0x40
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e28:	88f8      	ldrh	r0, [r7, #6]
 8004e2a:	893a      	ldrh	r2, [r7, #8]
 8004e2c:	8979      	ldrh	r1, [r7, #10]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	9301      	str	r3, [sp, #4]
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	4603      	mov	r3, r0
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 f9e1 	bl	8005200 <I2C_RequestMemoryWrite>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e0a9      	b.n	8004fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	2bff      	cmp	r3, #255	; 0xff
 8004e58:	d90e      	bls.n	8004e78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	22ff      	movs	r2, #255	; 0xff
 8004e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	8979      	ldrh	r1, [r7, #10]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 fbb3 	bl	80055dc <I2C_TransferConfig>
 8004e76:	e00f      	b.n	8004e98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	8979      	ldrh	r1, [r7, #10]
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 fba2 	bl	80055dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fabb 	bl	8005418 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e07b      	b.n	8004fa4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d034      	beq.n	8004f50 <HAL_I2C_Mem_Write+0x1c8>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d130      	bne.n	8004f50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2180      	movs	r1, #128	; 0x80
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fa4d 	bl	8005398 <I2C_WaitOnFlagUntilTimeout>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e04d      	b.n	8004fa4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2bff      	cmp	r3, #255	; 0xff
 8004f10:	d90e      	bls.n	8004f30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	22ff      	movs	r2, #255	; 0xff
 8004f16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	8979      	ldrh	r1, [r7, #10]
 8004f20:	2300      	movs	r3, #0
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 fb57 	bl	80055dc <I2C_TransferConfig>
 8004f2e:	e00f      	b.n	8004f50 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	8979      	ldrh	r1, [r7, #10]
 8004f42:	2300      	movs	r3, #0
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 fb46 	bl	80055dc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d19e      	bne.n	8004e98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fa9a 	bl	8005498 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e01a      	b.n	8004fa4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2220      	movs	r2, #32
 8004f74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6859      	ldr	r1, [r3, #4]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <HAL_I2C_Mem_Write+0x224>)
 8004f82:	400b      	ands	r3, r1
 8004f84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e000      	b.n	8004fa4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004fa2:	2302      	movs	r3, #2
  }
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	fe00e800 	.word	0xfe00e800

08004fb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	817b      	strh	r3, [r7, #10]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	813b      	strh	r3, [r7, #8]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	f040 80fd 	bne.w	80051d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_I2C_Mem_Read+0x34>
 8004fde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d105      	bne.n	8004ff0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0f1      	b.n	80051d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_I2C_Mem_Read+0x4e>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e0ea      	b.n	80051d4 <HAL_I2C_Mem_Read+0x224>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005006:	f7fe f9a3 	bl	8003350 <HAL_GetTick>
 800500a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	2319      	movs	r3, #25
 8005012:	2201      	movs	r2, #1
 8005014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 f9bd 	bl	8005398 <I2C_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0d5      	b.n	80051d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2222      	movs	r2, #34	; 0x22
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2240      	movs	r2, #64	; 0x40
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a3a      	ldr	r2, [r7, #32]
 8005042:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005048:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005050:	88f8      	ldrh	r0, [r7, #6]
 8005052:	893a      	ldrh	r2, [r7, #8]
 8005054:	8979      	ldrh	r1, [r7, #10]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	4603      	mov	r3, r0
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f921 	bl	80052a8 <I2C_RequestMemoryRead>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e0ad      	b.n	80051d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	2bff      	cmp	r3, #255	; 0xff
 8005080:	d90e      	bls.n	80050a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	22ff      	movs	r2, #255	; 0xff
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800508c:	b2da      	uxtb	r2, r3
 800508e:	8979      	ldrh	r1, [r7, #10]
 8005090:	4b52      	ldr	r3, [pc, #328]	; (80051dc <HAL_I2C_Mem_Read+0x22c>)
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fa9f 	bl	80055dc <I2C_TransferConfig>
 800509e:	e00f      	b.n	80050c0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	8979      	ldrh	r1, [r7, #10]
 80050b2:	4b4a      	ldr	r3, [pc, #296]	; (80051dc <HAL_I2C_Mem_Read+0x22c>)
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fa8e 	bl	80055dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	2200      	movs	r2, #0
 80050c8:	2104      	movs	r1, #4
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f964 	bl	8005398 <I2C_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e07c      	b.n	80051d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d034      	beq.n	8005180 <HAL_I2C_Mem_Read+0x1d0>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d130      	bne.n	8005180 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	2200      	movs	r2, #0
 8005126:	2180      	movs	r1, #128	; 0x80
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f935 	bl	8005398 <I2C_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e04d      	b.n	80051d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513c:	b29b      	uxth	r3, r3
 800513e:	2bff      	cmp	r3, #255	; 0xff
 8005140:	d90e      	bls.n	8005160 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	22ff      	movs	r2, #255	; 0xff
 8005146:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514c:	b2da      	uxtb	r2, r3
 800514e:	8979      	ldrh	r1, [r7, #10]
 8005150:	2300      	movs	r3, #0
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fa3f 	bl	80055dc <I2C_TransferConfig>
 800515e:	e00f      	b.n	8005180 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516e:	b2da      	uxtb	r2, r3
 8005170:	8979      	ldrh	r1, [r7, #10]
 8005172:	2300      	movs	r3, #0
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fa2e 	bl	80055dc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d19a      	bne.n	80050c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f982 	bl	8005498 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e01a      	b.n	80051d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2220      	movs	r2, #32
 80051a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6859      	ldr	r1, [r3, #4]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <HAL_I2C_Mem_Read+0x230>)
 80051b2:	400b      	ands	r3, r1
 80051b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e000      	b.n	80051d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
  }
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	80002400 	.word	0x80002400
 80051e0:	fe00e800 	.word	0xfe00e800

080051e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f2:	b2db      	uxtb	r3, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	4608      	mov	r0, r1
 800520a:	4611      	mov	r1, r2
 800520c:	461a      	mov	r2, r3
 800520e:	4603      	mov	r3, r0
 8005210:	817b      	strh	r3, [r7, #10]
 8005212:	460b      	mov	r3, r1
 8005214:	813b      	strh	r3, [r7, #8]
 8005216:	4613      	mov	r3, r2
 8005218:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	8979      	ldrh	r1, [r7, #10]
 8005220:	4b20      	ldr	r3, [pc, #128]	; (80052a4 <I2C_RequestMemoryWrite+0xa4>)
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f9d7 	bl	80055dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	69b9      	ldr	r1, [r7, #24]
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 f8f0 	bl	8005418 <I2C_WaitOnTXISFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e02c      	b.n	800529c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005242:	88fb      	ldrh	r3, [r7, #6]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d105      	bne.n	8005254 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005248:	893b      	ldrh	r3, [r7, #8]
 800524a:	b2da      	uxtb	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	629a      	str	r2, [r3, #40]	; 0x28
 8005252:	e015      	b.n	8005280 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005254:	893b      	ldrh	r3, [r7, #8]
 8005256:	0a1b      	lsrs	r3, r3, #8
 8005258:	b29b      	uxth	r3, r3
 800525a:	b2da      	uxtb	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	69b9      	ldr	r1, [r7, #24]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f8d6 	bl	8005418 <I2C_WaitOnTXISFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e012      	b.n	800529c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005276:	893b      	ldrh	r3, [r7, #8]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2200      	movs	r2, #0
 8005288:	2180      	movs	r1, #128	; 0x80
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f884 	bl	8005398 <I2C_WaitOnFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	80002000 	.word	0x80002000

080052a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	4608      	mov	r0, r1
 80052b2:	4611      	mov	r1, r2
 80052b4:	461a      	mov	r2, r3
 80052b6:	4603      	mov	r3, r0
 80052b8:	817b      	strh	r3, [r7, #10]
 80052ba:	460b      	mov	r3, r1
 80052bc:	813b      	strh	r3, [r7, #8]
 80052be:	4613      	mov	r3, r2
 80052c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	8979      	ldrh	r1, [r7, #10]
 80052c8:	4b20      	ldr	r3, [pc, #128]	; (800534c <I2C_RequestMemoryRead+0xa4>)
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	2300      	movs	r3, #0
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 f984 	bl	80055dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	69b9      	ldr	r1, [r7, #24]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f89d 	bl	8005418 <I2C_WaitOnTXISFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e02c      	b.n	8005342 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d105      	bne.n	80052fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052ee:	893b      	ldrh	r3, [r7, #8]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28
 80052f8:	e015      	b.n	8005326 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052fa:	893b      	ldrh	r3, [r7, #8]
 80052fc:	0a1b      	lsrs	r3, r3, #8
 80052fe:	b29b      	uxth	r3, r3
 8005300:	b2da      	uxtb	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	69b9      	ldr	r1, [r7, #24]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f883 	bl	8005418 <I2C_WaitOnTXISFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e012      	b.n	8005342 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800531c:	893b      	ldrh	r3, [r7, #8]
 800531e:	b2da      	uxtb	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2200      	movs	r2, #0
 800532e:	2140      	movs	r1, #64	; 0x40
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f831 	bl	8005398 <I2C_WaitOnFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	80002000 	.word	0x80002000

08005350 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d103      	bne.n	800536e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d007      	beq.n	800538c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	619a      	str	r2, [r3, #24]
  }
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	4613      	mov	r3, r2
 80053a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053a8:	e022      	b.n	80053f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d01e      	beq.n	80053f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053b2:	f7fd ffcd 	bl	8003350 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d302      	bcc.n	80053c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d113      	bne.n	80053f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053cc:	f043 0220 	orr.w	r2, r3, #32
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e00f      	b.n	8005410 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4013      	ands	r3, r2
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	461a      	mov	r2, r3
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	429a      	cmp	r2, r3
 800540c:	d0cd      	beq.n	80053aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005424:	e02c      	b.n	8005480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 f870 	bl	8005510 <I2C_IsAcknowledgeFailed>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e02a      	b.n	8005490 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005440:	d01e      	beq.n	8005480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f7fd ff85 	bl	8003350 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d113      	bne.n	8005480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545c:	f043 0220 	orr.w	r2, r3, #32
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e007      	b.n	8005490 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d1cb      	bne.n	8005426 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a4:	e028      	b.n	80054f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 f830 	bl	8005510 <I2C_IsAcknowledgeFailed>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e026      	b.n	8005508 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fd ff49 	bl	8003350 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d113      	bne.n	80054f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d4:	f043 0220 	orr.w	r2, r3, #32
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e007      	b.n	8005508 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b20      	cmp	r3, #32
 8005504:	d1cf      	bne.n	80054a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b10      	cmp	r3, #16
 8005528:	d151      	bne.n	80055ce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800552a:	e022      	b.n	8005572 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d01e      	beq.n	8005572 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005534:	f7fd ff0c 	bl	8003350 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	429a      	cmp	r2, r3
 8005542:	d302      	bcc.n	800554a <I2C_IsAcknowledgeFailed+0x3a>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d113      	bne.n	8005572 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	f043 0220 	orr.w	r2, r3, #32
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e02e      	b.n	80055d0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b20      	cmp	r3, #32
 800557e:	d1d5      	bne.n	800552c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2210      	movs	r2, #16
 8005586:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2220      	movs	r2, #32
 800558e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff fedd 	bl	8005350 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6859      	ldr	r1, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b0d      	ldr	r3, [pc, #52]	; (80055d8 <I2C_IsAcknowledgeFailed+0xc8>)
 80055a2:	400b      	ands	r3, r1
 80055a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	f043 0204 	orr.w	r2, r3, #4
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	fe00e800 	.word	0xfe00e800

080055dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	607b      	str	r3, [r7, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	817b      	strh	r3, [r7, #10]
 80055ea:	4613      	mov	r3, r2
 80055ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	0d5b      	lsrs	r3, r3, #21
 80055f8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <I2C_TransferConfig+0x58>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	43db      	mvns	r3, r3
 8005602:	ea02 0103 	and.w	r1, r2, r3
 8005606:	897b      	ldrh	r3, [r7, #10]
 8005608:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800560c:	7a7b      	ldrb	r3, [r7, #9]
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	431a      	orrs	r2, r3
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	431a      	orrs	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	03ff63ff 	.word	0x03ff63ff

08005638 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b20      	cmp	r3, #32
 800564c:	d138      	bne.n	80056c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005658:	2302      	movs	r3, #2
 800565a:	e032      	b.n	80056c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2224      	movs	r2, #36	; 0x24
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800568a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0201 	orr.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	e000      	b.n	80056c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056c0:	2302      	movs	r3, #2
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d139      	bne.n	8005758 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056ee:	2302      	movs	r3, #2
 80056f0:	e033      	b.n	800575a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2224      	movs	r2, #36	; 0x24
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005720:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	e000      	b.n	800575a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005758:	2302      	movs	r3, #2
  }
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
	...

08005768 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e0bf      	b.n	80058fa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fc ff1c 	bl	80025cc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80057aa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6999      	ldr	r1, [r3, #24]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057c0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6899      	ldr	r1, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b4a      	ldr	r3, [pc, #296]	; (8005904 <HAL_LTDC_Init+0x19c>)
 80057dc:	400b      	ands	r3, r1
 80057de:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	041b      	lsls	r3, r3, #16
 80057e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6899      	ldr	r1, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68d9      	ldr	r1, [r3, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b3e      	ldr	r3, [pc, #248]	; (8005904 <HAL_LTDC_Init+0x19c>)
 800580a:	400b      	ands	r3, r1
 800580c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68d9      	ldr	r1, [r3, #12]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1a      	ldr	r2, [r3, #32]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6919      	ldr	r1, [r3, #16]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	4b33      	ldr	r3, [pc, #204]	; (8005904 <HAL_LTDC_Init+0x19c>)
 8005838:	400b      	ands	r3, r1
 800583a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	041b      	lsls	r3, r3, #16
 8005842:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6919      	ldr	r1, [r3, #16]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6959      	ldr	r1, [r3, #20]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4b27      	ldr	r3, [pc, #156]	; (8005904 <HAL_LTDC_Init+0x19c>)
 8005866:	400b      	ands	r3, r1
 8005868:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	041b      	lsls	r3, r3, #16
 8005870:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6959      	ldr	r1, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	431a      	orrs	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005898:	041b      	lsls	r3, r3, #16
 800589a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80058aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0206 	orr.w	r2, r2, #6
 80058d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	f000f800 	.word	0xf000f800

08005908 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0304 	and.w	r3, r3, #4
 8005926:	2b00      	cmp	r3, #0
 8005928:	d023      	beq.n	8005972 <HAL_LTDC_IRQHandler+0x6a>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d01e      	beq.n	8005972 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0204 	bic.w	r2, r2, #4
 8005942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2204      	movs	r2, #4
 800594a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005952:	f043 0201 	orr.w	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2204      	movs	r2, #4
 8005960:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f86f 	bl	8005a50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d023      	beq.n	80059c4 <HAL_LTDC_IRQHandler+0xbc>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d01e      	beq.n	80059c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0202 	bic.w	r2, r2, #2
 8005994:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2202      	movs	r2, #2
 800599c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059a4:	f043 0202 	orr.w	r2, r3, #2
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2204      	movs	r2, #4
 80059b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f846 	bl	8005a50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01b      	beq.n	8005a06 <HAL_LTDC_IRQHandler+0xfe>
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d016      	beq.n	8005a06 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0201 	bic.w	r2, r2, #1
 80059e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2201      	movs	r2, #1
 80059ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f82f 	bl	8005a64 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01b      	beq.n	8005a48 <HAL_LTDC_IRQHandler+0x140>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d016      	beq.n	8005a48 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0208 	bic.w	r2, r2, #8
 8005a28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2208      	movs	r2, #8
 8005a30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f818 	bl	8005a78 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005a48:	bf00      	nop
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a8c:	b5b0      	push	{r4, r5, r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_LTDC_ConfigLayer+0x1a>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e02c      	b.n	8005b00 <HAL_LTDC_ConfigLayer+0x74>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2134      	movs	r1, #52	; 0x34
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4614      	mov	r4, r2
 8005aca:	461d      	mov	r5, r3
 8005acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f81f 	bl	8005b24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2201      	movs	r2, #1
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bdb0      	pop	{r4, r5, r7, pc}

08005b08 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005b16:	b2db      	uxtb	r3, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b089      	sub	sp, #36	; 0x24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	0c1b      	lsrs	r3, r3, #16
 8005b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b40:	4413      	add	r3, r2
 8005b42:	041b      	lsls	r3, r3, #16
 8005b44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	01db      	lsls	r3, r3, #7
 8005b50:	4413      	add	r3, r2
 8005b52:	3384      	adds	r3, #132	; 0x84
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	01d2      	lsls	r2, r2, #7
 8005b60:	440a      	add	r2, r1
 8005b62:	3284      	adds	r2, #132	; 0x84
 8005b64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005b68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b7a:	4413      	add	r3, r2
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4619      	mov	r1, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	01db      	lsls	r3, r3, #7
 8005b88:	440b      	add	r3, r1
 8005b8a:	3384      	adds	r3, #132	; 0x84
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ba2:	4413      	add	r3, r2
 8005ba4:	041b      	lsls	r3, r3, #16
 8005ba6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	01db      	lsls	r3, r3, #7
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3384      	adds	r3, #132	; 0x84
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	01d2      	lsls	r2, r2, #7
 8005bc2:	440a      	add	r2, r1
 8005bc4:	3284      	adds	r2, #132	; 0x84
 8005bc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005bca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bda:	4413      	add	r3, r2
 8005bdc:	1c5a      	adds	r2, r3, #1
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4619      	mov	r1, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	01db      	lsls	r3, r3, #7
 8005be8:	440b      	add	r3, r1
 8005bea:	3384      	adds	r3, #132	; 0x84
 8005bec:	4619      	mov	r1, r3
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	01db      	lsls	r3, r3, #7
 8005bfe:	4413      	add	r3, r2
 8005c00:	3384      	adds	r3, #132	; 0x84
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	6812      	ldr	r2, [r2, #0]
 8005c08:	4611      	mov	r1, r2
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	01d2      	lsls	r2, r2, #7
 8005c0e:	440a      	add	r2, r1
 8005c10:	3284      	adds	r2, #132	; 0x84
 8005c12:	f023 0307 	bic.w	r3, r3, #7
 8005c16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	01db      	lsls	r3, r3, #7
 8005c22:	4413      	add	r3, r2
 8005c24:	3384      	adds	r3, #132	; 0x84
 8005c26:	461a      	mov	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c34:	021b      	lsls	r3, r3, #8
 8005c36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005c3e:	041b      	lsls	r3, r3, #16
 8005c40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	061b      	lsls	r3, r3, #24
 8005c48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	01db      	lsls	r3, r3, #7
 8005c54:	4413      	add	r3, r2
 8005c56:	3384      	adds	r3, #132	; 0x84
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	01db      	lsls	r3, r3, #7
 8005c64:	4413      	add	r3, r2
 8005c66:	3384      	adds	r3, #132	; 0x84
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c74:	461a      	mov	r2, r3
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4619      	mov	r1, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	01db      	lsls	r3, r3, #7
 8005c88:	440b      	add	r3, r1
 8005c8a:	3384      	adds	r3, #132	; 0x84
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	01db      	lsls	r3, r3, #7
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3384      	adds	r3, #132	; 0x84
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	4611      	mov	r1, r2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	01d2      	lsls	r2, r2, #7
 8005cae:	440a      	add	r2, r1
 8005cb0:	3284      	adds	r2, #132	; 0x84
 8005cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005cb6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	01db      	lsls	r3, r3, #7
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3384      	adds	r3, #132	; 0x84
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	01db      	lsls	r3, r3, #7
 8005cd8:	4413      	add	r3, r2
 8005cda:	3384      	adds	r3, #132	; 0x84
 8005cdc:	69da      	ldr	r2, [r3, #28]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	01db      	lsls	r3, r3, #7
 8005ce8:	440b      	add	r3, r1
 8005cea:	3384      	adds	r3, #132	; 0x84
 8005cec:	4619      	mov	r1, r3
 8005cee:	4b58      	ldr	r3, [pc, #352]	; (8005e50 <LTDC_SetConfig+0x32c>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	68f9      	ldr	r1, [r7, #12]
 8005cfe:	6809      	ldr	r1, [r1, #0]
 8005d00:	4608      	mov	r0, r1
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	01c9      	lsls	r1, r1, #7
 8005d06:	4401      	add	r1, r0
 8005d08:	3184      	adds	r1, #132	; 0x84
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	01db      	lsls	r3, r3, #7
 8005d18:	4413      	add	r3, r2
 8005d1a:	3384      	adds	r3, #132	; 0x84
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	01db      	lsls	r3, r3, #7
 8005d28:	4413      	add	r3, r2
 8005d2a:	3384      	adds	r3, #132	; 0x84
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	01db      	lsls	r3, r3, #7
 8005d3c:	4413      	add	r3, r2
 8005d3e:	3384      	adds	r3, #132	; 0x84
 8005d40:	461a      	mov	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005d50:	2304      	movs	r3, #4
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	e01b      	b.n	8005d8e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d102      	bne.n	8005d64 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	61fb      	str	r3, [r7, #28]
 8005d62:	e014      	b.n	8005d8e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d00b      	beq.n	8005d84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d007      	beq.n	8005d84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d003      	beq.n	8005d84 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005d80:	2b07      	cmp	r3, #7
 8005d82:	d102      	bne.n	8005d8a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005d84:	2302      	movs	r3, #2
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	e001      	b.n	8005d8e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	01db      	lsls	r3, r3, #7
 8005d98:	4413      	add	r3, r2
 8005d9a:	3384      	adds	r3, #132	; 0x84
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	4611      	mov	r1, r2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	01d2      	lsls	r2, r2, #7
 8005da8:	440a      	add	r2, r1
 8005daa:	3284      	adds	r2, #132	; 0x84
 8005dac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005db0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	fb02 f303 	mul.w	r3, r2, r3
 8005dbc:	041a      	lsls	r2, r3, #16
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6859      	ldr	r1, [r3, #4]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	1acb      	subs	r3, r1, r3
 8005dc8:	69f9      	ldr	r1, [r7, #28]
 8005dca:	fb01 f303 	mul.w	r3, r1, r3
 8005dce:	3303      	adds	r3, #3
 8005dd0:	68f9      	ldr	r1, [r7, #12]
 8005dd2:	6809      	ldr	r1, [r1, #0]
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	01c9      	lsls	r1, r1, #7
 8005dda:	4401      	add	r1, r0
 8005ddc:	3184      	adds	r1, #132	; 0x84
 8005dde:	4313      	orrs	r3, r2
 8005de0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	01db      	lsls	r3, r3, #7
 8005dec:	4413      	add	r3, r2
 8005dee:	3384      	adds	r3, #132	; 0x84
 8005df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4619      	mov	r1, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	01db      	lsls	r3, r3, #7
 8005dfc:	440b      	add	r3, r1
 8005dfe:	3384      	adds	r3, #132	; 0x84
 8005e00:	4619      	mov	r1, r3
 8005e02:	4b14      	ldr	r3, [pc, #80]	; (8005e54 <LTDC_SetConfig+0x330>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	01db      	lsls	r3, r3, #7
 8005e12:	4413      	add	r3, r2
 8005e14:	3384      	adds	r3, #132	; 0x84
 8005e16:	461a      	mov	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	01db      	lsls	r3, r3, #7
 8005e28:	4413      	add	r3, r2
 8005e2a:	3384      	adds	r3, #132	; 0x84
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	6812      	ldr	r2, [r2, #0]
 8005e32:	4611      	mov	r1, r2
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	01d2      	lsls	r2, r2, #7
 8005e38:	440a      	add	r2, r1
 8005e3a:	3284      	adds	r2, #132	; 0x84
 8005e3c:	f043 0301 	orr.w	r3, r3, #1
 8005e40:	6013      	str	r3, [r2, #0]
}
 8005e42:	bf00      	nop
 8005e44:	3724      	adds	r7, #36	; 0x24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	fffff8f8 	.word	0xfffff8f8
 8005e54:	fffff800 	.word	0xfffff800

08005e58 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a04      	ldr	r2, [pc, #16]	; (8005e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e66:	6013      	str	r3, [r2, #0]
}
 8005e68:	bf00      	nop
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40007000 	.word	0x40007000

08005e78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e82:	4b23      	ldr	r3, [pc, #140]	; (8005f10 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	4a22      	ldr	r2, [pc, #136]	; (8005f10 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e8e:	4b20      	ldr	r3, [pc, #128]	; (8005f10 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e9a:	4b1e      	ldr	r3, [pc, #120]	; (8005f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ea6:	f7fd fa53 	bl	8003350 <HAL_GetTick>
 8005eaa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005eac:	e009      	b.n	8005ec2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005eae:	f7fd fa4f 	bl	8003350 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ebc:	d901      	bls.n	8005ec2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e022      	b.n	8005f08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ec2:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ece:	d1ee      	bne.n	8005eae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005ed0:	4b10      	ldr	r3, [pc, #64]	; (8005f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a0f      	ldr	r2, [pc, #60]	; (8005f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005edc:	f7fd fa38 	bl	8003350 <HAL_GetTick>
 8005ee0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ee2:	e009      	b.n	8005ef8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ee4:	f7fd fa34 	bl	8003350 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ef2:	d901      	bls.n	8005ef8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e007      	b.n	8005f08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f04:	d1ee      	bne.n	8005ee4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40023800 	.word	0x40023800
 8005f14:	40007000 	.word	0x40007000

08005f18 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af02      	add	r7, sp, #8
 8005f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005f20:	f7fd fa16 	bl	8003350 <HAL_GetTick>
 8005f24:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e067      	b.n	8006000 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7fc fc09 	bl	800275c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005f4a:	f241 3188 	movw	r1, #5000	; 0x1388
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f85e 	bl	8006010 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	021a      	lsls	r2, r3, #8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	2120      	movs	r1, #32
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f856 	bl	800602c <QSPI_WaitFlagStateUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005f84:	7afb      	ldrb	r3, [r7, #11]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d135      	bne.n	8005ff6 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <HAL_QSPI_Init+0xf0>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6852      	ldr	r2, [r2, #4]
 8005f98:	0611      	lsls	r1, r2, #24
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	68d2      	ldr	r2, [r2, #12]
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	69d2      	ldr	r2, [r2, #28]
 8005fa4:	4311      	orrs	r1, r2
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6a12      	ldr	r2, [r2, #32]
 8005faa:	4311      	orrs	r1, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6812      	ldr	r2, [r2, #0]
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	4b14      	ldr	r3, [pc, #80]	; (800600c <HAL_QSPI_Init+0xf4>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6912      	ldr	r2, [r2, #16]
 8005fc2:	0411      	lsls	r1, r2, #16
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6952      	ldr	r2, [r2, #20]
 8005fc8:	4311      	orrs	r1, r2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6992      	ldr	r2, [r2, #24]
 8005fce:	4311      	orrs	r1, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6812      	ldr	r2, [r2, #0]
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	00ffff2f 	.word	0x00ffff2f
 800600c:	ffe0f8fe 	.word	0xffe0f8fe

08006010 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	4613      	mov	r3, r2
 800603a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800603c:	e01a      	b.n	8006074 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d016      	beq.n	8006074 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006046:	f7fd f983 	bl	8003350 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	429a      	cmp	r2, r3
 8006054:	d302      	bcc.n	800605c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2204      	movs	r2, #4
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006068:	f043 0201 	orr.w	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e00e      	b.n	8006092 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	4013      	ands	r3, r2
 800607e:	2b00      	cmp	r3, #0
 8006080:	bf14      	ite	ne
 8006082:	2301      	movne	r3, #1
 8006084:	2300      	moveq	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	429a      	cmp	r2, r3
 800608e:	d1d6      	bne.n	800603e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80060a4:	2300      	movs	r3, #0
 80060a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e291      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 8087 	beq.w	80061ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060c0:	4b96      	ldr	r3, [pc, #600]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 030c 	and.w	r3, r3, #12
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d00c      	beq.n	80060e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060cc:	4b93      	ldr	r3, [pc, #588]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 030c 	and.w	r3, r3, #12
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d112      	bne.n	80060fe <HAL_RCC_OscConfig+0x62>
 80060d8:	4b90      	ldr	r3, [pc, #576]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060e4:	d10b      	bne.n	80060fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e6:	4b8d      	ldr	r3, [pc, #564]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d06c      	beq.n	80061cc <HAL_RCC_OscConfig+0x130>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d168      	bne.n	80061cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e26b      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006106:	d106      	bne.n	8006116 <HAL_RCC_OscConfig+0x7a>
 8006108:	4b84      	ldr	r3, [pc, #528]	; (800631c <HAL_RCC_OscConfig+0x280>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a83      	ldr	r2, [pc, #524]	; (800631c <HAL_RCC_OscConfig+0x280>)
 800610e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	e02e      	b.n	8006174 <HAL_RCC_OscConfig+0xd8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10c      	bne.n	8006138 <HAL_RCC_OscConfig+0x9c>
 800611e:	4b7f      	ldr	r3, [pc, #508]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a7e      	ldr	r2, [pc, #504]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	4b7c      	ldr	r3, [pc, #496]	; (800631c <HAL_RCC_OscConfig+0x280>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a7b      	ldr	r2, [pc, #492]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	e01d      	b.n	8006174 <HAL_RCC_OscConfig+0xd8>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006140:	d10c      	bne.n	800615c <HAL_RCC_OscConfig+0xc0>
 8006142:	4b76      	ldr	r3, [pc, #472]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a75      	ldr	r2, [pc, #468]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	4b73      	ldr	r3, [pc, #460]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a72      	ldr	r2, [pc, #456]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e00b      	b.n	8006174 <HAL_RCC_OscConfig+0xd8>
 800615c:	4b6f      	ldr	r3, [pc, #444]	; (800631c <HAL_RCC_OscConfig+0x280>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a6e      	ldr	r2, [pc, #440]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	4b6c      	ldr	r3, [pc, #432]	; (800631c <HAL_RCC_OscConfig+0x280>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a6b      	ldr	r2, [pc, #428]	; (800631c <HAL_RCC_OscConfig+0x280>)
 800616e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d013      	beq.n	80061a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800617c:	f7fd f8e8 	bl	8003350 <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006184:	f7fd f8e4 	bl	8003350 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b64      	cmp	r3, #100	; 0x64
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e21f      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006196:	4b61      	ldr	r3, [pc, #388]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0f0      	beq.n	8006184 <HAL_RCC_OscConfig+0xe8>
 80061a2:	e014      	b.n	80061ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a4:	f7fd f8d4 	bl	8003350 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061ac:	f7fd f8d0 	bl	8003350 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b64      	cmp	r3, #100	; 0x64
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e20b      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061be:	4b57      	ldr	r3, [pc, #348]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1f0      	bne.n	80061ac <HAL_RCC_OscConfig+0x110>
 80061ca:	e000      	b.n	80061ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d069      	beq.n	80062ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061da:	4b50      	ldr	r3, [pc, #320]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 030c 	and.w	r3, r3, #12
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00b      	beq.n	80061fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061e6:	4b4d      	ldr	r3, [pc, #308]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f003 030c 	and.w	r3, r3, #12
 80061ee:	2b08      	cmp	r3, #8
 80061f0:	d11c      	bne.n	800622c <HAL_RCC_OscConfig+0x190>
 80061f2:	4b4a      	ldr	r3, [pc, #296]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d116      	bne.n	800622c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061fe:	4b47      	ldr	r3, [pc, #284]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <HAL_RCC_OscConfig+0x17a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d001      	beq.n	8006216 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e1df      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006216:	4b41      	ldr	r3, [pc, #260]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	00db      	lsls	r3, r3, #3
 8006224:	493d      	ldr	r1, [pc, #244]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006226:	4313      	orrs	r3, r2
 8006228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800622a:	e040      	b.n	80062ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d023      	beq.n	800627c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006234:	4b39      	ldr	r3, [pc, #228]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a38      	ldr	r2, [pc, #224]	; (800631c <HAL_RCC_OscConfig+0x280>)
 800623a:	f043 0301 	orr.w	r3, r3, #1
 800623e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006240:	f7fd f886 	bl	8003350 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006248:	f7fd f882 	bl	8003350 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e1bd      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800625a:	4b30      	ldr	r3, [pc, #192]	; (800631c <HAL_RCC_OscConfig+0x280>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006266:	4b2d      	ldr	r3, [pc, #180]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4929      	ldr	r1, [pc, #164]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006276:	4313      	orrs	r3, r2
 8006278:	600b      	str	r3, [r1, #0]
 800627a:	e018      	b.n	80062ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800627c:	4b27      	ldr	r3, [pc, #156]	; (800631c <HAL_RCC_OscConfig+0x280>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a26      	ldr	r2, [pc, #152]	; (800631c <HAL_RCC_OscConfig+0x280>)
 8006282:	f023 0301 	bic.w	r3, r3, #1
 8006286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006288:	f7fd f862 	bl	8003350 <HAL_GetTick>
 800628c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800628e:	e008      	b.n	80062a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006290:	f7fd f85e 	bl	8003350 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e199      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062a2:	4b1e      	ldr	r3, [pc, #120]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1f0      	bne.n	8006290 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d038      	beq.n	800632c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d019      	beq.n	80062f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062c2:	4b16      	ldr	r3, [pc, #88]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80062c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c6:	4a15      	ldr	r2, [pc, #84]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80062c8:	f043 0301 	orr.w	r3, r3, #1
 80062cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ce:	f7fd f83f 	bl	8003350 <HAL_GetTick>
 80062d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062d4:	e008      	b.n	80062e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062d6:	f7fd f83b 	bl	8003350 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e176      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062e8:	4b0c      	ldr	r3, [pc, #48]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80062ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f0      	beq.n	80062d6 <HAL_RCC_OscConfig+0x23a>
 80062f4:	e01a      	b.n	800632c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80062f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062fa:	4a08      	ldr	r2, [pc, #32]	; (800631c <HAL_RCC_OscConfig+0x280>)
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006302:	f7fd f825 	bl	8003350 <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006308:	e00a      	b.n	8006320 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800630a:	f7fd f821 	bl	8003350 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d903      	bls.n	8006320 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e15c      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
 800631c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006320:	4b91      	ldr	r3, [pc, #580]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 8006322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1ee      	bne.n	800630a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 80a4 	beq.w	8006482 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800633a:	4b8b      	ldr	r3, [pc, #556]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10d      	bne.n	8006362 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006346:	4b88      	ldr	r3, [pc, #544]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	4a87      	ldr	r2, [pc, #540]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 800634c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006350:	6413      	str	r3, [r2, #64]	; 0x40
 8006352:	4b85      	ldr	r3, [pc, #532]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 8006354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635a:	60bb      	str	r3, [r7, #8]
 800635c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800635e:	2301      	movs	r3, #1
 8006360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006362:	4b82      	ldr	r3, [pc, #520]	; (800656c <HAL_RCC_OscConfig+0x4d0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636a:	2b00      	cmp	r3, #0
 800636c:	d118      	bne.n	80063a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800636e:	4b7f      	ldr	r3, [pc, #508]	; (800656c <HAL_RCC_OscConfig+0x4d0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a7e      	ldr	r2, [pc, #504]	; (800656c <HAL_RCC_OscConfig+0x4d0>)
 8006374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800637a:	f7fc ffe9 	bl	8003350 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006382:	f7fc ffe5 	bl	8003350 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b64      	cmp	r3, #100	; 0x64
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e120      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006394:	4b75      	ldr	r3, [pc, #468]	; (800656c <HAL_RCC_OscConfig+0x4d0>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0f0      	beq.n	8006382 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d106      	bne.n	80063b6 <HAL_RCC_OscConfig+0x31a>
 80063a8:	4b6f      	ldr	r3, [pc, #444]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80063aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ac:	4a6e      	ldr	r2, [pc, #440]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	6713      	str	r3, [r2, #112]	; 0x70
 80063b4:	e02d      	b.n	8006412 <HAL_RCC_OscConfig+0x376>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10c      	bne.n	80063d8 <HAL_RCC_OscConfig+0x33c>
 80063be:	4b6a      	ldr	r3, [pc, #424]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80063c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c2:	4a69      	ldr	r2, [pc, #420]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80063c4:	f023 0301 	bic.w	r3, r3, #1
 80063c8:	6713      	str	r3, [r2, #112]	; 0x70
 80063ca:	4b67      	ldr	r3, [pc, #412]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80063cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ce:	4a66      	ldr	r2, [pc, #408]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80063d0:	f023 0304 	bic.w	r3, r3, #4
 80063d4:	6713      	str	r3, [r2, #112]	; 0x70
 80063d6:	e01c      	b.n	8006412 <HAL_RCC_OscConfig+0x376>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2b05      	cmp	r3, #5
 80063de:	d10c      	bne.n	80063fa <HAL_RCC_OscConfig+0x35e>
 80063e0:	4b61      	ldr	r3, [pc, #388]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80063e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e4:	4a60      	ldr	r2, [pc, #384]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80063e6:	f043 0304 	orr.w	r3, r3, #4
 80063ea:	6713      	str	r3, [r2, #112]	; 0x70
 80063ec:	4b5e      	ldr	r3, [pc, #376]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80063ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f0:	4a5d      	ldr	r2, [pc, #372]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80063f2:	f043 0301 	orr.w	r3, r3, #1
 80063f6:	6713      	str	r3, [r2, #112]	; 0x70
 80063f8:	e00b      	b.n	8006412 <HAL_RCC_OscConfig+0x376>
 80063fa:	4b5b      	ldr	r3, [pc, #364]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	4a5a      	ldr	r2, [pc, #360]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	6713      	str	r3, [r2, #112]	; 0x70
 8006406:	4b58      	ldr	r3, [pc, #352]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 8006408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640a:	4a57      	ldr	r2, [pc, #348]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 800640c:	f023 0304 	bic.w	r3, r3, #4
 8006410:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d015      	beq.n	8006446 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800641a:	f7fc ff99 	bl	8003350 <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006420:	e00a      	b.n	8006438 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006422:	f7fc ff95 	bl	8003350 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006430:	4293      	cmp	r3, r2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e0ce      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006438:	4b4b      	ldr	r3, [pc, #300]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 800643a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0ee      	beq.n	8006422 <HAL_RCC_OscConfig+0x386>
 8006444:	e014      	b.n	8006470 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006446:	f7fc ff83 	bl	8003350 <HAL_GetTick>
 800644a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800644c:	e00a      	b.n	8006464 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800644e:	f7fc ff7f 	bl	8003350 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	f241 3288 	movw	r2, #5000	; 0x1388
 800645c:	4293      	cmp	r3, r2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e0b8      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006464:	4b40      	ldr	r3, [pc, #256]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 8006466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1ee      	bne.n	800644e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d105      	bne.n	8006482 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006476:	4b3c      	ldr	r3, [pc, #240]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	4a3b      	ldr	r2, [pc, #236]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 800647c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006480:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 80a4 	beq.w	80065d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800648c:	4b36      	ldr	r3, [pc, #216]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 030c 	and.w	r3, r3, #12
 8006494:	2b08      	cmp	r3, #8
 8006496:	d06b      	beq.n	8006570 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	2b02      	cmp	r3, #2
 800649e:	d149      	bne.n	8006534 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064a0:	4b31      	ldr	r3, [pc, #196]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a30      	ldr	r2, [pc, #192]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80064a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7fc ff50 	bl	8003350 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064b4:	f7fc ff4c 	bl	8003350 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e087      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064c6:	4b28      	ldr	r3, [pc, #160]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	019b      	lsls	r3, r3, #6
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	085b      	lsrs	r3, r3, #1
 80064ea:	3b01      	subs	r3, #1
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	431a      	orrs	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	061b      	lsls	r3, r3, #24
 80064f6:	4313      	orrs	r3, r2
 80064f8:	4a1b      	ldr	r2, [pc, #108]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 80064fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006500:	4b19      	ldr	r3, [pc, #100]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a18      	ldr	r2, [pc, #96]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 8006506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800650a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800650c:	f7fc ff20 	bl	8003350 <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006514:	f7fc ff1c 	bl	8003350 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e057      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006526:	4b10      	ldr	r3, [pc, #64]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0f0      	beq.n	8006514 <HAL_RCC_OscConfig+0x478>
 8006532:	e04f      	b.n	80065d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a0b      	ldr	r2, [pc, #44]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 800653a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800653e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006540:	f7fc ff06 	bl	8003350 <HAL_GetTick>
 8006544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006546:	e008      	b.n	800655a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006548:	f7fc ff02 	bl	8003350 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	2b02      	cmp	r3, #2
 8006554:	d901      	bls.n	800655a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e03d      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800655a:	4b03      	ldr	r3, [pc, #12]	; (8006568 <HAL_RCC_OscConfig+0x4cc>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f0      	bne.n	8006548 <HAL_RCC_OscConfig+0x4ac>
 8006566:	e035      	b.n	80065d4 <HAL_RCC_OscConfig+0x538>
 8006568:	40023800 	.word	0x40023800
 800656c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006570:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <HAL_RCC_OscConfig+0x544>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d028      	beq.n	80065d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006588:	429a      	cmp	r2, r3
 800658a:	d121      	bne.n	80065d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006596:	429a      	cmp	r2, r3
 8006598:	d11a      	bne.n	80065d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80065a0:	4013      	ands	r3, r2
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80065a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d111      	bne.n	80065d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	3b01      	subs	r3, #1
 80065ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065bc:	429a      	cmp	r2, r3
 80065be:	d107      	bne.n	80065d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d001      	beq.n	80065d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40023800 	.word	0x40023800

080065e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0d0      	b.n	800679e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065fc:	4b6a      	ldr	r3, [pc, #424]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 030f 	and.w	r3, r3, #15
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d910      	bls.n	800662c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800660a:	4b67      	ldr	r3, [pc, #412]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f023 020f 	bic.w	r2, r3, #15
 8006612:	4965      	ldr	r1, [pc, #404]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	4313      	orrs	r3, r2
 8006618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800661a:	4b63      	ldr	r3, [pc, #396]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d001      	beq.n	800662c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e0b8      	b.n	800679e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d020      	beq.n	800667a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006644:	4b59      	ldr	r3, [pc, #356]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	4a58      	ldr	r2, [pc, #352]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 800664a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800664e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b00      	cmp	r3, #0
 800665a:	d005      	beq.n	8006668 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800665c:	4b53      	ldr	r3, [pc, #332]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	4a52      	ldr	r2, [pc, #328]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 8006662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006666:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006668:	4b50      	ldr	r3, [pc, #320]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	494d      	ldr	r1, [pc, #308]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 8006676:	4313      	orrs	r3, r2
 8006678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d040      	beq.n	8006708 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d107      	bne.n	800669e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800668e:	4b47      	ldr	r3, [pc, #284]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d115      	bne.n	80066c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e07f      	b.n	800679e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d107      	bne.n	80066b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a6:	4b41      	ldr	r3, [pc, #260]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e073      	b.n	800679e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066b6:	4b3d      	ldr	r3, [pc, #244]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e06b      	b.n	800679e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066c6:	4b39      	ldr	r3, [pc, #228]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f023 0203 	bic.w	r2, r3, #3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	4936      	ldr	r1, [pc, #216]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066d8:	f7fc fe3a 	bl	8003350 <HAL_GetTick>
 80066dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066de:	e00a      	b.n	80066f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066e0:	f7fc fe36 	bl	8003350 <HAL_GetTick>
 80066e4:	4602      	mov	r2, r0
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d901      	bls.n	80066f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e053      	b.n	800679e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f6:	4b2d      	ldr	r3, [pc, #180]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 020c 	and.w	r2, r3, #12
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	429a      	cmp	r2, r3
 8006706:	d1eb      	bne.n	80066e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006708:	4b27      	ldr	r3, [pc, #156]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d210      	bcs.n	8006738 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f023 020f 	bic.w	r2, r3, #15
 800671e:	4922      	ldr	r1, [pc, #136]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	4313      	orrs	r3, r2
 8006724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006726:	4b20      	ldr	r3, [pc, #128]	; (80067a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d001      	beq.n	8006738 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e032      	b.n	800679e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d008      	beq.n	8006756 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006744:	4b19      	ldr	r3, [pc, #100]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4916      	ldr	r1, [pc, #88]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 8006752:	4313      	orrs	r3, r2
 8006754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0308 	and.w	r3, r3, #8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d009      	beq.n	8006776 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006762:	4b12      	ldr	r3, [pc, #72]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	490e      	ldr	r1, [pc, #56]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 8006772:	4313      	orrs	r3, r2
 8006774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006776:	f000 f821 	bl	80067bc <HAL_RCC_GetSysClockFreq>
 800677a:	4601      	mov	r1, r0
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <HAL_RCC_ClockConfig+0x1c8>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	091b      	lsrs	r3, r3, #4
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	4a0a      	ldr	r2, [pc, #40]	; (80067b0 <HAL_RCC_ClockConfig+0x1cc>)
 8006788:	5cd3      	ldrb	r3, [r2, r3]
 800678a:	fa21 f303 	lsr.w	r3, r1, r3
 800678e:	4a09      	ldr	r2, [pc, #36]	; (80067b4 <HAL_RCC_ClockConfig+0x1d0>)
 8006790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006792:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <HAL_RCC_ClockConfig+0x1d4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f7fc fc84 	bl	80030a4 <HAL_InitTick>

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	40023c00 	.word	0x40023c00
 80067ac:	40023800 	.word	0x40023800
 80067b0:	0800daac 	.word	0x0800daac
 80067b4:	20000004 	.word	0x20000004
 80067b8:	20000008 	.word	0x20000008

080067bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80067c2:	2300      	movs	r3, #0
 80067c4:	607b      	str	r3, [r7, #4]
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	2300      	movs	r3, #0
 80067cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067d2:	4b50      	ldr	r3, [pc, #320]	; (8006914 <HAL_RCC_GetSysClockFreq+0x158>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 030c 	and.w	r3, r3, #12
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d007      	beq.n	80067ee <HAL_RCC_GetSysClockFreq+0x32>
 80067de:	2b08      	cmp	r3, #8
 80067e0:	d008      	beq.n	80067f4 <HAL_RCC_GetSysClockFreq+0x38>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f040 808d 	bne.w	8006902 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067e8:	4b4b      	ldr	r3, [pc, #300]	; (8006918 <HAL_RCC_GetSysClockFreq+0x15c>)
 80067ea:	60bb      	str	r3, [r7, #8]
      break;
 80067ec:	e08c      	b.n	8006908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067ee:	4b4b      	ldr	r3, [pc, #300]	; (800691c <HAL_RCC_GetSysClockFreq+0x160>)
 80067f0:	60bb      	str	r3, [r7, #8]
      break;
 80067f2:	e089      	b.n	8006908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067f4:	4b47      	ldr	r3, [pc, #284]	; (8006914 <HAL_RCC_GetSysClockFreq+0x158>)
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80067fe:	4b45      	ldr	r3, [pc, #276]	; (8006914 <HAL_RCC_GetSysClockFreq+0x158>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d023      	beq.n	8006852 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800680a:	4b42      	ldr	r3, [pc, #264]	; (8006914 <HAL_RCC_GetSysClockFreq+0x158>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	099b      	lsrs	r3, r3, #6
 8006810:	f04f 0400 	mov.w	r4, #0
 8006814:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006818:	f04f 0200 	mov.w	r2, #0
 800681c:	ea03 0501 	and.w	r5, r3, r1
 8006820:	ea04 0602 	and.w	r6, r4, r2
 8006824:	4a3d      	ldr	r2, [pc, #244]	; (800691c <HAL_RCC_GetSysClockFreq+0x160>)
 8006826:	fb02 f106 	mul.w	r1, r2, r6
 800682a:	2200      	movs	r2, #0
 800682c:	fb02 f205 	mul.w	r2, r2, r5
 8006830:	440a      	add	r2, r1
 8006832:	493a      	ldr	r1, [pc, #232]	; (800691c <HAL_RCC_GetSysClockFreq+0x160>)
 8006834:	fba5 0101 	umull	r0, r1, r5, r1
 8006838:	1853      	adds	r3, r2, r1
 800683a:	4619      	mov	r1, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f04f 0400 	mov.w	r4, #0
 8006842:	461a      	mov	r2, r3
 8006844:	4623      	mov	r3, r4
 8006846:	f7f9 fd33 	bl	80002b0 <__aeabi_uldivmod>
 800684a:	4603      	mov	r3, r0
 800684c:	460c      	mov	r4, r1
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	e049      	b.n	80068e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006852:	4b30      	ldr	r3, [pc, #192]	; (8006914 <HAL_RCC_GetSysClockFreq+0x158>)
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	099b      	lsrs	r3, r3, #6
 8006858:	f04f 0400 	mov.w	r4, #0
 800685c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	ea03 0501 	and.w	r5, r3, r1
 8006868:	ea04 0602 	and.w	r6, r4, r2
 800686c:	4629      	mov	r1, r5
 800686e:	4632      	mov	r2, r6
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	f04f 0400 	mov.w	r4, #0
 8006878:	0154      	lsls	r4, r2, #5
 800687a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800687e:	014b      	lsls	r3, r1, #5
 8006880:	4619      	mov	r1, r3
 8006882:	4622      	mov	r2, r4
 8006884:	1b49      	subs	r1, r1, r5
 8006886:	eb62 0206 	sbc.w	r2, r2, r6
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	f04f 0400 	mov.w	r4, #0
 8006892:	0194      	lsls	r4, r2, #6
 8006894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006898:	018b      	lsls	r3, r1, #6
 800689a:	1a5b      	subs	r3, r3, r1
 800689c:	eb64 0402 	sbc.w	r4, r4, r2
 80068a0:	f04f 0100 	mov.w	r1, #0
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	00e2      	lsls	r2, r4, #3
 80068aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80068ae:	00d9      	lsls	r1, r3, #3
 80068b0:	460b      	mov	r3, r1
 80068b2:	4614      	mov	r4, r2
 80068b4:	195b      	adds	r3, r3, r5
 80068b6:	eb44 0406 	adc.w	r4, r4, r6
 80068ba:	f04f 0100 	mov.w	r1, #0
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	02a2      	lsls	r2, r4, #10
 80068c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80068c8:	0299      	lsls	r1, r3, #10
 80068ca:	460b      	mov	r3, r1
 80068cc:	4614      	mov	r4, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	4621      	mov	r1, r4
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f04f 0400 	mov.w	r4, #0
 80068d8:	461a      	mov	r2, r3
 80068da:	4623      	mov	r3, r4
 80068dc:	f7f9 fce8 	bl	80002b0 <__aeabi_uldivmod>
 80068e0:	4603      	mov	r3, r0
 80068e2:	460c      	mov	r4, r1
 80068e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80068e6:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_RCC_GetSysClockFreq+0x158>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	0c1b      	lsrs	r3, r3, #16
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	3301      	adds	r3, #1
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fe:	60bb      	str	r3, [r7, #8]
      break;
 8006900:	e002      	b.n	8006908 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006902:	4b05      	ldr	r3, [pc, #20]	; (8006918 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006904:	60bb      	str	r3, [r7, #8]
      break;
 8006906:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006908:	68bb      	ldr	r3, [r7, #8]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006912:	bf00      	nop
 8006914:	40023800 	.word	0x40023800
 8006918:	00f42400 	.word	0x00f42400
 800691c:	017d7840 	.word	0x017d7840

08006920 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006924:	4b03      	ldr	r3, [pc, #12]	; (8006934 <HAL_RCC_GetHCLKFreq+0x14>)
 8006926:	681b      	ldr	r3, [r3, #0]
}
 8006928:	4618      	mov	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000004 	.word	0x20000004

08006938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800693c:	f7ff fff0 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 8006940:	4601      	mov	r1, r0
 8006942:	4b05      	ldr	r3, [pc, #20]	; (8006958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	0a9b      	lsrs	r3, r3, #10
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	4a03      	ldr	r2, [pc, #12]	; (800695c <HAL_RCC_GetPCLK1Freq+0x24>)
 800694e:	5cd3      	ldrb	r3, [r2, r3]
 8006950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006954:	4618      	mov	r0, r3
 8006956:	bd80      	pop	{r7, pc}
 8006958:	40023800 	.word	0x40023800
 800695c:	0800dabc 	.word	0x0800dabc

08006960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006964:	f7ff ffdc 	bl	8006920 <HAL_RCC_GetHCLKFreq>
 8006968:	4601      	mov	r1, r0
 800696a:	4b05      	ldr	r3, [pc, #20]	; (8006980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	0b5b      	lsrs	r3, r3, #13
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	4a03      	ldr	r2, [pc, #12]	; (8006984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006976:	5cd3      	ldrb	r3, [r2, r3]
 8006978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800697c:	4618      	mov	r0, r3
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40023800 	.word	0x40023800
 8006984:	0800dabc 	.word	0x0800dabc

08006988 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	220f      	movs	r2, #15
 8006996:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006998:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <HAL_RCC_GetClockConfig+0x5c>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 0203 	and.w	r2, r3, #3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80069a4:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <HAL_RCC_GetClockConfig+0x5c>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80069b0:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <HAL_RCC_GetClockConfig+0x5c>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80069bc:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <HAL_RCC_GetClockConfig+0x5c>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	08db      	lsrs	r3, r3, #3
 80069c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069ca:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <HAL_RCC_GetClockConfig+0x60>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 020f 	and.w	r2, r3, #15
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	601a      	str	r2, [r3, #0]
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40023800 	.word	0x40023800
 80069e8:	40023c00 	.word	0x40023c00

080069ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d012      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a14:	4b69      	ldr	r3, [pc, #420]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	4a68      	ldr	r2, [pc, #416]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006a1e:	6093      	str	r3, [r2, #8]
 8006a20:	4b66      	ldr	r3, [pc, #408]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a22:	689a      	ldr	r2, [r3, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a28:	4964      	ldr	r1, [pc, #400]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006a36:	2301      	movs	r3, #1
 8006a38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d017      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a46:	4b5d      	ldr	r3, [pc, #372]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a54:	4959      	ldr	r1, [pc, #356]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a64:	d101      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006a66:	2301      	movs	r3, #1
 8006a68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006a72:	2301      	movs	r3, #1
 8006a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d017      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a82:	4b4e      	ldr	r3, [pc, #312]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	494a      	ldr	r1, [pc, #296]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aa0:	d101      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 808b 	beq.w	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ad0:	4b3a      	ldr	r3, [pc, #232]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	4a39      	ldr	r2, [pc, #228]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ada:	6413      	str	r3, [r2, #64]	; 0x40
 8006adc:	4b37      	ldr	r3, [pc, #220]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae4:	60bb      	str	r3, [r7, #8]
 8006ae6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006ae8:	4b35      	ldr	r3, [pc, #212]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a34      	ldr	r2, [pc, #208]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006af4:	f7fc fc2c 	bl	8003350 <HAL_GetTick>
 8006af8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006afc:	f7fc fc28 	bl	8003350 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b64      	cmp	r3, #100	; 0x64
 8006b08:	d901      	bls.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e355      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b0e:	4b2c      	ldr	r3, [pc, #176]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d0f0      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b1a:	4b28      	ldr	r3, [pc, #160]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d035      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d02e      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b38:	4b20      	ldr	r3, [pc, #128]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b42:	4b1e      	ldr	r3, [pc, #120]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b46:	4a1d      	ldr	r2, [pc, #116]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b4e:	4b1b      	ldr	r3, [pc, #108]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b52:	4a1a      	ldr	r2, [pc, #104]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006b5a:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b60:	4b16      	ldr	r3, [pc, #88]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d114      	bne.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6c:	f7fc fbf0 	bl	8003350 <HAL_GetTick>
 8006b70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b72:	e00a      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b74:	f7fc fbec 	bl	8003350 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d901      	bls.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e317      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0ee      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba2:	d111      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006bb0:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006bb2:	400b      	ands	r3, r1
 8006bb4:	4901      	ldr	r1, [pc, #4]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	608b      	str	r3, [r1, #8]
 8006bba:	e00b      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006bbc:	40023800 	.word	0x40023800
 8006bc0:	40007000 	.word	0x40007000
 8006bc4:	0ffffcff 	.word	0x0ffffcff
 8006bc8:	4bb0      	ldr	r3, [pc, #704]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	4aaf      	ldr	r2, [pc, #700]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006bd2:	6093      	str	r3, [r2, #8]
 8006bd4:	4bad      	ldr	r3, [pc, #692]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006be0:	49aa      	ldr	r1, [pc, #680]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0310 	and.w	r3, r3, #16
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d010      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bf2:	4ba6      	ldr	r3, [pc, #664]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bf8:	4aa4      	ldr	r2, [pc, #656]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006c02:	4ba2      	ldr	r3, [pc, #648]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	499f      	ldr	r1, [pc, #636]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00a      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c20:	4b9a      	ldr	r3, [pc, #616]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c2e:	4997      	ldr	r1, [pc, #604]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c42:	4b92      	ldr	r3, [pc, #584]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c50:	498e      	ldr	r1, [pc, #568]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c64:	4b89      	ldr	r3, [pc, #548]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c72:	4986      	ldr	r1, [pc, #536]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00a      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c86:	4b81      	ldr	r3, [pc, #516]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c94:	497d      	ldr	r1, [pc, #500]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ca8:	4b78      	ldr	r3, [pc, #480]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cae:	f023 0203 	bic.w	r2, r3, #3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	4975      	ldr	r1, [pc, #468]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cca:	4b70      	ldr	r3, [pc, #448]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd0:	f023 020c 	bic.w	r2, r3, #12
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd8:	496c      	ldr	r1, [pc, #432]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cec:	4b67      	ldr	r3, [pc, #412]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cfa:	4964      	ldr	r1, [pc, #400]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d0e:	4b5f      	ldr	r3, [pc, #380]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1c:	495b      	ldr	r1, [pc, #364]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d30:	4b56      	ldr	r3, [pc, #344]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3e:	4953      	ldr	r1, [pc, #332]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006d52:	4b4e      	ldr	r3, [pc, #312]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d60:	494a      	ldr	r1, [pc, #296]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006d74:	4b45      	ldr	r3, [pc, #276]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d82:	4942      	ldr	r1, [pc, #264]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006d96:	4b3d      	ldr	r3, [pc, #244]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da4:	4939      	ldr	r1, [pc, #228]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006db8:	4b34      	ldr	r3, [pc, #208]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc6:	4931      	ldr	r1, [pc, #196]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d011      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006dda:	4b2c      	ldr	r3, [pc, #176]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006de8:	4928      	ldr	r1, [pc, #160]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006df8:	d101      	bne.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0308 	and.w	r3, r3, #8
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d001      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e1a:	4b1c      	ldr	r3, [pc, #112]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e28:	4918      	ldr	r1, [pc, #96]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e3c:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e4c:	490f      	ldr	r1, [pc, #60]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d005      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e62:	f040 80d8 	bne.w	8007016 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a08      	ldr	r2, [pc, #32]	; (8006e8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006e6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e72:	f7fc fa6d 	bl	8003350 <HAL_GetTick>
 8006e76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e78:	e00a      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e7a:	f7fc fa69 	bl	8003350 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b64      	cmp	r3, #100	; 0x64
 8006e86:	d903      	bls.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e196      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006e8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e90:	4b6c      	ldr	r3, [pc, #432]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1ee      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d021      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d11d      	bne.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006eb0:	4b64      	ldr	r3, [pc, #400]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eb6:	0c1b      	lsrs	r3, r3, #16
 8006eb8:	f003 0303 	and.w	r3, r3, #3
 8006ebc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ebe:	4b61      	ldr	r3, [pc, #388]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec4:	0e1b      	lsrs	r3, r3, #24
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	019a      	lsls	r2, r3, #6
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	041b      	lsls	r3, r3, #16
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	061b      	lsls	r3, r3, #24
 8006edc:	431a      	orrs	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	071b      	lsls	r3, r3, #28
 8006ee4:	4957      	ldr	r1, [pc, #348]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d004      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f00:	d00a      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d02e      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f16:	d129      	bne.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f18:	4b4a      	ldr	r3, [pc, #296]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f1e:	0c1b      	lsrs	r3, r3, #16
 8006f20:	f003 0303 	and.w	r3, r3, #3
 8006f24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f26:	4b47      	ldr	r3, [pc, #284]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2c:	0f1b      	lsrs	r3, r3, #28
 8006f2e:	f003 0307 	and.w	r3, r3, #7
 8006f32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	019a      	lsls	r2, r3, #6
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	041b      	lsls	r3, r3, #16
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	061b      	lsls	r3, r3, #24
 8006f46:	431a      	orrs	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	071b      	lsls	r3, r3, #28
 8006f4c:	493d      	ldr	r1, [pc, #244]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f54:	4b3b      	ldr	r3, [pc, #236]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f5a:	f023 021f 	bic.w	r2, r3, #31
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	3b01      	subs	r3, #1
 8006f64:	4937      	ldr	r1, [pc, #220]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d01d      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f78:	4b32      	ldr	r3, [pc, #200]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f7e:	0e1b      	lsrs	r3, r3, #24
 8006f80:	f003 030f 	and.w	r3, r3, #15
 8006f84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f86:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8c:	0f1b      	lsrs	r3, r3, #28
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	019a      	lsls	r2, r3, #6
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	041b      	lsls	r3, r3, #16
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	061b      	lsls	r3, r3, #24
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	071b      	lsls	r3, r3, #28
 8006fac:	4925      	ldr	r1, [pc, #148]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d011      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	019a      	lsls	r2, r3, #6
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	041b      	lsls	r3, r3, #16
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	061b      	lsls	r3, r3, #24
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	071b      	lsls	r3, r3, #28
 8006fdc:	4919      	ldr	r1, [pc, #100]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fe4:	4b17      	ldr	r3, [pc, #92]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a16      	ldr	r2, [pc, #88]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff0:	f7fc f9ae 	bl	8003350 <HAL_GetTick>
 8006ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ff6:	e008      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ff8:	f7fc f9aa 	bl	8003350 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b64      	cmp	r3, #100	; 0x64
 8007004:	d901      	bls.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e0d7      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800700a:	4b0e      	ldr	r3, [pc, #56]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0f0      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	2b01      	cmp	r3, #1
 800701a:	f040 80cd 	bne.w	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800701e:	4b09      	ldr	r3, [pc, #36]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a08      	ldr	r2, [pc, #32]	; (8007044 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800702a:	f7fc f991 	bl	8003350 <HAL_GetTick>
 800702e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007030:	e00a      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007032:	f7fc f98d 	bl	8003350 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b64      	cmp	r3, #100	; 0x64
 800703e:	d903      	bls.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e0ba      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007044:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007048:	4b5e      	ldr	r3, [pc, #376]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007054:	d0ed      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d009      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007072:	2b00      	cmp	r3, #0
 8007074:	d02e      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707a:	2b00      	cmp	r3, #0
 800707c:	d12a      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800707e:	4b51      	ldr	r3, [pc, #324]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007084:	0c1b      	lsrs	r3, r3, #16
 8007086:	f003 0303 	and.w	r3, r3, #3
 800708a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800708c:	4b4d      	ldr	r3, [pc, #308]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800708e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007092:	0f1b      	lsrs	r3, r3, #28
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	019a      	lsls	r2, r3, #6
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	041b      	lsls	r3, r3, #16
 80070a4:	431a      	orrs	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	061b      	lsls	r3, r3, #24
 80070ac:	431a      	orrs	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	071b      	lsls	r3, r3, #28
 80070b2:	4944      	ldr	r1, [pc, #272]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80070ba:	4b42      	ldr	r3, [pc, #264]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80070bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c8:	3b01      	subs	r3, #1
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	493d      	ldr	r1, [pc, #244]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d022      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070e8:	d11d      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070ea:	4b36      	ldr	r3, [pc, #216]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f0:	0e1b      	lsrs	r3, r3, #24
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070f8:	4b32      	ldr	r3, [pc, #200]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80070fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070fe:	0f1b      	lsrs	r3, r3, #28
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	019a      	lsls	r2, r3, #6
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	431a      	orrs	r2, r3
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	061b      	lsls	r3, r3, #24
 8007118:	431a      	orrs	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	071b      	lsls	r3, r3, #28
 800711e:	4929      	ldr	r1, [pc, #164]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007120:	4313      	orrs	r3, r2
 8007122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d028      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007138:	0e1b      	lsrs	r3, r3, #24
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007140:	4b20      	ldr	r3, [pc, #128]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	0c1b      	lsrs	r3, r3, #16
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	019a      	lsls	r2, r3, #6
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	431a      	orrs	r2, r3
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	061b      	lsls	r3, r3, #24
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	071b      	lsls	r3, r3, #28
 8007166:	4917      	ldr	r1, [pc, #92]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007168:	4313      	orrs	r3, r2
 800716a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800716e:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007174:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717c:	4911      	ldr	r1, [pc, #68]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800717e:	4313      	orrs	r3, r2
 8007180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007184:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a0e      	ldr	r2, [pc, #56]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800718a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800718e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007190:	f7fc f8de 	bl	8003350 <HAL_GetTick>
 8007194:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007196:	e008      	b.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007198:	f7fc f8da 	bl	8003350 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b64      	cmp	r3, #100	; 0x64
 80071a4:	d901      	bls.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e007      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071aa:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b6:	d1ef      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3720      	adds	r7, #32
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40023800 	.word	0x40023800

080071c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071e6:	f040 8086 	bne.w	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80071ea:	4b8d      	ldr	r3, [pc, #564]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80071ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80071f8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007200:	d03e      	beq.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007206:	d073      	beq.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007208:	2b00      	cmp	r3, #0
 800720a:	d000      	beq.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800720c:	e074      	b.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800720e:	4b84      	ldr	r3, [pc, #528]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d108      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800721a:	4b81      	ldr	r3, [pc, #516]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007222:	4a80      	ldr	r2, [pc, #512]	; (8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007224:	fbb2 f3f3 	udiv	r3, r2, r3
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	e007      	b.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800722c:	4b7c      	ldr	r3, [pc, #496]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007234:	4a7c      	ldr	r2, [pc, #496]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007236:	fbb2 f3f3 	udiv	r3, r2, r3
 800723a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800723c:	4b78      	ldr	r3, [pc, #480]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	0e1b      	lsrs	r3, r3, #24
 8007244:	f003 030f 	and.w	r3, r3, #15
 8007248:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800724a:	4b75      	ldr	r3, [pc, #468]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800724c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007250:	099b      	lsrs	r3, r3, #6
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	fb02 f203 	mul.w	r2, r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007262:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007264:	4b6e      	ldr	r3, [pc, #440]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	3301      	adds	r3, #1
 8007272:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	fbb2 f3f3 	udiv	r3, r2, r3
 800727c:	617b      	str	r3, [r7, #20]
        break;
 800727e:	e03b      	b.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007280:	4b67      	ldr	r3, [pc, #412]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d108      	bne.n	800729e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800728c:	4b64      	ldr	r3, [pc, #400]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007294:	4a63      	ldr	r2, [pc, #396]	; (8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007296:	fbb2 f3f3 	udiv	r3, r2, r3
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	e007      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800729e:	4b60      	ldr	r3, [pc, #384]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072a6:	4a60      	ldr	r2, [pc, #384]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80072a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ac:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80072ae:	4b5c      	ldr	r3, [pc, #368]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80072b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072b4:	0e1b      	lsrs	r3, r3, #24
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80072bc:	4b58      	ldr	r3, [pc, #352]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80072be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072c2:	099b      	lsrs	r3, r3, #6
 80072c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c8:	693a      	ldr	r2, [r7, #16]
 80072ca:	fb02 f203 	mul.w	r2, r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80072d6:	4b52      	ldr	r3, [pc, #328]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80072d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	3301      	adds	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ec:	617b      	str	r3, [r7, #20]
        break;
 80072ee:	e003      	b.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 80072f0:	4b4e      	ldr	r3, [pc, #312]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80072f2:	617b      	str	r3, [r7, #20]
        break;
 80072f4:	e000      	b.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 80072f6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fe:	f040 8086 	bne.w	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007302:	4b47      	ldr	r3, [pc, #284]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007308:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007310:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007318:	d03e      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800731a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800731e:	d073      	beq.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8007320:	2b00      	cmp	r3, #0
 8007322:	d000      	beq.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007324:	e074      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007326:	4b3e      	ldr	r3, [pc, #248]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d108      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007332:	4b3b      	ldr	r3, [pc, #236]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800733a:	4a3a      	ldr	r2, [pc, #232]	; (8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800733c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	e007      	b.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007344:	4b36      	ldr	r3, [pc, #216]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800734c:	4a36      	ldr	r2, [pc, #216]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800734e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007352:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007354:	4b32      	ldr	r3, [pc, #200]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735a:	0e1b      	lsrs	r3, r3, #24
 800735c:	f003 030f 	and.w	r3, r3, #15
 8007360:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007362:	4b2f      	ldr	r3, [pc, #188]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007368:	099b      	lsrs	r3, r3, #6
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	fb02 f203 	mul.w	r2, r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	fbb2 f3f3 	udiv	r3, r2, r3
 800737a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800737c:	4b28      	ldr	r3, [pc, #160]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800737e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	f003 031f 	and.w	r3, r3, #31
 8007388:	3301      	adds	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	fbb2 f3f3 	udiv	r3, r2, r3
 8007394:	617b      	str	r3, [r7, #20]
        break;
 8007396:	e03b      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007398:	4b21      	ldr	r3, [pc, #132]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d108      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073a4:	4b1e      	ldr	r3, [pc, #120]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073ac:	4a1d      	ldr	r2, [pc, #116]	; (8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80073ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	e007      	b.n	80073c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80073b6:	4b1a      	ldr	r3, [pc, #104]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073be:	4a1a      	ldr	r2, [pc, #104]	; (8007428 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80073c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80073c6:	4b16      	ldr	r3, [pc, #88]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073cc:	0e1b      	lsrs	r3, r3, #24
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80073d4:	4b12      	ldr	r3, [pc, #72]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073da:	099b      	lsrs	r3, r3, #6
 80073dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	fb02 f203 	mul.w	r2, r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ec:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80073ee:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80073f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f4:	f003 031f 	and.w	r3, r3, #31
 80073f8:	3301      	adds	r3, #1
 80073fa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	fbb2 f3f3 	udiv	r3, r2, r3
 8007404:	617b      	str	r3, [r7, #20]
        break;
 8007406:	e003      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007408:	4b08      	ldr	r3, [pc, #32]	; (800742c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800740a:	617b      	str	r3, [r7, #20]
        break;
 800740c:	e000      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800740e:	bf00      	nop

  return frequency;
 8007410:	697b      	ldr	r3, [r7, #20]
}
 8007412:	4618      	mov	r0, r3
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	40023800 	.word	0x40023800
 8007424:	00f42400 	.word	0x00f42400
 8007428:	017d7840 	.word	0x017d7840
 800742c:	00bb8000 	.word	0x00bb8000

08007430 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e06b      	b.n	800751a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7f5b      	ldrb	r3, [r3, #29]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d105      	bne.n	8007458 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fb fa12 	bl	800287c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	22ca      	movs	r2, #202	; 0xca
 8007464:	625a      	str	r2, [r3, #36]	; 0x24
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2253      	movs	r2, #83	; 0x53
 800746c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fb00 	bl	8007a74 <RTC_EnterInitMode>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d008      	beq.n	800748c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	22ff      	movs	r2, #255	; 0xff
 8007480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2204      	movs	r2, #4
 8007486:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e046      	b.n	800751a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6899      	ldr	r1, [r3, #8]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	4b23      	ldr	r3, [pc, #140]	; (8007524 <HAL_RTC_Init+0xf4>)
 8007498:	400b      	ands	r3, r1
 800749a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6899      	ldr	r1, [r3, #8]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	68d2      	ldr	r2, [r2, #12]
 80074c2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6919      	ldr	r1, [r3, #16]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	041a      	lsls	r2, r3, #16
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074e6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0208 	bic.w	r2, r2, #8
 80074f6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699a      	ldr	r2, [r3, #24]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	22ff      	movs	r2, #255	; 0xff
 8007510:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007518:	2300      	movs	r3, #0
  }
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	ff8fffbf 	.word	0xff8fffbf

08007528 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007528:	b590      	push	{r4, r7, lr}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	7f1b      	ldrb	r3, [r3, #28]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_RTC_SetTime+0x1c>
 8007540:	2302      	movs	r3, #2
 8007542:	e0a8      	b.n	8007696 <HAL_RTC_SetTime+0x16e>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2202      	movs	r2, #2
 800754e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d126      	bne.n	80075a4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d102      	bne.n	800756a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2200      	movs	r2, #0
 8007568:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f000 faac 	bl	8007acc <RTC_ByteToBcd2>
 8007574:	4603      	mov	r3, r0
 8007576:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	785b      	ldrb	r3, [r3, #1]
 800757c:	4618      	mov	r0, r3
 800757e:	f000 faa5 	bl	8007acc <RTC_ByteToBcd2>
 8007582:	4603      	mov	r3, r0
 8007584:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007586:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	789b      	ldrb	r3, [r3, #2]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fa9d 	bl	8007acc <RTC_ByteToBcd2>
 8007592:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007594:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	7b1b      	ldrb	r3, [r3, #12]
 800759c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	e018      	b.n	80075d6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2200      	movs	r2, #0
 80075b6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	785b      	ldrb	r3, [r3, #1]
 80075c2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80075c4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80075ca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	7b1b      	ldrb	r3, [r3, #12]
 80075d0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	22ca      	movs	r2, #202	; 0xca
 80075dc:	625a      	str	r2, [r3, #36]	; 0x24
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2253      	movs	r2, #83	; 0x53
 80075e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 fa44 	bl	8007a74 <RTC_EnterInitMode>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00b      	beq.n	800760a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	22ff      	movs	r2, #255	; 0xff
 80075f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2204      	movs	r2, #4
 80075fe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e045      	b.n	8007696 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	6979      	ldr	r1, [r7, #20]
 8007610:	4b23      	ldr	r3, [pc, #140]	; (80076a0 <HAL_RTC_SetTime+0x178>)
 8007612:	400b      	ands	r3, r1
 8007614:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007624:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6899      	ldr	r1, [r3, #8]
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	431a      	orrs	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	430a      	orrs	r2, r1
 800763c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800764c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d111      	bne.n	8007680 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 f9e1 	bl	8007a24 <HAL_RTC_WaitForSynchro>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00b      	beq.n	8007680 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	22ff      	movs	r2, #255	; 0xff
 800766e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2204      	movs	r2, #4
 8007674:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e00a      	b.n	8007696 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	22ff      	movs	r2, #255	; 0xff
 8007686:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2201      	movs	r2, #1
 800768c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007694:	2300      	movs	r3, #0
  }
}
 8007696:	4618      	mov	r0, r3
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	bd90      	pop	{r4, r7, pc}
 800769e:	bf00      	nop
 80076a0:	007f7f7f 	.word	0x007f7f7f

080076a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80076a4:	b590      	push	{r4, r7, lr}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	7f1b      	ldrb	r3, [r3, #28]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_RTC_SetDate+0x1c>
 80076bc:	2302      	movs	r3, #2
 80076be:	e092      	b.n	80077e6 <HAL_RTC_SetDate+0x142>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2202      	movs	r2, #2
 80076ca:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10e      	bne.n	80076f0 <HAL_RTC_SetDate+0x4c>
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	f003 0310 	and.w	r3, r3, #16
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d008      	beq.n	80076f0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	785b      	ldrb	r3, [r3, #1]
 80076e2:	f023 0310 	bic.w	r3, r3, #16
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	330a      	adds	r3, #10
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d11c      	bne.n	8007730 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	78db      	ldrb	r3, [r3, #3]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f9e6 	bl	8007acc <RTC_ByteToBcd2>
 8007700:	4603      	mov	r3, r0
 8007702:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	4618      	mov	r0, r3
 800770a:	f000 f9df 	bl	8007acc <RTC_ByteToBcd2>
 800770e:	4603      	mov	r3, r0
 8007710:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007712:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	789b      	ldrb	r3, [r3, #2]
 8007718:	4618      	mov	r0, r3
 800771a:	f000 f9d7 	bl	8007acc <RTC_ByteToBcd2>
 800771e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007720:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800772a:	4313      	orrs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]
 800772e:	e00e      	b.n	800774e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	78db      	ldrb	r3, [r3, #3]
 8007734:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800773c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007742:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	22ca      	movs	r2, #202	; 0xca
 8007754:	625a      	str	r2, [r3, #36]	; 0x24
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2253      	movs	r2, #83	; 0x53
 800775c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 f988 	bl	8007a74 <RTC_EnterInitMode>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00b      	beq.n	8007782 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	22ff      	movs	r2, #255	; 0xff
 8007770:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2204      	movs	r2, #4
 8007776:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e031      	b.n	80077e6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	6979      	ldr	r1, [r7, #20]
 8007788:	4b19      	ldr	r3, [pc, #100]	; (80077f0 <HAL_RTC_SetDate+0x14c>)
 800778a:	400b      	ands	r3, r1
 800778c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800779c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d111      	bne.n	80077d0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f939 	bl	8007a24 <HAL_RTC_WaitForSynchro>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	22ff      	movs	r2, #255	; 0xff
 80077be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2204      	movs	r2, #4
 80077c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e00a      	b.n	80077e6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	22ff      	movs	r2, #255	; 0xff
 80077d6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80077e4:	2300      	movs	r3, #0
  }
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd90      	pop	{r4, r7, pc}
 80077ee:	bf00      	nop
 80077f0:	00ffff3f 	.word	0x00ffff3f

080077f4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80077f4:	b590      	push	{r4, r7, lr}
 80077f6:	b089      	sub	sp, #36	; 0x24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007804:	2300      	movs	r3, #0
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	2300      	movs	r3, #0
 800780a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	7f1b      	ldrb	r3, [r3, #28]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_RTC_SetAlarm+0x24>
 8007814:	2302      	movs	r3, #2
 8007816:	e101      	b.n	8007a1c <HAL_RTC_SetAlarm+0x228>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2202      	movs	r2, #2
 8007822:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d137      	bne.n	800789a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007834:	2b00      	cmp	r3, #0
 8007836:	d102      	bne.n	800783e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2200      	movs	r2, #0
 800783c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 f942 	bl	8007acc <RTC_ByteToBcd2>
 8007848:	4603      	mov	r3, r0
 800784a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	4618      	mov	r0, r3
 8007852:	f000 f93b 	bl	8007acc <RTC_ByteToBcd2>
 8007856:	4603      	mov	r3, r0
 8007858:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800785a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	789b      	ldrb	r3, [r3, #2]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 f933 	bl	8007acc <RTC_ByteToBcd2>
 8007866:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007868:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	7b1b      	ldrb	r3, [r3, #12]
 8007870:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007872:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800787c:	4618      	mov	r0, r3
 800787e:	f000 f925 	bl	8007acc <RTC_ByteToBcd2>
 8007882:	4603      	mov	r3, r0
 8007884:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007886:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800788e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007894:	4313      	orrs	r3, r2
 8007896:	61fb      	str	r3, [r7, #28]
 8007898:	e023      	b.n	80078e2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d102      	bne.n	80078ae <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	2200      	movs	r2, #0
 80078ac:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80078ba:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80078c0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	7b1b      	ldrb	r3, [r3, #12]
 80078c6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80078c8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078d0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80078d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80078d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80078de:	4313      	orrs	r3, r2
 80078e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	22ca      	movs	r2, #202	; 0xca
 80078f4:	625a      	str	r2, [r3, #36]	; 0x24
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2253      	movs	r2, #83	; 0x53
 80078fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007906:	d13f      	bne.n	8007988 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689a      	ldr	r2, [r3, #8]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007916:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007926:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007928:	f7fb fd12 	bl	8003350 <HAL_GetTick>
 800792c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800792e:	e013      	b.n	8007958 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007930:	f7fb fd0e 	bl	8003350 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800793e:	d90b      	bls.n	8007958 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	22ff      	movs	r2, #255	; 0xff
 8007946:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2203      	movs	r2, #3
 800794c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e061      	b.n	8007a1c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0e4      	beq.n	8007930 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007984:	609a      	str	r2, [r3, #8]
 8007986:	e03e      	b.n	8007a06 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689a      	ldr	r2, [r3, #8]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007996:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689a      	ldr	r2, [r3, #8]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079a6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079a8:	f7fb fcd2 	bl	8003350 <HAL_GetTick>
 80079ac:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80079ae:	e013      	b.n	80079d8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80079b0:	f7fb fcce 	bl	8003350 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079be:	d90b      	bls.n	80079d8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	22ff      	movs	r2, #255	; 0xff
 80079c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2203      	movs	r2, #3
 80079cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e021      	b.n	8007a1c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0e4      	beq.n	80079b0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69fa      	ldr	r2, [r7, #28]
 80079ec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a04:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	22ff      	movs	r2, #255	; 0xff
 8007a0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2201      	movs	r2, #1
 8007a12:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3724      	adds	r7, #36	; 0x24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd90      	pop	{r4, r7, pc}

08007a24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a3e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a40:	f7fb fc86 	bl	8003350 <HAL_GetTick>
 8007a44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007a46:	e009      	b.n	8007a5c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007a48:	f7fb fc82 	bl	8003350 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a56:	d901      	bls.n	8007a5c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e007      	b.n	8007a6c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f003 0320 	and.w	r3, r3, #32
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0ee      	beq.n	8007a48 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d119      	bne.n	8007ac2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f04f 32ff 	mov.w	r2, #4294967295
 8007a96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a98:	f7fb fc5a 	bl	8003350 <HAL_GetTick>
 8007a9c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007a9e:	e009      	b.n	8007ab4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007aa0:	f7fb fc56 	bl	8003350 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aae:	d901      	bls.n	8007ab4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e007      	b.n	8007ac4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0ee      	beq.n	8007aa0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007ada:	e005      	b.n	8007ae8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	3b0a      	subs	r3, #10
 8007ae6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	2b09      	cmp	r3, #9
 8007aec:	d8f6      	bhi.n	8007adc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	b2db      	uxtb	r3, r3
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	7f1b      	ldrb	r3, [r3, #28]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e03e      	b.n	8007ba2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2201      	movs	r2, #1
 8007b28:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689a      	ldr	r2, [r3, #8]
 8007b36:	4b1e      	ldr	r3, [pc, #120]	; (8007bb0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	22ca      	movs	r2, #202	; 0xca
 8007b4a:	625a      	str	r2, [r3, #36]	; 0x24
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2253      	movs	r2, #83	; 0x53
 8007b52:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0206 	bic.w	r2, r2, #6
 8007b62:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689a      	ldr	r2, [r3, #8]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b8a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	22ff      	movs	r2, #255	; 0xff
 8007b92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2201      	movs	r2, #1
 8007b98:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	fffff7f7 	.word	0xfffff7f7

08007bb4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e149      	b.n	8007e66 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fb f9f2 	bl	8002fd0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f94f 	bl	8007e98 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d007      	beq.n	8007c12 <HAL_SAI_Init+0x5e>
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d302      	bcc.n	8007c0c <HAL_SAI_Init+0x58>
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d006      	beq.n	8007c18 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8007c0a:	e008      	b.n	8007c1e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61fb      	str	r3, [r7, #28]
      break;
 8007c10:	e005      	b.n	8007c1e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007c12:	2310      	movs	r3, #16
 8007c14:	61fb      	str	r3, [r7, #28]
      break;
 8007c16:	e002      	b.n	8007c1e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007c18:	2320      	movs	r3, #32
 8007c1a:	61fb      	str	r3, [r7, #28]
      break;
 8007c1c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d81d      	bhi.n	8007c62 <HAL_SAI_Init+0xae>
 8007c26:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <HAL_SAI_Init+0x78>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c43 	.word	0x08007c43
 8007c34:	08007c4b 	.word	0x08007c4b
 8007c38:	08007c53 	.word	0x08007c53
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007c40:	e010      	b.n	8007c64 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c46:	617b      	str	r3, [r7, #20]
      }
      break;
 8007c48:	e00c      	b.n	8007c64 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c4e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007c50:	e008      	b.n	8007c64 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007c52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c56:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	f043 0301 	orr.w	r3, r3, #1
 8007c5e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007c60:	e000      	b.n	8007c64 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007c62:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a81      	ldr	r2, [pc, #516]	; (8007e70 <HAL_SAI_Init+0x2bc>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d004      	beq.n	8007c78 <HAL_SAI_Init+0xc4>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a80      	ldr	r2, [pc, #512]	; (8007e74 <HAL_SAI_Init+0x2c0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d103      	bne.n	8007c80 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007c78:	4a7f      	ldr	r2, [pc, #508]	; (8007e78 <HAL_SAI_Init+0x2c4>)
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	e002      	b.n	8007c86 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007c80:	4a7e      	ldr	r2, [pc, #504]	; (8007e7c <HAL_SAI_Init+0x2c8>)
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d043      	beq.n	8007d16 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a76      	ldr	r2, [pc, #472]	; (8007e70 <HAL_SAI_Init+0x2bc>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d004      	beq.n	8007ca6 <HAL_SAI_Init+0xf2>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a74      	ldr	r2, [pc, #464]	; (8007e74 <HAL_SAI_Init+0x2c0>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d104      	bne.n	8007cb0 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007ca6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007caa:	f7ff fa8d 	bl	80071c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007cae:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a72      	ldr	r2, [pc, #456]	; (8007e80 <HAL_SAI_Init+0x2cc>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d004      	beq.n	8007cc4 <HAL_SAI_Init+0x110>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a71      	ldr	r2, [pc, #452]	; (8007e84 <HAL_SAI_Init+0x2d0>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d104      	bne.n	8007cce <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007cc4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007cc8:	f7ff fa7e 	bl	80071c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ccc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	461a      	mov	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	025b      	lsls	r3, r3, #9
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	4a67      	ldr	r2, [pc, #412]	; (8007e88 <HAL_SAI_Init+0x2d4>)
 8007cea:	fba2 2303 	umull	r2, r3, r2, r3
 8007cee:	08da      	lsrs	r2, r3, #3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8007cf4:	68f9      	ldr	r1, [r7, #12]
 8007cf6:	4b64      	ldr	r3, [pc, #400]	; (8007e88 <HAL_SAI_Init+0x2d4>)
 8007cf8:	fba3 2301 	umull	r2, r3, r3, r1
 8007cfc:	08da      	lsrs	r2, r3, #3
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	005b      	lsls	r3, r3, #1
 8007d06:	1aca      	subs	r2, r1, r3
 8007d08:	2a08      	cmp	r2, #8
 8007d0a:	d904      	bls.n	8007d16 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_SAI_Init+0x172>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d109      	bne.n	8007d3a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d101      	bne.n	8007d32 <HAL_SAI_Init+0x17e>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e001      	b.n	8007d36 <HAL_SAI_Init+0x182>
 8007d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d36:	61bb      	str	r3, [r7, #24]
 8007d38:	e008      	b.n	8007d4c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d102      	bne.n	8007d48 <HAL_SAI_Init+0x194>
 8007d42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d46:	e000      	b.n	8007d4a <HAL_SAI_Init+0x196>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6819      	ldr	r1, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	4b4d      	ldr	r3, [pc, #308]	; (8007e8c <HAL_SAI_Init+0x2d8>)
 8007d58:	400b      	ands	r3, r1
 8007d5a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6819      	ldr	r1, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d70:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d76:	431a      	orrs	r2, r3
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007d84:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d90:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	051b      	lsls	r3, r3, #20
 8007d98:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6859      	ldr	r1, [r3, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	4b38      	ldr	r3, [pc, #224]	; (8007e90 <HAL_SAI_Init+0x2dc>)
 8007dae:	400b      	ands	r3, r1
 8007db0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6859      	ldr	r1, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	699a      	ldr	r2, [r3, #24]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	6899      	ldr	r1, [r3, #8]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <HAL_SAI_Init+0x2e0>)
 8007ddc:	400b      	ands	r3, r1
 8007dde:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6899      	ldr	r1, [r3, #8]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007df0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8007df6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007dfc:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e02:	3b01      	subs	r3, #1
 8007e04:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8007e06:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68d9      	ldr	r1, [r3, #12]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007e1e:	400b      	ands	r3, r1
 8007e20:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68d9      	ldr	r1, [r3, #12]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e30:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e36:	041b      	lsls	r3, r3, #16
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3720      	adds	r7, #32
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	40015804 	.word	0x40015804
 8007e74:	40015824 	.word	0x40015824
 8007e78:	40015800 	.word	0x40015800
 8007e7c:	40015c00 	.word	0x40015c00
 8007e80:	40015c04 	.word	0x40015c04
 8007e84:	40015c24 	.word	0x40015c24
 8007e88:	cccccccd 	.word	0xcccccccd
 8007e8c:	ff05c010 	.word	0xff05c010
 8007e90:	ffff1ff0 	.word	0xffff1ff0
 8007e94:	fff88000 	.word	0xfff88000

08007e98 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007e98:	b490      	push	{r4, r7}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007ea0:	4b16      	ldr	r3, [pc, #88]	; (8007efc <SAI_Disable+0x64>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a16      	ldr	r2, [pc, #88]	; (8007f00 <SAI_Disable+0x68>)
 8007ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eaa:	0b1b      	lsrs	r3, r3, #12
 8007eac:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007ec0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8007ec2:	4623      	mov	r3, r4
 8007ec4:	1e5c      	subs	r4, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10a      	bne.n	8007ee0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ed0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ede:	e006      	b.n	8007eee <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e9      	bne.n	8007ec2 <SAI_Disable+0x2a>

  return status;
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc90      	pop	{r4, r7}
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	20000004 	.word	0x20000004
 8007f00:	95cbec1b 	.word	0x95cbec1b

08007f04 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e022      	b.n	8007f5c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d105      	bne.n	8007f2e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7fa fcc1 	bl	80028b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2203      	movs	r2, #3
 8007f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f814 	bl	8007f64 <HAL_SD_InitCard>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e00a      	b.n	8007f5c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007f64:	b5b0      	push	{r4, r5, r7, lr}
 8007f66:	b08e      	sub	sp, #56	; 0x38
 8007f68:	af04      	add	r7, sp, #16
 8007f6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007f74:	2300      	movs	r3, #0
 8007f76:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007f80:	2376      	movs	r3, #118	; 0x76
 8007f82:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681d      	ldr	r5, [r3, #0]
 8007f88:	466c      	mov	r4, sp
 8007f8a:	f107 0314 	add.w	r3, r7, #20
 8007f8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f96:	f107 0308 	add.w	r3, r7, #8
 8007f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f002 fc59 	bl	800a854 <SDMMC_Init>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e03b      	b.n	800802c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fc2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f002 fc7c 	bl	800a8c6 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fdc:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fb16 	bl	8008610 <SD_PowerON>
 8007fe4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fe6:	6a3b      	ldr	r3, [r7, #32]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e013      	b.n	800802c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fa35 	bl	8008474 <SD_InitCard>
 800800a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00b      	beq.n	800802a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	431a      	orrs	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e000      	b.n	800802c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3728      	adds	r7, #40	; 0x28
 8008030:	46bd      	mov	sp, r7
 8008032:	bdb0      	pop	{r4, r5, r7, pc}

08008034 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008042:	0f9b      	lsrs	r3, r3, #30
 8008044:	b2da      	uxtb	r2, r3
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800804e:	0e9b      	lsrs	r3, r3, #26
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f003 030f 	and.w	r3, r3, #15
 8008056:	b2da      	uxtb	r2, r3
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008060:	0e1b      	lsrs	r3, r3, #24
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 0303 	and.w	r3, r3, #3
 8008068:	b2da      	uxtb	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008072:	0c1b      	lsrs	r3, r3, #16
 8008074:	b2da      	uxtb	r2, r3
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800807e:	0a1b      	lsrs	r3, r3, #8
 8008080:	b2da      	uxtb	r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800808a:	b2da      	uxtb	r2, r3
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008094:	0d1b      	lsrs	r3, r3, #20
 8008096:	b29a      	uxth	r2, r3
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080a0:	0c1b      	lsrs	r3, r3, #16
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	f003 030f 	and.w	r3, r3, #15
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080b2:	0bdb      	lsrs	r3, r3, #15
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080c4:	0b9b      	lsrs	r3, r3, #14
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d6:	0b5b      	lsrs	r3, r3, #13
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080e8:	0b1b      	lsrs	r3, r3, #12
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2200      	movs	r2, #0
 80080fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008100:	2b00      	cmp	r3, #0
 8008102:	d163      	bne.n	80081cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008108:	009a      	lsls	r2, r3, #2
 800810a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800810e:	4013      	ands	r3, r2
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008114:	0f92      	lsrs	r2, r2, #30
 8008116:	431a      	orrs	r2, r3
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008120:	0edb      	lsrs	r3, r3, #27
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	b2da      	uxtb	r2, r3
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008132:	0e1b      	lsrs	r3, r3, #24
 8008134:	b2db      	uxtb	r3, r3
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	b2da      	uxtb	r2, r3
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008144:	0d5b      	lsrs	r3, r3, #21
 8008146:	b2db      	uxtb	r3, r3
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	b2da      	uxtb	r2, r3
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008156:	0c9b      	lsrs	r3, r3, #18
 8008158:	b2db      	uxtb	r3, r3
 800815a:	f003 0307 	and.w	r3, r3, #7
 800815e:	b2da      	uxtb	r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008168:	0bdb      	lsrs	r3, r3, #15
 800816a:	b2db      	uxtb	r3, r3
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	b2da      	uxtb	r2, r3
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	7e1b      	ldrb	r3, [r3, #24]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	3302      	adds	r3, #2
 800818c:	2201      	movs	r2, #1
 800818e:	fa02 f303 	lsl.w	r3, r2, r3
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008196:	fb02 f203 	mul.w	r2, r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	7a1b      	ldrb	r3, [r3, #8]
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	2201      	movs	r2, #1
 80081aa:	409a      	lsls	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80081b8:	0a52      	lsrs	r2, r2, #9
 80081ba:	fb02 f203 	mul.w	r2, r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081c8:	661a      	str	r2, [r3, #96]	; 0x60
 80081ca:	e031      	b.n	8008230 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d11d      	bne.n	8008210 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081d8:	041b      	lsls	r3, r3, #16
 80081da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e2:	0c1b      	lsrs	r3, r3, #16
 80081e4:	431a      	orrs	r2, r3
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	3301      	adds	r3, #1
 80081f0:	029a      	lsls	r2, r3, #10
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008204:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	661a      	str	r2, [r3, #96]	; 0x60
 800820e:	e00f      	b.n	8008230 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a58      	ldr	r2, [pc, #352]	; (8008378 <HAL_SD_GetCardCSD+0x344>)
 8008216:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e09d      	b.n	800836c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008234:	0b9b      	lsrs	r3, r3, #14
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	b2da      	uxtb	r2, r3
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008246:	09db      	lsrs	r3, r3, #7
 8008248:	b2db      	uxtb	r3, r3
 800824a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800824e:	b2da      	uxtb	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008258:	b2db      	uxtb	r3, r3
 800825a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800825e:	b2da      	uxtb	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008268:	0fdb      	lsrs	r3, r3, #31
 800826a:	b2da      	uxtb	r2, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008274:	0f5b      	lsrs	r3, r3, #29
 8008276:	b2db      	uxtb	r3, r3
 8008278:	f003 0303 	and.w	r3, r3, #3
 800827c:	b2da      	uxtb	r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	0e9b      	lsrs	r3, r3, #26
 8008288:	b2db      	uxtb	r3, r3
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	b2da      	uxtb	r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008298:	0d9b      	lsrs	r3, r3, #22
 800829a:	b2db      	uxtb	r3, r3
 800829c:	f003 030f 	and.w	r3, r3, #15
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082aa:	0d5b      	lsrs	r3, r3, #21
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c6:	0c1b      	lsrs	r3, r3, #16
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082da:	0bdb      	lsrs	r3, r3, #15
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	b2da      	uxtb	r2, r3
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ee:	0b9b      	lsrs	r3, r3, #14
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	b2da      	uxtb	r2, r3
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008302:	0b5b      	lsrs	r3, r3, #13
 8008304:	b2db      	uxtb	r3, r3
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	b2da      	uxtb	r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008316:	0b1b      	lsrs	r3, r3, #12
 8008318:	b2db      	uxtb	r3, r3
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	b2da      	uxtb	r2, r3
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832a:	0a9b      	lsrs	r3, r3, #10
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f003 0303 	and.w	r3, r3, #3
 8008332:	b2da      	uxtb	r2, r3
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833e:	0a1b      	lsrs	r3, r3, #8
 8008340:	b2db      	uxtb	r3, r3
 8008342:	f003 0303 	and.w	r3, r3, #3
 8008346:	b2da      	uxtb	r2, r3
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008352:	085b      	lsrs	r3, r3, #1
 8008354:	b2db      	uxtb	r3, r3
 8008356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800835a:	b2da      	uxtb	r2, r3
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	004005ff 	.word	0x004005ff

0800837c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800837c:	b5b0      	push	{r4, r5, r7, lr}
 800837e:	b08e      	sub	sp, #56	; 0x38
 8008380:	af04      	add	r7, sp, #16
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2203      	movs	r2, #3
 800838a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008392:	2b03      	cmp	r3, #3
 8008394:	d02e      	beq.n	80083f4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800839c:	d106      	bne.n	80083ac <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	639a      	str	r2, [r3, #56]	; 0x38
 80083aa:	e029      	b.n	8008400 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b2:	d10a      	bne.n	80083ca <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f9b9 	bl	800872c <SD_WideBus_Enable>
 80083ba:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	431a      	orrs	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	639a      	str	r2, [r3, #56]	; 0x38
 80083c8:	e01a      	b.n	8008400 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f9f6 	bl	80087c2 <SD_WideBus_Disable>
 80083d6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	431a      	orrs	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	639a      	str	r2, [r3, #56]	; 0x38
 80083e4:	e00c      	b.n	8008400 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38
 80083f2:	e005      	b.n	8008400 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	2b00      	cmp	r3, #0
 8008406:	d009      	beq.n	800841c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a18      	ldr	r2, [pc, #96]	; (8008470 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800840e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e024      	b.n	8008466 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681d      	ldr	r5, [r3, #0]
 8008442:	466c      	mov	r4, sp
 8008444:	f107 0318 	add.w	r3, r7, #24
 8008448:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800844c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008450:	f107 030c 	add.w	r3, r7, #12
 8008454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008456:	4628      	mov	r0, r5
 8008458:	f002 f9fc 	bl	800a854 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3728      	adds	r7, #40	; 0x28
 800846a:	46bd      	mov	sp, r7
 800846c:	bdb0      	pop	{r4, r5, r7, pc}
 800846e:	bf00      	nop
 8008470:	004005ff 	.word	0x004005ff

08008474 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008474:	b5b0      	push	{r4, r5, r7, lr}
 8008476:	b094      	sub	sp, #80	; 0x50
 8008478:	af04      	add	r7, sp, #16
 800847a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800847c:	2301      	movs	r3, #1
 800847e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4618      	mov	r0, r3
 8008486:	f002 fa2d 	bl	800a8e4 <SDMMC_GetPowerState>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d102      	bne.n	8008496 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008490:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008494:	e0b7      	b.n	8008606 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849a:	2b03      	cmp	r3, #3
 800849c:	d02f      	beq.n	80084fe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f002 fbad 	bl	800ac02 <SDMMC_CmdSendCID>
 80084a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <SD_InitCard+0x40>
    {
      return errorstate;
 80084b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b2:	e0a8      	b.n	8008606 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2100      	movs	r1, #0
 80084ba:	4618      	mov	r0, r3
 80084bc:	f002 fa57 	bl	800a96e <SDMMC_GetResponse>
 80084c0:	4602      	mov	r2, r0
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2104      	movs	r1, #4
 80084cc:	4618      	mov	r0, r3
 80084ce:	f002 fa4e 	bl	800a96e <SDMMC_GetResponse>
 80084d2:	4602      	mov	r2, r0
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2108      	movs	r1, #8
 80084de:	4618      	mov	r0, r3
 80084e0:	f002 fa45 	bl	800a96e <SDMMC_GetResponse>
 80084e4:	4602      	mov	r2, r0
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	210c      	movs	r1, #12
 80084f0:	4618      	mov	r0, r3
 80084f2:	f002 fa3c 	bl	800a96e <SDMMC_GetResponse>
 80084f6:	4602      	mov	r2, r0
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008502:	2b03      	cmp	r3, #3
 8008504:	d00d      	beq.n	8008522 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f107 020e 	add.w	r2, r7, #14
 800850e:	4611      	mov	r1, r2
 8008510:	4618      	mov	r0, r3
 8008512:	f002 fbb3 	bl	800ac7c <SDMMC_CmdSetRelAdd>
 8008516:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d001      	beq.n	8008522 <SD_InitCard+0xae>
    {
      return errorstate;
 800851e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008520:	e071      	b.n	8008606 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008526:	2b03      	cmp	r3, #3
 8008528:	d036      	beq.n	8008598 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800852a:	89fb      	ldrh	r3, [r7, #14]
 800852c:	461a      	mov	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853a:	041b      	lsls	r3, r3, #16
 800853c:	4619      	mov	r1, r3
 800853e:	4610      	mov	r0, r2
 8008540:	f002 fb7d 	bl	800ac3e <SDMMC_CmdSendCSD>
 8008544:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <SD_InitCard+0xdc>
    {
      return errorstate;
 800854c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854e:	e05a      	b.n	8008606 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2100      	movs	r1, #0
 8008556:	4618      	mov	r0, r3
 8008558:	f002 fa09 	bl	800a96e <SDMMC_GetResponse>
 800855c:	4602      	mov	r2, r0
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2104      	movs	r1, #4
 8008568:	4618      	mov	r0, r3
 800856a:	f002 fa00 	bl	800a96e <SDMMC_GetResponse>
 800856e:	4602      	mov	r2, r0
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2108      	movs	r1, #8
 800857a:	4618      	mov	r0, r3
 800857c:	f002 f9f7 	bl	800a96e <SDMMC_GetResponse>
 8008580:	4602      	mov	r2, r0
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	210c      	movs	r1, #12
 800858c:	4618      	mov	r0, r3
 800858e:	f002 f9ee 	bl	800a96e <SDMMC_GetResponse>
 8008592:	4602      	mov	r2, r0
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2104      	movs	r1, #4
 800859e:	4618      	mov	r0, r3
 80085a0:	f002 f9e5 	bl	800a96e <SDMMC_GetResponse>
 80085a4:	4603      	mov	r3, r0
 80085a6:	0d1a      	lsrs	r2, r3, #20
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80085ac:	f107 0310 	add.w	r3, r7, #16
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff fd3e 	bl	8008034 <HAL_SD_GetCardCSD>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085c2:	e020      	b.n	8008606 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6819      	ldr	r1, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	f04f 0400 	mov.w	r4, #0
 80085d2:	461a      	mov	r2, r3
 80085d4:	4623      	mov	r3, r4
 80085d6:	4608      	mov	r0, r1
 80085d8:	f002 fa2a 	bl	800aa30 <SDMMC_CmdSelDesel>
 80085dc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80085de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <SD_InitCard+0x174>
  {
    return errorstate;
 80085e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e6:	e00e      	b.n	8008606 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681d      	ldr	r5, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	466c      	mov	r4, sp
 80085f0:	f103 0210 	add.w	r2, r3, #16
 80085f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80085f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085fa:	3304      	adds	r3, #4
 80085fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085fe:	4628      	mov	r0, r5
 8008600:	f002 f928 	bl	800a854 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3740      	adds	r7, #64	; 0x40
 800860a:	46bd      	mov	sp, r7
 800860c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008610 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	2300      	movs	r3, #0
 8008622:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4618      	mov	r0, r3
 800862a:	f002 fa24 	bl	800aa76 <SDMMC_CmdGoIdleState>
 800862e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	e072      	b.n	8008720 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f002 fa37 	bl	800aab2 <SDMMC_CmdOperCond>
 8008644:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00d      	beq.n	8008668 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4618      	mov	r0, r3
 8008658:	f002 fa0d 	bl	800aa76 <SDMMC_CmdGoIdleState>
 800865c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	e05b      	b.n	8008720 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008672:	2b01      	cmp	r3, #1
 8008674:	d137      	bne.n	80086e6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2100      	movs	r1, #0
 800867c:	4618      	mov	r0, r3
 800867e:	f002 fa37 	bl	800aaf0 <SDMMC_CmdAppCommand>
 8008682:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d02d      	beq.n	80086e6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800868a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800868e:	e047      	b.n	8008720 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f002 fa2a 	bl	800aaf0 <SDMMC_CmdAppCommand>
 800869c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <SD_PowerON+0x98>
    {
      return errorstate;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	e03b      	b.n	8008720 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	491e      	ldr	r1, [pc, #120]	; (8008728 <SD_PowerON+0x118>)
 80086ae:	4618      	mov	r0, r3
 80086b0:	f002 fa40 	bl	800ab34 <SDMMC_CmdAppOperCommand>
 80086b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80086c0:	e02e      	b.n	8008720 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2100      	movs	r1, #0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f002 f950 	bl	800a96e <SDMMC_GetResponse>
 80086ce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	0fdb      	lsrs	r3, r3, #31
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <SD_PowerON+0xcc>
 80086d8:	2301      	movs	r3, #1
 80086da:	e000      	b.n	80086de <SD_PowerON+0xce>
 80086dc:	2300      	movs	r3, #0
 80086de:	613b      	str	r3, [r7, #16]

    count++;
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	3301      	adds	r3, #1
 80086e4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d802      	bhi.n	80086f6 <SD_PowerON+0xe6>
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d0cc      	beq.n	8008690 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d902      	bls.n	8008706 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008704:	e00c      	b.n	8008720 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d003      	beq.n	8008718 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	645a      	str	r2, [r3, #68]	; 0x44
 8008716:	e002      	b.n	800871e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3718      	adds	r7, #24
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	c1100000 	.word	0xc1100000

0800872c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008734:	2300      	movs	r3, #0
 8008736:	60fb      	str	r3, [r7, #12]
 8008738:	2300      	movs	r3, #0
 800873a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2100      	movs	r1, #0
 8008742:	4618      	mov	r0, r3
 8008744:	f002 f913 	bl	800a96e <SDMMC_GetResponse>
 8008748:	4603      	mov	r3, r0
 800874a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800874e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008752:	d102      	bne.n	800875a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008758:	e02f      	b.n	80087ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800875a:	f107 030c 	add.w	r3, r7, #12
 800875e:	4619      	mov	r1, r3
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f879 	bl	8008858 <SD_FindSCR>
 8008766:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	e023      	b.n	80087ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01c      	beq.n	80087b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f002 f9b1 	bl	800aaf0 <SDMMC_CmdAppCommand>
 800878e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	e00f      	b.n	80087ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2102      	movs	r1, #2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 f9eb 	bl	800ab7c <SDMMC_CmdBusWidth>
 80087a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	e003      	b.n	80087ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80087b2:	2300      	movs	r3, #0
 80087b4:	e001      	b.n	80087ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80087b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b086      	sub	sp, #24
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80087ca:	2300      	movs	r3, #0
 80087cc:	60fb      	str	r3, [r7, #12]
 80087ce:	2300      	movs	r3, #0
 80087d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2100      	movs	r1, #0
 80087d8:	4618      	mov	r0, r3
 80087da:	f002 f8c8 	bl	800a96e <SDMMC_GetResponse>
 80087de:	4603      	mov	r3, r0
 80087e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087e8:	d102      	bne.n	80087f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087ee:	e02f      	b.n	8008850 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087f0:	f107 030c 	add.w	r3, r7, #12
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f82e 	bl	8008858 <SD_FindSCR>
 80087fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	e023      	b.n	8008850 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d01c      	beq.n	800884c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881a:	041b      	lsls	r3, r3, #16
 800881c:	4619      	mov	r1, r3
 800881e:	4610      	mov	r0, r2
 8008820:	f002 f966 	bl	800aaf0 <SDMMC_CmdAppCommand>
 8008824:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	e00f      	b.n	8008850 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2100      	movs	r1, #0
 8008836:	4618      	mov	r0, r3
 8008838:	f002 f9a0 	bl	800ab7c <SDMMC_CmdBusWidth>
 800883c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	e003      	b.n	8008850 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008848:	2300      	movs	r3, #0
 800884a:	e001      	b.n	8008850 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800884c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008850:	4618      	mov	r0, r3
 8008852:	3718      	adds	r7, #24
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008858:	b590      	push	{r4, r7, lr}
 800885a:	b08f      	sub	sp, #60	; 0x3c
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008862:	f7fa fd75 	bl	8003350 <HAL_GetTick>
 8008866:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800886c:	2300      	movs	r3, #0
 800886e:	60bb      	str	r3, [r7, #8]
 8008870:	2300      	movs	r3, #0
 8008872:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2108      	movs	r1, #8
 800887e:	4618      	mov	r0, r3
 8008880:	f002 f8b4 	bl	800a9ec <SDMMC_CmdBlockLength>
 8008884:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <SD_FindSCR+0x38>
  {
    return errorstate;
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	e0a9      	b.n	80089e4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008898:	041b      	lsls	r3, r3, #16
 800889a:	4619      	mov	r1, r3
 800889c:	4610      	mov	r0, r2
 800889e:	f002 f927 	bl	800aaf0 <SDMMC_CmdAppCommand>
 80088a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <SD_FindSCR+0x56>
  {
    return errorstate;
 80088aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ac:	e09a      	b.n	80089e4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80088ae:	f04f 33ff 	mov.w	r3, #4294967295
 80088b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80088b4:	2308      	movs	r3, #8
 80088b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80088b8:	2330      	movs	r3, #48	; 0x30
 80088ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80088bc:	2302      	movs	r3, #2
 80088be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80088c4:	2301      	movs	r3, #1
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f107 0210 	add.w	r2, r7, #16
 80088d0:	4611      	mov	r1, r2
 80088d2:	4618      	mov	r0, r3
 80088d4:	f002 f85e 	bl	800a994 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4618      	mov	r0, r3
 80088de:	f002 f96f 	bl	800abc0 <SDMMC_CmdSendSCR>
 80088e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80088e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d022      	beq.n	8008930 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80088ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ec:	e07a      	b.n	80089e4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00e      	beq.n	800891a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6819      	ldr	r1, [r3, #0]
 8008900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	f107 0208 	add.w	r2, r7, #8
 8008908:	18d4      	adds	r4, r2, r3
 800890a:	4608      	mov	r0, r1
 800890c:	f001 ffce 	bl	800a8ac <SDMMC_ReadFIFO>
 8008910:	4603      	mov	r3, r0
 8008912:	6023      	str	r3, [r4, #0]
      index++;
 8008914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008916:	3301      	adds	r3, #1
 8008918:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800891a:	f7fa fd19 	bl	8003350 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008928:	d102      	bne.n	8008930 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800892a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800892e:	e059      	b.n	80089e4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008936:	f240 432a 	movw	r3, #1066	; 0x42a
 800893a:	4013      	ands	r3, r2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0d6      	beq.n	80088ee <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008946:	f003 0308 	and.w	r3, r3, #8
 800894a:	2b00      	cmp	r3, #0
 800894c:	d005      	beq.n	800895a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2208      	movs	r2, #8
 8008954:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008956:	2308      	movs	r3, #8
 8008958:	e044      	b.n	80089e4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d005      	beq.n	8008974 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2202      	movs	r2, #2
 800896e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008970:	2302      	movs	r3, #2
 8008972:	e037      	b.n	80089e4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897a:	f003 0320 	and.w	r3, r3, #32
 800897e:	2b00      	cmp	r3, #0
 8008980:	d005      	beq.n	800898e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2220      	movs	r2, #32
 8008988:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800898a:	2320      	movs	r3, #32
 800898c:	e02a      	b.n	80089e4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f240 523a 	movw	r2, #1338	; 0x53a
 8008996:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	061a      	lsls	r2, r3, #24
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	021b      	lsls	r3, r3, #8
 80089a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089a4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	0a1b      	lsrs	r3, r3, #8
 80089aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	0e1b      	lsrs	r3, r3, #24
 80089b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80089b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b8:	601a      	str	r2, [r3, #0]
    scr++;
 80089ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089bc:	3304      	adds	r3, #4
 80089be:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	061a      	lsls	r2, r3, #24
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089cc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	0a1b      	lsrs	r3, r3, #8
 80089d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	0e1b      	lsrs	r3, r3, #24
 80089dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	373c      	adds	r7, #60	; 0x3c
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd90      	pop	{r4, r7, pc}

080089ec <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e025      	b.n	8008a4c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7fa fad1 	bl	8002fbc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f001 fdeb 	bl	800a608 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	f001 fe55 	bl	800a6ec <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b02      	cmp	r3, #2
 8008a6a:	d101      	bne.n	8008a70 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	e018      	b.n	8008aa2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f001 feb3 	bl	800a7ec <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b02      	cmp	r3, #2
 8008a8c:	d104      	bne.n	8008a98 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2205      	movs	r2, #5
 8008a92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008a96:	e003      	b.n	8008aa0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d101      	bne.n	8008ac4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e00e      	b.n	8008ae2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f001 feab 	bl	800a82e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e04c      	b.n	8008b98 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d106      	bne.n	8008b18 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7f9 ff2e 	bl	8002974 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 0203 	bic.w	r2, r2, #3
 8008b2e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	4b19      	ldr	r3, [pc, #100]	; (8008ba0 <HAL_SPDIFRX_Init+0xb4>)
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008b48:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008b4e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008b54:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008b5a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008b60:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008b66:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008b6c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008b72:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008b78:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	fff88407 	.word	0xfff88407

08008ba4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e084      	b.n	8008cc0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d106      	bne.n	8008bd6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7f9 ff11 	bl	80029f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2202      	movs	r2, #2
 8008bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bf6:	d902      	bls.n	8008bfe <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	e002      	b.n	8008c04 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008c0c:	d007      	beq.n	8008c1e <HAL_SPI_Init+0x7a>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c16:	d002      	beq.n	8008c1e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10b      	bne.n	8008c3e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c2e:	d903      	bls.n	8008c38 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	631a      	str	r2, [r3, #48]	; 0x30
 8008c36:	e002      	b.n	8008c3e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	431a      	orrs	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	431a      	orrs	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c5c:	431a      	orrs	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	431a      	orrs	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	ea42 0103 	orr.w	r1, r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	0c1b      	lsrs	r3, r3, #16
 8008c7e:	f003 0204 	and.w	r2, r3, #4
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c86:	431a      	orrs	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8c:	431a      	orrs	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	ea42 0103 	orr.w	r1, r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69da      	ldr	r2, [r3, #28]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e01d      	b.n	8008d16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d106      	bne.n	8008cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7f9 fee4 	bl	8002abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	3304      	adds	r3, #4
 8008d04:	4619      	mov	r1, r3
 8008d06:	4610      	mov	r0, r2
 8008d08:	f000 fb78 	bl	80093fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68da      	ldr	r2, [r3, #12]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f042 0201 	orr.w	r2, r2, #1
 8008d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689a      	ldr	r2, [r3, #8]
 8008d3e:	4b0c      	ldr	r3, [pc, #48]	; (8008d70 <HAL_TIM_Base_Start_IT+0x50>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b06      	cmp	r3, #6
 8008d48:	d00b      	beq.n	8008d62 <HAL_TIM_Base_Start_IT+0x42>
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d50:	d007      	beq.n	8008d62 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f042 0201 	orr.w	r2, r2, #1
 8008d60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	00010007 	.word	0x00010007

08008d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e01d      	b.n	8008dc2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d106      	bne.n	8008da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7f9 fefc 	bl	8002b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f000 fb22 	bl	80093fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d122      	bne.n	8008e26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d11b      	bne.n	8008e26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f06f 0202 	mvn.w	r2, #2
 8008df6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	f003 0303 	and.w	r3, r3, #3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fad7 	bl	80093c0 <HAL_TIM_IC_CaptureCallback>
 8008e12:	e005      	b.n	8008e20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fac9 	bl	80093ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fada 	bl	80093d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	d122      	bne.n	8008e7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d11b      	bne.n	8008e7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f06f 0204 	mvn.w	r2, #4
 8008e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 faad 	bl	80093c0 <HAL_TIM_IC_CaptureCallback>
 8008e66:	e005      	b.n	8008e74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa9f 	bl	80093ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fab0 	bl	80093d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d122      	bne.n	8008ece <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f003 0308 	and.w	r3, r3, #8
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d11b      	bne.n	8008ece <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f06f 0208 	mvn.w	r2, #8
 8008e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2204      	movs	r2, #4
 8008ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f003 0303 	and.w	r3, r3, #3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fa83 	bl	80093c0 <HAL_TIM_IC_CaptureCallback>
 8008eba:	e005      	b.n	8008ec8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fa75 	bl	80093ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fa86 	bl	80093d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	f003 0310 	and.w	r3, r3, #16
 8008ed8:	2b10      	cmp	r3, #16
 8008eda:	d122      	bne.n	8008f22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	f003 0310 	and.w	r3, r3, #16
 8008ee6:	2b10      	cmp	r3, #16
 8008ee8:	d11b      	bne.n	8008f22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f06f 0210 	mvn.w	r2, #16
 8008ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2208      	movs	r2, #8
 8008ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fa59 	bl	80093c0 <HAL_TIM_IC_CaptureCallback>
 8008f0e:	e005      	b.n	8008f1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fa4b 	bl	80093ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fa5c 	bl	80093d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d10e      	bne.n	8008f4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d107      	bne.n	8008f4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f06f 0201 	mvn.w	r2, #1
 8008f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7f9 f90b 	bl	8002164 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f58:	2b80      	cmp	r3, #128	; 0x80
 8008f5a:	d10e      	bne.n	8008f7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f66:	2b80      	cmp	r3, #128	; 0x80
 8008f68:	d107      	bne.n	8008f7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 feef 	bl	8009d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f88:	d10e      	bne.n	8008fa8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f94:	2b80      	cmp	r3, #128	; 0x80
 8008f96:	d107      	bne.n	8008fa8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fee2 	bl	8009d6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb2:	2b40      	cmp	r3, #64	; 0x40
 8008fb4:	d10e      	bne.n	8008fd4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc0:	2b40      	cmp	r3, #64	; 0x40
 8008fc2:	d107      	bne.n	8008fd4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa0a 	bl	80093e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f003 0320 	and.w	r3, r3, #32
 8008fde:	2b20      	cmp	r3, #32
 8008fe0:	d10e      	bne.n	8009000 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	d107      	bne.n	8009000 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f06f 0220 	mvn.w	r2, #32
 8008ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fea2 	bl	8009d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800901a:	2b01      	cmp	r3, #1
 800901c:	d101      	bne.n	8009022 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800901e:	2302      	movs	r3, #2
 8009020:	e105      	b.n	800922e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2202      	movs	r2, #2
 800902e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2b14      	cmp	r3, #20
 8009036:	f200 80f0 	bhi.w	800921a <HAL_TIM_PWM_ConfigChannel+0x212>
 800903a:	a201      	add	r2, pc, #4	; (adr r2, 8009040 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800903c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009040:	08009095 	.word	0x08009095
 8009044:	0800921b 	.word	0x0800921b
 8009048:	0800921b 	.word	0x0800921b
 800904c:	0800921b 	.word	0x0800921b
 8009050:	080090d5 	.word	0x080090d5
 8009054:	0800921b 	.word	0x0800921b
 8009058:	0800921b 	.word	0x0800921b
 800905c:	0800921b 	.word	0x0800921b
 8009060:	08009117 	.word	0x08009117
 8009064:	0800921b 	.word	0x0800921b
 8009068:	0800921b 	.word	0x0800921b
 800906c:	0800921b 	.word	0x0800921b
 8009070:	08009157 	.word	0x08009157
 8009074:	0800921b 	.word	0x0800921b
 8009078:	0800921b 	.word	0x0800921b
 800907c:	0800921b 	.word	0x0800921b
 8009080:	08009199 	.word	0x08009199
 8009084:	0800921b 	.word	0x0800921b
 8009088:	0800921b 	.word	0x0800921b
 800908c:	0800921b 	.word	0x0800921b
 8009090:	080091d9 	.word	0x080091d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68b9      	ldr	r1, [r7, #8]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 fa4e 	bl	800953c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f042 0208 	orr.w	r2, r2, #8
 80090ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699a      	ldr	r2, [r3, #24]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f022 0204 	bic.w	r2, r2, #4
 80090be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6999      	ldr	r1, [r3, #24]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	691a      	ldr	r2, [r3, #16]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	430a      	orrs	r2, r1
 80090d0:	619a      	str	r2, [r3, #24]
      break;
 80090d2:	e0a3      	b.n	800921c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68b9      	ldr	r1, [r7, #8]
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 faa0 	bl	8009620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	699a      	ldr	r2, [r3, #24]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	699a      	ldr	r2, [r3, #24]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6999      	ldr	r1, [r3, #24]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	021a      	lsls	r2, r3, #8
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	619a      	str	r2, [r3, #24]
      break;
 8009114:	e082      	b.n	800921c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	4618      	mov	r0, r3
 800911e:	f000 faf7 	bl	8009710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	69da      	ldr	r2, [r3, #28]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0208 	orr.w	r2, r2, #8
 8009130:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69da      	ldr	r2, [r3, #28]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f022 0204 	bic.w	r2, r2, #4
 8009140:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69d9      	ldr	r1, [r3, #28]
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	691a      	ldr	r2, [r3, #16]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	61da      	str	r2, [r3, #28]
      break;
 8009154:	e062      	b.n	800921c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68b9      	ldr	r1, [r7, #8]
 800915c:	4618      	mov	r0, r3
 800915e:	f000 fb4d 	bl	80097fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	69da      	ldr	r2, [r3, #28]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	69da      	ldr	r2, [r3, #28]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69d9      	ldr	r1, [r3, #28]
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	021a      	lsls	r2, r3, #8
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	61da      	str	r2, [r3, #28]
      break;
 8009196:	e041      	b.n	800921c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68b9      	ldr	r1, [r7, #8]
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 fb84 	bl	80098ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f042 0208 	orr.w	r2, r2, #8
 80091b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f022 0204 	bic.w	r2, r2, #4
 80091c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	691a      	ldr	r2, [r3, #16]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	430a      	orrs	r2, r1
 80091d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091d6:	e021      	b.n	800921c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68b9      	ldr	r1, [r7, #8]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 fbb6 	bl	8009950 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009202:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	021a      	lsls	r2, r3, #8
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	430a      	orrs	r2, r1
 8009216:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009218:	e000      	b.n	800921c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800921a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop

08009238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009248:	2b01      	cmp	r3, #1
 800924a:	d101      	bne.n	8009250 <HAL_TIM_ConfigClockSource+0x18>
 800924c:	2302      	movs	r3, #2
 800924e:	e0a6      	b.n	800939e <HAL_TIM_ConfigClockSource+0x166>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2202      	movs	r2, #2
 800925c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	689b      	ldr	r3, [r3, #8]
 8009266:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	4b4f      	ldr	r3, [pc, #316]	; (80093a8 <HAL_TIM_ConfigClockSource+0x170>)
 800926c:	4013      	ands	r3, r2
 800926e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009276:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b40      	cmp	r3, #64	; 0x40
 8009286:	d067      	beq.n	8009358 <HAL_TIM_ConfigClockSource+0x120>
 8009288:	2b40      	cmp	r3, #64	; 0x40
 800928a:	d80b      	bhi.n	80092a4 <HAL_TIM_ConfigClockSource+0x6c>
 800928c:	2b10      	cmp	r3, #16
 800928e:	d073      	beq.n	8009378 <HAL_TIM_ConfigClockSource+0x140>
 8009290:	2b10      	cmp	r3, #16
 8009292:	d802      	bhi.n	800929a <HAL_TIM_ConfigClockSource+0x62>
 8009294:	2b00      	cmp	r3, #0
 8009296:	d06f      	beq.n	8009378 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009298:	e078      	b.n	800938c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800929a:	2b20      	cmp	r3, #32
 800929c:	d06c      	beq.n	8009378 <HAL_TIM_ConfigClockSource+0x140>
 800929e:	2b30      	cmp	r3, #48	; 0x30
 80092a0:	d06a      	beq.n	8009378 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80092a2:	e073      	b.n	800938c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80092a4:	2b70      	cmp	r3, #112	; 0x70
 80092a6:	d00d      	beq.n	80092c4 <HAL_TIM_ConfigClockSource+0x8c>
 80092a8:	2b70      	cmp	r3, #112	; 0x70
 80092aa:	d804      	bhi.n	80092b6 <HAL_TIM_ConfigClockSource+0x7e>
 80092ac:	2b50      	cmp	r3, #80	; 0x50
 80092ae:	d033      	beq.n	8009318 <HAL_TIM_ConfigClockSource+0xe0>
 80092b0:	2b60      	cmp	r3, #96	; 0x60
 80092b2:	d041      	beq.n	8009338 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80092b4:	e06a      	b.n	800938c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80092b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ba:	d066      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x152>
 80092bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092c0:	d017      	beq.n	80092f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80092c2:	e063      	b.n	800938c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6818      	ldr	r0, [r3, #0]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	6899      	ldr	r1, [r3, #8]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	f000 fc0a 	bl	8009aec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	609a      	str	r2, [r3, #8]
      break;
 80092f0:	e04c      	b.n	800938c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	6899      	ldr	r1, [r3, #8]
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685a      	ldr	r2, [r3, #4]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f000 fbf3 	bl	8009aec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009314:	609a      	str	r2, [r3, #8]
      break;
 8009316:	e039      	b.n	800938c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6818      	ldr	r0, [r3, #0]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	6859      	ldr	r1, [r3, #4]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	461a      	mov	r2, r3
 8009326:	f000 fb67 	bl	80099f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2150      	movs	r1, #80	; 0x50
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fbc0 	bl	8009ab6 <TIM_ITRx_SetConfig>
      break;
 8009336:	e029      	b.n	800938c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6818      	ldr	r0, [r3, #0]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	6859      	ldr	r1, [r3, #4]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	461a      	mov	r2, r3
 8009346:	f000 fb86 	bl	8009a56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2160      	movs	r1, #96	; 0x60
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fbb0 	bl	8009ab6 <TIM_ITRx_SetConfig>
      break;
 8009356:	e019      	b.n	800938c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6818      	ldr	r0, [r3, #0]
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	6859      	ldr	r1, [r3, #4]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	461a      	mov	r2, r3
 8009366:	f000 fb47 	bl	80099f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2140      	movs	r1, #64	; 0x40
 8009370:	4618      	mov	r0, r3
 8009372:	f000 fba0 	bl	8009ab6 <TIM_ITRx_SetConfig>
      break;
 8009376:	e009      	b.n	800938c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f000 fb97 	bl	8009ab6 <TIM_ITRx_SetConfig>
      break;
 8009388:	e000      	b.n	800938c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800938a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	fffeff88 	.word	0xfffeff88

080093ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093b4:	bf00      	nop
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a40      	ldr	r2, [pc, #256]	; (8009510 <TIM_Base_SetConfig+0x114>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d013      	beq.n	800943c <TIM_Base_SetConfig+0x40>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800941a:	d00f      	beq.n	800943c <TIM_Base_SetConfig+0x40>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a3d      	ldr	r2, [pc, #244]	; (8009514 <TIM_Base_SetConfig+0x118>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d00b      	beq.n	800943c <TIM_Base_SetConfig+0x40>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a3c      	ldr	r2, [pc, #240]	; (8009518 <TIM_Base_SetConfig+0x11c>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d007      	beq.n	800943c <TIM_Base_SetConfig+0x40>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a3b      	ldr	r2, [pc, #236]	; (800951c <TIM_Base_SetConfig+0x120>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d003      	beq.n	800943c <TIM_Base_SetConfig+0x40>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a3a      	ldr	r2, [pc, #232]	; (8009520 <TIM_Base_SetConfig+0x124>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d108      	bne.n	800944e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	4313      	orrs	r3, r2
 800944c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a2f      	ldr	r2, [pc, #188]	; (8009510 <TIM_Base_SetConfig+0x114>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d02b      	beq.n	80094ae <TIM_Base_SetConfig+0xb2>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800945c:	d027      	beq.n	80094ae <TIM_Base_SetConfig+0xb2>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a2c      	ldr	r2, [pc, #176]	; (8009514 <TIM_Base_SetConfig+0x118>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d023      	beq.n	80094ae <TIM_Base_SetConfig+0xb2>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a2b      	ldr	r2, [pc, #172]	; (8009518 <TIM_Base_SetConfig+0x11c>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d01f      	beq.n	80094ae <TIM_Base_SetConfig+0xb2>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a2a      	ldr	r2, [pc, #168]	; (800951c <TIM_Base_SetConfig+0x120>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d01b      	beq.n	80094ae <TIM_Base_SetConfig+0xb2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a29      	ldr	r2, [pc, #164]	; (8009520 <TIM_Base_SetConfig+0x124>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d017      	beq.n	80094ae <TIM_Base_SetConfig+0xb2>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a28      	ldr	r2, [pc, #160]	; (8009524 <TIM_Base_SetConfig+0x128>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d013      	beq.n	80094ae <TIM_Base_SetConfig+0xb2>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a27      	ldr	r2, [pc, #156]	; (8009528 <TIM_Base_SetConfig+0x12c>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d00f      	beq.n	80094ae <TIM_Base_SetConfig+0xb2>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4a26      	ldr	r2, [pc, #152]	; (800952c <TIM_Base_SetConfig+0x130>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d00b      	beq.n	80094ae <TIM_Base_SetConfig+0xb2>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a25      	ldr	r2, [pc, #148]	; (8009530 <TIM_Base_SetConfig+0x134>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d007      	beq.n	80094ae <TIM_Base_SetConfig+0xb2>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a24      	ldr	r2, [pc, #144]	; (8009534 <TIM_Base_SetConfig+0x138>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d003      	beq.n	80094ae <TIM_Base_SetConfig+0xb2>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a23      	ldr	r2, [pc, #140]	; (8009538 <TIM_Base_SetConfig+0x13c>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d108      	bne.n	80094c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	695b      	ldr	r3, [r3, #20]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a0a      	ldr	r2, [pc, #40]	; (8009510 <TIM_Base_SetConfig+0x114>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d003      	beq.n	80094f4 <TIM_Base_SetConfig+0xf8>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a0c      	ldr	r2, [pc, #48]	; (8009520 <TIM_Base_SetConfig+0x124>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d103      	bne.n	80094fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	691a      	ldr	r2, [r3, #16]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	615a      	str	r2, [r3, #20]
}
 8009502:	bf00      	nop
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40010000 	.word	0x40010000
 8009514:	40000400 	.word	0x40000400
 8009518:	40000800 	.word	0x40000800
 800951c:	40000c00 	.word	0x40000c00
 8009520:	40010400 	.word	0x40010400
 8009524:	40014000 	.word	0x40014000
 8009528:	40014400 	.word	0x40014400
 800952c:	40014800 	.word	0x40014800
 8009530:	40001800 	.word	0x40001800
 8009534:	40001c00 	.word	0x40001c00
 8009538:	40002000 	.word	0x40002000

0800953c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a1b      	ldr	r3, [r3, #32]
 800954a:	f023 0201 	bic.w	r2, r3, #1
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	4b2b      	ldr	r3, [pc, #172]	; (8009614 <TIM_OC1_SetConfig+0xd8>)
 8009568:	4013      	ands	r3, r2
 800956a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f023 0303 	bic.w	r3, r3, #3
 8009572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f023 0302 	bic.w	r3, r3, #2
 8009584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4313      	orrs	r3, r2
 800958e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a21      	ldr	r2, [pc, #132]	; (8009618 <TIM_OC1_SetConfig+0xdc>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d003      	beq.n	80095a0 <TIM_OC1_SetConfig+0x64>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4a20      	ldr	r2, [pc, #128]	; (800961c <TIM_OC1_SetConfig+0xe0>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d10c      	bne.n	80095ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f023 0308 	bic.w	r3, r3, #8
 80095a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f023 0304 	bic.w	r3, r3, #4
 80095b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a16      	ldr	r2, [pc, #88]	; (8009618 <TIM_OC1_SetConfig+0xdc>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d003      	beq.n	80095ca <TIM_OC1_SetConfig+0x8e>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a15      	ldr	r2, [pc, #84]	; (800961c <TIM_OC1_SetConfig+0xe0>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d111      	bne.n	80095ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	621a      	str	r2, [r3, #32]
}
 8009608:	bf00      	nop
 800960a:	371c      	adds	r7, #28
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	fffeff8f 	.word	0xfffeff8f
 8009618:	40010000 	.word	0x40010000
 800961c:	40010400 	.word	0x40010400

08009620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009620:	b480      	push	{r7}
 8009622:	b087      	sub	sp, #28
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	f023 0210 	bic.w	r2, r3, #16
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	4b2e      	ldr	r3, [pc, #184]	; (8009704 <TIM_OC2_SetConfig+0xe4>)
 800964c:	4013      	ands	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	4313      	orrs	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f023 0320 	bic.w	r3, r3, #32
 800966a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	011b      	lsls	r3, r3, #4
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	4313      	orrs	r3, r2
 8009676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a23      	ldr	r2, [pc, #140]	; (8009708 <TIM_OC2_SetConfig+0xe8>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d003      	beq.n	8009688 <TIM_OC2_SetConfig+0x68>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a22      	ldr	r2, [pc, #136]	; (800970c <TIM_OC2_SetConfig+0xec>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d10d      	bne.n	80096a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800968e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	011b      	lsls	r3, r3, #4
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4313      	orrs	r3, r2
 800969a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a18      	ldr	r2, [pc, #96]	; (8009708 <TIM_OC2_SetConfig+0xe8>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d003      	beq.n	80096b4 <TIM_OC2_SetConfig+0x94>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a17      	ldr	r2, [pc, #92]	; (800970c <TIM_OC2_SetConfig+0xec>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d113      	bne.n	80096dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80096ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	621a      	str	r2, [r3, #32]
}
 80096f6:	bf00      	nop
 80096f8:	371c      	adds	r7, #28
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	feff8fff 	.word	0xfeff8fff
 8009708:	40010000 	.word	0x40010000
 800970c:	40010400 	.word	0x40010400

08009710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009710:	b480      	push	{r7}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	4b2d      	ldr	r3, [pc, #180]	; (80097f0 <TIM_OC3_SetConfig+0xe0>)
 800973c:	4013      	ands	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f023 0303 	bic.w	r3, r3, #3
 8009746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	021b      	lsls	r3, r3, #8
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	4313      	orrs	r3, r2
 8009764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a22      	ldr	r2, [pc, #136]	; (80097f4 <TIM_OC3_SetConfig+0xe4>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d003      	beq.n	8009776 <TIM_OC3_SetConfig+0x66>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a21      	ldr	r2, [pc, #132]	; (80097f8 <TIM_OC3_SetConfig+0xe8>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d10d      	bne.n	8009792 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800977c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	021b      	lsls	r3, r3, #8
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	4313      	orrs	r3, r2
 8009788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a17      	ldr	r2, [pc, #92]	; (80097f4 <TIM_OC3_SetConfig+0xe4>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d003      	beq.n	80097a2 <TIM_OC3_SetConfig+0x92>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a16      	ldr	r2, [pc, #88]	; (80097f8 <TIM_OC3_SetConfig+0xe8>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d113      	bne.n	80097ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80097b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	011b      	lsls	r3, r3, #4
 80097b8:	693a      	ldr	r2, [r7, #16]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	621a      	str	r2, [r3, #32]
}
 80097e4:	bf00      	nop
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	fffeff8f 	.word	0xfffeff8f
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40010400 	.word	0x40010400

080097fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4b1e      	ldr	r3, [pc, #120]	; (80098a0 <TIM_OC4_SetConfig+0xa4>)
 8009828:	4013      	ands	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	021b      	lsls	r3, r3, #8
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	4313      	orrs	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	031b      	lsls	r3, r3, #12
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	4313      	orrs	r3, r2
 8009852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a13      	ldr	r2, [pc, #76]	; (80098a4 <TIM_OC4_SetConfig+0xa8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d003      	beq.n	8009864 <TIM_OC4_SetConfig+0x68>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a12      	ldr	r2, [pc, #72]	; (80098a8 <TIM_OC4_SetConfig+0xac>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d109      	bne.n	8009878 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800986a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	019b      	lsls	r3, r3, #6
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	4313      	orrs	r3, r2
 8009876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	621a      	str	r2, [r3, #32]
}
 8009892:	bf00      	nop
 8009894:	371c      	adds	r7, #28
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	feff8fff 	.word	0xfeff8fff
 80098a4:	40010000 	.word	0x40010000
 80098a8:	40010400 	.word	0x40010400

080098ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	4b1b      	ldr	r3, [pc, #108]	; (8009944 <TIM_OC5_SetConfig+0x98>)
 80098d8:	4013      	ands	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	4313      	orrs	r3, r2
 80098e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80098ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	041b      	lsls	r3, r3, #16
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a12      	ldr	r2, [pc, #72]	; (8009948 <TIM_OC5_SetConfig+0x9c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d003      	beq.n	800990a <TIM_OC5_SetConfig+0x5e>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a11      	ldr	r2, [pc, #68]	; (800994c <TIM_OC5_SetConfig+0xa0>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d109      	bne.n	800991e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009910:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	695b      	ldr	r3, [r3, #20]
 8009916:	021b      	lsls	r3, r3, #8
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	621a      	str	r2, [r3, #32]
}
 8009938:	bf00      	nop
 800993a:	371c      	adds	r7, #28
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	fffeff8f 	.word	0xfffeff8f
 8009948:	40010000 	.word	0x40010000
 800994c:	40010400 	.word	0x40010400

08009950 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	4b1c      	ldr	r3, [pc, #112]	; (80099ec <TIM_OC6_SetConfig+0x9c>)
 800997c:	4013      	ands	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	021b      	lsls	r3, r3, #8
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	4313      	orrs	r3, r2
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009992:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	051b      	lsls	r3, r3, #20
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	4313      	orrs	r3, r2
 800999e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a13      	ldr	r2, [pc, #76]	; (80099f0 <TIM_OC6_SetConfig+0xa0>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d003      	beq.n	80099b0 <TIM_OC6_SetConfig+0x60>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a12      	ldr	r2, [pc, #72]	; (80099f4 <TIM_OC6_SetConfig+0xa4>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d109      	bne.n	80099c4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	029b      	lsls	r3, r3, #10
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685a      	ldr	r2, [r3, #4]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	693a      	ldr	r2, [r7, #16]
 80099dc:	621a      	str	r2, [r3, #32]
}
 80099de:	bf00      	nop
 80099e0:	371c      	adds	r7, #28
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	feff8fff 	.word	0xfeff8fff
 80099f0:	40010000 	.word	0x40010000
 80099f4:	40010400 	.word	0x40010400

080099f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b087      	sub	sp, #28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6a1b      	ldr	r3, [r3, #32]
 8009a0e:	f023 0201 	bic.w	r2, r3, #1
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	011b      	lsls	r3, r3, #4
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f023 030a 	bic.w	r3, r3, #10
 8009a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	621a      	str	r2, [r3, #32]
}
 8009a4a:	bf00      	nop
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b087      	sub	sp, #28
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60f8      	str	r0, [r7, #12]
 8009a5e:	60b9      	str	r1, [r7, #8]
 8009a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a1b      	ldr	r3, [r3, #32]
 8009a66:	f023 0210 	bic.w	r2, r3, #16
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	031b      	lsls	r3, r3, #12
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	621a      	str	r2, [r3, #32]
}
 8009aaa:	bf00      	nop
 8009aac:	371c      	adds	r7, #28
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ab6:	b480      	push	{r7}
 8009ab8:	b085      	sub	sp, #20
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	f043 0307 	orr.w	r3, r3, #7
 8009ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	609a      	str	r2, [r3, #8]
}
 8009ae0:	bf00      	nop
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	021a      	lsls	r2, r3, #8
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	609a      	str	r2, [r3, #8]
}
 8009b20:	bf00      	nop
 8009b22:	371c      	adds	r7, #28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d101      	bne.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b40:	2302      	movs	r3, #2
 8009b42:	e06d      	b.n	8009c20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2202      	movs	r2, #2
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a30      	ldr	r2, [pc, #192]	; (8009c2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d004      	beq.n	8009b78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a2f      	ldr	r2, [pc, #188]	; (8009c30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d108      	bne.n	8009b8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a20      	ldr	r2, [pc, #128]	; (8009c2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d022      	beq.n	8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb6:	d01d      	beq.n	8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a1d      	ldr	r2, [pc, #116]	; (8009c34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d018      	beq.n	8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a1c      	ldr	r2, [pc, #112]	; (8009c38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d013      	beq.n	8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a1a      	ldr	r2, [pc, #104]	; (8009c3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d00e      	beq.n	8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a15      	ldr	r2, [pc, #84]	; (8009c30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d009      	beq.n	8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a16      	ldr	r2, [pc, #88]	; (8009c40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d004      	beq.n	8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a15      	ldr	r2, [pc, #84]	; (8009c44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d10c      	bne.n	8009c0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	40010000 	.word	0x40010000
 8009c30:	40010400 	.word	0x40010400
 8009c34:	40000400 	.word	0x40000400
 8009c38:	40000800 	.word	0x40000800
 8009c3c:	40000c00 	.word	0x40000c00
 8009c40:	40014000 	.word	0x40014000
 8009c44:	40001800 	.word	0x40001800

08009c48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c52:	2300      	movs	r3, #0
 8009c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d101      	bne.n	8009c64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c60:	2302      	movs	r3, #2
 8009c62:	e065      	b.n	8009d30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	041b      	lsls	r3, r3, #16
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a16      	ldr	r2, [pc, #88]	; (8009d3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d004      	beq.n	8009cf2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a14      	ldr	r2, [pc, #80]	; (8009d40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d115      	bne.n	8009d1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	051b      	lsls	r3, r3, #20
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	40010000 	.word	0x40010000
 8009d40:	40010400 	.word	0x40010400

08009d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e040      	b.n	8009e14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d106      	bne.n	8009da8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7f8 ffe6 	bl	8002d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2224      	movs	r2, #36	; 0x24
 8009dac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f022 0201 	bic.w	r2, r2, #1
 8009dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f82c 	bl	8009e1c <UART_SetConfig>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d101      	bne.n	8009dce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e022      	b.n	8009e14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 faca 	bl	800a370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689a      	ldr	r2, [r3, #8]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0201 	orr.w	r2, r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fb51 	bl	800a4b4 <UART_CheckIdleState>
 8009e12:	4603      	mov	r3, r0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009e24:	2300      	movs	r3, #0
 8009e26:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	689a      	ldr	r2, [r3, #8]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	431a      	orrs	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	431a      	orrs	r2, r3
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	4bb1      	ldr	r3, [pc, #708]	; (800a110 <UART_SetConfig+0x2f4>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	6812      	ldr	r2, [r2, #0]
 8009e52:	6939      	ldr	r1, [r7, #16]
 8009e54:	430b      	orrs	r3, r1
 8009e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	68da      	ldr	r2, [r3, #12]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a1b      	ldr	r3, [r3, #32]
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a9f      	ldr	r2, [pc, #636]	; (800a114 <UART_SetConfig+0x2f8>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d121      	bne.n	8009ee0 <UART_SetConfig+0xc4>
 8009e9c:	4b9e      	ldr	r3, [pc, #632]	; (800a118 <UART_SetConfig+0x2fc>)
 8009e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ea2:	f003 0303 	and.w	r3, r3, #3
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d816      	bhi.n	8009ed8 <UART_SetConfig+0xbc>
 8009eaa:	a201      	add	r2, pc, #4	; (adr r2, 8009eb0 <UART_SetConfig+0x94>)
 8009eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb0:	08009ec1 	.word	0x08009ec1
 8009eb4:	08009ecd 	.word	0x08009ecd
 8009eb8:	08009ec7 	.word	0x08009ec7
 8009ebc:	08009ed3 	.word	0x08009ed3
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	77fb      	strb	r3, [r7, #31]
 8009ec4:	e151      	b.n	800a16a <UART_SetConfig+0x34e>
 8009ec6:	2302      	movs	r3, #2
 8009ec8:	77fb      	strb	r3, [r7, #31]
 8009eca:	e14e      	b.n	800a16a <UART_SetConfig+0x34e>
 8009ecc:	2304      	movs	r3, #4
 8009ece:	77fb      	strb	r3, [r7, #31]
 8009ed0:	e14b      	b.n	800a16a <UART_SetConfig+0x34e>
 8009ed2:	2308      	movs	r3, #8
 8009ed4:	77fb      	strb	r3, [r7, #31]
 8009ed6:	e148      	b.n	800a16a <UART_SetConfig+0x34e>
 8009ed8:	2310      	movs	r3, #16
 8009eda:	77fb      	strb	r3, [r7, #31]
 8009edc:	bf00      	nop
 8009ede:	e144      	b.n	800a16a <UART_SetConfig+0x34e>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a8d      	ldr	r2, [pc, #564]	; (800a11c <UART_SetConfig+0x300>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d134      	bne.n	8009f54 <UART_SetConfig+0x138>
 8009eea:	4b8b      	ldr	r3, [pc, #556]	; (800a118 <UART_SetConfig+0x2fc>)
 8009eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef0:	f003 030c 	and.w	r3, r3, #12
 8009ef4:	2b0c      	cmp	r3, #12
 8009ef6:	d829      	bhi.n	8009f4c <UART_SetConfig+0x130>
 8009ef8:	a201      	add	r2, pc, #4	; (adr r2, 8009f00 <UART_SetConfig+0xe4>)
 8009efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efe:	bf00      	nop
 8009f00:	08009f35 	.word	0x08009f35
 8009f04:	08009f4d 	.word	0x08009f4d
 8009f08:	08009f4d 	.word	0x08009f4d
 8009f0c:	08009f4d 	.word	0x08009f4d
 8009f10:	08009f41 	.word	0x08009f41
 8009f14:	08009f4d 	.word	0x08009f4d
 8009f18:	08009f4d 	.word	0x08009f4d
 8009f1c:	08009f4d 	.word	0x08009f4d
 8009f20:	08009f3b 	.word	0x08009f3b
 8009f24:	08009f4d 	.word	0x08009f4d
 8009f28:	08009f4d 	.word	0x08009f4d
 8009f2c:	08009f4d 	.word	0x08009f4d
 8009f30:	08009f47 	.word	0x08009f47
 8009f34:	2300      	movs	r3, #0
 8009f36:	77fb      	strb	r3, [r7, #31]
 8009f38:	e117      	b.n	800a16a <UART_SetConfig+0x34e>
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	77fb      	strb	r3, [r7, #31]
 8009f3e:	e114      	b.n	800a16a <UART_SetConfig+0x34e>
 8009f40:	2304      	movs	r3, #4
 8009f42:	77fb      	strb	r3, [r7, #31]
 8009f44:	e111      	b.n	800a16a <UART_SetConfig+0x34e>
 8009f46:	2308      	movs	r3, #8
 8009f48:	77fb      	strb	r3, [r7, #31]
 8009f4a:	e10e      	b.n	800a16a <UART_SetConfig+0x34e>
 8009f4c:	2310      	movs	r3, #16
 8009f4e:	77fb      	strb	r3, [r7, #31]
 8009f50:	bf00      	nop
 8009f52:	e10a      	b.n	800a16a <UART_SetConfig+0x34e>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a71      	ldr	r2, [pc, #452]	; (800a120 <UART_SetConfig+0x304>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d120      	bne.n	8009fa0 <UART_SetConfig+0x184>
 8009f5e:	4b6e      	ldr	r3, [pc, #440]	; (800a118 <UART_SetConfig+0x2fc>)
 8009f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f68:	2b10      	cmp	r3, #16
 8009f6a:	d00f      	beq.n	8009f8c <UART_SetConfig+0x170>
 8009f6c:	2b10      	cmp	r3, #16
 8009f6e:	d802      	bhi.n	8009f76 <UART_SetConfig+0x15a>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <UART_SetConfig+0x164>
 8009f74:	e010      	b.n	8009f98 <UART_SetConfig+0x17c>
 8009f76:	2b20      	cmp	r3, #32
 8009f78:	d005      	beq.n	8009f86 <UART_SetConfig+0x16a>
 8009f7a:	2b30      	cmp	r3, #48	; 0x30
 8009f7c:	d009      	beq.n	8009f92 <UART_SetConfig+0x176>
 8009f7e:	e00b      	b.n	8009f98 <UART_SetConfig+0x17c>
 8009f80:	2300      	movs	r3, #0
 8009f82:	77fb      	strb	r3, [r7, #31]
 8009f84:	e0f1      	b.n	800a16a <UART_SetConfig+0x34e>
 8009f86:	2302      	movs	r3, #2
 8009f88:	77fb      	strb	r3, [r7, #31]
 8009f8a:	e0ee      	b.n	800a16a <UART_SetConfig+0x34e>
 8009f8c:	2304      	movs	r3, #4
 8009f8e:	77fb      	strb	r3, [r7, #31]
 8009f90:	e0eb      	b.n	800a16a <UART_SetConfig+0x34e>
 8009f92:	2308      	movs	r3, #8
 8009f94:	77fb      	strb	r3, [r7, #31]
 8009f96:	e0e8      	b.n	800a16a <UART_SetConfig+0x34e>
 8009f98:	2310      	movs	r3, #16
 8009f9a:	77fb      	strb	r3, [r7, #31]
 8009f9c:	bf00      	nop
 8009f9e:	e0e4      	b.n	800a16a <UART_SetConfig+0x34e>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a5f      	ldr	r2, [pc, #380]	; (800a124 <UART_SetConfig+0x308>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d120      	bne.n	8009fec <UART_SetConfig+0x1d0>
 8009faa:	4b5b      	ldr	r3, [pc, #364]	; (800a118 <UART_SetConfig+0x2fc>)
 8009fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009fb4:	2b40      	cmp	r3, #64	; 0x40
 8009fb6:	d00f      	beq.n	8009fd8 <UART_SetConfig+0x1bc>
 8009fb8:	2b40      	cmp	r3, #64	; 0x40
 8009fba:	d802      	bhi.n	8009fc2 <UART_SetConfig+0x1a6>
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d005      	beq.n	8009fcc <UART_SetConfig+0x1b0>
 8009fc0:	e010      	b.n	8009fe4 <UART_SetConfig+0x1c8>
 8009fc2:	2b80      	cmp	r3, #128	; 0x80
 8009fc4:	d005      	beq.n	8009fd2 <UART_SetConfig+0x1b6>
 8009fc6:	2bc0      	cmp	r3, #192	; 0xc0
 8009fc8:	d009      	beq.n	8009fde <UART_SetConfig+0x1c2>
 8009fca:	e00b      	b.n	8009fe4 <UART_SetConfig+0x1c8>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	77fb      	strb	r3, [r7, #31]
 8009fd0:	e0cb      	b.n	800a16a <UART_SetConfig+0x34e>
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	77fb      	strb	r3, [r7, #31]
 8009fd6:	e0c8      	b.n	800a16a <UART_SetConfig+0x34e>
 8009fd8:	2304      	movs	r3, #4
 8009fda:	77fb      	strb	r3, [r7, #31]
 8009fdc:	e0c5      	b.n	800a16a <UART_SetConfig+0x34e>
 8009fde:	2308      	movs	r3, #8
 8009fe0:	77fb      	strb	r3, [r7, #31]
 8009fe2:	e0c2      	b.n	800a16a <UART_SetConfig+0x34e>
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	77fb      	strb	r3, [r7, #31]
 8009fe8:	bf00      	nop
 8009fea:	e0be      	b.n	800a16a <UART_SetConfig+0x34e>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a4d      	ldr	r2, [pc, #308]	; (800a128 <UART_SetConfig+0x30c>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d124      	bne.n	800a040 <UART_SetConfig+0x224>
 8009ff6:	4b48      	ldr	r3, [pc, #288]	; (800a118 <UART_SetConfig+0x2fc>)
 8009ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a004:	d012      	beq.n	800a02c <UART_SetConfig+0x210>
 800a006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a00a:	d802      	bhi.n	800a012 <UART_SetConfig+0x1f6>
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d007      	beq.n	800a020 <UART_SetConfig+0x204>
 800a010:	e012      	b.n	800a038 <UART_SetConfig+0x21c>
 800a012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a016:	d006      	beq.n	800a026 <UART_SetConfig+0x20a>
 800a018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a01c:	d009      	beq.n	800a032 <UART_SetConfig+0x216>
 800a01e:	e00b      	b.n	800a038 <UART_SetConfig+0x21c>
 800a020:	2300      	movs	r3, #0
 800a022:	77fb      	strb	r3, [r7, #31]
 800a024:	e0a1      	b.n	800a16a <UART_SetConfig+0x34e>
 800a026:	2302      	movs	r3, #2
 800a028:	77fb      	strb	r3, [r7, #31]
 800a02a:	e09e      	b.n	800a16a <UART_SetConfig+0x34e>
 800a02c:	2304      	movs	r3, #4
 800a02e:	77fb      	strb	r3, [r7, #31]
 800a030:	e09b      	b.n	800a16a <UART_SetConfig+0x34e>
 800a032:	2308      	movs	r3, #8
 800a034:	77fb      	strb	r3, [r7, #31]
 800a036:	e098      	b.n	800a16a <UART_SetConfig+0x34e>
 800a038:	2310      	movs	r3, #16
 800a03a:	77fb      	strb	r3, [r7, #31]
 800a03c:	bf00      	nop
 800a03e:	e094      	b.n	800a16a <UART_SetConfig+0x34e>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a39      	ldr	r2, [pc, #228]	; (800a12c <UART_SetConfig+0x310>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d124      	bne.n	800a094 <UART_SetConfig+0x278>
 800a04a:	4b33      	ldr	r3, [pc, #204]	; (800a118 <UART_SetConfig+0x2fc>)
 800a04c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a050:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a058:	d012      	beq.n	800a080 <UART_SetConfig+0x264>
 800a05a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a05e:	d802      	bhi.n	800a066 <UART_SetConfig+0x24a>
 800a060:	2b00      	cmp	r3, #0
 800a062:	d007      	beq.n	800a074 <UART_SetConfig+0x258>
 800a064:	e012      	b.n	800a08c <UART_SetConfig+0x270>
 800a066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a06a:	d006      	beq.n	800a07a <UART_SetConfig+0x25e>
 800a06c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a070:	d009      	beq.n	800a086 <UART_SetConfig+0x26a>
 800a072:	e00b      	b.n	800a08c <UART_SetConfig+0x270>
 800a074:	2301      	movs	r3, #1
 800a076:	77fb      	strb	r3, [r7, #31]
 800a078:	e077      	b.n	800a16a <UART_SetConfig+0x34e>
 800a07a:	2302      	movs	r3, #2
 800a07c:	77fb      	strb	r3, [r7, #31]
 800a07e:	e074      	b.n	800a16a <UART_SetConfig+0x34e>
 800a080:	2304      	movs	r3, #4
 800a082:	77fb      	strb	r3, [r7, #31]
 800a084:	e071      	b.n	800a16a <UART_SetConfig+0x34e>
 800a086:	2308      	movs	r3, #8
 800a088:	77fb      	strb	r3, [r7, #31]
 800a08a:	e06e      	b.n	800a16a <UART_SetConfig+0x34e>
 800a08c:	2310      	movs	r3, #16
 800a08e:	77fb      	strb	r3, [r7, #31]
 800a090:	bf00      	nop
 800a092:	e06a      	b.n	800a16a <UART_SetConfig+0x34e>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a25      	ldr	r2, [pc, #148]	; (800a130 <UART_SetConfig+0x314>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d124      	bne.n	800a0e8 <UART_SetConfig+0x2cc>
 800a09e:	4b1e      	ldr	r3, [pc, #120]	; (800a118 <UART_SetConfig+0x2fc>)
 800a0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a0a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ac:	d012      	beq.n	800a0d4 <UART_SetConfig+0x2b8>
 800a0ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0b2:	d802      	bhi.n	800a0ba <UART_SetConfig+0x29e>
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d007      	beq.n	800a0c8 <UART_SetConfig+0x2ac>
 800a0b8:	e012      	b.n	800a0e0 <UART_SetConfig+0x2c4>
 800a0ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0be:	d006      	beq.n	800a0ce <UART_SetConfig+0x2b2>
 800a0c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0c4:	d009      	beq.n	800a0da <UART_SetConfig+0x2be>
 800a0c6:	e00b      	b.n	800a0e0 <UART_SetConfig+0x2c4>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	77fb      	strb	r3, [r7, #31]
 800a0cc:	e04d      	b.n	800a16a <UART_SetConfig+0x34e>
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	77fb      	strb	r3, [r7, #31]
 800a0d2:	e04a      	b.n	800a16a <UART_SetConfig+0x34e>
 800a0d4:	2304      	movs	r3, #4
 800a0d6:	77fb      	strb	r3, [r7, #31]
 800a0d8:	e047      	b.n	800a16a <UART_SetConfig+0x34e>
 800a0da:	2308      	movs	r3, #8
 800a0dc:	77fb      	strb	r3, [r7, #31]
 800a0de:	e044      	b.n	800a16a <UART_SetConfig+0x34e>
 800a0e0:	2310      	movs	r3, #16
 800a0e2:	77fb      	strb	r3, [r7, #31]
 800a0e4:	bf00      	nop
 800a0e6:	e040      	b.n	800a16a <UART_SetConfig+0x34e>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a11      	ldr	r2, [pc, #68]	; (800a134 <UART_SetConfig+0x318>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d139      	bne.n	800a166 <UART_SetConfig+0x34a>
 800a0f2:	4b09      	ldr	r3, [pc, #36]	; (800a118 <UART_SetConfig+0x2fc>)
 800a0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a0fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a100:	d027      	beq.n	800a152 <UART_SetConfig+0x336>
 800a102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a106:	d817      	bhi.n	800a138 <UART_SetConfig+0x31c>
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d01c      	beq.n	800a146 <UART_SetConfig+0x32a>
 800a10c:	e027      	b.n	800a15e <UART_SetConfig+0x342>
 800a10e:	bf00      	nop
 800a110:	efff69f3 	.word	0xefff69f3
 800a114:	40011000 	.word	0x40011000
 800a118:	40023800 	.word	0x40023800
 800a11c:	40004400 	.word	0x40004400
 800a120:	40004800 	.word	0x40004800
 800a124:	40004c00 	.word	0x40004c00
 800a128:	40005000 	.word	0x40005000
 800a12c:	40011400 	.word	0x40011400
 800a130:	40007800 	.word	0x40007800
 800a134:	40007c00 	.word	0x40007c00
 800a138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a13c:	d006      	beq.n	800a14c <UART_SetConfig+0x330>
 800a13e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a142:	d009      	beq.n	800a158 <UART_SetConfig+0x33c>
 800a144:	e00b      	b.n	800a15e <UART_SetConfig+0x342>
 800a146:	2300      	movs	r3, #0
 800a148:	77fb      	strb	r3, [r7, #31]
 800a14a:	e00e      	b.n	800a16a <UART_SetConfig+0x34e>
 800a14c:	2302      	movs	r3, #2
 800a14e:	77fb      	strb	r3, [r7, #31]
 800a150:	e00b      	b.n	800a16a <UART_SetConfig+0x34e>
 800a152:	2304      	movs	r3, #4
 800a154:	77fb      	strb	r3, [r7, #31]
 800a156:	e008      	b.n	800a16a <UART_SetConfig+0x34e>
 800a158:	2308      	movs	r3, #8
 800a15a:	77fb      	strb	r3, [r7, #31]
 800a15c:	e005      	b.n	800a16a <UART_SetConfig+0x34e>
 800a15e:	2310      	movs	r3, #16
 800a160:	77fb      	strb	r3, [r7, #31]
 800a162:	bf00      	nop
 800a164:	e001      	b.n	800a16a <UART_SetConfig+0x34e>
 800a166:	2310      	movs	r3, #16
 800a168:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a172:	d17f      	bne.n	800a274 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a174:	7ffb      	ldrb	r3, [r7, #31]
 800a176:	2b08      	cmp	r3, #8
 800a178:	d85c      	bhi.n	800a234 <UART_SetConfig+0x418>
 800a17a:	a201      	add	r2, pc, #4	; (adr r2, 800a180 <UART_SetConfig+0x364>)
 800a17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a180:	0800a1a5 	.word	0x0800a1a5
 800a184:	0800a1c5 	.word	0x0800a1c5
 800a188:	0800a1e5 	.word	0x0800a1e5
 800a18c:	0800a235 	.word	0x0800a235
 800a190:	0800a1fd 	.word	0x0800a1fd
 800a194:	0800a235 	.word	0x0800a235
 800a198:	0800a235 	.word	0x0800a235
 800a19c:	0800a235 	.word	0x0800a235
 800a1a0:	0800a21d 	.word	0x0800a21d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1a4:	f7fc fbc8 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 800a1a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	005a      	lsls	r2, r3, #1
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	085b      	lsrs	r3, r3, #1
 800a1b4:	441a      	add	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	61bb      	str	r3, [r7, #24]
        break;
 800a1c2:	e03a      	b.n	800a23a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1c4:	f7fc fbcc 	bl	8006960 <HAL_RCC_GetPCLK2Freq>
 800a1c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	005a      	lsls	r2, r3, #1
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	085b      	lsrs	r3, r3, #1
 800a1d4:	441a      	add	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	61bb      	str	r3, [r7, #24]
        break;
 800a1e2:	e02a      	b.n	800a23a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	085a      	lsrs	r2, r3, #1
 800a1ea:	4b5f      	ldr	r3, [pc, #380]	; (800a368 <UART_SetConfig+0x54c>)
 800a1ec:	4413      	add	r3, r2
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	6852      	ldr	r2, [r2, #4]
 800a1f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	61bb      	str	r3, [r7, #24]
        break;
 800a1fa:	e01e      	b.n	800a23a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1fc:	f7fc fade 	bl	80067bc <HAL_RCC_GetSysClockFreq>
 800a200:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	005a      	lsls	r2, r3, #1
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	085b      	lsrs	r3, r3, #1
 800a20c:	441a      	add	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	fbb2 f3f3 	udiv	r3, r2, r3
 800a216:	b29b      	uxth	r3, r3
 800a218:	61bb      	str	r3, [r7, #24]
        break;
 800a21a:	e00e      	b.n	800a23a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	085b      	lsrs	r3, r3, #1
 800a222:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22e:	b29b      	uxth	r3, r3
 800a230:	61bb      	str	r3, [r7, #24]
        break;
 800a232:	e002      	b.n	800a23a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	75fb      	strb	r3, [r7, #23]
        break;
 800a238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	2b0f      	cmp	r3, #15
 800a23e:	d916      	bls.n	800a26e <UART_SetConfig+0x452>
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a246:	d212      	bcs.n	800a26e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	f023 030f 	bic.w	r3, r3, #15
 800a250:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	085b      	lsrs	r3, r3, #1
 800a256:	b29b      	uxth	r3, r3
 800a258:	f003 0307 	and.w	r3, r3, #7
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	897b      	ldrh	r3, [r7, #10]
 800a260:	4313      	orrs	r3, r2
 800a262:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	897a      	ldrh	r2, [r7, #10]
 800a26a:	60da      	str	r2, [r3, #12]
 800a26c:	e070      	b.n	800a350 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	75fb      	strb	r3, [r7, #23]
 800a272:	e06d      	b.n	800a350 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a274:	7ffb      	ldrb	r3, [r7, #31]
 800a276:	2b08      	cmp	r3, #8
 800a278:	d859      	bhi.n	800a32e <UART_SetConfig+0x512>
 800a27a:	a201      	add	r2, pc, #4	; (adr r2, 800a280 <UART_SetConfig+0x464>)
 800a27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a280:	0800a2a5 	.word	0x0800a2a5
 800a284:	0800a2c3 	.word	0x0800a2c3
 800a288:	0800a2e1 	.word	0x0800a2e1
 800a28c:	0800a32f 	.word	0x0800a32f
 800a290:	0800a2f9 	.word	0x0800a2f9
 800a294:	0800a32f 	.word	0x0800a32f
 800a298:	0800a32f 	.word	0x0800a32f
 800a29c:	0800a32f 	.word	0x0800a32f
 800a2a0:	0800a317 	.word	0x0800a317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2a4:	f7fc fb48 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 800a2a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	085a      	lsrs	r2, r3, #1
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	441a      	add	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	61bb      	str	r3, [r7, #24]
        break;
 800a2c0:	e038      	b.n	800a334 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2c2:	f7fc fb4d 	bl	8006960 <HAL_RCC_GetPCLK2Freq>
 800a2c6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	085a      	lsrs	r2, r3, #1
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	441a      	add	r2, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	61bb      	str	r3, [r7, #24]
        break;
 800a2de:	e029      	b.n	800a334 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	085a      	lsrs	r2, r3, #1
 800a2e6:	4b21      	ldr	r3, [pc, #132]	; (800a36c <UART_SetConfig+0x550>)
 800a2e8:	4413      	add	r3, r2
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	6852      	ldr	r2, [r2, #4]
 800a2ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	61bb      	str	r3, [r7, #24]
        break;
 800a2f6:	e01d      	b.n	800a334 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2f8:	f7fc fa60 	bl	80067bc <HAL_RCC_GetSysClockFreq>
 800a2fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	085a      	lsrs	r2, r3, #1
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	441a      	add	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a310:	b29b      	uxth	r3, r3
 800a312:	61bb      	str	r3, [r7, #24]
        break;
 800a314:	e00e      	b.n	800a334 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	085b      	lsrs	r3, r3, #1
 800a31c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	fbb2 f3f3 	udiv	r3, r2, r3
 800a328:	b29b      	uxth	r3, r3
 800a32a:	61bb      	str	r3, [r7, #24]
        break;
 800a32c:	e002      	b.n	800a334 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	75fb      	strb	r3, [r7, #23]
        break;
 800a332:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	2b0f      	cmp	r3, #15
 800a338:	d908      	bls.n	800a34c <UART_SetConfig+0x530>
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a340:	d204      	bcs.n	800a34c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69ba      	ldr	r2, [r7, #24]
 800a348:	60da      	str	r2, [r3, #12]
 800a34a:	e001      	b.n	800a350 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3720      	adds	r7, #32
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	01e84800 	.word	0x01e84800
 800a36c:	00f42400 	.word	0x00f42400

0800a370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00a      	beq.n	800a39a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39e:	f003 0302 	and.w	r3, r3, #2
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00a      	beq.n	800a3bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	430a      	orrs	r2, r1
 800a3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c0:	f003 0304 	and.w	r3, r3, #4
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00a      	beq.n	800a3de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	430a      	orrs	r2, r1
 800a3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	f003 0308 	and.w	r3, r3, #8
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	430a      	orrs	r2, r1
 800a3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	f003 0310 	and.w	r3, r3, #16
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00a      	beq.n	800a422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a426:	f003 0320 	and.w	r3, r3, #32
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00a      	beq.n	800a444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	430a      	orrs	r2, r1
 800a442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d01a      	beq.n	800a486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	430a      	orrs	r2, r1
 800a464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a46a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a46e:	d10a      	bne.n	800a486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	430a      	orrs	r2, r1
 800a484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	605a      	str	r2, [r3, #4]
  }
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b086      	sub	sp, #24
 800a4b8:	af02      	add	r7, sp, #8
 800a4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a4c2:	f7f8 ff45 	bl	8003350 <HAL_GetTick>
 800a4c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 0308 	and.w	r3, r3, #8
 800a4d2:	2b08      	cmp	r3, #8
 800a4d4:	d10e      	bne.n	800a4f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f814 	bl	800a512 <UART_WaitOnFlagUntilTimeout>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	e00a      	b.n	800a50a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b084      	sub	sp, #16
 800a516:	af00      	add	r7, sp, #0
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	60b9      	str	r1, [r7, #8]
 800a51c:	603b      	str	r3, [r7, #0]
 800a51e:	4613      	mov	r3, r2
 800a520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a522:	e05d      	b.n	800a5e0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a524:	69bb      	ldr	r3, [r7, #24]
 800a526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52a:	d059      	beq.n	800a5e0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a52c:	f7f8 ff10 	bl	8003350 <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	69ba      	ldr	r2, [r7, #24]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d302      	bcc.n	800a542 <UART_WaitOnFlagUntilTimeout+0x30>
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d11b      	bne.n	800a57a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a550:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	689a      	ldr	r2, [r3, #8]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f022 0201 	bic.w	r2, r2, #1
 800a560:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2220      	movs	r2, #32
 800a566:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2220      	movs	r2, #32
 800a56c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2200      	movs	r2, #0
 800a572:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	e042      	b.n	800a600 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0304 	and.w	r3, r3, #4
 800a584:	2b00      	cmp	r3, #0
 800a586:	d02b      	beq.n	800a5e0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	69db      	ldr	r3, [r3, #28]
 800a58e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a596:	d123      	bne.n	800a5e0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5a0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	689a      	ldr	r2, [r3, #8]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f022 0201 	bic.w	r2, r2, #1
 800a5c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2220      	movs	r2, #32
 800a5c6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e00f      	b.n	800a600 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	69da      	ldr	r2, [r3, #28]
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	bf0c      	ite	eq
 800a5f0:	2301      	moveq	r3, #1
 800a5f2:	2300      	movne	r3, #0
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	79fb      	ldrb	r3, [r7, #7]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d092      	beq.n	800a524 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a612:	2300      	movs	r3, #0
 800a614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d027      	beq.n	800a672 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	4b2f      	ldr	r3, [pc, #188]	; (800a6e8 <FMC_SDRAM_Init+0xe0>)
 800a62c:	4013      	ands	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a638:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a63e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a644:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a64a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a650:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a656:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a65c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a662:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	601a      	str	r2, [r3, #0]
 800a670:	e032      	b.n	800a6d8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a67e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a688:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a68e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	4313      	orrs	r3, r2
 800a694:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	4b12      	ldr	r3, [pc, #72]	; (800a6e8 <FMC_SDRAM_Init+0xe0>)
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6ac:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a6b2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a6b8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a6be:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a6c4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	68ba      	ldr	r2, [r7, #8]
 800a6d6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	ffff8000 	.word	0xffff8000

0800a6ec <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b087      	sub	sp, #28
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d02e      	beq.n	800a764 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a712:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	3b01      	subs	r3, #1
 800a720:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a722:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	3b01      	subs	r3, #1
 800a72a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a72c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	3b01      	subs	r3, #1
 800a734:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a736:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	3b01      	subs	r3, #1
 800a73e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a740:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	3b01      	subs	r3, #1
 800a748:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a74a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	3b01      	subs	r3, #1
 800a752:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a754:	4313      	orrs	r3, r2
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	4313      	orrs	r3, r2
 800a75a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	609a      	str	r2, [r3, #8]
 800a762:	e039      	b.n	800a7d8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	4b1e      	ldr	r3, [pc, #120]	; (800a7e8 <FMC_SDRAM_Timing_Init+0xfc>)
 800a76e:	4013      	ands	r3, r2
 800a770:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	3b01      	subs	r3, #1
 800a778:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	3b01      	subs	r3, #1
 800a780:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a782:	4313      	orrs	r3, r2
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	4313      	orrs	r3, r2
 800a788:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a796:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7a6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a7b0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a7ba:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	371c      	adds	r7, #28
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	ff0f0fff 	.word	0xff0f0fff

0800a7ec <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a804:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	3b01      	subs	r3, #1
 800a80c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a80e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a816:	4313      	orrs	r3, r2
 800a818:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	371c      	adds	r7, #28
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a82e:	b480      	push	{r7}
 800a830:	b083      	sub	sp, #12
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
 800a836:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	695a      	ldr	r2, [r3, #20]
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	005b      	lsls	r3, r3, #1
 800a840:	431a      	orrs	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a854:	b084      	sub	sp, #16
 800a856:	b480      	push	{r7}
 800a858:	b085      	sub	sp, #20
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	f107 001c 	add.w	r0, r7, #28
 800a862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a86a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a86c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a86e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a872:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a876:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a87a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a87e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	4313      	orrs	r3, r2
 800a884:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685a      	ldr	r2, [r3, #4]
 800a88a:	4b07      	ldr	r3, [pc, #28]	; (800a8a8 <SDMMC_Init+0x54>)
 800a88c:	4013      	ands	r3, r2
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	431a      	orrs	r2, r3
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	b004      	add	sp, #16
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	ffff8100 	.word	0xffff8100

0800a8ac <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b082      	sub	sp, #8
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2203      	movs	r2, #3
 800a8d2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a8d4:	2002      	movs	r0, #2
 800a8d6:	f7f8 fd47 	bl	8003368 <HAL_Delay>
  
  return HAL_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0303 	and.w	r3, r3, #3
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a91e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a924:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a92a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	4313      	orrs	r3, r2
 800a930:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	4b06      	ldr	r3, [pc, #24]	; (800a950 <SDMMC_SendCommand+0x50>)
 800a938:	4013      	ands	r3, r2
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	431a      	orrs	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	fffff000 	.word	0xfffff000

0800a954 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	b2db      	uxtb	r3, r3
}
 800a962:	4618      	mov	r0, r3
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a96e:	b480      	push	{r7}
 800a970:	b085      	sub	sp, #20
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	3314      	adds	r3, #20
 800a97c:	461a      	mov	r2, r3
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	4413      	add	r3, r2
 800a982:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
}  
 800a988:	4618      	mov	r0, r3
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9ba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a9c0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a9c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a9de:	2300      	movs	r3, #0

}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b088      	sub	sp, #32
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a9fa:	2310      	movs	r3, #16
 800a9fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9fe:	2340      	movs	r3, #64	; 0x40
 800aa00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa02:	2300      	movs	r3, #0
 800aa04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa0c:	f107 0308 	add.w	r3, r7, #8
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff ff74 	bl	800a900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aa18:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa1c:	2110      	movs	r1, #16
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f976 	bl	800ad10 <SDMMC_GetCmdResp1>
 800aa24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa26:	69fb      	ldr	r3, [r7, #28]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3720      	adds	r7, #32
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08a      	sub	sp, #40	; 0x28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aa40:	2307      	movs	r3, #7
 800aa42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa44:	2340      	movs	r3, #64	; 0x40
 800aa46:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa50:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa52:	f107 0310 	add.w	r3, r7, #16
 800aa56:	4619      	mov	r1, r3
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f7ff ff51 	bl	800a900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800aa5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa62:	2107      	movs	r1, #7
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f000 f953 	bl	800ad10 <SDMMC_GetCmdResp1>
 800aa6a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3728      	adds	r7, #40	; 0x28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b088      	sub	sp, #32
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800aa86:	2300      	movs	r3, #0
 800aa88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa94:	f107 0308 	add.w	r3, r7, #8
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff ff30 	bl	800a900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f90d 	bl	800acc0 <SDMMC_GetCmdError>
 800aaa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaa8:	69fb      	ldr	r3, [r7, #28]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3720      	adds	r7, #32
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b088      	sub	sp, #32
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aaba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aabe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aac0:	2308      	movs	r3, #8
 800aac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aac4:	2340      	movs	r3, #64	; 0x40
 800aac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aac8:	2300      	movs	r3, #0
 800aaca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aacc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aad0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aad2:	f107 0308 	add.w	r3, r7, #8
 800aad6:	4619      	mov	r1, r3
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7ff ff11 	bl	800a900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 faf6 	bl	800b0d0 <SDMMC_GetCmdResp7>
 800aae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aae6:	69fb      	ldr	r3, [r7, #28]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3720      	adds	r7, #32
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b088      	sub	sp, #32
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aafe:	2337      	movs	r3, #55	; 0x37
 800ab00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab02:	2340      	movs	r3, #64	; 0x40
 800ab04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab06:	2300      	movs	r3, #0
 800ab08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab10:	f107 0308 	add.w	r3, r7, #8
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7ff fef2 	bl	800a900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ab1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab20:	2137      	movs	r1, #55	; 0x37
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f8f4 	bl	800ad10 <SDMMC_GetCmdResp1>
 800ab28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3720      	adds	r7, #32
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ab3e:	683a      	ldr	r2, [r7, #0]
 800ab40:	4b0d      	ldr	r3, [pc, #52]	; (800ab78 <SDMMC_CmdAppOperCommand+0x44>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ab46:	2329      	movs	r3, #41	; 0x29
 800ab48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab4a:	2340      	movs	r3, #64	; 0x40
 800ab4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab58:	f107 0308 	add.w	r3, r7, #8
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff fece 	bl	800a900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 fa05 	bl	800af74 <SDMMC_GetCmdResp3>
 800ab6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab6c:	69fb      	ldr	r3, [r7, #28]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3720      	adds	r7, #32
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	80100000 	.word	0x80100000

0800ab7c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b088      	sub	sp, #32
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ab8a:	2306      	movs	r3, #6
 800ab8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab8e:	2340      	movs	r3, #64	; 0x40
 800ab90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab92:	2300      	movs	r3, #0
 800ab94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab9c:	f107 0308 	add.w	r3, r7, #8
 800aba0:	4619      	mov	r1, r3
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f7ff feac 	bl	800a900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800aba8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abac:	2106      	movs	r1, #6
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 f8ae 	bl	800ad10 <SDMMC_GetCmdResp1>
 800abb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abb6:	69fb      	ldr	r3, [r7, #28]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3720      	adds	r7, #32
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800abcc:	2333      	movs	r3, #51	; 0x33
 800abce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abd0:	2340      	movs	r3, #64	; 0x40
 800abd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abd4:	2300      	movs	r3, #0
 800abd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abde:	f107 0308 	add.w	r3, r7, #8
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7ff fe8b 	bl	800a900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800abea:	f241 3288 	movw	r2, #5000	; 0x1388
 800abee:	2133      	movs	r1, #51	; 0x33
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f88d 	bl	800ad10 <SDMMC_GetCmdResp1>
 800abf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abf8:	69fb      	ldr	r3, [r7, #28]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3720      	adds	r7, #32
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b088      	sub	sp, #32
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ac0e:	2302      	movs	r3, #2
 800ac10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ac12:	23c0      	movs	r3, #192	; 0xc0
 800ac14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac16:	2300      	movs	r3, #0
 800ac18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac20:	f107 0308 	add.w	r3, r7, #8
 800ac24:	4619      	mov	r1, r3
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7ff fe6a 	bl	800a900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f95b 	bl	800aee8 <SDMMC_GetCmdResp2>
 800ac32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac34:	69fb      	ldr	r3, [r7, #28]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3720      	adds	r7, #32
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b088      	sub	sp, #32
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ac4c:	2309      	movs	r3, #9
 800ac4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ac50:	23c0      	movs	r3, #192	; 0xc0
 800ac52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac54:	2300      	movs	r3, #0
 800ac56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac5e:	f107 0308 	add.w	r3, r7, #8
 800ac62:	4619      	mov	r1, r3
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7ff fe4b 	bl	800a900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 f93c 	bl	800aee8 <SDMMC_GetCmdResp2>
 800ac70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac72:	69fb      	ldr	r3, [r7, #28]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3720      	adds	r7, #32
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ac86:	2300      	movs	r3, #0
 800ac88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac8e:	2340      	movs	r3, #64	; 0x40
 800ac90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac92:	2300      	movs	r3, #0
 800ac94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac9c:	f107 0308 	add.w	r3, r7, #8
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7ff fe2c 	bl	800a900 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aca8:	683a      	ldr	r2, [r7, #0]
 800acaa:	2103      	movs	r1, #3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 f99b 	bl	800afe8 <SDMMC_GetCmdResp6>
 800acb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acb4:	69fb      	ldr	r3, [r7, #28]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3720      	adds	r7, #32
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800acc0:	b490      	push	{r4, r7}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acc8:	4b0f      	ldr	r3, [pc, #60]	; (800ad08 <SDMMC_GetCmdError+0x48>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a0f      	ldr	r2, [pc, #60]	; (800ad0c <SDMMC_GetCmdError+0x4c>)
 800acce:	fba2 2303 	umull	r2, r3, r2, r3
 800acd2:	0a5b      	lsrs	r3, r3, #9
 800acd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800acdc:	4623      	mov	r3, r4
 800acde:	1e5c      	subs	r4, r3, #1
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ace4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ace8:	e009      	b.n	800acfe <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0f2      	beq.n	800acdc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	22c5      	movs	r2, #197	; 0xc5
 800acfa:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800acfc:	2300      	movs	r3, #0
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bc90      	pop	{r4, r7}
 800ad06:	4770      	bx	lr
 800ad08:	20000004 	.word	0x20000004
 800ad0c:	10624dd3 	.word	0x10624dd3

0800ad10 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ad10:	b590      	push	{r4, r7, lr}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	607a      	str	r2, [r7, #4]
 800ad1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ad1e:	4b6f      	ldr	r3, [pc, #444]	; (800aedc <SDMMC_GetCmdResp1+0x1cc>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a6f      	ldr	r2, [pc, #444]	; (800aee0 <SDMMC_GetCmdResp1+0x1d0>)
 800ad24:	fba2 2303 	umull	r2, r3, r2, r3
 800ad28:	0a5b      	lsrs	r3, r3, #9
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ad30:	4623      	mov	r3, r4
 800ad32:	1e5c      	subs	r4, r3, #1
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad3c:	e0c9      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad42:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d0f0      	beq.n	800ad30 <SDMMC_GetCmdResp1+0x20>
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1eb      	bne.n	800ad30 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5c:	f003 0304 	and.w	r3, r3, #4
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d004      	beq.n	800ad6e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2204      	movs	r2, #4
 800ad68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad6a:	2304      	movs	r3, #4
 800ad6c:	e0b1      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d004      	beq.n	800ad84 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad80:	2301      	movs	r3, #1
 800ad82:	e0a6      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	22c5      	movs	r2, #197	; 0xc5
 800ad88:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f7ff fde2 	bl	800a954 <SDMMC_GetCommandResponse>
 800ad90:	4603      	mov	r3, r0
 800ad92:	461a      	mov	r2, r3
 800ad94:	7afb      	ldrb	r3, [r7, #11]
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d001      	beq.n	800ad9e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e099      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ad9e:	2100      	movs	r1, #0
 800ada0:	68f8      	ldr	r0, [r7, #12]
 800ada2:	f7ff fde4 	bl	800a96e <SDMMC_GetResponse>
 800ada6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ada8:	693a      	ldr	r2, [r7, #16]
 800adaa:	4b4e      	ldr	r3, [pc, #312]	; (800aee4 <SDMMC_GetCmdResp1+0x1d4>)
 800adac:	4013      	ands	r3, r2
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d101      	bne.n	800adb6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800adb2:	2300      	movs	r3, #0
 800adb4:	e08d      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	da02      	bge.n	800adc2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800adbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800adc0:	e087      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d001      	beq.n	800add0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800adcc:	2340      	movs	r3, #64	; 0x40
 800adce:	e080      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800adda:	2380      	movs	r3, #128	; 0x80
 800addc:	e079      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ade8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adec:	e071      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800adf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adfc:	e069      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ae08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae0c:	e061      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d002      	beq.n	800ae1e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ae18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae1c:	e059      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae2c:	e051      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae3c:	e049      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d002      	beq.n	800ae4e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ae48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae4c:	e041      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d002      	beq.n	800ae5e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800ae58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae5c:	e039      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d002      	beq.n	800ae6e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ae68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ae6c:	e031      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d002      	beq.n	800ae7e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ae78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ae7c:	e029      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d002      	beq.n	800ae8e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ae88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ae8c:	e021      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ae98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ae9c:	e019      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aea8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aeac:	e011      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d002      	beq.n	800aebe <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aeb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aebc:	e009      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	f003 0308 	and.w	r3, r3, #8
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aec8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aecc:	e001      	b.n	800aed2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	371c      	adds	r7, #28
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd90      	pop	{r4, r7, pc}
 800aeda:	bf00      	nop
 800aedc:	20000004 	.word	0x20000004
 800aee0:	10624dd3 	.word	0x10624dd3
 800aee4:	fdffe008 	.word	0xfdffe008

0800aee8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800aee8:	b490      	push	{r4, r7}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aef0:	4b1e      	ldr	r3, [pc, #120]	; (800af6c <SDMMC_GetCmdResp2+0x84>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a1e      	ldr	r2, [pc, #120]	; (800af70 <SDMMC_GetCmdResp2+0x88>)
 800aef6:	fba2 2303 	umull	r2, r3, r2, r3
 800aefa:	0a5b      	lsrs	r3, r3, #9
 800aefc:	f241 3288 	movw	r2, #5000	; 0x1388
 800af00:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800af04:	4623      	mov	r3, r4
 800af06:	1e5c      	subs	r4, r3, #1
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d102      	bne.n	800af12 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af10:	e026      	b.n	800af60 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af16:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0f0      	beq.n	800af04 <SDMMC_GetCmdResp2+0x1c>
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1eb      	bne.n	800af04 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af30:	f003 0304 	and.w	r3, r3, #4
 800af34:	2b00      	cmp	r3, #0
 800af36:	d004      	beq.n	800af42 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2204      	movs	r2, #4
 800af3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af3e:	2304      	movs	r3, #4
 800af40:	e00e      	b.n	800af60 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d004      	beq.n	800af58 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2201      	movs	r2, #1
 800af52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af54:	2301      	movs	r3, #1
 800af56:	e003      	b.n	800af60 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	22c5      	movs	r2, #197	; 0xc5
 800af5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bc90      	pop	{r4, r7}
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	20000004 	.word	0x20000004
 800af70:	10624dd3 	.word	0x10624dd3

0800af74 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800af74:	b490      	push	{r4, r7}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af7c:	4b18      	ldr	r3, [pc, #96]	; (800afe0 <SDMMC_GetCmdResp3+0x6c>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a18      	ldr	r2, [pc, #96]	; (800afe4 <SDMMC_GetCmdResp3+0x70>)
 800af82:	fba2 2303 	umull	r2, r3, r2, r3
 800af86:	0a5b      	lsrs	r3, r3, #9
 800af88:	f241 3288 	movw	r2, #5000	; 0x1388
 800af8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800af90:	4623      	mov	r3, r4
 800af92:	1e5c      	subs	r4, r3, #1
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af9c:	e01b      	b.n	800afd6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0f0      	beq.n	800af90 <SDMMC_GetCmdResp3+0x1c>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1eb      	bne.n	800af90 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d004      	beq.n	800afce <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2204      	movs	r2, #4
 800afc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afca:	2304      	movs	r3, #4
 800afcc:	e003      	b.n	800afd6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	22c5      	movs	r2, #197	; 0xc5
 800afd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bc90      	pop	{r4, r7}
 800afde:	4770      	bx	lr
 800afe0:	20000004 	.word	0x20000004
 800afe4:	10624dd3 	.word	0x10624dd3

0800afe8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800afe8:	b590      	push	{r4, r7, lr}
 800afea:	b087      	sub	sp, #28
 800afec:	af00      	add	r7, sp, #0
 800afee:	60f8      	str	r0, [r7, #12]
 800aff0:	460b      	mov	r3, r1
 800aff2:	607a      	str	r2, [r7, #4]
 800aff4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aff6:	4b34      	ldr	r3, [pc, #208]	; (800b0c8 <SDMMC_GetCmdResp6+0xe0>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a34      	ldr	r2, [pc, #208]	; (800b0cc <SDMMC_GetCmdResp6+0xe4>)
 800affc:	fba2 2303 	umull	r2, r3, r2, r3
 800b000:	0a5b      	lsrs	r3, r3, #9
 800b002:	f241 3288 	movw	r2, #5000	; 0x1388
 800b006:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b00a:	4623      	mov	r3, r4
 800b00c:	1e5c      	subs	r4, r3, #1
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d102      	bne.n	800b018 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b012:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b016:	e052      	b.n	800b0be <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b01c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b024:	2b00      	cmp	r3, #0
 800b026:	d0f0      	beq.n	800b00a <SDMMC_GetCmdResp6+0x22>
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1eb      	bne.n	800b00a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b036:	f003 0304 	and.w	r3, r3, #4
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d004      	beq.n	800b048 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2204      	movs	r2, #4
 800b042:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b044:	2304      	movs	r3, #4
 800b046:	e03a      	b.n	800b0be <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	2b00      	cmp	r3, #0
 800b052:	d004      	beq.n	800b05e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2201      	movs	r2, #1
 800b058:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e02f      	b.n	800b0be <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f7ff fc78 	bl	800a954 <SDMMC_GetCommandResponse>
 800b064:	4603      	mov	r3, r0
 800b066:	461a      	mov	r2, r3
 800b068:	7afb      	ldrb	r3, [r7, #11]
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d001      	beq.n	800b072 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b06e:	2301      	movs	r3, #1
 800b070:	e025      	b.n	800b0be <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	22c5      	movs	r2, #197	; 0xc5
 800b076:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b078:	2100      	movs	r1, #0
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f7ff fc77 	bl	800a96e <SDMMC_GetResponse>
 800b080:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d106      	bne.n	800b09a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	0c1b      	lsrs	r3, r3, #16
 800b090:	b29a      	uxth	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b096:	2300      	movs	r3, #0
 800b098:	e011      	b.n	800b0be <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b0a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0a8:	e009      	b.n	800b0be <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d002      	beq.n	800b0ba <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b0b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0b8:	e001      	b.n	800b0be <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b0ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	371c      	adds	r7, #28
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd90      	pop	{r4, r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20000004 	.word	0x20000004
 800b0cc:	10624dd3 	.word	0x10624dd3

0800b0d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b0d0:	b490      	push	{r4, r7}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0d8:	4b21      	ldr	r3, [pc, #132]	; (800b160 <SDMMC_GetCmdResp7+0x90>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a21      	ldr	r2, [pc, #132]	; (800b164 <SDMMC_GetCmdResp7+0x94>)
 800b0de:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e2:	0a5b      	lsrs	r3, r3, #9
 800b0e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b0ec:	4623      	mov	r3, r4
 800b0ee:	1e5c      	subs	r4, r3, #1
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d102      	bne.n	800b0fa <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0f8:	e02c      	b.n	800b154 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0f0      	beq.n	800b0ec <SDMMC_GetCmdResp7+0x1c>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1eb      	bne.n	800b0ec <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d004      	beq.n	800b12a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2204      	movs	r2, #4
 800b124:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b126:	2304      	movs	r3, #4
 800b128:	e014      	b.n	800b154 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d004      	beq.n	800b140 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2201      	movs	r2, #1
 800b13a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e009      	b.n	800b154 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2240      	movs	r2, #64	; 0x40
 800b150:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b152:	2300      	movs	r3, #0
  
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bc90      	pop	{r4, r7}
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	20000004 	.word	0x20000004
 800b164:	10624dd3 	.word	0x10624dd3

0800b168 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b08c      	sub	sp, #48	; 0x30
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a51      	ldr	r2, [pc, #324]	; (800b2b8 <I2Cx_MspInit+0x150>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d14d      	bne.n	800b214 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b178:	4b50      	ldr	r3, [pc, #320]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b17c:	4a4f      	ldr	r2, [pc, #316]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b17e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b182:	6313      	str	r3, [r2, #48]	; 0x30
 800b184:	4b4d      	ldr	r3, [pc, #308]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b18c:	61bb      	str	r3, [r7, #24]
 800b18e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800b190:	2380      	movs	r3, #128	; 0x80
 800b192:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b194:	2312      	movs	r3, #18
 800b196:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b198:	2300      	movs	r3, #0
 800b19a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b19c:	2302      	movs	r3, #2
 800b19e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800b1a0:	2304      	movs	r3, #4
 800b1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b1a4:	f107 031c 	add.w	r3, r7, #28
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4845      	ldr	r0, [pc, #276]	; (800b2c0 <I2Cx_MspInit+0x158>)
 800b1ac:	f7f9 fa3a 	bl	8004624 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800b1b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b1b6:	f107 031c 	add.w	r3, r7, #28
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	4840      	ldr	r0, [pc, #256]	; (800b2c0 <I2Cx_MspInit+0x158>)
 800b1be:	f7f9 fa31 	bl	8004624 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800b1c2:	4b3e      	ldr	r3, [pc, #248]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c6:	4a3d      	ldr	r2, [pc, #244]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b1c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b1cc:	6413      	str	r3, [r2, #64]	; 0x40
 800b1ce:	4b3b      	ldr	r3, [pc, #236]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1d6:	617b      	str	r3, [r7, #20]
 800b1d8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800b1da:	4b38      	ldr	r3, [pc, #224]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	4a37      	ldr	r2, [pc, #220]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b1e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b1e4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800b1e6:	4b35      	ldr	r3, [pc, #212]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b1e8:	6a1b      	ldr	r3, [r3, #32]
 800b1ea:	4a34      	ldr	r2, [pc, #208]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b1ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b1f0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	210f      	movs	r1, #15
 800b1f6:	2048      	movs	r0, #72	; 0x48
 800b1f8:	f7f8 fc18 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800b1fc:	2048      	movs	r0, #72	; 0x48
 800b1fe:	f7f8 fc31 	bl	8003a64 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800b202:	2200      	movs	r2, #0
 800b204:	210f      	movs	r1, #15
 800b206:	2049      	movs	r0, #73	; 0x49
 800b208:	f7f8 fc10 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800b20c:	2049      	movs	r0, #73	; 0x49
 800b20e:	f7f8 fc29 	bl	8003a64 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800b212:	e04d      	b.n	800b2b0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b214:	4b29      	ldr	r3, [pc, #164]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b218:	4a28      	ldr	r2, [pc, #160]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b21a:	f043 0302 	orr.w	r3, r3, #2
 800b21e:	6313      	str	r3, [r2, #48]	; 0x30
 800b220:	4b26      	ldr	r3, [pc, #152]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b224:	f003 0302 	and.w	r3, r3, #2
 800b228:	613b      	str	r3, [r7, #16]
 800b22a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800b22c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b230:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b232:	2312      	movs	r3, #18
 800b234:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800b236:	2300      	movs	r3, #0
 800b238:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800b23a:	2302      	movs	r3, #2
 800b23c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800b23e:	2304      	movs	r3, #4
 800b240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b242:	f107 031c 	add.w	r3, r7, #28
 800b246:	4619      	mov	r1, r3
 800b248:	481e      	ldr	r0, [pc, #120]	; (800b2c4 <I2Cx_MspInit+0x15c>)
 800b24a:	f7f9 f9eb 	bl	8004624 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800b24e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b254:	f107 031c 	add.w	r3, r7, #28
 800b258:	4619      	mov	r1, r3
 800b25a:	481a      	ldr	r0, [pc, #104]	; (800b2c4 <I2Cx_MspInit+0x15c>)
 800b25c:	f7f9 f9e2 	bl	8004624 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800b260:	4b16      	ldr	r3, [pc, #88]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b264:	4a15      	ldr	r2, [pc, #84]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b26a:	6413      	str	r3, [r2, #64]	; 0x40
 800b26c:	4b13      	ldr	r3, [pc, #76]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800b278:	4b10      	ldr	r3, [pc, #64]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b27a:	6a1b      	ldr	r3, [r3, #32]
 800b27c:	4a0f      	ldr	r2, [pc, #60]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b27e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b282:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800b284:	4b0d      	ldr	r3, [pc, #52]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b286:	6a1b      	ldr	r3, [r3, #32]
 800b288:	4a0c      	ldr	r2, [pc, #48]	; (800b2bc <I2Cx_MspInit+0x154>)
 800b28a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b28e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800b290:	2200      	movs	r2, #0
 800b292:	210f      	movs	r1, #15
 800b294:	201f      	movs	r0, #31
 800b296:	f7f8 fbc9 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800b29a:	201f      	movs	r0, #31
 800b29c:	f7f8 fbe2 	bl	8003a64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	210f      	movs	r1, #15
 800b2a4:	2020      	movs	r0, #32
 800b2a6:	f7f8 fbc1 	bl	8003a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800b2aa:	2020      	movs	r0, #32
 800b2ac:	f7f8 fbda 	bl	8003a64 <HAL_NVIC_EnableIRQ>
}
 800b2b0:	bf00      	nop
 800b2b2:	3730      	adds	r7, #48	; 0x30
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	200000d0 	.word	0x200000d0
 800b2bc:	40023800 	.word	0x40023800
 800b2c0:	40021c00 	.word	0x40021c00
 800b2c4:	40020400 	.word	0x40020400

0800b2c8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7f9 ff87 	bl	80051e4 <HAL_I2C_GetState>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d125      	bne.n	800b328 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a14      	ldr	r2, [pc, #80]	; (800b330 <I2Cx_Init+0x68>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d103      	bne.n	800b2ec <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a13      	ldr	r2, [pc, #76]	; (800b334 <I2Cx_Init+0x6c>)
 800b2e8:	601a      	str	r2, [r3, #0]
 800b2ea:	e002      	b.n	800b2f2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a12      	ldr	r2, [pc, #72]	; (800b338 <I2Cx_Init+0x70>)
 800b2f0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a11      	ldr	r2, [pc, #68]	; (800b33c <I2Cx_Init+0x74>)
 800b2f6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f7ff ff23 	bl	800b168 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7f9 fc70 	bl	8004c08 <HAL_I2C_Init>
  }
}
 800b328:	bf00      	nop
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	200000d0 	.word	0x200000d0
 800b334:	40005c00 	.word	0x40005c00
 800b338:	40005400 	.word	0x40005400
 800b33c:	40912732 	.word	0x40912732

0800b340 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b08a      	sub	sp, #40	; 0x28
 800b344:	af04      	add	r7, sp, #16
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	4608      	mov	r0, r1
 800b34a:	4611      	mov	r1, r2
 800b34c:	461a      	mov	r2, r3
 800b34e:	4603      	mov	r3, r0
 800b350:	72fb      	strb	r3, [r7, #11]
 800b352:	460b      	mov	r3, r1
 800b354:	813b      	strh	r3, [r7, #8]
 800b356:	4613      	mov	r3, r2
 800b358:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b35e:	7afb      	ldrb	r3, [r7, #11]
 800b360:	b299      	uxth	r1, r3
 800b362:	88f8      	ldrh	r0, [r7, #6]
 800b364:	893a      	ldrh	r2, [r7, #8]
 800b366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b36a:	9302      	str	r3, [sp, #8]
 800b36c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b36e:	9301      	str	r3, [sp, #4]
 800b370:	6a3b      	ldr	r3, [r7, #32]
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	4603      	mov	r3, r0
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f7f9 fe1a 	bl	8004fb0 <HAL_I2C_Mem_Read>
 800b37c:	4603      	mov	r3, r0
 800b37e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800b380:	7dfb      	ldrb	r3, [r7, #23]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d004      	beq.n	800b390 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800b386:	7afb      	ldrb	r3, [r7, #11]
 800b388:	4619      	mov	r1, r3
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f000 f832 	bl	800b3f4 <I2Cx_Error>
  }
  return status;    
 800b390:	7dfb      	ldrb	r3, [r7, #23]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3718      	adds	r7, #24
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}

0800b39a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800b39a:	b580      	push	{r7, lr}
 800b39c:	b08a      	sub	sp, #40	; 0x28
 800b39e:	af04      	add	r7, sp, #16
 800b3a0:	60f8      	str	r0, [r7, #12]
 800b3a2:	4608      	mov	r0, r1
 800b3a4:	4611      	mov	r1, r2
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	72fb      	strb	r3, [r7, #11]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	813b      	strh	r3, [r7, #8]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b3b8:	7afb      	ldrb	r3, [r7, #11]
 800b3ba:	b299      	uxth	r1, r3
 800b3bc:	88f8      	ldrh	r0, [r7, #6]
 800b3be:	893a      	ldrh	r2, [r7, #8]
 800b3c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3c4:	9302      	str	r3, [sp, #8]
 800b3c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	9300      	str	r3, [sp, #0]
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7f9 fcd9 	bl	8004d88 <HAL_I2C_Mem_Write>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800b3da:	7dfb      	ldrb	r3, [r7, #23]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800b3e0:	7afb      	ldrb	r3, [r7, #11]
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f000 f805 	bl	800b3f4 <I2Cx_Error>
  }
  return status;
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3718      	adds	r7, #24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7f9 fc91 	bl	8004d28 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7ff ff5e 	bl	800b2c8 <I2Cx_Init>
}
 800b40c:	bf00      	nop
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}

0800b414 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800b418:	4802      	ldr	r0, [pc, #8]	; (800b424 <TS_IO_Init+0x10>)
 800b41a:	f7ff ff55 	bl	800b2c8 <I2Cx_Init>
}
 800b41e:	bf00      	nop
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	200000d0 	.word	0x200000d0

0800b428 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af02      	add	r7, sp, #8
 800b42e:	4603      	mov	r3, r0
 800b430:	71fb      	strb	r3, [r7, #7]
 800b432:	460b      	mov	r3, r1
 800b434:	71bb      	strb	r3, [r7, #6]
 800b436:	4613      	mov	r3, r2
 800b438:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800b43a:	79bb      	ldrb	r3, [r7, #6]
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	79f9      	ldrb	r1, [r7, #7]
 800b440:	2301      	movs	r3, #1
 800b442:	9301      	str	r3, [sp, #4]
 800b444:	1d7b      	adds	r3, r7, #5
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	2301      	movs	r3, #1
 800b44a:	4803      	ldr	r0, [pc, #12]	; (800b458 <TS_IO_Write+0x30>)
 800b44c:	f7ff ffa5 	bl	800b39a <I2Cx_WriteMultiple>
}
 800b450:	bf00      	nop
 800b452:	3708      	adds	r7, #8
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	200000d0 	.word	0x200000d0

0800b45c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b086      	sub	sp, #24
 800b460:	af02      	add	r7, sp, #8
 800b462:	4603      	mov	r3, r0
 800b464:	460a      	mov	r2, r1
 800b466:	71fb      	strb	r3, [r7, #7]
 800b468:	4613      	mov	r3, r2
 800b46a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800b46c:	2300      	movs	r3, #0
 800b46e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800b470:	79bb      	ldrb	r3, [r7, #6]
 800b472:	b29a      	uxth	r2, r3
 800b474:	79f9      	ldrb	r1, [r7, #7]
 800b476:	2301      	movs	r3, #1
 800b478:	9301      	str	r3, [sp, #4]
 800b47a:	f107 030f 	add.w	r3, r7, #15
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	2301      	movs	r3, #1
 800b482:	4804      	ldr	r0, [pc, #16]	; (800b494 <TS_IO_Read+0x38>)
 800b484:	f7ff ff5c 	bl	800b340 <I2Cx_ReadMultiple>

  return read_value;
 800b488:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	200000d0 	.word	0x200000d0

0800b498 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f7f7 ff61 	bl	8003368 <HAL_Delay>
}
 800b4a6:	bf00      	nop
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800b4b4:	4b31      	ldr	r3, [pc, #196]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b4b6:	2228      	movs	r2, #40	; 0x28
 800b4b8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800b4ba:	4b30      	ldr	r3, [pc, #192]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b4bc:	2209      	movs	r2, #9
 800b4be:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800b4c0:	4b2e      	ldr	r3, [pc, #184]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b4c2:	2235      	movs	r2, #53	; 0x35
 800b4c4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800b4c6:	4b2d      	ldr	r3, [pc, #180]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b4c8:	220b      	movs	r2, #11
 800b4ca:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800b4cc:	4b2b      	ldr	r3, [pc, #172]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b4ce:	f240 121b 	movw	r2, #283	; 0x11b
 800b4d2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800b4d4:	4b29      	ldr	r3, [pc, #164]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b4d6:	f240 2215 	movw	r2, #533	; 0x215
 800b4da:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800b4dc:	4b27      	ldr	r3, [pc, #156]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b4de:	f240 121d 	movw	r2, #285	; 0x11d
 800b4e2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800b4e4:	4b25      	ldr	r3, [pc, #148]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b4e6:	f240 2235 	movw	r2, #565	; 0x235
 800b4ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	4823      	ldr	r0, [pc, #140]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b4f0:	f000 fe1a 	bl	800c128 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800b4f4:	4b21      	ldr	r3, [pc, #132]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b4f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b4fa:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800b4fc:	4b1f      	ldr	r3, [pc, #124]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b4fe:	f44f 7288 	mov.w	r2, #272	; 0x110
 800b502:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800b504:	4b1d      	ldr	r3, [pc, #116]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b506:	2200      	movs	r2, #0
 800b508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800b50c:	4b1b      	ldr	r3, [pc, #108]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b50e:	2200      	movs	r2, #0
 800b510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800b514:	4b19      	ldr	r3, [pc, #100]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b516:	2200      	movs	r2, #0
 800b518:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800b51c:	4b17      	ldr	r3, [pc, #92]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b51e:	2200      	movs	r2, #0
 800b520:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800b522:	4b16      	ldr	r3, [pc, #88]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b524:	2200      	movs	r2, #0
 800b526:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800b528:	4b14      	ldr	r3, [pc, #80]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b52a:	2200      	movs	r2, #0
 800b52c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800b52e:	4b13      	ldr	r3, [pc, #76]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b530:	2200      	movs	r2, #0
 800b532:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800b534:	4b11      	ldr	r3, [pc, #68]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b536:	4a12      	ldr	r2, [pc, #72]	; (800b580 <BSP_LCD_Init+0xd0>)
 800b538:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800b53a:	4810      	ldr	r0, [pc, #64]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b53c:	f7fa fae4 	bl	8005b08 <HAL_LTDC_GetState>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d103      	bne.n	800b54e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800b546:	2100      	movs	r1, #0
 800b548:	480c      	ldr	r0, [pc, #48]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b54a:	f000 fd13 	bl	800bf74 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800b54e:	480b      	ldr	r0, [pc, #44]	; (800b57c <BSP_LCD_Init+0xcc>)
 800b550:	f7fa f90a 	bl	8005768 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800b554:	2201      	movs	r2, #1
 800b556:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b55a:	480a      	ldr	r0, [pc, #40]	; (800b584 <BSP_LCD_Init+0xd4>)
 800b55c:	f7f9 fb16 	bl	8004b8c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800b560:	2201      	movs	r2, #1
 800b562:	2108      	movs	r1, #8
 800b564:	4808      	ldr	r0, [pc, #32]	; (800b588 <BSP_LCD_Init+0xd8>)
 800b566:	f7f9 fb11 	bl	8004b8c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800b56a:	f000 fefd 	bl	800c368 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800b56e:	4807      	ldr	r0, [pc, #28]	; (800b58c <BSP_LCD_Init+0xdc>)
 800b570:	f000 f8d8 	bl	800b724 <BSP_LCD_SetFont>
  
  return LCD_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	20000a9c 	.word	0x20000a9c
 800b580:	40016800 	.word	0x40016800
 800b584:	40022000 	.word	0x40022000
 800b588:	40022800 	.word	0x40022800
 800b58c:	20000010 	.word	0x20000010

0800b590 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800b590:	b480      	push	{r7}
 800b592:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800b594:	4b06      	ldr	r3, [pc, #24]	; (800b5b0 <BSP_LCD_GetXSize+0x20>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a06      	ldr	r2, [pc, #24]	; (800b5b4 <BSP_LCD_GetXSize+0x24>)
 800b59a:	2134      	movs	r1, #52	; 0x34
 800b59c:	fb01 f303 	mul.w	r3, r1, r3
 800b5a0:	4413      	add	r3, r2
 800b5a2:	3360      	adds	r3, #96	; 0x60
 800b5a4:	681b      	ldr	r3, [r3, #0]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	2000015c 	.word	0x2000015c
 800b5b4:	20000a9c 	.word	0x20000a9c

0800b5b8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800b5bc:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <BSP_LCD_GetYSize+0x20>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a06      	ldr	r2, [pc, #24]	; (800b5dc <BSP_LCD_GetYSize+0x24>)
 800b5c2:	2134      	movs	r1, #52	; 0x34
 800b5c4:	fb01 f303 	mul.w	r3, r1, r3
 800b5c8:	4413      	add	r3, r2
 800b5ca:	3364      	adds	r3, #100	; 0x64
 800b5cc:	681b      	ldr	r3, [r3, #0]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	2000015c 	.word	0x2000015c
 800b5dc:	20000a9c 	.word	0x20000a9c

0800b5e0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b090      	sub	sp, #64	; 0x40
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	6039      	str	r1, [r7, #0]
 800b5ea:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800b5f0:	f7ff ffce 	bl	800b590 <BSP_LCD_GetXSize>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800b5fc:	f7ff ffdc 	bl	800b5b8 <BSP_LCD_GetYSize>
 800b600:	4603      	mov	r3, r0
 800b602:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800b604:	2300      	movs	r3, #0
 800b606:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800b60c:	23ff      	movs	r3, #255	; 0xff
 800b60e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800b610:	2300      	movs	r3, #0
 800b612:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800b614:	2300      	movs	r3, #0
 800b616:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800b61a:	2300      	movs	r3, #0
 800b61c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 800b620:	2300      	movs	r3, #0
 800b622:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800b626:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b62a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800b62c:	2307      	movs	r3, #7
 800b62e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800b630:	f7ff ffae 	bl	800b590 <BSP_LCD_GetXSize>
 800b634:	4603      	mov	r3, r0
 800b636:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800b638:	f7ff ffbe 	bl	800b5b8 <BSP_LCD_GetYSize>
 800b63c:	4603      	mov	r3, r0
 800b63e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800b640:	88fa      	ldrh	r2, [r7, #6]
 800b642:	f107 030c 	add.w	r3, r7, #12
 800b646:	4619      	mov	r1, r3
 800b648:	4812      	ldr	r0, [pc, #72]	; (800b694 <BSP_LCD_LayerDefaultInit+0xb4>)
 800b64a:	f7fa fa1f 	bl	8005a8c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800b64e:	88fa      	ldrh	r2, [r7, #6]
 800b650:	4911      	ldr	r1, [pc, #68]	; (800b698 <BSP_LCD_LayerDefaultInit+0xb8>)
 800b652:	4613      	mov	r3, r2
 800b654:	005b      	lsls	r3, r3, #1
 800b656:	4413      	add	r3, r2
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	440b      	add	r3, r1
 800b65c:	3304      	adds	r3, #4
 800b65e:	f04f 32ff 	mov.w	r2, #4294967295
 800b662:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800b664:	88fa      	ldrh	r2, [r7, #6]
 800b666:	490c      	ldr	r1, [pc, #48]	; (800b698 <BSP_LCD_LayerDefaultInit+0xb8>)
 800b668:	4613      	mov	r3, r2
 800b66a:	005b      	lsls	r3, r3, #1
 800b66c:	4413      	add	r3, r2
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	440b      	add	r3, r1
 800b672:	3308      	adds	r3, #8
 800b674:	4a09      	ldr	r2, [pc, #36]	; (800b69c <BSP_LCD_LayerDefaultInit+0xbc>)
 800b676:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800b678:	88fa      	ldrh	r2, [r7, #6]
 800b67a:	4907      	ldr	r1, [pc, #28]	; (800b698 <BSP_LCD_LayerDefaultInit+0xb8>)
 800b67c:	4613      	mov	r3, r2
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	440b      	add	r3, r1
 800b686:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800b68a:	601a      	str	r2, [r3, #0]
}
 800b68c:	bf00      	nop
 800b68e:	3740      	adds	r7, #64	; 0x40
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	20000a9c 	.word	0x20000a9c
 800b698:	20000160 	.word	0x20000160
 800b69c:	20000010 	.word	0x20000010

0800b6a0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800b6a8:	4a04      	ldr	r2, [pc, #16]	; (800b6bc <BSP_LCD_SelectLayer+0x1c>)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6013      	str	r3, [r2, #0]
} 
 800b6ae:	bf00      	nop
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	2000015c 	.word	0x2000015c

0800b6c0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800b6c8:	4b07      	ldr	r3, [pc, #28]	; (800b6e8 <BSP_LCD_SetTextColor+0x28>)
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	4907      	ldr	r1, [pc, #28]	; (800b6ec <BSP_LCD_SetTextColor+0x2c>)
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	005b      	lsls	r3, r3, #1
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	601a      	str	r2, [r3, #0]
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	2000015c 	.word	0x2000015c
 800b6ec:	20000160 	.word	0x20000160

0800b6f0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800b6f8:	4b08      	ldr	r3, [pc, #32]	; (800b71c <BSP_LCD_SetBackColor+0x2c>)
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	4908      	ldr	r1, [pc, #32]	; (800b720 <BSP_LCD_SetBackColor+0x30>)
 800b6fe:	4613      	mov	r3, r2
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	4413      	add	r3, r2
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	440b      	add	r3, r1
 800b708:	3304      	adds	r3, #4
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	601a      	str	r2, [r3, #0]
}
 800b70e:	bf00      	nop
 800b710:	370c      	adds	r7, #12
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	2000015c 	.word	0x2000015c
 800b720:	20000160 	.word	0x20000160

0800b724 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800b72c:	4b08      	ldr	r3, [pc, #32]	; (800b750 <BSP_LCD_SetFont+0x2c>)
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	4908      	ldr	r1, [pc, #32]	; (800b754 <BSP_LCD_SetFont+0x30>)
 800b732:	4613      	mov	r3, r2
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	4413      	add	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	440b      	add	r3, r1
 800b73c:	3308      	adds	r3, #8
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	601a      	str	r2, [r3, #0]
}
 800b742:	bf00      	nop
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	2000015c 	.word	0x2000015c
 800b754:	20000160 	.word	0x20000160

0800b758 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800b758:	b480      	push	{r7}
 800b75a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800b75c:	4b07      	ldr	r3, [pc, #28]	; (800b77c <BSP_LCD_GetFont+0x24>)
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	4907      	ldr	r1, [pc, #28]	; (800b780 <BSP_LCD_GetFont+0x28>)
 800b762:	4613      	mov	r3, r2
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	4413      	add	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	440b      	add	r3, r1
 800b76c:	3308      	adds	r3, #8
 800b76e:	681b      	ldr	r3, [r3, #0]
}
 800b770:	4618      	mov	r0, r3
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	2000015c 	.word	0x2000015c
 800b780:	20000160 	.word	0x20000160

0800b784 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800b784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b786:	b085      	sub	sp, #20
 800b788:	af02      	add	r7, sp, #8
 800b78a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800b78c:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <BSP_LCD_Clear+0x48>)
 800b78e:	681c      	ldr	r4, [r3, #0]
 800b790:	4b0e      	ldr	r3, [pc, #56]	; (800b7cc <BSP_LCD_Clear+0x48>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a0e      	ldr	r2, [pc, #56]	; (800b7d0 <BSP_LCD_Clear+0x4c>)
 800b796:	2134      	movs	r1, #52	; 0x34
 800b798:	fb01 f303 	mul.w	r3, r1, r3
 800b79c:	4413      	add	r3, r2
 800b79e:	335c      	adds	r3, #92	; 0x5c
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	461d      	mov	r5, r3
 800b7a4:	f7ff fef4 	bl	800b590 <BSP_LCD_GetXSize>
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	f7ff ff05 	bl	800b5b8 <BSP_LCD_GetYSize>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	9301      	str	r3, [sp, #4]
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	4613      	mov	r3, r2
 800b7ba:	4632      	mov	r2, r6
 800b7bc:	4629      	mov	r1, r5
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f000 fd86 	bl	800c2d0 <LL_FillBuffer>
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7cc:	2000015c 	.word	0x2000015c
 800b7d0:	20000a9c 	.word	0x20000a9c

0800b7d4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800b7d4:	b590      	push	{r4, r7, lr}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	4603      	mov	r3, r0
 800b7dc:	80fb      	strh	r3, [r7, #6]
 800b7de:	460b      	mov	r3, r1
 800b7e0:	80bb      	strh	r3, [r7, #4]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800b7e6:	4b1b      	ldr	r3, [pc, #108]	; (800b854 <BSP_LCD_DisplayChar+0x80>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	491b      	ldr	r1, [pc, #108]	; (800b858 <BSP_LCD_DisplayChar+0x84>)
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	4413      	add	r3, r2
 800b7f2:	009b      	lsls	r3, r3, #2
 800b7f4:	440b      	add	r3, r1
 800b7f6:	3308      	adds	r3, #8
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	6819      	ldr	r1, [r3, #0]
 800b7fc:	78fb      	ldrb	r3, [r7, #3]
 800b7fe:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800b802:	4b14      	ldr	r3, [pc, #80]	; (800b854 <BSP_LCD_DisplayChar+0x80>)
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	4c14      	ldr	r4, [pc, #80]	; (800b858 <BSP_LCD_DisplayChar+0x84>)
 800b808:	4613      	mov	r3, r2
 800b80a:	005b      	lsls	r3, r3, #1
 800b80c:	4413      	add	r3, r2
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	4423      	add	r3, r4
 800b812:	3308      	adds	r3, #8
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800b818:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800b81c:	4b0d      	ldr	r3, [pc, #52]	; (800b854 <BSP_LCD_DisplayChar+0x80>)
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	4c0d      	ldr	r4, [pc, #52]	; (800b858 <BSP_LCD_DisplayChar+0x84>)
 800b822:	4613      	mov	r3, r2
 800b824:	005b      	lsls	r3, r3, #1
 800b826:	4413      	add	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4423      	add	r3, r4
 800b82c:	3308      	adds	r3, #8
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	889b      	ldrh	r3, [r3, #4]
 800b832:	3307      	adds	r3, #7
 800b834:	2b00      	cmp	r3, #0
 800b836:	da00      	bge.n	800b83a <BSP_LCD_DisplayChar+0x66>
 800b838:	3307      	adds	r3, #7
 800b83a:	10db      	asrs	r3, r3, #3
 800b83c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800b840:	18ca      	adds	r2, r1, r3
 800b842:	88b9      	ldrh	r1, [r7, #4]
 800b844:	88fb      	ldrh	r3, [r7, #6]
 800b846:	4618      	mov	r0, r3
 800b848:	f000 fc8a 	bl	800c160 <DrawChar>
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	bd90      	pop	{r4, r7, pc}
 800b854:	2000015c 	.word	0x2000015c
 800b858:	20000160 	.word	0x20000160

0800b85c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800b85c:	b5b0      	push	{r4, r5, r7, lr}
 800b85e:	b088      	sub	sp, #32
 800b860:	af00      	add	r7, sp, #0
 800b862:	60ba      	str	r2, [r7, #8]
 800b864:	461a      	mov	r2, r3
 800b866:	4603      	mov	r3, r0
 800b868:	81fb      	strh	r3, [r7, #14]
 800b86a:	460b      	mov	r3, r1
 800b86c:	81bb      	strh	r3, [r7, #12]
 800b86e:	4613      	mov	r3, r2
 800b870:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800b872:	2301      	movs	r3, #1
 800b874:	83fb      	strh	r3, [r7, #30]
 800b876:	2300      	movs	r3, #0
 800b878:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800b87a:	2300      	movs	r3, #0
 800b87c:	61bb      	str	r3, [r7, #24]
 800b87e:	2300      	movs	r3, #0
 800b880:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800b886:	e002      	b.n	800b88e <BSP_LCD_DisplayStringAt+0x32>
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	3301      	adds	r3, #1
 800b88c:	61bb      	str	r3, [r7, #24]
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	1c5a      	adds	r2, r3, #1
 800b892:	617a      	str	r2, [r7, #20]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1f6      	bne.n	800b888 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800b89a:	f7ff fe79 	bl	800b590 <BSP_LCD_GetXSize>
 800b89e:	4b4f      	ldr	r3, [pc, #316]	; (800b9dc <BSP_LCD_DisplayStringAt+0x180>)
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	494f      	ldr	r1, [pc, #316]	; (800b9e0 <BSP_LCD_DisplayStringAt+0x184>)
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	4413      	add	r3, r2
 800b8aa:	009b      	lsls	r3, r3, #2
 800b8ac:	440b      	add	r3, r1
 800b8ae:	3308      	adds	r3, #8
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	889b      	ldrh	r3, [r3, #4]
 800b8b4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b8b8:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800b8ba:	79fb      	ldrb	r3, [r7, #7]
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d01c      	beq.n	800b8fa <BSP_LCD_DisplayStringAt+0x9e>
 800b8c0:	2b03      	cmp	r3, #3
 800b8c2:	d017      	beq.n	800b8f4 <BSP_LCD_DisplayStringAt+0x98>
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d12e      	bne.n	800b926 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800b8c8:	693a      	ldr	r2, [r7, #16]
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	1ad1      	subs	r1, r2, r3
 800b8ce:	4b43      	ldr	r3, [pc, #268]	; (800b9dc <BSP_LCD_DisplayStringAt+0x180>)
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	4843      	ldr	r0, [pc, #268]	; (800b9e0 <BSP_LCD_DisplayStringAt+0x184>)
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	4413      	add	r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	4403      	add	r3, r0
 800b8de:	3308      	adds	r3, #8
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	889b      	ldrh	r3, [r3, #4]
 800b8e4:	fb03 f301 	mul.w	r3, r3, r1
 800b8e8:	085b      	lsrs	r3, r3, #1
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	89fb      	ldrh	r3, [r7, #14]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	83fb      	strh	r3, [r7, #30]
      break;
 800b8f2:	e01b      	b.n	800b92c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800b8f4:	89fb      	ldrh	r3, [r7, #14]
 800b8f6:	83fb      	strh	r3, [r7, #30]
      break;
 800b8f8:	e018      	b.n	800b92c <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	b299      	uxth	r1, r3
 800b902:	4b36      	ldr	r3, [pc, #216]	; (800b9dc <BSP_LCD_DisplayStringAt+0x180>)
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	4836      	ldr	r0, [pc, #216]	; (800b9e0 <BSP_LCD_DisplayStringAt+0x184>)
 800b908:	4613      	mov	r3, r2
 800b90a:	005b      	lsls	r3, r3, #1
 800b90c:	4413      	add	r3, r2
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	4403      	add	r3, r0
 800b912:	3308      	adds	r3, #8
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	889b      	ldrh	r3, [r3, #4]
 800b918:	fb11 f303 	smulbb	r3, r1, r3
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	89fb      	ldrh	r3, [r7, #14]
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	83fb      	strh	r3, [r7, #30]
      break;
 800b924:	e002      	b.n	800b92c <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 800b926:	89fb      	ldrh	r3, [r7, #14]
 800b928:	83fb      	strh	r3, [r7, #30]
      break;
 800b92a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800b92c:	8bfb      	ldrh	r3, [r7, #30]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <BSP_LCD_DisplayStringAt+0xde>
 800b932:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b936:	2b00      	cmp	r3, #0
 800b938:	da1d      	bge.n	800b976 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 800b93a:	2301      	movs	r3, #1
 800b93c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800b93e:	e01a      	b.n	800b976 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	781a      	ldrb	r2, [r3, #0]
 800b944:	89b9      	ldrh	r1, [r7, #12]
 800b946:	8bfb      	ldrh	r3, [r7, #30]
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff ff43 	bl	800b7d4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800b94e:	4b23      	ldr	r3, [pc, #140]	; (800b9dc <BSP_LCD_DisplayStringAt+0x180>)
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	4923      	ldr	r1, [pc, #140]	; (800b9e0 <BSP_LCD_DisplayStringAt+0x184>)
 800b954:	4613      	mov	r3, r2
 800b956:	005b      	lsls	r3, r3, #1
 800b958:	4413      	add	r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	440b      	add	r3, r1
 800b95e:	3308      	adds	r3, #8
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	889a      	ldrh	r2, [r3, #4]
 800b964:	8bfb      	ldrh	r3, [r7, #30]
 800b966:	4413      	add	r3, r2
 800b968:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	3301      	adds	r3, #1
 800b96e:	60bb      	str	r3, [r7, #8]
    i++;
 800b970:	8bbb      	ldrh	r3, [r7, #28]
 800b972:	3301      	adds	r3, #1
 800b974:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	bf14      	ite	ne
 800b97e:	2301      	movne	r3, #1
 800b980:	2300      	moveq	r3, #0
 800b982:	b2dc      	uxtb	r4, r3
 800b984:	f7ff fe04 	bl	800b590 <BSP_LCD_GetXSize>
 800b988:	4605      	mov	r5, r0
 800b98a:	8bb9      	ldrh	r1, [r7, #28]
 800b98c:	4b13      	ldr	r3, [pc, #76]	; (800b9dc <BSP_LCD_DisplayStringAt+0x180>)
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	4813      	ldr	r0, [pc, #76]	; (800b9e0 <BSP_LCD_DisplayStringAt+0x184>)
 800b992:	4613      	mov	r3, r2
 800b994:	005b      	lsls	r3, r3, #1
 800b996:	4413      	add	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4403      	add	r3, r0
 800b99c:	3308      	adds	r3, #8
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	889b      	ldrh	r3, [r3, #4]
 800b9a2:	fb03 f301 	mul.w	r3, r3, r1
 800b9a6:	1aeb      	subs	r3, r5, r3
 800b9a8:	b299      	uxth	r1, r3
 800b9aa:	4b0c      	ldr	r3, [pc, #48]	; (800b9dc <BSP_LCD_DisplayStringAt+0x180>)
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	480c      	ldr	r0, [pc, #48]	; (800b9e0 <BSP_LCD_DisplayStringAt+0x184>)
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	005b      	lsls	r3, r3, #1
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4403      	add	r3, r0
 800b9ba:	3308      	adds	r3, #8
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	889b      	ldrh	r3, [r3, #4]
 800b9c0:	4299      	cmp	r1, r3
 800b9c2:	bf2c      	ite	cs
 800b9c4:	2301      	movcs	r3, #1
 800b9c6:	2300      	movcc	r3, #0
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	4023      	ands	r3, r4
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1b6      	bne.n	800b940 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 800b9d2:	bf00      	nop
 800b9d4:	3720      	adds	r7, #32
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bdb0      	pop	{r4, r5, r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	2000015c 	.word	0x2000015c
 800b9e0:	20000160 	.word	0x20000160

0800b9e4 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	6039      	str	r1, [r7, #0]
 800b9ee:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800b9f0:	f7ff feb2 	bl	800b758 <BSP_LCD_GetFont>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	88db      	ldrh	r3, [r3, #6]
 800b9f8:	88fa      	ldrh	r2, [r7, #6]
 800b9fa:	fb12 f303 	smulbb	r3, r2, r3
 800b9fe:	b299      	uxth	r1, r3
 800ba00:	2303      	movs	r3, #3
 800ba02:	683a      	ldr	r2, [r7, #0]
 800ba04:	2000      	movs	r0, #0
 800ba06:	f7ff ff29 	bl	800b85c <BSP_LCD_DisplayStringAt>
}
 800ba0a:	bf00      	nop
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800ba14:	b5b0      	push	{r4, r5, r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af02      	add	r7, sp, #8
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	80fb      	strh	r3, [r7, #6]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	80bb      	strh	r3, [r7, #4]
 800ba22:	4613      	mov	r3, r2
 800ba24:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800ba26:	2300      	movs	r3, #0
 800ba28:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800ba2a:	4b26      	ldr	r3, [pc, #152]	; (800bac4 <BSP_LCD_DrawHLine+0xb0>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a26      	ldr	r2, [pc, #152]	; (800bac8 <BSP_LCD_DrawHLine+0xb4>)
 800ba30:	2134      	movs	r1, #52	; 0x34
 800ba32:	fb01 f303 	mul.w	r3, r1, r3
 800ba36:	4413      	add	r3, r2
 800ba38:	3348      	adds	r3, #72	; 0x48
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d114      	bne.n	800ba6a <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800ba40:	4b20      	ldr	r3, [pc, #128]	; (800bac4 <BSP_LCD_DrawHLine+0xb0>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a20      	ldr	r2, [pc, #128]	; (800bac8 <BSP_LCD_DrawHLine+0xb4>)
 800ba46:	2134      	movs	r1, #52	; 0x34
 800ba48:	fb01 f303 	mul.w	r3, r1, r3
 800ba4c:	4413      	add	r3, r2
 800ba4e:	335c      	adds	r3, #92	; 0x5c
 800ba50:	681c      	ldr	r4, [r3, #0]
 800ba52:	f7ff fd9d 	bl	800b590 <BSP_LCD_GetXSize>
 800ba56:	4602      	mov	r2, r0
 800ba58:	88bb      	ldrh	r3, [r7, #4]
 800ba5a:	fb03 f202 	mul.w	r2, r3, r2
 800ba5e:	88fb      	ldrh	r3, [r7, #6]
 800ba60:	4413      	add	r3, r2
 800ba62:	005b      	lsls	r3, r3, #1
 800ba64:	4423      	add	r3, r4
 800ba66:	60fb      	str	r3, [r7, #12]
 800ba68:	e013      	b.n	800ba92 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800ba6a:	4b16      	ldr	r3, [pc, #88]	; (800bac4 <BSP_LCD_DrawHLine+0xb0>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a16      	ldr	r2, [pc, #88]	; (800bac8 <BSP_LCD_DrawHLine+0xb4>)
 800ba70:	2134      	movs	r1, #52	; 0x34
 800ba72:	fb01 f303 	mul.w	r3, r1, r3
 800ba76:	4413      	add	r3, r2
 800ba78:	335c      	adds	r3, #92	; 0x5c
 800ba7a:	681c      	ldr	r4, [r3, #0]
 800ba7c:	f7ff fd88 	bl	800b590 <BSP_LCD_GetXSize>
 800ba80:	4602      	mov	r2, r0
 800ba82:	88bb      	ldrh	r3, [r7, #4]
 800ba84:	fb03 f202 	mul.w	r2, r3, r2
 800ba88:	88fb      	ldrh	r3, [r7, #6]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	4423      	add	r3, r4
 800ba90:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800ba92:	4b0c      	ldr	r3, [pc, #48]	; (800bac4 <BSP_LCD_DrawHLine+0xb0>)
 800ba94:	6818      	ldr	r0, [r3, #0]
 800ba96:	68fc      	ldr	r4, [r7, #12]
 800ba98:	887d      	ldrh	r5, [r7, #2]
 800ba9a:	4b0a      	ldr	r3, [pc, #40]	; (800bac4 <BSP_LCD_DrawHLine+0xb0>)
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	490b      	ldr	r1, [pc, #44]	; (800bacc <BSP_LCD_DrawHLine+0xb8>)
 800baa0:	4613      	mov	r3, r2
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	4413      	add	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	440b      	add	r3, r1
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	9301      	str	r3, [sp, #4]
 800baae:	2300      	movs	r3, #0
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	2301      	movs	r3, #1
 800bab4:	462a      	mov	r2, r5
 800bab6:	4621      	mov	r1, r4
 800bab8:	f000 fc0a 	bl	800c2d0 <LL_FillBuffer>
}
 800babc:	bf00      	nop
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bdb0      	pop	{r4, r5, r7, pc}
 800bac4:	2000015c 	.word	0x2000015c
 800bac8:	20000a9c 	.word	0x20000a9c
 800bacc:	20000160 	.word	0x20000160

0800bad0 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800bad0:	b590      	push	{r4, r7, lr}
 800bad2:	b087      	sub	sp, #28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	4603      	mov	r3, r0
 800bad8:	80fb      	strh	r3, [r7, #6]
 800bada:	460b      	mov	r3, r1
 800badc:	80bb      	strh	r3, [r7, #4]
 800bade:	4613      	mov	r3, r2
 800bae0:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800bae2:	887b      	ldrh	r3, [r7, #2]
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	f1c3 0303 	rsb	r3, r3, #3
 800baea:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800baec:	2300      	movs	r3, #0
 800baee:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800baf0:	887b      	ldrh	r3, [r7, #2]
 800baf2:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 800baf4:	e0cf      	b.n	800bc96 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	88fb      	ldrh	r3, [r7, #6]
 800bafc:	4413      	add	r3, r2
 800bafe:	b298      	uxth	r0, r3
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	88ba      	ldrh	r2, [r7, #4]
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	b29c      	uxth	r4, r3
 800bb0a:	4b67      	ldr	r3, [pc, #412]	; (800bca8 <BSP_LCD_DrawCircle+0x1d8>)
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	4967      	ldr	r1, [pc, #412]	; (800bcac <BSP_LCD_DrawCircle+0x1dc>)
 800bb10:	4613      	mov	r3, r2
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	4413      	add	r3, r2
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	440b      	add	r3, r1
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	4621      	mov	r1, r4
 800bb20:	f000 f8c6 	bl	800bcb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	88fa      	ldrh	r2, [r7, #6]
 800bb2a:	1ad3      	subs	r3, r2, r3
 800bb2c:	b298      	uxth	r0, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	88ba      	ldrh	r2, [r7, #4]
 800bb34:	1ad3      	subs	r3, r2, r3
 800bb36:	b29c      	uxth	r4, r3
 800bb38:	4b5b      	ldr	r3, [pc, #364]	; (800bca8 <BSP_LCD_DrawCircle+0x1d8>)
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	495b      	ldr	r1, [pc, #364]	; (800bcac <BSP_LCD_DrawCircle+0x1dc>)
 800bb3e:	4613      	mov	r3, r2
 800bb40:	005b      	lsls	r3, r3, #1
 800bb42:	4413      	add	r3, r2
 800bb44:	009b      	lsls	r3, r3, #2
 800bb46:	440b      	add	r3, r1
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	f000 f8af 	bl	800bcb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	88fb      	ldrh	r3, [r7, #6]
 800bb58:	4413      	add	r3, r2
 800bb5a:	b298      	uxth	r0, r3
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	88ba      	ldrh	r2, [r7, #4]
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	b29c      	uxth	r4, r3
 800bb66:	4b50      	ldr	r3, [pc, #320]	; (800bca8 <BSP_LCD_DrawCircle+0x1d8>)
 800bb68:	681a      	ldr	r2, [r3, #0]
 800bb6a:	4950      	ldr	r1, [pc, #320]	; (800bcac <BSP_LCD_DrawCircle+0x1dc>)
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	005b      	lsls	r3, r3, #1
 800bb70:	4413      	add	r3, r2
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	440b      	add	r3, r1
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	461a      	mov	r2, r3
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	f000 f898 	bl	800bcb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	88fa      	ldrh	r2, [r7, #6]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	b298      	uxth	r0, r3
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	88ba      	ldrh	r2, [r7, #4]
 800bb90:	1ad3      	subs	r3, r2, r3
 800bb92:	b29c      	uxth	r4, r3
 800bb94:	4b44      	ldr	r3, [pc, #272]	; (800bca8 <BSP_LCD_DrawCircle+0x1d8>)
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	4944      	ldr	r1, [pc, #272]	; (800bcac <BSP_LCD_DrawCircle+0x1dc>)
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	005b      	lsls	r3, r3, #1
 800bb9e:	4413      	add	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	440b      	add	r3, r1
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	461a      	mov	r2, r3
 800bba8:	4621      	mov	r1, r4
 800bbaa:	f000 f881 	bl	800bcb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	88fb      	ldrh	r3, [r7, #6]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	b298      	uxth	r0, r3
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	b29a      	uxth	r2, r3
 800bbbc:	88bb      	ldrh	r3, [r7, #4]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	b29c      	uxth	r4, r3
 800bbc2:	4b39      	ldr	r3, [pc, #228]	; (800bca8 <BSP_LCD_DrawCircle+0x1d8>)
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	4939      	ldr	r1, [pc, #228]	; (800bcac <BSP_LCD_DrawCircle+0x1dc>)
 800bbc8:	4613      	mov	r3, r2
 800bbca:	005b      	lsls	r3, r3, #1
 800bbcc:	4413      	add	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	440b      	add	r3, r1
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	4621      	mov	r1, r4
 800bbd8:	f000 f86a 	bl	800bcb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	88fa      	ldrh	r2, [r7, #6]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	b298      	uxth	r0, r3
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	88bb      	ldrh	r3, [r7, #4]
 800bbec:	4413      	add	r3, r2
 800bbee:	b29c      	uxth	r4, r3
 800bbf0:	4b2d      	ldr	r3, [pc, #180]	; (800bca8 <BSP_LCD_DrawCircle+0x1d8>)
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	492d      	ldr	r1, [pc, #180]	; (800bcac <BSP_LCD_DrawCircle+0x1dc>)
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	005b      	lsls	r3, r3, #1
 800bbfa:	4413      	add	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	440b      	add	r3, r1
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	4621      	mov	r1, r4
 800bc06:	f000 f853 	bl	800bcb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	88fb      	ldrh	r3, [r7, #6]
 800bc10:	4413      	add	r3, r2
 800bc12:	b298      	uxth	r0, r3
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	88bb      	ldrh	r3, [r7, #4]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	b29c      	uxth	r4, r3
 800bc1e:	4b22      	ldr	r3, [pc, #136]	; (800bca8 <BSP_LCD_DrawCircle+0x1d8>)
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	4922      	ldr	r1, [pc, #136]	; (800bcac <BSP_LCD_DrawCircle+0x1dc>)
 800bc24:	4613      	mov	r3, r2
 800bc26:	005b      	lsls	r3, r3, #1
 800bc28:	4413      	add	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	440b      	add	r3, r1
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	461a      	mov	r2, r3
 800bc32:	4621      	mov	r1, r4
 800bc34:	f000 f83c 	bl	800bcb0 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	88fa      	ldrh	r2, [r7, #6]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	b298      	uxth	r0, r3
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	88bb      	ldrh	r3, [r7, #4]
 800bc48:	4413      	add	r3, r2
 800bc4a:	b29c      	uxth	r4, r3
 800bc4c:	4b16      	ldr	r3, [pc, #88]	; (800bca8 <BSP_LCD_DrawCircle+0x1d8>)
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	4916      	ldr	r1, [pc, #88]	; (800bcac <BSP_LCD_DrawCircle+0x1dc>)
 800bc52:	4613      	mov	r3, r2
 800bc54:	005b      	lsls	r3, r3, #1
 800bc56:	4413      	add	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	440b      	add	r3, r1
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	4621      	mov	r1, r4
 800bc62:	f000 f825 	bl	800bcb0 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	da06      	bge.n	800bc7a <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	009a      	lsls	r2, r3, #2
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	4413      	add	r3, r2
 800bc74:	3306      	adds	r3, #6
 800bc76:	617b      	str	r3, [r7, #20]
 800bc78:	e00a      	b.n	800bc90 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800bc7a:	693a      	ldr	r2, [r7, #16]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	009a      	lsls	r2, r3, #2
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	4413      	add	r3, r2
 800bc86:	330a      	adds	r3, #10
 800bc88:	617b      	str	r3, [r7, #20]
      current_y--;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	3301      	adds	r3, #1
 800bc94:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800bc96:	693a      	ldr	r2, [r7, #16]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	f67f af2b 	bls.w	800baf6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800bca0:	bf00      	nop
 800bca2:	371c      	adds	r7, #28
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd90      	pop	{r4, r7, pc}
 800bca8:	2000015c 	.word	0x2000015c
 800bcac:	20000160 	.word	0x20000160

0800bcb0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800bcb0:	b5b0      	push	{r4, r5, r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	603a      	str	r2, [r7, #0]
 800bcba:	80fb      	strh	r3, [r7, #6]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800bcc0:	4b1d      	ldr	r3, [pc, #116]	; (800bd38 <BSP_LCD_DrawPixel+0x88>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a1d      	ldr	r2, [pc, #116]	; (800bd3c <BSP_LCD_DrawPixel+0x8c>)
 800bcc6:	2134      	movs	r1, #52	; 0x34
 800bcc8:	fb01 f303 	mul.w	r3, r1, r3
 800bccc:	4413      	add	r3, r2
 800bcce:	3348      	adds	r3, #72	; 0x48
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d116      	bne.n	800bd04 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800bcd6:	4b18      	ldr	r3, [pc, #96]	; (800bd38 <BSP_LCD_DrawPixel+0x88>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a18      	ldr	r2, [pc, #96]	; (800bd3c <BSP_LCD_DrawPixel+0x8c>)
 800bcdc:	2134      	movs	r1, #52	; 0x34
 800bcde:	fb01 f303 	mul.w	r3, r1, r3
 800bce2:	4413      	add	r3, r2
 800bce4:	335c      	adds	r3, #92	; 0x5c
 800bce6:	681c      	ldr	r4, [r3, #0]
 800bce8:	88bd      	ldrh	r5, [r7, #4]
 800bcea:	f7ff fc51 	bl	800b590 <BSP_LCD_GetXSize>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	fb03 f205 	mul.w	r2, r3, r5
 800bcf4:	88fb      	ldrh	r3, [r7, #6]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	4423      	add	r3, r4
 800bcfc:	683a      	ldr	r2, [r7, #0]
 800bcfe:	b292      	uxth	r2, r2
 800bd00:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800bd02:	e015      	b.n	800bd30 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800bd04:	4b0c      	ldr	r3, [pc, #48]	; (800bd38 <BSP_LCD_DrawPixel+0x88>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a0c      	ldr	r2, [pc, #48]	; (800bd3c <BSP_LCD_DrawPixel+0x8c>)
 800bd0a:	2134      	movs	r1, #52	; 0x34
 800bd0c:	fb01 f303 	mul.w	r3, r1, r3
 800bd10:	4413      	add	r3, r2
 800bd12:	335c      	adds	r3, #92	; 0x5c
 800bd14:	681c      	ldr	r4, [r3, #0]
 800bd16:	88bd      	ldrh	r5, [r7, #4]
 800bd18:	f7ff fc3a 	bl	800b590 <BSP_LCD_GetXSize>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	fb03 f205 	mul.w	r2, r3, r5
 800bd22:	88fb      	ldrh	r3, [r7, #6]
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	4423      	add	r3, r4
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	6013      	str	r3, [r2, #0]
}
 800bd30:	bf00      	nop
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bdb0      	pop	{r4, r5, r7, pc}
 800bd38:	2000015c 	.word	0x2000015c
 800bd3c:	20000a9c 	.word	0x20000a9c

0800bd40 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800bd40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd44:	b086      	sub	sp, #24
 800bd46:	af02      	add	r7, sp, #8
 800bd48:	4604      	mov	r4, r0
 800bd4a:	4608      	mov	r0, r1
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	461a      	mov	r2, r3
 800bd50:	4623      	mov	r3, r4
 800bd52:	80fb      	strh	r3, [r7, #6]
 800bd54:	4603      	mov	r3, r0
 800bd56:	80bb      	strh	r3, [r7, #4]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	807b      	strh	r3, [r7, #2]
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800bd60:	2300      	movs	r3, #0
 800bd62:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800bd64:	4b30      	ldr	r3, [pc, #192]	; (800be28 <BSP_LCD_FillRect+0xe8>)
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	4930      	ldr	r1, [pc, #192]	; (800be2c <BSP_LCD_FillRect+0xec>)
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	005b      	lsls	r3, r3, #1
 800bd6e:	4413      	add	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	440b      	add	r3, r1
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7ff fca2 	bl	800b6c0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800bd7c:	4b2a      	ldr	r3, [pc, #168]	; (800be28 <BSP_LCD_FillRect+0xe8>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a2b      	ldr	r2, [pc, #172]	; (800be30 <BSP_LCD_FillRect+0xf0>)
 800bd82:	2134      	movs	r1, #52	; 0x34
 800bd84:	fb01 f303 	mul.w	r3, r1, r3
 800bd88:	4413      	add	r3, r2
 800bd8a:	3348      	adds	r3, #72	; 0x48
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d114      	bne.n	800bdbc <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800bd92:	4b25      	ldr	r3, [pc, #148]	; (800be28 <BSP_LCD_FillRect+0xe8>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a26      	ldr	r2, [pc, #152]	; (800be30 <BSP_LCD_FillRect+0xf0>)
 800bd98:	2134      	movs	r1, #52	; 0x34
 800bd9a:	fb01 f303 	mul.w	r3, r1, r3
 800bd9e:	4413      	add	r3, r2
 800bda0:	335c      	adds	r3, #92	; 0x5c
 800bda2:	681c      	ldr	r4, [r3, #0]
 800bda4:	f7ff fbf4 	bl	800b590 <BSP_LCD_GetXSize>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	88bb      	ldrh	r3, [r7, #4]
 800bdac:	fb03 f202 	mul.w	r2, r3, r2
 800bdb0:	88fb      	ldrh	r3, [r7, #6]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	4423      	add	r3, r4
 800bdb8:	60fb      	str	r3, [r7, #12]
 800bdba:	e013      	b.n	800bde4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800bdbc:	4b1a      	ldr	r3, [pc, #104]	; (800be28 <BSP_LCD_FillRect+0xe8>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a1b      	ldr	r2, [pc, #108]	; (800be30 <BSP_LCD_FillRect+0xf0>)
 800bdc2:	2134      	movs	r1, #52	; 0x34
 800bdc4:	fb01 f303 	mul.w	r3, r1, r3
 800bdc8:	4413      	add	r3, r2
 800bdca:	335c      	adds	r3, #92	; 0x5c
 800bdcc:	681c      	ldr	r4, [r3, #0]
 800bdce:	f7ff fbdf 	bl	800b590 <BSP_LCD_GetXSize>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	88bb      	ldrh	r3, [r7, #4]
 800bdd6:	fb03 f202 	mul.w	r2, r3, r2
 800bdda:	88fb      	ldrh	r3, [r7, #6]
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4423      	add	r3, r4
 800bde2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800bde4:	4b10      	ldr	r3, [pc, #64]	; (800be28 <BSP_LCD_FillRect+0xe8>)
 800bde6:	681c      	ldr	r4, [r3, #0]
 800bde8:	68fd      	ldr	r5, [r7, #12]
 800bdea:	887e      	ldrh	r6, [r7, #2]
 800bdec:	f8b7 8000 	ldrh.w	r8, [r7]
 800bdf0:	f7ff fbce 	bl	800b590 <BSP_LCD_GetXSize>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	887b      	ldrh	r3, [r7, #2]
 800bdf8:	1ad1      	subs	r1, r2, r3
 800bdfa:	4b0b      	ldr	r3, [pc, #44]	; (800be28 <BSP_LCD_FillRect+0xe8>)
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	480b      	ldr	r0, [pc, #44]	; (800be2c <BSP_LCD_FillRect+0xec>)
 800be00:	4613      	mov	r3, r2
 800be02:	005b      	lsls	r3, r3, #1
 800be04:	4413      	add	r3, r2
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	4403      	add	r3, r0
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	9301      	str	r3, [sp, #4]
 800be0e:	9100      	str	r1, [sp, #0]
 800be10:	4643      	mov	r3, r8
 800be12:	4632      	mov	r2, r6
 800be14:	4629      	mov	r1, r5
 800be16:	4620      	mov	r0, r4
 800be18:	f000 fa5a 	bl	800c2d0 <LL_FillBuffer>
}
 800be1c:	bf00      	nop
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be26:	bf00      	nop
 800be28:	2000015c 	.word	0x2000015c
 800be2c:	20000160 	.word	0x20000160
 800be30:	20000a9c 	.word	0x20000a9c

0800be34 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	80fb      	strh	r3, [r7, #6]
 800be3e:	460b      	mov	r3, r1
 800be40:	80bb      	strh	r3, [r7, #4]
 800be42:	4613      	mov	r3, r2
 800be44:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800be46:	887b      	ldrh	r3, [r7, #2]
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	f1c3 0303 	rsb	r3, r3, #3
 800be4e:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 800be50:	2300      	movs	r3, #0
 800be52:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800be54:	887b      	ldrh	r3, [r7, #2]
 800be56:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800be58:	4b44      	ldr	r3, [pc, #272]	; (800bf6c <BSP_LCD_FillCircle+0x138>)
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	4944      	ldr	r1, [pc, #272]	; (800bf70 <BSP_LCD_FillCircle+0x13c>)
 800be5e:	4613      	mov	r3, r2
 800be60:	005b      	lsls	r3, r3, #1
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	440b      	add	r3, r1
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7ff fc28 	bl	800b6c0 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 800be70:	e061      	b.n	800bf36 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d021      	beq.n	800bebc <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	88fa      	ldrh	r2, [r7, #6]
 800be7e:	1ad3      	subs	r3, r2, r3
 800be80:	b298      	uxth	r0, r3
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	b29a      	uxth	r2, r3
 800be86:	88bb      	ldrh	r3, [r7, #4]
 800be88:	4413      	add	r3, r2
 800be8a:	b299      	uxth	r1, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	b29b      	uxth	r3, r3
 800be90:	005b      	lsls	r3, r3, #1
 800be92:	b29b      	uxth	r3, r3
 800be94:	461a      	mov	r2, r3
 800be96:	f7ff fdbd 	bl	800ba14 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	88fa      	ldrh	r2, [r7, #6]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	b298      	uxth	r0, r3
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	88ba      	ldrh	r2, [r7, #4]
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	b299      	uxth	r1, r3
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	005b      	lsls	r3, r3, #1
 800beb4:	b29b      	uxth	r3, r3
 800beb6:	461a      	mov	r2, r3
 800beb8:	f7ff fdac 	bl	800ba14 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d021      	beq.n	800bf06 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	88fa      	ldrh	r2, [r7, #6]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	b298      	uxth	r0, r3
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	88ba      	ldrh	r2, [r7, #4]
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	b299      	uxth	r1, r3
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	b29b      	uxth	r3, r3
 800beda:	005b      	lsls	r3, r3, #1
 800bedc:	b29b      	uxth	r3, r3
 800bede:	461a      	mov	r2, r3
 800bee0:	f7ff fd98 	bl	800ba14 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	b29b      	uxth	r3, r3
 800bee8:	88fa      	ldrh	r2, [r7, #6]
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	b298      	uxth	r0, r3
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	88bb      	ldrh	r3, [r7, #4]
 800bef4:	4413      	add	r3, r2
 800bef6:	b299      	uxth	r1, r3
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	b29b      	uxth	r3, r3
 800befc:	005b      	lsls	r3, r3, #1
 800befe:	b29b      	uxth	r3, r3
 800bf00:	461a      	mov	r2, r3
 800bf02:	f7ff fd87 	bl	800ba14 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	da06      	bge.n	800bf1a <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	009a      	lsls	r2, r3, #2
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	4413      	add	r3, r2
 800bf14:	3306      	adds	r3, #6
 800bf16:	617b      	str	r3, [r7, #20]
 800bf18:	e00a      	b.n	800bf30 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800bf1a:	693a      	ldr	r2, [r7, #16]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	009a      	lsls	r2, r3, #2
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	4413      	add	r3, r2
 800bf26:	330a      	adds	r3, #10
 800bf28:	617b      	str	r3, [r7, #20]
      current_y--;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	3301      	adds	r3, #1
 800bf34:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d999      	bls.n	800be72 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800bf3e:	4b0b      	ldr	r3, [pc, #44]	; (800bf6c <BSP_LCD_FillCircle+0x138>)
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	490b      	ldr	r1, [pc, #44]	; (800bf70 <BSP_LCD_FillCircle+0x13c>)
 800bf44:	4613      	mov	r3, r2
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	4413      	add	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	440b      	add	r3, r1
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7ff fbb5 	bl	800b6c0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800bf56:	887a      	ldrh	r2, [r7, #2]
 800bf58:	88b9      	ldrh	r1, [r7, #4]
 800bf5a:	88fb      	ldrh	r3, [r7, #6]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7ff fdb7 	bl	800bad0 <BSP_LCD_DrawCircle>
}
 800bf62:	bf00      	nop
 800bf64:	3718      	adds	r7, #24
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	2000015c 	.word	0x2000015c
 800bf70:	20000160 	.word	0x20000160

0800bf74 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b090      	sub	sp, #64	; 0x40
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800bf7e:	4b64      	ldr	r3, [pc, #400]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bf80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf82:	4a63      	ldr	r2, [pc, #396]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bf84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf88:	6453      	str	r3, [r2, #68]	; 0x44
 800bf8a:	4b61      	ldr	r3, [pc, #388]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bf8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bf92:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800bf96:	4b5e      	ldr	r3, [pc, #376]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bf98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9a:	4a5d      	ldr	r2, [pc, #372]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bf9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bfa0:	6313      	str	r3, [r2, #48]	; 0x30
 800bfa2:	4b5b      	ldr	r3, [pc, #364]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bfa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfaa:	627b      	str	r3, [r7, #36]	; 0x24
 800bfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800bfae:	4b58      	ldr	r3, [pc, #352]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb2:	4a57      	ldr	r2, [pc, #348]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bfb4:	f043 0310 	orr.w	r3, r3, #16
 800bfb8:	6313      	str	r3, [r2, #48]	; 0x30
 800bfba:	4b55      	ldr	r3, [pc, #340]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfbe:	f003 0310 	and.w	r3, r3, #16
 800bfc2:	623b      	str	r3, [r7, #32]
 800bfc4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800bfc6:	4b52      	ldr	r3, [pc, #328]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bfc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfca:	4a51      	ldr	r2, [pc, #324]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bfcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd0:	6313      	str	r3, [r2, #48]	; 0x30
 800bfd2:	4b4f      	ldr	r3, [pc, #316]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bfd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfda:	61fb      	str	r3, [r7, #28]
 800bfdc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800bfde:	4b4c      	ldr	r3, [pc, #304]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bfe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe2:	4a4b      	ldr	r2, [pc, #300]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bfe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfe8:	6313      	str	r3, [r2, #48]	; 0x30
 800bfea:	4b49      	ldr	r3, [pc, #292]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bff2:	61bb      	str	r3, [r7, #24]
 800bff4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800bff6:	4b46      	ldr	r3, [pc, #280]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffa:	4a45      	ldr	r2, [pc, #276]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800bffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c000:	6313      	str	r3, [r2, #48]	; 0x30
 800c002:	4b43      	ldr	r3, [pc, #268]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800c004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c00a:	617b      	str	r3, [r7, #20]
 800c00c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800c00e:	4b40      	ldr	r3, [pc, #256]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800c010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c012:	4a3f      	ldr	r2, [pc, #252]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800c014:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c018:	6313      	str	r3, [r2, #48]	; 0x30
 800c01a:	4b3d      	ldr	r3, [pc, #244]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800c01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c01e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c022:	613b      	str	r3, [r7, #16]
 800c024:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800c026:	4b3a      	ldr	r3, [pc, #232]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800c028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02a:	4a39      	ldr	r2, [pc, #228]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800c02c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c030:	6313      	str	r3, [r2, #48]	; 0x30
 800c032:	4b37      	ldr	r3, [pc, #220]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800c034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800c03e:	4b34      	ldr	r3, [pc, #208]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800c040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c042:	4a33      	ldr	r2, [pc, #204]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800c044:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c048:	6313      	str	r3, [r2, #48]	; 0x30
 800c04a:	4b31      	ldr	r3, [pc, #196]	; (800c110 <BSP_LCD_MspInit+0x19c>)
 800c04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c052:	60bb      	str	r3, [r7, #8]
 800c054:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800c056:	2310      	movs	r3, #16
 800c058:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c05a:	2302      	movs	r3, #2
 800c05c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800c05e:	2300      	movs	r3, #0
 800c060:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800c062:	2302      	movs	r3, #2
 800c064:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800c066:	230e      	movs	r3, #14
 800c068:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800c06a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c06e:	4619      	mov	r1, r3
 800c070:	4828      	ldr	r0, [pc, #160]	; (800c114 <BSP_LCD_MspInit+0x1a0>)
 800c072:	f7f8 fad7 	bl	8004624 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800c076:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c07a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c07c:	2302      	movs	r3, #2
 800c07e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800c080:	2309      	movs	r3, #9
 800c082:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c088:	4619      	mov	r1, r3
 800c08a:	4823      	ldr	r0, [pc, #140]	; (800c118 <BSP_LCD_MspInit+0x1a4>)
 800c08c:	f7f8 faca 	bl	8004624 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800c090:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800c094:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c096:	2302      	movs	r3, #2
 800c098:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800c09a:	230e      	movs	r3, #14
 800c09c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800c09e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	481d      	ldr	r0, [pc, #116]	; (800c11c <BSP_LCD_MspInit+0x1a8>)
 800c0a6:	f7f8 fabd 	bl	8004624 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800c0aa:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800c0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800c0b4:	230e      	movs	r3, #14
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800c0b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4818      	ldr	r0, [pc, #96]	; (800c120 <BSP_LCD_MspInit+0x1ac>)
 800c0c0:	f7f8 fab0 	bl	8004624 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800c0c4:	23f7      	movs	r3, #247	; 0xf7
 800c0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c0c8:	2302      	movs	r3, #2
 800c0ca:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800c0cc:	230e      	movs	r3, #14
 800c0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800c0d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	4813      	ldr	r0, [pc, #76]	; (800c124 <BSP_LCD_MspInit+0x1b0>)
 800c0d8:	f7f8 faa4 	bl	8004624 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800c0dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800c0e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	480b      	ldr	r0, [pc, #44]	; (800c11c <BSP_LCD_MspInit+0x1a8>)
 800c0ee:	f7f8 fa99 	bl	8004624 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800c0f2:	2308      	movs	r3, #8
 800c0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800c0fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c0fe:	4619      	mov	r1, r3
 800c100:	4808      	ldr	r0, [pc, #32]	; (800c124 <BSP_LCD_MspInit+0x1b0>)
 800c102:	f7f8 fa8f 	bl	8004624 <HAL_GPIO_Init>
}
 800c106:	bf00      	nop
 800c108:	3740      	adds	r7, #64	; 0x40
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	40023800 	.word	0x40023800
 800c114:	40021000 	.word	0x40021000
 800c118:	40021800 	.word	0x40021800
 800c11c:	40022000 	.word	0x40022000
 800c120:	40022400 	.word	0x40022400
 800c124:	40022800 	.word	0x40022800

0800c128 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800c132:	4b0a      	ldr	r3, [pc, #40]	; (800c15c <BSP_LCD_ClockConfig+0x34>)
 800c134:	2208      	movs	r2, #8
 800c136:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800c138:	4b08      	ldr	r3, [pc, #32]	; (800c15c <BSP_LCD_ClockConfig+0x34>)
 800c13a:	22c0      	movs	r2, #192	; 0xc0
 800c13c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800c13e:	4b07      	ldr	r3, [pc, #28]	; (800c15c <BSP_LCD_ClockConfig+0x34>)
 800c140:	2205      	movs	r2, #5
 800c142:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800c144:	4b05      	ldr	r3, [pc, #20]	; (800c15c <BSP_LCD_ClockConfig+0x34>)
 800c146:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c14a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800c14c:	4803      	ldr	r0, [pc, #12]	; (800c15c <BSP_LCD_ClockConfig+0x34>)
 800c14e:	f7fa fc4d 	bl	80069ec <HAL_RCCEx_PeriphCLKConfig>
}
 800c152:	bf00      	nop
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	20000178 	.word	0x20000178

0800c160 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b088      	sub	sp, #32
 800c164:	af00      	add	r7, sp, #0
 800c166:	4603      	mov	r3, r0
 800c168:	603a      	str	r2, [r7, #0]
 800c16a:	80fb      	strh	r3, [r7, #6]
 800c16c:	460b      	mov	r3, r1
 800c16e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800c170:	2300      	movs	r3, #0
 800c172:	61fb      	str	r3, [r7, #28]
 800c174:	2300      	movs	r3, #0
 800c176:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800c178:	4b53      	ldr	r3, [pc, #332]	; (800c2c8 <DrawChar+0x168>)
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	4953      	ldr	r1, [pc, #332]	; (800c2cc <DrawChar+0x16c>)
 800c17e:	4613      	mov	r3, r2
 800c180:	005b      	lsls	r3, r3, #1
 800c182:	4413      	add	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	440b      	add	r3, r1
 800c188:	3308      	adds	r3, #8
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	88db      	ldrh	r3, [r3, #6]
 800c18e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800c190:	4b4d      	ldr	r3, [pc, #308]	; (800c2c8 <DrawChar+0x168>)
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	494d      	ldr	r1, [pc, #308]	; (800c2cc <DrawChar+0x16c>)
 800c196:	4613      	mov	r3, r2
 800c198:	005b      	lsls	r3, r3, #1
 800c19a:	4413      	add	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	440b      	add	r3, r1
 800c1a0:	3308      	adds	r3, #8
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	889b      	ldrh	r3, [r3, #4]
 800c1a6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800c1a8:	8a3b      	ldrh	r3, [r7, #16]
 800c1aa:	3307      	adds	r3, #7
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	da00      	bge.n	800c1b2 <DrawChar+0x52>
 800c1b0:	3307      	adds	r3, #7
 800c1b2:	10db      	asrs	r3, r3, #3
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	8a3b      	ldrh	r3, [r7, #16]
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	61fb      	str	r3, [r7, #28]
 800c1c6:	e076      	b.n	800c2b6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800c1c8:	8a3b      	ldrh	r3, [r7, #16]
 800c1ca:	3307      	adds	r3, #7
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	da00      	bge.n	800c1d2 <DrawChar+0x72>
 800c1d0:	3307      	adds	r3, #7
 800c1d2:	10db      	asrs	r3, r3, #3
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	fb03 f302 	mul.w	r3, r3, r2
 800c1dc:	683a      	ldr	r2, [r7, #0]
 800c1de:	4413      	add	r3, r2
 800c1e0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800c1e2:	8a3b      	ldrh	r3, [r7, #16]
 800c1e4:	3307      	adds	r3, #7
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	da00      	bge.n	800c1ec <DrawChar+0x8c>
 800c1ea:	3307      	adds	r3, #7
 800c1ec:	10db      	asrs	r3, r3, #3
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d002      	beq.n	800c1f8 <DrawChar+0x98>
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d004      	beq.n	800c200 <DrawChar+0xa0>
 800c1f6:	e00c      	b.n	800c212 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	617b      	str	r3, [r7, #20]
      break;
 800c1fe:	e016      	b.n	800c22e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	021b      	lsls	r3, r3, #8
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	3201      	adds	r2, #1
 800c20a:	7812      	ldrb	r2, [r2, #0]
 800c20c:	4313      	orrs	r3, r2
 800c20e:	617b      	str	r3, [r7, #20]
      break;
 800c210:	e00d      	b.n	800c22e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	041a      	lsls	r2, r3, #16
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	3301      	adds	r3, #1
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	021b      	lsls	r3, r3, #8
 800c220:	4313      	orrs	r3, r2
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	3202      	adds	r2, #2
 800c226:	7812      	ldrb	r2, [r2, #0]
 800c228:	4313      	orrs	r3, r2
 800c22a:	617b      	str	r3, [r7, #20]
      break;
 800c22c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800c22e:	2300      	movs	r3, #0
 800c230:	61bb      	str	r3, [r7, #24]
 800c232:	e036      	b.n	800c2a2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800c234:	8a3a      	ldrh	r2, [r7, #16]
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	1ad2      	subs	r2, r2, r3
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
 800c23c:	4413      	add	r3, r2
 800c23e:	3b01      	subs	r3, #1
 800c240:	2201      	movs	r2, #1
 800c242:	fa02 f303 	lsl.w	r3, r2, r3
 800c246:	461a      	mov	r2, r3
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	4013      	ands	r3, r2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d012      	beq.n	800c276 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800c250:	69bb      	ldr	r3, [r7, #24]
 800c252:	b29a      	uxth	r2, r3
 800c254:	88fb      	ldrh	r3, [r7, #6]
 800c256:	4413      	add	r3, r2
 800c258:	b298      	uxth	r0, r3
 800c25a:	4b1b      	ldr	r3, [pc, #108]	; (800c2c8 <DrawChar+0x168>)
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	491b      	ldr	r1, [pc, #108]	; (800c2cc <DrawChar+0x16c>)
 800c260:	4613      	mov	r3, r2
 800c262:	005b      	lsls	r3, r3, #1
 800c264:	4413      	add	r3, r2
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	440b      	add	r3, r1
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	88bb      	ldrh	r3, [r7, #4]
 800c26e:	4619      	mov	r1, r3
 800c270:	f7ff fd1e 	bl	800bcb0 <BSP_LCD_DrawPixel>
 800c274:	e012      	b.n	800c29c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	b29a      	uxth	r2, r3
 800c27a:	88fb      	ldrh	r3, [r7, #6]
 800c27c:	4413      	add	r3, r2
 800c27e:	b298      	uxth	r0, r3
 800c280:	4b11      	ldr	r3, [pc, #68]	; (800c2c8 <DrawChar+0x168>)
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	4911      	ldr	r1, [pc, #68]	; (800c2cc <DrawChar+0x16c>)
 800c286:	4613      	mov	r3, r2
 800c288:	005b      	lsls	r3, r3, #1
 800c28a:	4413      	add	r3, r2
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	440b      	add	r3, r1
 800c290:	3304      	adds	r3, #4
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	88bb      	ldrh	r3, [r7, #4]
 800c296:	4619      	mov	r1, r3
 800c298:	f7ff fd0a 	bl	800bcb0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	61bb      	str	r3, [r7, #24]
 800c2a2:	8a3b      	ldrh	r3, [r7, #16]
 800c2a4:	69ba      	ldr	r2, [r7, #24]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d3c4      	bcc.n	800c234 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800c2aa:	88bb      	ldrh	r3, [r7, #4]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	61fb      	str	r3, [r7, #28]
 800c2b6:	8a7b      	ldrh	r3, [r7, #18]
 800c2b8:	69fa      	ldr	r2, [r7, #28]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d384      	bcc.n	800c1c8 <DrawChar+0x68>
  }
}
 800c2be:	bf00      	nop
 800c2c0:	3720      	adds	r7, #32
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	2000015c 	.word	0x2000015c
 800c2cc:	20000160 	.word	0x20000160

0800c2d0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af02      	add	r7, sp, #8
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	607a      	str	r2, [r7, #4]
 800c2dc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800c2de:	4b1e      	ldr	r3, [pc, #120]	; (800c358 <LL_FillBuffer+0x88>)
 800c2e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c2e4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800c2e6:	4b1d      	ldr	r3, [pc, #116]	; (800c35c <LL_FillBuffer+0x8c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a1d      	ldr	r2, [pc, #116]	; (800c360 <LL_FillBuffer+0x90>)
 800c2ec:	2134      	movs	r1, #52	; 0x34
 800c2ee:	fb01 f303 	mul.w	r3, r1, r3
 800c2f2:	4413      	add	r3, r2
 800c2f4:	3348      	adds	r3, #72	; 0x48
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d103      	bne.n	800c304 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800c2fc:	4b16      	ldr	r3, [pc, #88]	; (800c358 <LL_FillBuffer+0x88>)
 800c2fe:	2202      	movs	r2, #2
 800c300:	609a      	str	r2, [r3, #8]
 800c302:	e002      	b.n	800c30a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800c304:	4b14      	ldr	r3, [pc, #80]	; (800c358 <LL_FillBuffer+0x88>)
 800c306:	2200      	movs	r2, #0
 800c308:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800c30a:	4a13      	ldr	r2, [pc, #76]	; (800c358 <LL_FillBuffer+0x88>)
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800c310:	4b11      	ldr	r3, [pc, #68]	; (800c358 <LL_FillBuffer+0x88>)
 800c312:	4a14      	ldr	r2, [pc, #80]	; (800c364 <LL_FillBuffer+0x94>)
 800c314:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800c316:	4810      	ldr	r0, [pc, #64]	; (800c358 <LL_FillBuffer+0x88>)
 800c318:	f7f7 fde8 	bl	8003eec <HAL_DMA2D_Init>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d115      	bne.n	800c34e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800c322:	68f9      	ldr	r1, [r7, #12]
 800c324:	480c      	ldr	r0, [pc, #48]	; (800c358 <LL_FillBuffer+0x88>)
 800c326:	f7f8 f84f 	bl	80043c8 <HAL_DMA2D_ConfigLayer>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10e      	bne.n	800c34e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	69f9      	ldr	r1, [r7, #28]
 800c33a:	4807      	ldr	r0, [pc, #28]	; (800c358 <LL_FillBuffer+0x88>)
 800c33c:	f7f7 fe20 	bl	8003f80 <HAL_DMA2D_Start>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d103      	bne.n	800c34e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800c346:	210a      	movs	r1, #10
 800c348:	4803      	ldr	r0, [pc, #12]	; (800c358 <LL_FillBuffer+0x88>)
 800c34a:	f7f7 fe44 	bl	8003fd6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800c34e:	bf00      	nop
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	2000011c 	.word	0x2000011c
 800c35c:	2000015c 	.word	0x2000015c
 800c360:	20000a9c 	.word	0x20000a9c
 800c364:	4002b000 	.word	0x4002b000

0800c368 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800c368:	b580      	push	{r7, lr}
 800c36a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800c36c:	4b29      	ldr	r3, [pc, #164]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c36e:	4a2a      	ldr	r2, [pc, #168]	; (800c418 <BSP_SDRAM_Init+0xb0>)
 800c370:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800c372:	4b2a      	ldr	r3, [pc, #168]	; (800c41c <BSP_SDRAM_Init+0xb4>)
 800c374:	2202      	movs	r2, #2
 800c376:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800c378:	4b28      	ldr	r3, [pc, #160]	; (800c41c <BSP_SDRAM_Init+0xb4>)
 800c37a:	2207      	movs	r2, #7
 800c37c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800c37e:	4b27      	ldr	r3, [pc, #156]	; (800c41c <BSP_SDRAM_Init+0xb4>)
 800c380:	2204      	movs	r2, #4
 800c382:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800c384:	4b25      	ldr	r3, [pc, #148]	; (800c41c <BSP_SDRAM_Init+0xb4>)
 800c386:	2207      	movs	r2, #7
 800c388:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800c38a:	4b24      	ldr	r3, [pc, #144]	; (800c41c <BSP_SDRAM_Init+0xb4>)
 800c38c:	2202      	movs	r2, #2
 800c38e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800c390:	4b22      	ldr	r3, [pc, #136]	; (800c41c <BSP_SDRAM_Init+0xb4>)
 800c392:	2202      	movs	r2, #2
 800c394:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800c396:	4b21      	ldr	r3, [pc, #132]	; (800c41c <BSP_SDRAM_Init+0xb4>)
 800c398:	2202      	movs	r2, #2
 800c39a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800c39c:	4b1d      	ldr	r3, [pc, #116]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800c3a2:	4b1c      	ldr	r3, [pc, #112]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800c3a8:	4b1a      	ldr	r3, [pc, #104]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c3aa:	2204      	movs	r2, #4
 800c3ac:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800c3ae:	4b19      	ldr	r3, [pc, #100]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c3b0:	2210      	movs	r2, #16
 800c3b2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800c3b4:	4b17      	ldr	r3, [pc, #92]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c3b6:	2240      	movs	r2, #64	; 0x40
 800c3b8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800c3ba:	4b16      	ldr	r3, [pc, #88]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c3bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c3c0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800c3c2:	4b14      	ldr	r3, [pc, #80]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800c3c8:	4b12      	ldr	r3, [pc, #72]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c3ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3ce:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800c3d0:	4b10      	ldr	r3, [pc, #64]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c3d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c3d6:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800c3d8:	4b0e      	ldr	r3, [pc, #56]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c3da:	2200      	movs	r2, #0
 800c3dc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800c3de:	2100      	movs	r1, #0
 800c3e0:	480c      	ldr	r0, [pc, #48]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c3e2:	f000 f87f 	bl	800c4e4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800c3e6:	490d      	ldr	r1, [pc, #52]	; (800c41c <BSP_SDRAM_Init+0xb4>)
 800c3e8:	480a      	ldr	r0, [pc, #40]	; (800c414 <BSP_SDRAM_Init+0xac>)
 800c3ea:	f7fc faff 	bl	80089ec <HAL_SDRAM_Init>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d003      	beq.n	800c3fc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800c3f4:	4b0a      	ldr	r3, [pc, #40]	; (800c420 <BSP_SDRAM_Init+0xb8>)
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	701a      	strb	r2, [r3, #0]
 800c3fa:	e002      	b.n	800c402 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800c3fc:	4b08      	ldr	r3, [pc, #32]	; (800c420 <BSP_SDRAM_Init+0xb8>)
 800c3fe:	2200      	movs	r2, #0
 800c400:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800c402:	f240 6003 	movw	r0, #1539	; 0x603
 800c406:	f000 f80d 	bl	800c424 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800c40a:	4b05      	ldr	r3, [pc, #20]	; (800c420 <BSP_SDRAM_Init+0xb8>)
 800c40c:	781b      	ldrb	r3, [r3, #0]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20000b44 	.word	0x20000b44
 800c418:	a0000140 	.word	0xa0000140
 800c41c:	200001fc 	.word	0x200001fc
 800c420:	20000018 	.word	0x20000018

0800c424 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b084      	sub	sp, #16
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800c42c:	2300      	movs	r3, #0
 800c42e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800c430:	4b2a      	ldr	r3, [pc, #168]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c432:	2201      	movs	r2, #1
 800c434:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800c436:	4b29      	ldr	r3, [pc, #164]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c438:	2210      	movs	r2, #16
 800c43a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800c43c:	4b27      	ldr	r3, [pc, #156]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c43e:	2201      	movs	r2, #1
 800c440:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800c442:	4b26      	ldr	r3, [pc, #152]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c444:	2200      	movs	r2, #0
 800c446:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800c448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c44c:	4923      	ldr	r1, [pc, #140]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c44e:	4824      	ldr	r0, [pc, #144]	; (800c4e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800c450:	f7fc fb00 	bl	8008a54 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800c454:	2001      	movs	r0, #1
 800c456:	f7f6 ff87 	bl	8003368 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800c45a:	4b20      	ldr	r3, [pc, #128]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c45c:	2202      	movs	r2, #2
 800c45e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800c460:	4b1e      	ldr	r3, [pc, #120]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c462:	2210      	movs	r2, #16
 800c464:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800c466:	4b1d      	ldr	r3, [pc, #116]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c468:	2201      	movs	r2, #1
 800c46a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800c46c:	4b1b      	ldr	r3, [pc, #108]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c46e:	2200      	movs	r2, #0
 800c470:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800c472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c476:	4919      	ldr	r1, [pc, #100]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c478:	4819      	ldr	r0, [pc, #100]	; (800c4e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800c47a:	f7fc faeb 	bl	8008a54 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800c47e:	4b17      	ldr	r3, [pc, #92]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c480:	2203      	movs	r2, #3
 800c482:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800c484:	4b15      	ldr	r3, [pc, #84]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c486:	2210      	movs	r2, #16
 800c488:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800c48a:	4b14      	ldr	r3, [pc, #80]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c48c:	2208      	movs	r2, #8
 800c48e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800c490:	4b12      	ldr	r3, [pc, #72]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c492:	2200      	movs	r2, #0
 800c494:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800c496:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c49a:	4910      	ldr	r1, [pc, #64]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c49c:	4810      	ldr	r0, [pc, #64]	; (800c4e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800c49e:	f7fc fad9 	bl	8008a54 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800c4a2:	f44f 7308 	mov.w	r3, #544	; 0x220
 800c4a6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800c4a8:	4b0c      	ldr	r3, [pc, #48]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c4aa:	2204      	movs	r2, #4
 800c4ac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800c4ae:	4b0b      	ldr	r3, [pc, #44]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c4b0:	2210      	movs	r2, #16
 800c4b2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800c4b4:	4b09      	ldr	r3, [pc, #36]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	4a07      	ldr	r2, [pc, #28]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c4be:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800c4c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4c4:	4905      	ldr	r1, [pc, #20]	; (800c4dc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800c4c6:	4806      	ldr	r0, [pc, #24]	; (800c4e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800c4c8:	f7fc fac4 	bl	8008a54 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800c4cc:	6879      	ldr	r1, [r7, #4]
 800c4ce:	4804      	ldr	r0, [pc, #16]	; (800c4e0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800c4d0:	f7fc faeb 	bl	8008aaa <HAL_SDRAM_ProgramRefreshRate>
}
 800c4d4:	bf00      	nop
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	20000218 	.word	0x20000218
 800c4e0:	20000b44 	.word	0x20000b44

0800c4e4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b090      	sub	sp, #64	; 0x40
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800c4ee:	4b70      	ldr	r3, [pc, #448]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f2:	4a6f      	ldr	r2, [pc, #444]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c4f4:	f043 0301 	orr.w	r3, r3, #1
 800c4f8:	6393      	str	r3, [r2, #56]	; 0x38
 800c4fa:	4b6d      	ldr	r3, [pc, #436]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4fe:	f003 0301 	and.w	r3, r3, #1
 800c502:	62bb      	str	r3, [r7, #40]	; 0x28
 800c504:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800c506:	4b6a      	ldr	r3, [pc, #424]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c50a:	4a69      	ldr	r2, [pc, #420]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c50c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c510:	6313      	str	r3, [r2, #48]	; 0x30
 800c512:	4b67      	ldr	r3, [pc, #412]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c51a:	627b      	str	r3, [r7, #36]	; 0x24
 800c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c51e:	4b64      	ldr	r3, [pc, #400]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c522:	4a63      	ldr	r2, [pc, #396]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c524:	f043 0304 	orr.w	r3, r3, #4
 800c528:	6313      	str	r3, [r2, #48]	; 0x30
 800c52a:	4b61      	ldr	r3, [pc, #388]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c52e:	f003 0304 	and.w	r3, r3, #4
 800c532:	623b      	str	r3, [r7, #32]
 800c534:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c536:	4b5e      	ldr	r3, [pc, #376]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c53a:	4a5d      	ldr	r2, [pc, #372]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c53c:	f043 0308 	orr.w	r3, r3, #8
 800c540:	6313      	str	r3, [r2, #48]	; 0x30
 800c542:	4b5b      	ldr	r3, [pc, #364]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c546:	f003 0308 	and.w	r3, r3, #8
 800c54a:	61fb      	str	r3, [r7, #28]
 800c54c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c54e:	4b58      	ldr	r3, [pc, #352]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c552:	4a57      	ldr	r2, [pc, #348]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c554:	f043 0310 	orr.w	r3, r3, #16
 800c558:	6313      	str	r3, [r2, #48]	; 0x30
 800c55a:	4b55      	ldr	r3, [pc, #340]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c55e:	f003 0310 	and.w	r3, r3, #16
 800c562:	61bb      	str	r3, [r7, #24]
 800c564:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c566:	4b52      	ldr	r3, [pc, #328]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56a:	4a51      	ldr	r2, [pc, #324]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c56c:	f043 0320 	orr.w	r3, r3, #32
 800c570:	6313      	str	r3, [r2, #48]	; 0x30
 800c572:	4b4f      	ldr	r3, [pc, #316]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c576:	f003 0320 	and.w	r3, r3, #32
 800c57a:	617b      	str	r3, [r7, #20]
 800c57c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c57e:	4b4c      	ldr	r3, [pc, #304]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c582:	4a4b      	ldr	r2, [pc, #300]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c588:	6313      	str	r3, [r2, #48]	; 0x30
 800c58a:	4b49      	ldr	r3, [pc, #292]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c592:	613b      	str	r3, [r7, #16]
 800c594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c596:	4b46      	ldr	r3, [pc, #280]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c59a:	4a45      	ldr	r2, [pc, #276]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5a0:	6313      	str	r3, [r2, #48]	; 0x30
 800c5a2:	4b43      	ldr	r3, [pc, #268]	; (800c6b0 <BSP_SDRAM_MspInit+0x1cc>)
 800c5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5aa:	60fb      	str	r3, [r7, #12]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800c5b6:	2302      	movs	r3, #2
 800c5b8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800c5ba:	230c      	movs	r3, #12
 800c5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800c5be:	2308      	movs	r3, #8
 800c5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800c5c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	483a      	ldr	r0, [pc, #232]	; (800c6b4 <BSP_SDRAM_MspInit+0x1d0>)
 800c5ca:	f7f8 f82b 	bl	8004624 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800c5ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 800c5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800c5d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4837      	ldr	r0, [pc, #220]	; (800c6b8 <BSP_SDRAM_MspInit+0x1d4>)
 800c5dc:	f7f8 f822 	bl	8004624 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800c5e0:	f64f 7383 	movw	r3, #65411	; 0xff83
 800c5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800c5e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	4833      	ldr	r0, [pc, #204]	; (800c6bc <BSP_SDRAM_MspInit+0x1d8>)
 800c5ee:	f7f8 f819 	bl	8004624 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800c5f2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800c5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800c5f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	4830      	ldr	r0, [pc, #192]	; (800c6c0 <BSP_SDRAM_MspInit+0x1dc>)
 800c600:	f7f8 f810 	bl	8004624 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800c604:	f248 1333 	movw	r3, #33075	; 0x8133
 800c608:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c60a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c60e:	4619      	mov	r1, r3
 800c610:	482c      	ldr	r0, [pc, #176]	; (800c6c4 <BSP_SDRAM_MspInit+0x1e0>)
 800c612:	f7f8 f807 	bl	8004624 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800c616:	2328      	movs	r3, #40	; 0x28
 800c618:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800c61a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c61e:	4619      	mov	r1, r3
 800c620:	4829      	ldr	r0, [pc, #164]	; (800c6c8 <BSP_SDRAM_MspInit+0x1e4>)
 800c622:	f7f7 ffff 	bl	8004624 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800c626:	4b29      	ldr	r3, [pc, #164]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c628:	2200      	movs	r2, #0
 800c62a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800c62c:	4b27      	ldr	r3, [pc, #156]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c62e:	2280      	movs	r2, #128	; 0x80
 800c630:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800c632:	4b26      	ldr	r3, [pc, #152]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c634:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c638:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800c63a:	4b24      	ldr	r3, [pc, #144]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c63c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c640:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800c642:	4b22      	ldr	r3, [pc, #136]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c648:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800c64a:	4b20      	ldr	r3, [pc, #128]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c64c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c650:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800c652:	4b1e      	ldr	r3, [pc, #120]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c654:	2200      	movs	r2, #0
 800c656:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800c658:	4b1c      	ldr	r3, [pc, #112]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c65a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c65e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800c660:	4b1a      	ldr	r3, [pc, #104]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c662:	2200      	movs	r2, #0
 800c664:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800c666:	4b19      	ldr	r3, [pc, #100]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c668:	2203      	movs	r2, #3
 800c66a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800c66c:	4b17      	ldr	r3, [pc, #92]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c66e:	2200      	movs	r2, #0
 800c670:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800c672:	4b16      	ldr	r3, [pc, #88]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c674:	2200      	movs	r2, #0
 800c676:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800c678:	4b14      	ldr	r3, [pc, #80]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c67a:	4a15      	ldr	r2, [pc, #84]	; (800c6d0 <BSP_SDRAM_MspInit+0x1ec>)
 800c67c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a12      	ldr	r2, [pc, #72]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c682:	631a      	str	r2, [r3, #48]	; 0x30
 800c684:	4a11      	ldr	r2, [pc, #68]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800c68a:	4810      	ldr	r0, [pc, #64]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c68c:	f7f7 fb20 	bl	8003cd0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800c690:	480e      	ldr	r0, [pc, #56]	; (800c6cc <BSP_SDRAM_MspInit+0x1e8>)
 800c692:	f7f7 fa6f 	bl	8003b74 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800c696:	2200      	movs	r2, #0
 800c698:	210f      	movs	r1, #15
 800c69a:	2038      	movs	r0, #56	; 0x38
 800c69c:	f7f7 f9c6 	bl	8003a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800c6a0:	2038      	movs	r0, #56	; 0x38
 800c6a2:	f7f7 f9df 	bl	8003a64 <HAL_NVIC_EnableIRQ>
}
 800c6a6:	bf00      	nop
 800c6a8:	3740      	adds	r7, #64	; 0x40
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	40023800 	.word	0x40023800
 800c6b4:	40020800 	.word	0x40020800
 800c6b8:	40020c00 	.word	0x40020c00
 800c6bc:	40021000 	.word	0x40021000
 800c6c0:	40021400 	.word	0x40021400
 800c6c4:	40021800 	.word	0x40021800
 800c6c8:	40021c00 	.word	0x40021c00
 800c6cc:	20000228 	.word	0x20000228
 800c6d0:	40026410 	.word	0x40026410

0800c6d4 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	4603      	mov	r3, r0
 800c6dc:	460a      	mov	r2, r1
 800c6de:	80fb      	strh	r3, [r7, #6]
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800c6e8:	4a14      	ldr	r2, [pc, #80]	; (800c73c <BSP_TS_Init+0x68>)
 800c6ea:	88fb      	ldrh	r3, [r7, #6]
 800c6ec:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800c6ee:	4a14      	ldr	r2, [pc, #80]	; (800c740 <BSP_TS_Init+0x6c>)
 800c6f0:	88bb      	ldrh	r3, [r7, #4]
 800c6f2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800c6f4:	4b13      	ldr	r3, [pc, #76]	; (800c744 <BSP_TS_Init+0x70>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2070      	movs	r0, #112	; 0x70
 800c6fa:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800c6fc:	4b11      	ldr	r3, [pc, #68]	; (800c744 <BSP_TS_Init+0x70>)
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	2070      	movs	r0, #112	; 0x70
 800c702:	4798      	blx	r3
 800c704:	4603      	mov	r3, r0
 800c706:	2b51      	cmp	r3, #81	; 0x51
 800c708:	d111      	bne.n	800c72e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800c70a:	4b0f      	ldr	r3, [pc, #60]	; (800c748 <BSP_TS_Init+0x74>)
 800c70c:	4a0d      	ldr	r2, [pc, #52]	; (800c744 <BSP_TS_Init+0x70>)
 800c70e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800c710:	4b0e      	ldr	r3, [pc, #56]	; (800c74c <BSP_TS_Init+0x78>)
 800c712:	2270      	movs	r2, #112	; 0x70
 800c714:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800c716:	4b0e      	ldr	r3, [pc, #56]	; (800c750 <BSP_TS_Init+0x7c>)
 800c718:	2208      	movs	r2, #8
 800c71a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800c71c:	4b0a      	ldr	r3, [pc, #40]	; (800c748 <BSP_TS_Init+0x74>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	4a0a      	ldr	r2, [pc, #40]	; (800c74c <BSP_TS_Init+0x78>)
 800c724:	7812      	ldrb	r2, [r2, #0]
 800c726:	b292      	uxth	r2, r2
 800c728:	4610      	mov	r0, r2
 800c72a:	4798      	blx	r3
 800c72c:	e001      	b.n	800c732 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800c72e:	2303      	movs	r3, #3
 800c730:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c732:	7bfb      	ldrb	r3, [r7, #15]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	2000028c 	.word	0x2000028c
 800c740:	2000028e 	.word	0x2000028e
 800c744:	2000001c 	.word	0x2000001c
 800c748:	20000288 	.word	0x20000288
 800c74c:	20000291 	.word	0x20000291
 800c750:	20000290 	.word	0x20000290

0800c754 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800c754:	b590      	push	{r4, r7, lr}
 800c756:	b097      	sub	sp, #92	; 0x5c
 800c758:	af02      	add	r7, sp, #8
 800c75a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800c75c:	2300      	movs	r3, #0
 800c75e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800c762:	2300      	movs	r3, #0
 800c764:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800c766:	2300      	movs	r3, #0
 800c768:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800c76e:	4b97      	ldr	r3, [pc, #604]	; (800c9cc <BSP_TS_GetState+0x278>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	4a96      	ldr	r2, [pc, #600]	; (800c9d0 <BSP_TS_GetState+0x27c>)
 800c776:	7812      	ldrb	r2, [r2, #0]
 800c778:	b292      	uxth	r2, r2
 800c77a:	4610      	mov	r0, r2
 800c77c:	4798      	blx	r3
 800c77e:	4603      	mov	r3, r0
 800c780:	461a      	mov	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	f000 81a8 	beq.w	800cae0 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800c790:	2300      	movs	r3, #0
 800c792:	64bb      	str	r3, [r7, #72]	; 0x48
 800c794:	e197      	b.n	800cac6 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800c796:	4b8d      	ldr	r3, [pc, #564]	; (800c9cc <BSP_TS_GetState+0x278>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	695b      	ldr	r3, [r3, #20]
 800c79c:	4a8c      	ldr	r2, [pc, #560]	; (800c9d0 <BSP_TS_GetState+0x27c>)
 800c79e:	7812      	ldrb	r2, [r2, #0]
 800c7a0:	b290      	uxth	r0, r2
 800c7a2:	f107 0120 	add.w	r1, r7, #32
 800c7a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7a8:	0052      	lsls	r2, r2, #1
 800c7aa:	188c      	adds	r4, r1, r2
 800c7ac:	f107 0114 	add.w	r1, r7, #20
 800c7b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7b2:	0052      	lsls	r2, r2, #1
 800c7b4:	440a      	add	r2, r1
 800c7b6:	4621      	mov	r1, r4
 800c7b8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800c7ba:	4b86      	ldr	r3, [pc, #536]	; (800c9d4 <BSP_TS_GetState+0x280>)
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d11b      	bne.n	800c7fa <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 800c7c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7c4:	005b      	lsls	r3, r3, #1
 800c7c6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800c7d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c7d8:	440b      	add	r3, r1
 800c7da:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800c7de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c7e6:	4413      	add	r3, r2
 800c7e8:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800c7ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ee:	005b      	lsls	r3, r3, #1
 800c7f0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c7f4:	440b      	add	r3, r1
 800c7f6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800c7fa:	4b76      	ldr	r3, [pc, #472]	; (800c9d4 <BSP_TS_GetState+0x280>)
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	f003 0302 	and.w	r3, r3, #2
 800c802:	2b00      	cmp	r3, #0
 800c804:	d010      	beq.n	800c828 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 800c806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c808:	005b      	lsls	r3, r3, #1
 800c80a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c80e:	4413      	add	r3, r2
 800c810:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800c814:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800c818:	b29a      	uxth	r2, r3
 800c81a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c81c:	005b      	lsls	r3, r3, #1
 800c81e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c822:	440b      	add	r3, r1
 800c824:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800c828:	4b6a      	ldr	r3, [pc, #424]	; (800c9d4 <BSP_TS_GetState+0x280>)
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	f003 0304 	and.w	r3, r3, #4
 800c830:	2b00      	cmp	r3, #0
 800c832:	d010      	beq.n	800c856 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 800c834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c836:	005b      	lsls	r3, r3, #1
 800c838:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c83c:	4413      	add	r3, r2
 800c83e:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800c842:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800c846:	b29a      	uxth	r2, r3
 800c848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c84a:	005b      	lsls	r3, r3, #1
 800c84c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c850:	440b      	add	r3, r1
 800c852:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800c856:	4b5f      	ldr	r3, [pc, #380]	; (800c9d4 <BSP_TS_GetState+0x280>)
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	f003 0308 	and.w	r3, r3, #8
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d01b      	beq.n	800c89a <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800c862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c86a:	4413      	add	r3, r2
 800c86c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800c870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c872:	005b      	lsls	r3, r3, #1
 800c874:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c878:	440b      	add	r3, r1
 800c87a:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800c87e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c880:	005b      	lsls	r3, r3, #1
 800c882:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c886:	4413      	add	r3, r2
 800c888:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800c88c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c88e:	005b      	lsls	r3, r3, #1
 800c890:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c894:	440b      	add	r3, r1
 800c896:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800c89a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c89c:	005b      	lsls	r3, r3, #1
 800c89e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c8a2:	4413      	add	r3, r2
 800c8a4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	4a4b      	ldr	r2, [pc, #300]	; (800c9d8 <BSP_TS_GetState+0x284>)
 800c8ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8b2:	4299      	cmp	r1, r3
 800c8b4:	d90e      	bls.n	800c8d4 <BSP_TS_GetState+0x180>
 800c8b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8b8:	005b      	lsls	r3, r3, #1
 800c8ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c8be:	4413      	add	r3, r2
 800c8c0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800c8c4:	4944      	ldr	r1, [pc, #272]	; (800c9d8 <BSP_TS_GetState+0x284>)
 800c8c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	e00d      	b.n	800c8f0 <BSP_TS_GetState+0x19c>
 800c8d4:	4a40      	ldr	r2, [pc, #256]	; (800c9d8 <BSP_TS_GetState+0x284>)
 800c8d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8e0:	005b      	lsls	r3, r3, #1
 800c8e2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c8e6:	440b      	add	r3, r1
 800c8e8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800c8f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c8fc:	4413      	add	r3, r2
 800c8fe:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800c902:	4619      	mov	r1, r3
 800c904:	4a35      	ldr	r2, [pc, #212]	; (800c9dc <BSP_TS_GetState+0x288>)
 800c906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c90c:	4299      	cmp	r1, r3
 800c90e:	d90e      	bls.n	800c92e <BSP_TS_GetState+0x1da>
 800c910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c918:	4413      	add	r3, r2
 800c91a:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800c91e:	492f      	ldr	r1, [pc, #188]	; (800c9dc <BSP_TS_GetState+0x288>)
 800c920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c922:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c926:	b29b      	uxth	r3, r3
 800c928:	1ad3      	subs	r3, r2, r3
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	e00d      	b.n	800c94a <BSP_TS_GetState+0x1f6>
 800c92e:	4a2b      	ldr	r2, [pc, #172]	; (800c9dc <BSP_TS_GetState+0x288>)
 800c930:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c936:	b29a      	uxth	r2, r3
 800c938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c940:	440b      	add	r3, r1
 800c942:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	b29b      	uxth	r3, r3
 800c94a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800c94e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c952:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c956:	4413      	add	r3, r2
 800c958:	2b05      	cmp	r3, #5
 800c95a:	dd17      	ble.n	800c98c <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800c95c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c95e:	005b      	lsls	r3, r3, #1
 800c960:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c964:	4413      	add	r3, r2
 800c966:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800c96a:	4619      	mov	r1, r3
 800c96c:	4a1a      	ldr	r2, [pc, #104]	; (800c9d8 <BSP_TS_GetState+0x284>)
 800c96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c970:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800c974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c97c:	4413      	add	r3, r2
 800c97e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800c982:	4619      	mov	r1, r3
 800c984:	4a15      	ldr	r2, [pc, #84]	; (800c9dc <BSP_TS_GetState+0x288>)
 800c986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c988:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800c98c:	4b10      	ldr	r3, [pc, #64]	; (800c9d0 <BSP_TS_GetState+0x27c>)
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	2b70      	cmp	r3, #112	; 0x70
 800c992:	d125      	bne.n	800c9e0 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 800c994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c996:	005b      	lsls	r3, r3, #1
 800c998:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c99c:	4413      	add	r3, r2
 800c99e:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9a6:	005b      	lsls	r3, r3, #1
 800c9a8:	4413      	add	r3, r2
 800c9aa:	460a      	mov	r2, r1
 800c9ac:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800c9ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9b0:	005b      	lsls	r3, r3, #1
 800c9b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800c9b6:	4413      	add	r3, r2
 800c9b8:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9c0:	3304      	adds	r3, #4
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	4413      	add	r3, r2
 800c9c6:	460a      	mov	r2, r1
 800c9c8:	809a      	strh	r2, [r3, #4]
 800c9ca:	e02c      	b.n	800ca26 <BSP_TS_GetState+0x2d2>
 800c9cc:	20000288 	.word	0x20000288
 800c9d0:	20000291 	.word	0x20000291
 800c9d4:	20000290 	.word	0x20000290
 800c9d8:	20000294 	.word	0x20000294
 800c9dc:	200002a8 	.word	0x200002a8
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800c9e0:	4b42      	ldr	r3, [pc, #264]	; (800caec <BSP_TS_GetState+0x398>)
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	4a42      	ldr	r2, [pc, #264]	; (800caf0 <BSP_TS_GetState+0x39c>)
 800c9e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9ee:	fb03 f301 	mul.w	r3, r3, r1
 800c9f2:	0b1b      	lsrs	r3, r3, #12
 800c9f4:	b299      	uxth	r1, r3
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c9fa:	005b      	lsls	r3, r3, #1
 800c9fc:	4413      	add	r3, r2
 800c9fe:	460a      	mov	r2, r1
 800ca00:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800ca02:	4b3c      	ldr	r3, [pc, #240]	; (800caf4 <BSP_TS_GetState+0x3a0>)
 800ca04:	881b      	ldrh	r3, [r3, #0]
 800ca06:	4619      	mov	r1, r3
 800ca08:	4a3b      	ldr	r2, [pc, #236]	; (800caf8 <BSP_TS_GetState+0x3a4>)
 800ca0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca10:	fb03 f301 	mul.w	r3, r3, r1
 800ca14:	0b1b      	lsrs	r3, r3, #12
 800ca16:	b299      	uxth	r1, r3
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	4413      	add	r3, r2
 800ca22:	460a      	mov	r2, r1
 800ca24:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800ca26:	4b35      	ldr	r3, [pc, #212]	; (800cafc <BSP_TS_GetState+0x3a8>)
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	b298      	uxth	r0, r3
 800ca2c:	f107 010c 	add.w	r1, r7, #12
 800ca30:	f107 0210 	add.w	r2, r7, #16
 800ca34:	f107 0308 	add.w	r3, r7, #8
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ca3e:	f000 fa73 	bl	800cf28 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	b2d9      	uxtb	r1, r3
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca4a:	4413      	add	r3, r2
 800ca4c:	3316      	adds	r3, #22
 800ca4e:	460a      	mov	r2, r1
 800ca50:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	b2d9      	uxtb	r1, r3
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca5a:	4413      	add	r3, r2
 800ca5c:	3320      	adds	r3, #32
 800ca5e:	460a      	mov	r2, r1
 800ca60:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	2b03      	cmp	r3, #3
 800ca66:	d827      	bhi.n	800cab8 <BSP_TS_GetState+0x364>
 800ca68:	a201      	add	r2, pc, #4	; (adr r2, 800ca70 <BSP_TS_GetState+0x31c>)
 800ca6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca6e:	bf00      	nop
 800ca70:	0800ca81 	.word	0x0800ca81
 800ca74:	0800ca8f 	.word	0x0800ca8f
 800ca78:	0800ca9d 	.word	0x0800ca9d
 800ca7c:	0800caab 	.word	0x0800caab
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca84:	4413      	add	r3, r2
 800ca86:	331b      	adds	r3, #27
 800ca88:	2201      	movs	r2, #1
 800ca8a:	701a      	strb	r2, [r3, #0]
          break;
 800ca8c:	e018      	b.n	800cac0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca92:	4413      	add	r3, r2
 800ca94:	331b      	adds	r3, #27
 800ca96:	2202      	movs	r2, #2
 800ca98:	701a      	strb	r2, [r3, #0]
          break;
 800ca9a:	e011      	b.n	800cac0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caa0:	4413      	add	r3, r2
 800caa2:	331b      	adds	r3, #27
 800caa4:	2203      	movs	r2, #3
 800caa6:	701a      	strb	r2, [r3, #0]
          break;
 800caa8:	e00a      	b.n	800cac0 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800caae:	4413      	add	r3, r2
 800cab0:	331b      	adds	r3, #27
 800cab2:	2200      	movs	r2, #0
 800cab4:	701a      	strb	r2, [r3, #0]
          break;
 800cab6:	e003      	b.n	800cac0 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 800cabe:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800cac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cac2:	3301      	adds	r3, #1
 800cac4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	461a      	mov	r2, r3
 800cacc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cace:	4293      	cmp	r3, r2
 800cad0:	f4ff ae61 	bcc.w	800c796 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 f813 	bl	800cb00 <BSP_TS_Get_GestureId>
 800cada:	4603      	mov	r3, r0
 800cadc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800cae0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3754      	adds	r7, #84	; 0x54
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd90      	pop	{r4, r7, pc}
 800caec:	2000028c 	.word	0x2000028c
 800caf0:	20000294 	.word	0x20000294
 800caf4:	2000028e 	.word	0x2000028e
 800caf8:	200002a8 	.word	0x200002a8
 800cafc:	20000291 	.word	0x20000291

0800cb00 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800cb10:	4b1f      	ldr	r3, [pc, #124]	; (800cb90 <BSP_TS_Get_GestureId+0x90>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	f107 0208 	add.w	r2, r7, #8
 800cb1a:	4611      	mov	r1, r2
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 f9ea 	bl	800cef6 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	2b18      	cmp	r3, #24
 800cb26:	d01b      	beq.n	800cb60 <BSP_TS_Get_GestureId+0x60>
 800cb28:	2b18      	cmp	r3, #24
 800cb2a:	d806      	bhi.n	800cb3a <BSP_TS_Get_GestureId+0x3a>
 800cb2c:	2b10      	cmp	r3, #16
 800cb2e:	d00f      	beq.n	800cb50 <BSP_TS_Get_GestureId+0x50>
 800cb30:	2b14      	cmp	r3, #20
 800cb32:	d011      	beq.n	800cb58 <BSP_TS_Get_GestureId+0x58>
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d007      	beq.n	800cb48 <BSP_TS_Get_GestureId+0x48>
 800cb38:	e022      	b.n	800cb80 <BSP_TS_Get_GestureId+0x80>
 800cb3a:	2b40      	cmp	r3, #64	; 0x40
 800cb3c:	d018      	beq.n	800cb70 <BSP_TS_Get_GestureId+0x70>
 800cb3e:	2b49      	cmp	r3, #73	; 0x49
 800cb40:	d01a      	beq.n	800cb78 <BSP_TS_Get_GestureId+0x78>
 800cb42:	2b1c      	cmp	r3, #28
 800cb44:	d010      	beq.n	800cb68 <BSP_TS_Get_GestureId+0x68>
 800cb46:	e01b      	b.n	800cb80 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800cb4e:	e01a      	b.n	800cb86 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800cb56:	e016      	b.n	800cb86 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800cb5e:	e012      	b.n	800cb86 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2203      	movs	r2, #3
 800cb64:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800cb66:	e00e      	b.n	800cb86 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2204      	movs	r2, #4
 800cb6c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800cb6e:	e00a      	b.n	800cb86 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2205      	movs	r2, #5
 800cb74:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800cb76:	e006      	b.n	800cb86 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2206      	movs	r2, #6
 800cb7c:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800cb7e:	e002      	b.n	800cb86 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	73fb      	strb	r3, [r7, #15]
      break;
 800cb84:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800cb86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3710      	adds	r7, #16
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	20000291 	.word	0x20000291

0800cb94 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b082      	sub	sp, #8
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800cb9e:	20c8      	movs	r0, #200	; 0xc8
 800cba0:	f7fe fc7a 	bl	800b498 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800cba4:	f000 fa7a 	bl	800d09c <ft5336_I2C_InitializeIfRequired>
}
 800cba8:	bf00      	nop
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800cbba:	bf00      	nop
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr

0800cbc6 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b084      	sub	sp, #16
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	4603      	mov	r3, r0
 800cbce:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800cbd8:	2300      	movs	r3, #0
 800cbda:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800cbdc:	f000 fa5e 	bl	800d09c <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73fb      	strb	r3, [r7, #15]
 800cbe4:	e010      	b.n	800cc08 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800cbe6:	88fb      	ldrh	r3, [r7, #6]
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	21a8      	movs	r1, #168	; 0xa8
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fe fc35 	bl	800b45c <TS_IO_Read>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800cbf6:	7b7b      	ldrb	r3, [r7, #13]
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	2b51      	cmp	r3, #81	; 0x51
 800cbfc:	d101      	bne.n	800cc02 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800cbfe:	2301      	movs	r3, #1
 800cc00:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800cc02:	7bfb      	ldrb	r3, [r7, #15]
 800cc04:	3301      	adds	r3, #1
 800cc06:	73fb      	strb	r3, [r7, #15]
 800cc08:	7bfb      	ldrb	r3, [r7, #15]
 800cc0a:	2b02      	cmp	r3, #2
 800cc0c:	d802      	bhi.n	800cc14 <ft5336_ReadID+0x4e>
 800cc0e:	7bbb      	ldrb	r3, [r7, #14]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d0e8      	beq.n	800cbe6 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800cc14:	7b7b      	ldrb	r3, [r7, #13]
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	b29b      	uxth	r3, r3
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b082      	sub	sp, #8
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	4603      	mov	r3, r0
 800cc2a:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800cc2c:	88fb      	ldrh	r3, [r7, #6]
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 fa44 	bl	800d0bc <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800cc34:	88fb      	ldrh	r3, [r7, #6]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 f932 	bl	800cea0 <ft5336_TS_DisableIT>
}
 800cc3c:	bf00      	nop
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800cc52:	88fb      	ldrh	r3, [r7, #6]
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2102      	movs	r1, #2
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7fe fbff 	bl	800b45c <TS_IO_Read>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800cc62:	7bfb      	ldrb	r3, [r7, #15]
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	f003 030f 	and.w	r3, r3, #15
 800cc6a:	b2db      	uxtb	r3, r3
 800cc6c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800cc6e:	7bfb      	ldrb	r3, [r7, #15]
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	2b05      	cmp	r3, #5
 800cc74:	d901      	bls.n	800cc7a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
 800cc7c:	b2da      	uxtb	r2, r3
 800cc7e:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <ft5336_TS_DetectTouch+0x50>)
 800cc80:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800cc82:	4b04      	ldr	r3, [pc, #16]	; (800cc94 <ft5336_TS_DetectTouch+0x50>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800cc88:	7bfb      	ldrb	r3, [r7, #15]
 800cc8a:	b2db      	uxtb	r3, r3
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	200002bc 	.word	0x200002bc

0800cc98 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
 800cca4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800cca6:	2300      	movs	r3, #0
 800cca8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800ccba:	4b6d      	ldr	r3, [pc, #436]	; (800ce70 <ft5336_TS_GetXY+0x1d8>)
 800ccbc:	789a      	ldrb	r2, [r3, #2]
 800ccbe:	4b6c      	ldr	r3, [pc, #432]	; (800ce70 <ft5336_TS_GetXY+0x1d8>)
 800ccc0:	785b      	ldrb	r3, [r3, #1]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	f080 80cf 	bcs.w	800ce66 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800ccc8:	4b69      	ldr	r3, [pc, #420]	; (800ce70 <ft5336_TS_GetXY+0x1d8>)
 800ccca:	789b      	ldrb	r3, [r3, #2]
 800cccc:	2b09      	cmp	r3, #9
 800ccce:	d871      	bhi.n	800cdb4 <ft5336_TS_GetXY+0x11c>
 800ccd0:	a201      	add	r2, pc, #4	; (adr r2, 800ccd8 <ft5336_TS_GetXY+0x40>)
 800ccd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccd6:	bf00      	nop
 800ccd8:	0800cd01 	.word	0x0800cd01
 800ccdc:	0800cd13 	.word	0x0800cd13
 800cce0:	0800cd25 	.word	0x0800cd25
 800cce4:	0800cd37 	.word	0x0800cd37
 800cce8:	0800cd49 	.word	0x0800cd49
 800ccec:	0800cd5b 	.word	0x0800cd5b
 800ccf0:	0800cd6d 	.word	0x0800cd6d
 800ccf4:	0800cd7f 	.word	0x0800cd7f
 800ccf8:	0800cd91 	.word	0x0800cd91
 800ccfc:	0800cda3 	.word	0x0800cda3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800cd00:	2304      	movs	r3, #4
 800cd02:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 800cd04:	2303      	movs	r3, #3
 800cd06:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800cd08:	2306      	movs	r3, #6
 800cd0a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 800cd0c:	2305      	movs	r3, #5
 800cd0e:	753b      	strb	r3, [r7, #20]
      break;
 800cd10:	e051      	b.n	800cdb6 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800cd12:	230a      	movs	r3, #10
 800cd14:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800cd16:	2309      	movs	r3, #9
 800cd18:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800cd1a:	230c      	movs	r3, #12
 800cd1c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800cd1e:	230b      	movs	r3, #11
 800cd20:	753b      	strb	r3, [r7, #20]
      break;
 800cd22:	e048      	b.n	800cdb6 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800cd24:	2310      	movs	r3, #16
 800cd26:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800cd28:	230f      	movs	r3, #15
 800cd2a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 800cd2c:	2312      	movs	r3, #18
 800cd2e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800cd30:	2311      	movs	r3, #17
 800cd32:	753b      	strb	r3, [r7, #20]
      break;
 800cd34:	e03f      	b.n	800cdb6 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800cd36:	2316      	movs	r3, #22
 800cd38:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800cd3a:	2315      	movs	r3, #21
 800cd3c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800cd3e:	2318      	movs	r3, #24
 800cd40:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800cd42:	2317      	movs	r3, #23
 800cd44:	753b      	strb	r3, [r7, #20]
      break;
 800cd46:	e036      	b.n	800cdb6 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800cd48:	231c      	movs	r3, #28
 800cd4a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 800cd4c:	231b      	movs	r3, #27
 800cd4e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800cd50:	231e      	movs	r3, #30
 800cd52:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800cd54:	231d      	movs	r3, #29
 800cd56:	753b      	strb	r3, [r7, #20]
      break;
 800cd58:	e02d      	b.n	800cdb6 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800cd5a:	2322      	movs	r3, #34	; 0x22
 800cd5c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800cd5e:	2321      	movs	r3, #33	; 0x21
 800cd60:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800cd62:	2324      	movs	r3, #36	; 0x24
 800cd64:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800cd66:	2323      	movs	r3, #35	; 0x23
 800cd68:	753b      	strb	r3, [r7, #20]
      break;
 800cd6a:	e024      	b.n	800cdb6 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 800cd6c:	2328      	movs	r3, #40	; 0x28
 800cd6e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800cd70:	2327      	movs	r3, #39	; 0x27
 800cd72:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800cd74:	232a      	movs	r3, #42	; 0x2a
 800cd76:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 800cd78:	2329      	movs	r3, #41	; 0x29
 800cd7a:	753b      	strb	r3, [r7, #20]
      break;
 800cd7c:	e01b      	b.n	800cdb6 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800cd7e:	232e      	movs	r3, #46	; 0x2e
 800cd80:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800cd82:	232d      	movs	r3, #45	; 0x2d
 800cd84:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800cd86:	2330      	movs	r3, #48	; 0x30
 800cd88:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800cd8a:	232f      	movs	r3, #47	; 0x2f
 800cd8c:	753b      	strb	r3, [r7, #20]
      break;
 800cd8e:	e012      	b.n	800cdb6 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800cd90:	2334      	movs	r3, #52	; 0x34
 800cd92:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800cd94:	2333      	movs	r3, #51	; 0x33
 800cd96:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800cd98:	2336      	movs	r3, #54	; 0x36
 800cd9a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 800cd9c:	2335      	movs	r3, #53	; 0x35
 800cd9e:	753b      	strb	r3, [r7, #20]
      break;
 800cda0:	e009      	b.n	800cdb6 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800cda2:	233a      	movs	r3, #58	; 0x3a
 800cda4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800cda6:	2339      	movs	r3, #57	; 0x39
 800cda8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800cdaa:	233c      	movs	r3, #60	; 0x3c
 800cdac:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800cdae:	233b      	movs	r3, #59	; 0x3b
 800cdb0:	753b      	strb	r3, [r7, #20]
      break;
 800cdb2:	e000      	b.n	800cdb6 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800cdb4:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800cdb6:	89fb      	ldrh	r3, [r7, #14]
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	7dfa      	ldrb	r2, [r7, #23]
 800cdbc:	4611      	mov	r1, r2
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7fe fb4c 	bl	800b45c <TS_IO_Read>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800cdc8:	7cfb      	ldrb	r3, [r7, #19]
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	4b29      	ldr	r3, [pc, #164]	; (800ce74 <ft5336_TS_GetXY+0x1dc>)
 800cdd0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800cdd2:	89fb      	ldrh	r3, [r7, #14]
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	7dba      	ldrb	r2, [r7, #22]
 800cdd8:	4611      	mov	r1, r2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fe fb3e 	bl	800b45c <TS_IO_Read>
 800cde0:	4603      	mov	r3, r0
 800cde2:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800cde4:	7cfb      	ldrb	r3, [r7, #19]
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	021b      	lsls	r3, r3, #8
 800cdea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800cdee:	b21a      	sxth	r2, r3
 800cdf0:	4b20      	ldr	r3, [pc, #128]	; (800ce74 <ft5336_TS_GetXY+0x1dc>)
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	b21b      	sxth	r3, r3
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	b21b      	sxth	r3, r3
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	4b1d      	ldr	r3, [pc, #116]	; (800ce74 <ft5336_TS_GetXY+0x1dc>)
 800cdfe:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800ce00:	4b1c      	ldr	r3, [pc, #112]	; (800ce74 <ft5336_TS_GetXY+0x1dc>)
 800ce02:	881a      	ldrh	r2, [r3, #0]
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800ce08:	89fb      	ldrh	r3, [r7, #14]
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	7d7a      	ldrb	r2, [r7, #21]
 800ce0e:	4611      	mov	r1, r2
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7fe fb23 	bl	800b45c <TS_IO_Read>
 800ce16:	4603      	mov	r3, r0
 800ce18:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800ce1a:	7cfb      	ldrb	r3, [r7, #19]
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	4b14      	ldr	r3, [pc, #80]	; (800ce74 <ft5336_TS_GetXY+0x1dc>)
 800ce22:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800ce24:	89fb      	ldrh	r3, [r7, #14]
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	7d3a      	ldrb	r2, [r7, #20]
 800ce2a:	4611      	mov	r1, r2
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7fe fb15 	bl	800b45c <TS_IO_Read>
 800ce32:	4603      	mov	r3, r0
 800ce34:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800ce36:	7cfb      	ldrb	r3, [r7, #19]
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	021b      	lsls	r3, r3, #8
 800ce3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ce40:	b21a      	sxth	r2, r3
 800ce42:	4b0c      	ldr	r3, [pc, #48]	; (800ce74 <ft5336_TS_GetXY+0x1dc>)
 800ce44:	881b      	ldrh	r3, [r3, #0]
 800ce46:	b21b      	sxth	r3, r3
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	b21b      	sxth	r3, r3
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	4b09      	ldr	r3, [pc, #36]	; (800ce74 <ft5336_TS_GetXY+0x1dc>)
 800ce50:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800ce52:	4b08      	ldr	r3, [pc, #32]	; (800ce74 <ft5336_TS_GetXY+0x1dc>)
 800ce54:	881a      	ldrh	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800ce5a:	4b05      	ldr	r3, [pc, #20]	; (800ce70 <ft5336_TS_GetXY+0x1d8>)
 800ce5c:	789b      	ldrb	r3, [r3, #2]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	4b03      	ldr	r3, [pc, #12]	; (800ce70 <ft5336_TS_GetXY+0x1d8>)
 800ce64:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800ce66:	bf00      	nop
 800ce68:	3718      	adds	r7, #24
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	200002bc 	.word	0x200002bc
 800ce74:	200002c0 	.word	0x200002c0

0800ce78 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	4603      	mov	r3, r0
 800ce80:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800ce82:	2300      	movs	r3, #0
 800ce84:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800ce86:	2301      	movs	r3, #1
 800ce88:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800ce8a:	88fb      	ldrh	r3, [r7, #6]
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	7bfa      	ldrb	r2, [r7, #15]
 800ce90:	21a4      	movs	r1, #164	; 0xa4
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fe fac8 	bl	800b428 <TS_IO_Write>
}
 800ce98:	bf00      	nop
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	4603      	mov	r3, r0
 800cea8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800ceb2:	88fb      	ldrh	r3, [r7, #6]
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	7bfa      	ldrb	r2, [r7, #15]
 800ceb8:	21a4      	movs	r1, #164	; 0xa4
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7fe fab4 	bl	800b428 <TS_IO_Write>
}
 800cec0:	bf00      	nop
 800cec2:	3710      	adds	r7, #16
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	4603      	mov	r3, r0
 800ced0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	4603      	mov	r3, r0
 800cee8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800ceea:	bf00      	nop
 800ceec:	370c      	adds	r7, #12
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr

0800cef6 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b084      	sub	sp, #16
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	4603      	mov	r3, r0
 800cefe:	6039      	str	r1, [r7, #0]
 800cf00:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800cf02:	2300      	movs	r3, #0
 800cf04:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800cf06:	88fb      	ldrh	r3, [r7, #6]
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2101      	movs	r1, #1
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fe faa5 	bl	800b45c <TS_IO_Read>
 800cf12:	4603      	mov	r3, r0
 800cf14:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800cf16:	7bfb      	ldrb	r3, [r7, #15]
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	683b      	ldr	r3, [r7, #0]
 800cf1e:	601a      	str	r2, [r3, #0]
}
 800cf20:	bf00      	nop
 800cf22:	3710      	adds	r7, #16
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60b9      	str	r1, [r7, #8]
 800cf30:	607a      	str	r2, [r7, #4]
 800cf32:	603b      	str	r3, [r7, #0]
 800cf34:	4603      	mov	r3, r0
 800cf36:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800cf40:	2300      	movs	r3, #0
 800cf42:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800cf48:	4b4d      	ldr	r3, [pc, #308]	; (800d080 <ft5336_TS_GetTouchInfo+0x158>)
 800cf4a:	785b      	ldrb	r3, [r3, #1]
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	4293      	cmp	r3, r2
 800cf52:	f080 8090 	bcs.w	800d076 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	2b09      	cmp	r3, #9
 800cf5a:	d85d      	bhi.n	800d018 <ft5336_TS_GetTouchInfo+0xf0>
 800cf5c:	a201      	add	r2, pc, #4	; (adr r2, 800cf64 <ft5336_TS_GetTouchInfo+0x3c>)
 800cf5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf62:	bf00      	nop
 800cf64:	0800cf8d 	.word	0x0800cf8d
 800cf68:	0800cf9b 	.word	0x0800cf9b
 800cf6c:	0800cfa9 	.word	0x0800cfa9
 800cf70:	0800cfb7 	.word	0x0800cfb7
 800cf74:	0800cfc5 	.word	0x0800cfc5
 800cf78:	0800cfd3 	.word	0x0800cfd3
 800cf7c:	0800cfe1 	.word	0x0800cfe1
 800cf80:	0800cfef 	.word	0x0800cfef
 800cf84:	0800cffd 	.word	0x0800cffd
 800cf88:	0800d00b 	.word	0x0800d00b
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 800cf90:	2307      	movs	r3, #7
 800cf92:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800cf94:	2308      	movs	r3, #8
 800cf96:	757b      	strb	r3, [r7, #21]
      break;
 800cf98:	e03f      	b.n	800d01a <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 800cf9a:	2309      	movs	r3, #9
 800cf9c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800cf9e:	230d      	movs	r3, #13
 800cfa0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800cfa2:	230e      	movs	r3, #14
 800cfa4:	757b      	strb	r3, [r7, #21]
      break;
 800cfa6:	e038      	b.n	800d01a <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 800cfa8:	230f      	movs	r3, #15
 800cfaa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 800cfac:	2313      	movs	r3, #19
 800cfae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800cfb0:	2314      	movs	r3, #20
 800cfb2:	757b      	strb	r3, [r7, #21]
      break;
 800cfb4:	e031      	b.n	800d01a <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800cfb6:	2315      	movs	r3, #21
 800cfb8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 800cfba:	2319      	movs	r3, #25
 800cfbc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800cfbe:	231a      	movs	r3, #26
 800cfc0:	757b      	strb	r3, [r7, #21]
      break;
 800cfc2:	e02a      	b.n	800d01a <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800cfc4:	231b      	movs	r3, #27
 800cfc6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 800cfc8:	231f      	movs	r3, #31
 800cfca:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 800cfcc:	2320      	movs	r3, #32
 800cfce:	757b      	strb	r3, [r7, #21]
      break;
 800cfd0:	e023      	b.n	800d01a <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800cfd2:	2321      	movs	r3, #33	; 0x21
 800cfd4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800cfd6:	2325      	movs	r3, #37	; 0x25
 800cfd8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 800cfda:	2326      	movs	r3, #38	; 0x26
 800cfdc:	757b      	strb	r3, [r7, #21]
      break;
 800cfde:	e01c      	b.n	800d01a <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800cfe0:	2327      	movs	r3, #39	; 0x27
 800cfe2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800cfe4:	232b      	movs	r3, #43	; 0x2b
 800cfe6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 800cfe8:	232c      	movs	r3, #44	; 0x2c
 800cfea:	757b      	strb	r3, [r7, #21]
      break;
 800cfec:	e015      	b.n	800d01a <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800cfee:	232d      	movs	r3, #45	; 0x2d
 800cff0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800cff2:	2331      	movs	r3, #49	; 0x31
 800cff4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800cff6:	2332      	movs	r3, #50	; 0x32
 800cff8:	757b      	strb	r3, [r7, #21]
      break;
 800cffa:	e00e      	b.n	800d01a <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 800cffc:	2333      	movs	r3, #51	; 0x33
 800cffe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800d000:	2337      	movs	r3, #55	; 0x37
 800d002:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 800d004:	2338      	movs	r3, #56	; 0x38
 800d006:	757b      	strb	r3, [r7, #21]
      break;
 800d008:	e007      	b.n	800d01a <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800d00a:	2339      	movs	r3, #57	; 0x39
 800d00c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800d00e:	233d      	movs	r3, #61	; 0x3d
 800d010:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800d012:	233e      	movs	r3, #62	; 0x3e
 800d014:	757b      	strb	r3, [r7, #21]
      break;
 800d016:	e000      	b.n	800d01a <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800d018:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800d01a:	89fb      	ldrh	r3, [r7, #14]
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	7dfa      	ldrb	r2, [r7, #23]
 800d020:	4611      	mov	r1, r2
 800d022:	4618      	mov	r0, r3
 800d024:	f7fe fa1a 	bl	800b45c <TS_IO_Read>
 800d028:	4603      	mov	r3, r0
 800d02a:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800d02c:	7d3b      	ldrb	r3, [r7, #20]
 800d02e:	b2db      	uxtb	r3, r3
 800d030:	119b      	asrs	r3, r3, #6
 800d032:	f003 0203 	and.w	r2, r3, #3
 800d036:	6a3b      	ldr	r3, [r7, #32]
 800d038:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800d03a:	89fb      	ldrh	r3, [r7, #14]
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	7dba      	ldrb	r2, [r7, #22]
 800d040:	4611      	mov	r1, r2
 800d042:	4618      	mov	r0, r3
 800d044:	f7fe fa0a 	bl	800b45c <TS_IO_Read>
 800d048:	4603      	mov	r3, r0
 800d04a:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 800d04c:	7d3b      	ldrb	r3, [r7, #20]
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	461a      	mov	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800d056:	89fb      	ldrh	r3, [r7, #14]
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	7d7a      	ldrb	r2, [r7, #21]
 800d05c:	4611      	mov	r1, r2
 800d05e:	4618      	mov	r0, r3
 800d060:	f7fe f9fc 	bl	800b45c <TS_IO_Read>
 800d064:	4603      	mov	r3, r0
 800d066:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800d068:	7d3b      	ldrb	r3, [r7, #20]
 800d06a:	b2db      	uxtb	r3, r3
 800d06c:	111b      	asrs	r3, r3, #4
 800d06e:	f003 0204 	and.w	r2, r3, #4
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800d076:	bf00      	nop
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	200002bc 	.word	0x200002bc

0800d084 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800d084:	b480      	push	{r7}
 800d086:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800d088:	4b03      	ldr	r3, [pc, #12]	; (800d098 <ft5336_Get_I2C_InitializedStatus+0x14>)
 800d08a:	781b      	ldrb	r3, [r3, #0]
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
 800d096:	bf00      	nop
 800d098:	200002bc 	.word	0x200002bc

0800d09c <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800d0a0:	f7ff fff0 	bl	800d084 <ft5336_Get_I2C_InitializedStatus>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d104      	bne.n	800d0b4 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800d0aa:	f7fe f9b3 	bl	800b414 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800d0ae:	4b02      	ldr	r3, [pc, #8]	; (800d0b8 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	701a      	strb	r2, [r3, #0]
  }
}
 800d0b4:	bf00      	nop
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	200002bc 	.word	0x200002bc

0800d0bc <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <__errno>:
 800d0d8:	4b01      	ldr	r3, [pc, #4]	; (800d0e0 <__errno+0x8>)
 800d0da:	6818      	ldr	r0, [r3, #0]
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	20000044 	.word	0x20000044

0800d0e4 <__libc_init_array>:
 800d0e4:	b570      	push	{r4, r5, r6, lr}
 800d0e6:	4e0d      	ldr	r6, [pc, #52]	; (800d11c <__libc_init_array+0x38>)
 800d0e8:	4c0d      	ldr	r4, [pc, #52]	; (800d120 <__libc_init_array+0x3c>)
 800d0ea:	1ba4      	subs	r4, r4, r6
 800d0ec:	10a4      	asrs	r4, r4, #2
 800d0ee:	2500      	movs	r5, #0
 800d0f0:	42a5      	cmp	r5, r4
 800d0f2:	d109      	bne.n	800d108 <__libc_init_array+0x24>
 800d0f4:	4e0b      	ldr	r6, [pc, #44]	; (800d124 <__libc_init_array+0x40>)
 800d0f6:	4c0c      	ldr	r4, [pc, #48]	; (800d128 <__libc_init_array+0x44>)
 800d0f8:	f000 fcba 	bl	800da70 <_init>
 800d0fc:	1ba4      	subs	r4, r4, r6
 800d0fe:	10a4      	asrs	r4, r4, #2
 800d100:	2500      	movs	r5, #0
 800d102:	42a5      	cmp	r5, r4
 800d104:	d105      	bne.n	800d112 <__libc_init_array+0x2e>
 800d106:	bd70      	pop	{r4, r5, r6, pc}
 800d108:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d10c:	4798      	blx	r3
 800d10e:	3501      	adds	r5, #1
 800d110:	e7ee      	b.n	800d0f0 <__libc_init_array+0xc>
 800d112:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d116:	4798      	blx	r3
 800d118:	3501      	adds	r5, #1
 800d11a:	e7f2      	b.n	800d102 <__libc_init_array+0x1e>
 800d11c:	0800f5c0 	.word	0x0800f5c0
 800d120:	0800f5c0 	.word	0x0800f5c0
 800d124:	0800f5c0 	.word	0x0800f5c0
 800d128:	0800f5c4 	.word	0x0800f5c4

0800d12c <memset>:
 800d12c:	4402      	add	r2, r0
 800d12e:	4603      	mov	r3, r0
 800d130:	4293      	cmp	r3, r2
 800d132:	d100      	bne.n	800d136 <memset+0xa>
 800d134:	4770      	bx	lr
 800d136:	f803 1b01 	strb.w	r1, [r3], #1
 800d13a:	e7f9      	b.n	800d130 <memset+0x4>

0800d13c <srand>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	4b0d      	ldr	r3, [pc, #52]	; (800d174 <srand+0x38>)
 800d140:	681c      	ldr	r4, [r3, #0]
 800d142:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d144:	4605      	mov	r5, r0
 800d146:	b97b      	cbnz	r3, 800d168 <srand+0x2c>
 800d148:	2018      	movs	r0, #24
 800d14a:	f000 f89b 	bl	800d284 <malloc>
 800d14e:	4a0a      	ldr	r2, [pc, #40]	; (800d178 <srand+0x3c>)
 800d150:	4b0a      	ldr	r3, [pc, #40]	; (800d17c <srand+0x40>)
 800d152:	63a0      	str	r0, [r4, #56]	; 0x38
 800d154:	e9c0 2300 	strd	r2, r3, [r0]
 800d158:	4b09      	ldr	r3, [pc, #36]	; (800d180 <srand+0x44>)
 800d15a:	6083      	str	r3, [r0, #8]
 800d15c:	230b      	movs	r3, #11
 800d15e:	8183      	strh	r3, [r0, #12]
 800d160:	2201      	movs	r2, #1
 800d162:	2300      	movs	r3, #0
 800d164:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d168:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d16a:	2200      	movs	r2, #0
 800d16c:	611d      	str	r5, [r3, #16]
 800d16e:	615a      	str	r2, [r3, #20]
 800d170:	bd38      	pop	{r3, r4, r5, pc}
 800d172:	bf00      	nop
 800d174:	20000044 	.word	0x20000044
 800d178:	abcd330e 	.word	0xabcd330e
 800d17c:	e66d1234 	.word	0xe66d1234
 800d180:	0005deec 	.word	0x0005deec

0800d184 <rand>:
 800d184:	b538      	push	{r3, r4, r5, lr}
 800d186:	4b13      	ldr	r3, [pc, #76]	; (800d1d4 <rand+0x50>)
 800d188:	681c      	ldr	r4, [r3, #0]
 800d18a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d18c:	b97b      	cbnz	r3, 800d1ae <rand+0x2a>
 800d18e:	2018      	movs	r0, #24
 800d190:	f000 f878 	bl	800d284 <malloc>
 800d194:	4a10      	ldr	r2, [pc, #64]	; (800d1d8 <rand+0x54>)
 800d196:	4b11      	ldr	r3, [pc, #68]	; (800d1dc <rand+0x58>)
 800d198:	63a0      	str	r0, [r4, #56]	; 0x38
 800d19a:	e9c0 2300 	strd	r2, r3, [r0]
 800d19e:	4b10      	ldr	r3, [pc, #64]	; (800d1e0 <rand+0x5c>)
 800d1a0:	6083      	str	r3, [r0, #8]
 800d1a2:	230b      	movs	r3, #11
 800d1a4:	8183      	strh	r3, [r0, #12]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d1ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d1b0:	480c      	ldr	r0, [pc, #48]	; (800d1e4 <rand+0x60>)
 800d1b2:	690a      	ldr	r2, [r1, #16]
 800d1b4:	694b      	ldr	r3, [r1, #20]
 800d1b6:	4c0c      	ldr	r4, [pc, #48]	; (800d1e8 <rand+0x64>)
 800d1b8:	4350      	muls	r0, r2
 800d1ba:	fb04 0003 	mla	r0, r4, r3, r0
 800d1be:	fba2 2304 	umull	r2, r3, r2, r4
 800d1c2:	4403      	add	r3, r0
 800d1c4:	1c54      	adds	r4, r2, #1
 800d1c6:	f143 0500 	adc.w	r5, r3, #0
 800d1ca:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800d1ce:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800d1d2:	bd38      	pop	{r3, r4, r5, pc}
 800d1d4:	20000044 	.word	0x20000044
 800d1d8:	abcd330e 	.word	0xabcd330e
 800d1dc:	e66d1234 	.word	0xe66d1234
 800d1e0:	0005deec 	.word	0x0005deec
 800d1e4:	5851f42d 	.word	0x5851f42d
 800d1e8:	4c957f2d 	.word	0x4c957f2d

0800d1ec <siprintf>:
 800d1ec:	b40e      	push	{r1, r2, r3}
 800d1ee:	b500      	push	{lr}
 800d1f0:	b09c      	sub	sp, #112	; 0x70
 800d1f2:	ab1d      	add	r3, sp, #116	; 0x74
 800d1f4:	9002      	str	r0, [sp, #8]
 800d1f6:	9006      	str	r0, [sp, #24]
 800d1f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d1fc:	4809      	ldr	r0, [pc, #36]	; (800d224 <siprintf+0x38>)
 800d1fe:	9107      	str	r1, [sp, #28]
 800d200:	9104      	str	r1, [sp, #16]
 800d202:	4909      	ldr	r1, [pc, #36]	; (800d228 <siprintf+0x3c>)
 800d204:	f853 2b04 	ldr.w	r2, [r3], #4
 800d208:	9105      	str	r1, [sp, #20]
 800d20a:	6800      	ldr	r0, [r0, #0]
 800d20c:	9301      	str	r3, [sp, #4]
 800d20e:	a902      	add	r1, sp, #8
 800d210:	f000 f942 	bl	800d498 <_svfiprintf_r>
 800d214:	9b02      	ldr	r3, [sp, #8]
 800d216:	2200      	movs	r2, #0
 800d218:	701a      	strb	r2, [r3, #0]
 800d21a:	b01c      	add	sp, #112	; 0x70
 800d21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d220:	b003      	add	sp, #12
 800d222:	4770      	bx	lr
 800d224:	20000044 	.word	0x20000044
 800d228:	ffff0208 	.word	0xffff0208

0800d22c <time>:
 800d22c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d22e:	4b0b      	ldr	r3, [pc, #44]	; (800d25c <time+0x30>)
 800d230:	4604      	mov	r4, r0
 800d232:	2200      	movs	r2, #0
 800d234:	4669      	mov	r1, sp
 800d236:	6818      	ldr	r0, [r3, #0]
 800d238:	f000 f812 	bl	800d260 <_gettimeofday_r>
 800d23c:	2800      	cmp	r0, #0
 800d23e:	da05      	bge.n	800d24c <time+0x20>
 800d240:	f04f 32ff 	mov.w	r2, #4294967295
 800d244:	f04f 33ff 	mov.w	r3, #4294967295
 800d248:	e9cd 2300 	strd	r2, r3, [sp]
 800d24c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d250:	b10c      	cbz	r4, 800d256 <time+0x2a>
 800d252:	e9c4 0100 	strd	r0, r1, [r4]
 800d256:	b004      	add	sp, #16
 800d258:	bd10      	pop	{r4, pc}
 800d25a:	bf00      	nop
 800d25c:	20000044 	.word	0x20000044

0800d260 <_gettimeofday_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	4c07      	ldr	r4, [pc, #28]	; (800d280 <_gettimeofday_r+0x20>)
 800d264:	2300      	movs	r3, #0
 800d266:	4605      	mov	r5, r0
 800d268:	4608      	mov	r0, r1
 800d26a:	4611      	mov	r1, r2
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	f000 fbf7 	bl	800da60 <_gettimeofday>
 800d272:	1c43      	adds	r3, r0, #1
 800d274:	d102      	bne.n	800d27c <_gettimeofday_r+0x1c>
 800d276:	6823      	ldr	r3, [r4, #0]
 800d278:	b103      	cbz	r3, 800d27c <_gettimeofday_r+0x1c>
 800d27a:	602b      	str	r3, [r5, #0]
 800d27c:	bd38      	pop	{r3, r4, r5, pc}
 800d27e:	bf00      	nop
 800d280:	20000b78 	.word	0x20000b78

0800d284 <malloc>:
 800d284:	4b02      	ldr	r3, [pc, #8]	; (800d290 <malloc+0xc>)
 800d286:	4601      	mov	r1, r0
 800d288:	6818      	ldr	r0, [r3, #0]
 800d28a:	f000 b851 	b.w	800d330 <_malloc_r>
 800d28e:	bf00      	nop
 800d290:	20000044 	.word	0x20000044

0800d294 <_free_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4605      	mov	r5, r0
 800d298:	2900      	cmp	r1, #0
 800d29a:	d045      	beq.n	800d328 <_free_r+0x94>
 800d29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2a0:	1f0c      	subs	r4, r1, #4
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	bfb8      	it	lt
 800d2a6:	18e4      	addlt	r4, r4, r3
 800d2a8:	f000 fbaa 	bl	800da00 <__malloc_lock>
 800d2ac:	4a1f      	ldr	r2, [pc, #124]	; (800d32c <_free_r+0x98>)
 800d2ae:	6813      	ldr	r3, [r2, #0]
 800d2b0:	4610      	mov	r0, r2
 800d2b2:	b933      	cbnz	r3, 800d2c2 <_free_r+0x2e>
 800d2b4:	6063      	str	r3, [r4, #4]
 800d2b6:	6014      	str	r4, [r2, #0]
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2be:	f000 bba0 	b.w	800da02 <__malloc_unlock>
 800d2c2:	42a3      	cmp	r3, r4
 800d2c4:	d90c      	bls.n	800d2e0 <_free_r+0x4c>
 800d2c6:	6821      	ldr	r1, [r4, #0]
 800d2c8:	1862      	adds	r2, r4, r1
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	bf04      	itt	eq
 800d2ce:	681a      	ldreq	r2, [r3, #0]
 800d2d0:	685b      	ldreq	r3, [r3, #4]
 800d2d2:	6063      	str	r3, [r4, #4]
 800d2d4:	bf04      	itt	eq
 800d2d6:	1852      	addeq	r2, r2, r1
 800d2d8:	6022      	streq	r2, [r4, #0]
 800d2da:	6004      	str	r4, [r0, #0]
 800d2dc:	e7ec      	b.n	800d2b8 <_free_r+0x24>
 800d2de:	4613      	mov	r3, r2
 800d2e0:	685a      	ldr	r2, [r3, #4]
 800d2e2:	b10a      	cbz	r2, 800d2e8 <_free_r+0x54>
 800d2e4:	42a2      	cmp	r2, r4
 800d2e6:	d9fa      	bls.n	800d2de <_free_r+0x4a>
 800d2e8:	6819      	ldr	r1, [r3, #0]
 800d2ea:	1858      	adds	r0, r3, r1
 800d2ec:	42a0      	cmp	r0, r4
 800d2ee:	d10b      	bne.n	800d308 <_free_r+0x74>
 800d2f0:	6820      	ldr	r0, [r4, #0]
 800d2f2:	4401      	add	r1, r0
 800d2f4:	1858      	adds	r0, r3, r1
 800d2f6:	4282      	cmp	r2, r0
 800d2f8:	6019      	str	r1, [r3, #0]
 800d2fa:	d1dd      	bne.n	800d2b8 <_free_r+0x24>
 800d2fc:	6810      	ldr	r0, [r2, #0]
 800d2fe:	6852      	ldr	r2, [r2, #4]
 800d300:	605a      	str	r2, [r3, #4]
 800d302:	4401      	add	r1, r0
 800d304:	6019      	str	r1, [r3, #0]
 800d306:	e7d7      	b.n	800d2b8 <_free_r+0x24>
 800d308:	d902      	bls.n	800d310 <_free_r+0x7c>
 800d30a:	230c      	movs	r3, #12
 800d30c:	602b      	str	r3, [r5, #0]
 800d30e:	e7d3      	b.n	800d2b8 <_free_r+0x24>
 800d310:	6820      	ldr	r0, [r4, #0]
 800d312:	1821      	adds	r1, r4, r0
 800d314:	428a      	cmp	r2, r1
 800d316:	bf04      	itt	eq
 800d318:	6811      	ldreq	r1, [r2, #0]
 800d31a:	6852      	ldreq	r2, [r2, #4]
 800d31c:	6062      	str	r2, [r4, #4]
 800d31e:	bf04      	itt	eq
 800d320:	1809      	addeq	r1, r1, r0
 800d322:	6021      	streq	r1, [r4, #0]
 800d324:	605c      	str	r4, [r3, #4]
 800d326:	e7c7      	b.n	800d2b8 <_free_r+0x24>
 800d328:	bd38      	pop	{r3, r4, r5, pc}
 800d32a:	bf00      	nop
 800d32c:	200002c4 	.word	0x200002c4

0800d330 <_malloc_r>:
 800d330:	b570      	push	{r4, r5, r6, lr}
 800d332:	1ccd      	adds	r5, r1, #3
 800d334:	f025 0503 	bic.w	r5, r5, #3
 800d338:	3508      	adds	r5, #8
 800d33a:	2d0c      	cmp	r5, #12
 800d33c:	bf38      	it	cc
 800d33e:	250c      	movcc	r5, #12
 800d340:	2d00      	cmp	r5, #0
 800d342:	4606      	mov	r6, r0
 800d344:	db01      	blt.n	800d34a <_malloc_r+0x1a>
 800d346:	42a9      	cmp	r1, r5
 800d348:	d903      	bls.n	800d352 <_malloc_r+0x22>
 800d34a:	230c      	movs	r3, #12
 800d34c:	6033      	str	r3, [r6, #0]
 800d34e:	2000      	movs	r0, #0
 800d350:	bd70      	pop	{r4, r5, r6, pc}
 800d352:	f000 fb55 	bl	800da00 <__malloc_lock>
 800d356:	4a21      	ldr	r2, [pc, #132]	; (800d3dc <_malloc_r+0xac>)
 800d358:	6814      	ldr	r4, [r2, #0]
 800d35a:	4621      	mov	r1, r4
 800d35c:	b991      	cbnz	r1, 800d384 <_malloc_r+0x54>
 800d35e:	4c20      	ldr	r4, [pc, #128]	; (800d3e0 <_malloc_r+0xb0>)
 800d360:	6823      	ldr	r3, [r4, #0]
 800d362:	b91b      	cbnz	r3, 800d36c <_malloc_r+0x3c>
 800d364:	4630      	mov	r0, r6
 800d366:	f000 fb17 	bl	800d998 <_sbrk_r>
 800d36a:	6020      	str	r0, [r4, #0]
 800d36c:	4629      	mov	r1, r5
 800d36e:	4630      	mov	r0, r6
 800d370:	f000 fb12 	bl	800d998 <_sbrk_r>
 800d374:	1c43      	adds	r3, r0, #1
 800d376:	d124      	bne.n	800d3c2 <_malloc_r+0x92>
 800d378:	230c      	movs	r3, #12
 800d37a:	6033      	str	r3, [r6, #0]
 800d37c:	4630      	mov	r0, r6
 800d37e:	f000 fb40 	bl	800da02 <__malloc_unlock>
 800d382:	e7e4      	b.n	800d34e <_malloc_r+0x1e>
 800d384:	680b      	ldr	r3, [r1, #0]
 800d386:	1b5b      	subs	r3, r3, r5
 800d388:	d418      	bmi.n	800d3bc <_malloc_r+0x8c>
 800d38a:	2b0b      	cmp	r3, #11
 800d38c:	d90f      	bls.n	800d3ae <_malloc_r+0x7e>
 800d38e:	600b      	str	r3, [r1, #0]
 800d390:	50cd      	str	r5, [r1, r3]
 800d392:	18cc      	adds	r4, r1, r3
 800d394:	4630      	mov	r0, r6
 800d396:	f000 fb34 	bl	800da02 <__malloc_unlock>
 800d39a:	f104 000b 	add.w	r0, r4, #11
 800d39e:	1d23      	adds	r3, r4, #4
 800d3a0:	f020 0007 	bic.w	r0, r0, #7
 800d3a4:	1ac3      	subs	r3, r0, r3
 800d3a6:	d0d3      	beq.n	800d350 <_malloc_r+0x20>
 800d3a8:	425a      	negs	r2, r3
 800d3aa:	50e2      	str	r2, [r4, r3]
 800d3ac:	e7d0      	b.n	800d350 <_malloc_r+0x20>
 800d3ae:	428c      	cmp	r4, r1
 800d3b0:	684b      	ldr	r3, [r1, #4]
 800d3b2:	bf16      	itet	ne
 800d3b4:	6063      	strne	r3, [r4, #4]
 800d3b6:	6013      	streq	r3, [r2, #0]
 800d3b8:	460c      	movne	r4, r1
 800d3ba:	e7eb      	b.n	800d394 <_malloc_r+0x64>
 800d3bc:	460c      	mov	r4, r1
 800d3be:	6849      	ldr	r1, [r1, #4]
 800d3c0:	e7cc      	b.n	800d35c <_malloc_r+0x2c>
 800d3c2:	1cc4      	adds	r4, r0, #3
 800d3c4:	f024 0403 	bic.w	r4, r4, #3
 800d3c8:	42a0      	cmp	r0, r4
 800d3ca:	d005      	beq.n	800d3d8 <_malloc_r+0xa8>
 800d3cc:	1a21      	subs	r1, r4, r0
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	f000 fae2 	bl	800d998 <_sbrk_r>
 800d3d4:	3001      	adds	r0, #1
 800d3d6:	d0cf      	beq.n	800d378 <_malloc_r+0x48>
 800d3d8:	6025      	str	r5, [r4, #0]
 800d3da:	e7db      	b.n	800d394 <_malloc_r+0x64>
 800d3dc:	200002c4 	.word	0x200002c4
 800d3e0:	200002c8 	.word	0x200002c8

0800d3e4 <__ssputs_r>:
 800d3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3e8:	688e      	ldr	r6, [r1, #8]
 800d3ea:	429e      	cmp	r6, r3
 800d3ec:	4682      	mov	sl, r0
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	4690      	mov	r8, r2
 800d3f2:	4699      	mov	r9, r3
 800d3f4:	d837      	bhi.n	800d466 <__ssputs_r+0x82>
 800d3f6:	898a      	ldrh	r2, [r1, #12]
 800d3f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3fc:	d031      	beq.n	800d462 <__ssputs_r+0x7e>
 800d3fe:	6825      	ldr	r5, [r4, #0]
 800d400:	6909      	ldr	r1, [r1, #16]
 800d402:	1a6f      	subs	r7, r5, r1
 800d404:	6965      	ldr	r5, [r4, #20]
 800d406:	2302      	movs	r3, #2
 800d408:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d40c:	fb95 f5f3 	sdiv	r5, r5, r3
 800d410:	f109 0301 	add.w	r3, r9, #1
 800d414:	443b      	add	r3, r7
 800d416:	429d      	cmp	r5, r3
 800d418:	bf38      	it	cc
 800d41a:	461d      	movcc	r5, r3
 800d41c:	0553      	lsls	r3, r2, #21
 800d41e:	d530      	bpl.n	800d482 <__ssputs_r+0x9e>
 800d420:	4629      	mov	r1, r5
 800d422:	f7ff ff85 	bl	800d330 <_malloc_r>
 800d426:	4606      	mov	r6, r0
 800d428:	b950      	cbnz	r0, 800d440 <__ssputs_r+0x5c>
 800d42a:	230c      	movs	r3, #12
 800d42c:	f8ca 3000 	str.w	r3, [sl]
 800d430:	89a3      	ldrh	r3, [r4, #12]
 800d432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d436:	81a3      	strh	r3, [r4, #12]
 800d438:	f04f 30ff 	mov.w	r0, #4294967295
 800d43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d440:	463a      	mov	r2, r7
 800d442:	6921      	ldr	r1, [r4, #16]
 800d444:	f000 fab8 	bl	800d9b8 <memcpy>
 800d448:	89a3      	ldrh	r3, [r4, #12]
 800d44a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d44e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d452:	81a3      	strh	r3, [r4, #12]
 800d454:	6126      	str	r6, [r4, #16]
 800d456:	6165      	str	r5, [r4, #20]
 800d458:	443e      	add	r6, r7
 800d45a:	1bed      	subs	r5, r5, r7
 800d45c:	6026      	str	r6, [r4, #0]
 800d45e:	60a5      	str	r5, [r4, #8]
 800d460:	464e      	mov	r6, r9
 800d462:	454e      	cmp	r6, r9
 800d464:	d900      	bls.n	800d468 <__ssputs_r+0x84>
 800d466:	464e      	mov	r6, r9
 800d468:	4632      	mov	r2, r6
 800d46a:	4641      	mov	r1, r8
 800d46c:	6820      	ldr	r0, [r4, #0]
 800d46e:	f000 faae 	bl	800d9ce <memmove>
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	1b9b      	subs	r3, r3, r6
 800d476:	60a3      	str	r3, [r4, #8]
 800d478:	6823      	ldr	r3, [r4, #0]
 800d47a:	441e      	add	r6, r3
 800d47c:	6026      	str	r6, [r4, #0]
 800d47e:	2000      	movs	r0, #0
 800d480:	e7dc      	b.n	800d43c <__ssputs_r+0x58>
 800d482:	462a      	mov	r2, r5
 800d484:	f000 fabe 	bl	800da04 <_realloc_r>
 800d488:	4606      	mov	r6, r0
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d1e2      	bne.n	800d454 <__ssputs_r+0x70>
 800d48e:	6921      	ldr	r1, [r4, #16]
 800d490:	4650      	mov	r0, sl
 800d492:	f7ff feff 	bl	800d294 <_free_r>
 800d496:	e7c8      	b.n	800d42a <__ssputs_r+0x46>

0800d498 <_svfiprintf_r>:
 800d498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49c:	461d      	mov	r5, r3
 800d49e:	898b      	ldrh	r3, [r1, #12]
 800d4a0:	061f      	lsls	r7, r3, #24
 800d4a2:	b09d      	sub	sp, #116	; 0x74
 800d4a4:	4680      	mov	r8, r0
 800d4a6:	460c      	mov	r4, r1
 800d4a8:	4616      	mov	r6, r2
 800d4aa:	d50f      	bpl.n	800d4cc <_svfiprintf_r+0x34>
 800d4ac:	690b      	ldr	r3, [r1, #16]
 800d4ae:	b96b      	cbnz	r3, 800d4cc <_svfiprintf_r+0x34>
 800d4b0:	2140      	movs	r1, #64	; 0x40
 800d4b2:	f7ff ff3d 	bl	800d330 <_malloc_r>
 800d4b6:	6020      	str	r0, [r4, #0]
 800d4b8:	6120      	str	r0, [r4, #16]
 800d4ba:	b928      	cbnz	r0, 800d4c8 <_svfiprintf_r+0x30>
 800d4bc:	230c      	movs	r3, #12
 800d4be:	f8c8 3000 	str.w	r3, [r8]
 800d4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c6:	e0c8      	b.n	800d65a <_svfiprintf_r+0x1c2>
 800d4c8:	2340      	movs	r3, #64	; 0x40
 800d4ca:	6163      	str	r3, [r4, #20]
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d4d0:	2320      	movs	r3, #32
 800d4d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4d6:	2330      	movs	r3, #48	; 0x30
 800d4d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4dc:	9503      	str	r5, [sp, #12]
 800d4de:	f04f 0b01 	mov.w	fp, #1
 800d4e2:	4637      	mov	r7, r6
 800d4e4:	463d      	mov	r5, r7
 800d4e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d4ea:	b10b      	cbz	r3, 800d4f0 <_svfiprintf_r+0x58>
 800d4ec:	2b25      	cmp	r3, #37	; 0x25
 800d4ee:	d13e      	bne.n	800d56e <_svfiprintf_r+0xd6>
 800d4f0:	ebb7 0a06 	subs.w	sl, r7, r6
 800d4f4:	d00b      	beq.n	800d50e <_svfiprintf_r+0x76>
 800d4f6:	4653      	mov	r3, sl
 800d4f8:	4632      	mov	r2, r6
 800d4fa:	4621      	mov	r1, r4
 800d4fc:	4640      	mov	r0, r8
 800d4fe:	f7ff ff71 	bl	800d3e4 <__ssputs_r>
 800d502:	3001      	adds	r0, #1
 800d504:	f000 80a4 	beq.w	800d650 <_svfiprintf_r+0x1b8>
 800d508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d50a:	4453      	add	r3, sl
 800d50c:	9309      	str	r3, [sp, #36]	; 0x24
 800d50e:	783b      	ldrb	r3, [r7, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 809d 	beq.w	800d650 <_svfiprintf_r+0x1b8>
 800d516:	2300      	movs	r3, #0
 800d518:	f04f 32ff 	mov.w	r2, #4294967295
 800d51c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d520:	9304      	str	r3, [sp, #16]
 800d522:	9307      	str	r3, [sp, #28]
 800d524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d528:	931a      	str	r3, [sp, #104]	; 0x68
 800d52a:	462f      	mov	r7, r5
 800d52c:	2205      	movs	r2, #5
 800d52e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d532:	4850      	ldr	r0, [pc, #320]	; (800d674 <_svfiprintf_r+0x1dc>)
 800d534:	f7f2 fe6c 	bl	8000210 <memchr>
 800d538:	9b04      	ldr	r3, [sp, #16]
 800d53a:	b9d0      	cbnz	r0, 800d572 <_svfiprintf_r+0xda>
 800d53c:	06d9      	lsls	r1, r3, #27
 800d53e:	bf44      	itt	mi
 800d540:	2220      	movmi	r2, #32
 800d542:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d546:	071a      	lsls	r2, r3, #28
 800d548:	bf44      	itt	mi
 800d54a:	222b      	movmi	r2, #43	; 0x2b
 800d54c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d550:	782a      	ldrb	r2, [r5, #0]
 800d552:	2a2a      	cmp	r2, #42	; 0x2a
 800d554:	d015      	beq.n	800d582 <_svfiprintf_r+0xea>
 800d556:	9a07      	ldr	r2, [sp, #28]
 800d558:	462f      	mov	r7, r5
 800d55a:	2000      	movs	r0, #0
 800d55c:	250a      	movs	r5, #10
 800d55e:	4639      	mov	r1, r7
 800d560:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d564:	3b30      	subs	r3, #48	; 0x30
 800d566:	2b09      	cmp	r3, #9
 800d568:	d94d      	bls.n	800d606 <_svfiprintf_r+0x16e>
 800d56a:	b1b8      	cbz	r0, 800d59c <_svfiprintf_r+0x104>
 800d56c:	e00f      	b.n	800d58e <_svfiprintf_r+0xf6>
 800d56e:	462f      	mov	r7, r5
 800d570:	e7b8      	b.n	800d4e4 <_svfiprintf_r+0x4c>
 800d572:	4a40      	ldr	r2, [pc, #256]	; (800d674 <_svfiprintf_r+0x1dc>)
 800d574:	1a80      	subs	r0, r0, r2
 800d576:	fa0b f000 	lsl.w	r0, fp, r0
 800d57a:	4318      	orrs	r0, r3
 800d57c:	9004      	str	r0, [sp, #16]
 800d57e:	463d      	mov	r5, r7
 800d580:	e7d3      	b.n	800d52a <_svfiprintf_r+0x92>
 800d582:	9a03      	ldr	r2, [sp, #12]
 800d584:	1d11      	adds	r1, r2, #4
 800d586:	6812      	ldr	r2, [r2, #0]
 800d588:	9103      	str	r1, [sp, #12]
 800d58a:	2a00      	cmp	r2, #0
 800d58c:	db01      	blt.n	800d592 <_svfiprintf_r+0xfa>
 800d58e:	9207      	str	r2, [sp, #28]
 800d590:	e004      	b.n	800d59c <_svfiprintf_r+0x104>
 800d592:	4252      	negs	r2, r2
 800d594:	f043 0302 	orr.w	r3, r3, #2
 800d598:	9207      	str	r2, [sp, #28]
 800d59a:	9304      	str	r3, [sp, #16]
 800d59c:	783b      	ldrb	r3, [r7, #0]
 800d59e:	2b2e      	cmp	r3, #46	; 0x2e
 800d5a0:	d10c      	bne.n	800d5bc <_svfiprintf_r+0x124>
 800d5a2:	787b      	ldrb	r3, [r7, #1]
 800d5a4:	2b2a      	cmp	r3, #42	; 0x2a
 800d5a6:	d133      	bne.n	800d610 <_svfiprintf_r+0x178>
 800d5a8:	9b03      	ldr	r3, [sp, #12]
 800d5aa:	1d1a      	adds	r2, r3, #4
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	9203      	str	r2, [sp, #12]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	bfb8      	it	lt
 800d5b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5b8:	3702      	adds	r7, #2
 800d5ba:	9305      	str	r3, [sp, #20]
 800d5bc:	4d2e      	ldr	r5, [pc, #184]	; (800d678 <_svfiprintf_r+0x1e0>)
 800d5be:	7839      	ldrb	r1, [r7, #0]
 800d5c0:	2203      	movs	r2, #3
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	f7f2 fe24 	bl	8000210 <memchr>
 800d5c8:	b138      	cbz	r0, 800d5da <_svfiprintf_r+0x142>
 800d5ca:	2340      	movs	r3, #64	; 0x40
 800d5cc:	1b40      	subs	r0, r0, r5
 800d5ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d5d2:	9b04      	ldr	r3, [sp, #16]
 800d5d4:	4303      	orrs	r3, r0
 800d5d6:	3701      	adds	r7, #1
 800d5d8:	9304      	str	r3, [sp, #16]
 800d5da:	7839      	ldrb	r1, [r7, #0]
 800d5dc:	4827      	ldr	r0, [pc, #156]	; (800d67c <_svfiprintf_r+0x1e4>)
 800d5de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5e2:	2206      	movs	r2, #6
 800d5e4:	1c7e      	adds	r6, r7, #1
 800d5e6:	f7f2 fe13 	bl	8000210 <memchr>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d038      	beq.n	800d660 <_svfiprintf_r+0x1c8>
 800d5ee:	4b24      	ldr	r3, [pc, #144]	; (800d680 <_svfiprintf_r+0x1e8>)
 800d5f0:	bb13      	cbnz	r3, 800d638 <_svfiprintf_r+0x1a0>
 800d5f2:	9b03      	ldr	r3, [sp, #12]
 800d5f4:	3307      	adds	r3, #7
 800d5f6:	f023 0307 	bic.w	r3, r3, #7
 800d5fa:	3308      	adds	r3, #8
 800d5fc:	9303      	str	r3, [sp, #12]
 800d5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d600:	444b      	add	r3, r9
 800d602:	9309      	str	r3, [sp, #36]	; 0x24
 800d604:	e76d      	b.n	800d4e2 <_svfiprintf_r+0x4a>
 800d606:	fb05 3202 	mla	r2, r5, r2, r3
 800d60a:	2001      	movs	r0, #1
 800d60c:	460f      	mov	r7, r1
 800d60e:	e7a6      	b.n	800d55e <_svfiprintf_r+0xc6>
 800d610:	2300      	movs	r3, #0
 800d612:	3701      	adds	r7, #1
 800d614:	9305      	str	r3, [sp, #20]
 800d616:	4619      	mov	r1, r3
 800d618:	250a      	movs	r5, #10
 800d61a:	4638      	mov	r0, r7
 800d61c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d620:	3a30      	subs	r2, #48	; 0x30
 800d622:	2a09      	cmp	r2, #9
 800d624:	d903      	bls.n	800d62e <_svfiprintf_r+0x196>
 800d626:	2b00      	cmp	r3, #0
 800d628:	d0c8      	beq.n	800d5bc <_svfiprintf_r+0x124>
 800d62a:	9105      	str	r1, [sp, #20]
 800d62c:	e7c6      	b.n	800d5bc <_svfiprintf_r+0x124>
 800d62e:	fb05 2101 	mla	r1, r5, r1, r2
 800d632:	2301      	movs	r3, #1
 800d634:	4607      	mov	r7, r0
 800d636:	e7f0      	b.n	800d61a <_svfiprintf_r+0x182>
 800d638:	ab03      	add	r3, sp, #12
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	4622      	mov	r2, r4
 800d63e:	4b11      	ldr	r3, [pc, #68]	; (800d684 <_svfiprintf_r+0x1ec>)
 800d640:	a904      	add	r1, sp, #16
 800d642:	4640      	mov	r0, r8
 800d644:	f3af 8000 	nop.w
 800d648:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d64c:	4681      	mov	r9, r0
 800d64e:	d1d6      	bne.n	800d5fe <_svfiprintf_r+0x166>
 800d650:	89a3      	ldrh	r3, [r4, #12]
 800d652:	065b      	lsls	r3, r3, #25
 800d654:	f53f af35 	bmi.w	800d4c2 <_svfiprintf_r+0x2a>
 800d658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d65a:	b01d      	add	sp, #116	; 0x74
 800d65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d660:	ab03      	add	r3, sp, #12
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	4622      	mov	r2, r4
 800d666:	4b07      	ldr	r3, [pc, #28]	; (800d684 <_svfiprintf_r+0x1ec>)
 800d668:	a904      	add	r1, sp, #16
 800d66a:	4640      	mov	r0, r8
 800d66c:	f000 f882 	bl	800d774 <_printf_i>
 800d670:	e7ea      	b.n	800d648 <_svfiprintf_r+0x1b0>
 800d672:	bf00      	nop
 800d674:	0800f584 	.word	0x0800f584
 800d678:	0800f58a 	.word	0x0800f58a
 800d67c:	0800f58e 	.word	0x0800f58e
 800d680:	00000000 	.word	0x00000000
 800d684:	0800d3e5 	.word	0x0800d3e5

0800d688 <_printf_common>:
 800d688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d68c:	4691      	mov	r9, r2
 800d68e:	461f      	mov	r7, r3
 800d690:	688a      	ldr	r2, [r1, #8]
 800d692:	690b      	ldr	r3, [r1, #16]
 800d694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d698:	4293      	cmp	r3, r2
 800d69a:	bfb8      	it	lt
 800d69c:	4613      	movlt	r3, r2
 800d69e:	f8c9 3000 	str.w	r3, [r9]
 800d6a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6a6:	4606      	mov	r6, r0
 800d6a8:	460c      	mov	r4, r1
 800d6aa:	b112      	cbz	r2, 800d6b2 <_printf_common+0x2a>
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	f8c9 3000 	str.w	r3, [r9]
 800d6b2:	6823      	ldr	r3, [r4, #0]
 800d6b4:	0699      	lsls	r1, r3, #26
 800d6b6:	bf42      	ittt	mi
 800d6b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d6bc:	3302      	addmi	r3, #2
 800d6be:	f8c9 3000 	strmi.w	r3, [r9]
 800d6c2:	6825      	ldr	r5, [r4, #0]
 800d6c4:	f015 0506 	ands.w	r5, r5, #6
 800d6c8:	d107      	bne.n	800d6da <_printf_common+0x52>
 800d6ca:	f104 0a19 	add.w	sl, r4, #25
 800d6ce:	68e3      	ldr	r3, [r4, #12]
 800d6d0:	f8d9 2000 	ldr.w	r2, [r9]
 800d6d4:	1a9b      	subs	r3, r3, r2
 800d6d6:	42ab      	cmp	r3, r5
 800d6d8:	dc28      	bgt.n	800d72c <_printf_common+0xa4>
 800d6da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d6de:	6822      	ldr	r2, [r4, #0]
 800d6e0:	3300      	adds	r3, #0
 800d6e2:	bf18      	it	ne
 800d6e4:	2301      	movne	r3, #1
 800d6e6:	0692      	lsls	r2, r2, #26
 800d6e8:	d42d      	bmi.n	800d746 <_printf_common+0xbe>
 800d6ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6ee:	4639      	mov	r1, r7
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	47c0      	blx	r8
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	d020      	beq.n	800d73a <_printf_common+0xb2>
 800d6f8:	6823      	ldr	r3, [r4, #0]
 800d6fa:	68e5      	ldr	r5, [r4, #12]
 800d6fc:	f8d9 2000 	ldr.w	r2, [r9]
 800d700:	f003 0306 	and.w	r3, r3, #6
 800d704:	2b04      	cmp	r3, #4
 800d706:	bf08      	it	eq
 800d708:	1aad      	subeq	r5, r5, r2
 800d70a:	68a3      	ldr	r3, [r4, #8]
 800d70c:	6922      	ldr	r2, [r4, #16]
 800d70e:	bf0c      	ite	eq
 800d710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d714:	2500      	movne	r5, #0
 800d716:	4293      	cmp	r3, r2
 800d718:	bfc4      	itt	gt
 800d71a:	1a9b      	subgt	r3, r3, r2
 800d71c:	18ed      	addgt	r5, r5, r3
 800d71e:	f04f 0900 	mov.w	r9, #0
 800d722:	341a      	adds	r4, #26
 800d724:	454d      	cmp	r5, r9
 800d726:	d11a      	bne.n	800d75e <_printf_common+0xd6>
 800d728:	2000      	movs	r0, #0
 800d72a:	e008      	b.n	800d73e <_printf_common+0xb6>
 800d72c:	2301      	movs	r3, #1
 800d72e:	4652      	mov	r2, sl
 800d730:	4639      	mov	r1, r7
 800d732:	4630      	mov	r0, r6
 800d734:	47c0      	blx	r8
 800d736:	3001      	adds	r0, #1
 800d738:	d103      	bne.n	800d742 <_printf_common+0xba>
 800d73a:	f04f 30ff 	mov.w	r0, #4294967295
 800d73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d742:	3501      	adds	r5, #1
 800d744:	e7c3      	b.n	800d6ce <_printf_common+0x46>
 800d746:	18e1      	adds	r1, r4, r3
 800d748:	1c5a      	adds	r2, r3, #1
 800d74a:	2030      	movs	r0, #48	; 0x30
 800d74c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d750:	4422      	add	r2, r4
 800d752:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d756:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d75a:	3302      	adds	r3, #2
 800d75c:	e7c5      	b.n	800d6ea <_printf_common+0x62>
 800d75e:	2301      	movs	r3, #1
 800d760:	4622      	mov	r2, r4
 800d762:	4639      	mov	r1, r7
 800d764:	4630      	mov	r0, r6
 800d766:	47c0      	blx	r8
 800d768:	3001      	adds	r0, #1
 800d76a:	d0e6      	beq.n	800d73a <_printf_common+0xb2>
 800d76c:	f109 0901 	add.w	r9, r9, #1
 800d770:	e7d8      	b.n	800d724 <_printf_common+0x9c>
	...

0800d774 <_printf_i>:
 800d774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d778:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d77c:	460c      	mov	r4, r1
 800d77e:	7e09      	ldrb	r1, [r1, #24]
 800d780:	b085      	sub	sp, #20
 800d782:	296e      	cmp	r1, #110	; 0x6e
 800d784:	4617      	mov	r7, r2
 800d786:	4606      	mov	r6, r0
 800d788:	4698      	mov	r8, r3
 800d78a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d78c:	f000 80b3 	beq.w	800d8f6 <_printf_i+0x182>
 800d790:	d822      	bhi.n	800d7d8 <_printf_i+0x64>
 800d792:	2963      	cmp	r1, #99	; 0x63
 800d794:	d036      	beq.n	800d804 <_printf_i+0x90>
 800d796:	d80a      	bhi.n	800d7ae <_printf_i+0x3a>
 800d798:	2900      	cmp	r1, #0
 800d79a:	f000 80b9 	beq.w	800d910 <_printf_i+0x19c>
 800d79e:	2958      	cmp	r1, #88	; 0x58
 800d7a0:	f000 8083 	beq.w	800d8aa <_printf_i+0x136>
 800d7a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d7ac:	e032      	b.n	800d814 <_printf_i+0xa0>
 800d7ae:	2964      	cmp	r1, #100	; 0x64
 800d7b0:	d001      	beq.n	800d7b6 <_printf_i+0x42>
 800d7b2:	2969      	cmp	r1, #105	; 0x69
 800d7b4:	d1f6      	bne.n	800d7a4 <_printf_i+0x30>
 800d7b6:	6820      	ldr	r0, [r4, #0]
 800d7b8:	6813      	ldr	r3, [r2, #0]
 800d7ba:	0605      	lsls	r5, r0, #24
 800d7bc:	f103 0104 	add.w	r1, r3, #4
 800d7c0:	d52a      	bpl.n	800d818 <_printf_i+0xa4>
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	6011      	str	r1, [r2, #0]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	da03      	bge.n	800d7d2 <_printf_i+0x5e>
 800d7ca:	222d      	movs	r2, #45	; 0x2d
 800d7cc:	425b      	negs	r3, r3
 800d7ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d7d2:	486f      	ldr	r0, [pc, #444]	; (800d990 <_printf_i+0x21c>)
 800d7d4:	220a      	movs	r2, #10
 800d7d6:	e039      	b.n	800d84c <_printf_i+0xd8>
 800d7d8:	2973      	cmp	r1, #115	; 0x73
 800d7da:	f000 809d 	beq.w	800d918 <_printf_i+0x1a4>
 800d7de:	d808      	bhi.n	800d7f2 <_printf_i+0x7e>
 800d7e0:	296f      	cmp	r1, #111	; 0x6f
 800d7e2:	d020      	beq.n	800d826 <_printf_i+0xb2>
 800d7e4:	2970      	cmp	r1, #112	; 0x70
 800d7e6:	d1dd      	bne.n	800d7a4 <_printf_i+0x30>
 800d7e8:	6823      	ldr	r3, [r4, #0]
 800d7ea:	f043 0320 	orr.w	r3, r3, #32
 800d7ee:	6023      	str	r3, [r4, #0]
 800d7f0:	e003      	b.n	800d7fa <_printf_i+0x86>
 800d7f2:	2975      	cmp	r1, #117	; 0x75
 800d7f4:	d017      	beq.n	800d826 <_printf_i+0xb2>
 800d7f6:	2978      	cmp	r1, #120	; 0x78
 800d7f8:	d1d4      	bne.n	800d7a4 <_printf_i+0x30>
 800d7fa:	2378      	movs	r3, #120	; 0x78
 800d7fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d800:	4864      	ldr	r0, [pc, #400]	; (800d994 <_printf_i+0x220>)
 800d802:	e055      	b.n	800d8b0 <_printf_i+0x13c>
 800d804:	6813      	ldr	r3, [r2, #0]
 800d806:	1d19      	adds	r1, r3, #4
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6011      	str	r1, [r2, #0]
 800d80c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d814:	2301      	movs	r3, #1
 800d816:	e08c      	b.n	800d932 <_printf_i+0x1be>
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6011      	str	r1, [r2, #0]
 800d81c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d820:	bf18      	it	ne
 800d822:	b21b      	sxthne	r3, r3
 800d824:	e7cf      	b.n	800d7c6 <_printf_i+0x52>
 800d826:	6813      	ldr	r3, [r2, #0]
 800d828:	6825      	ldr	r5, [r4, #0]
 800d82a:	1d18      	adds	r0, r3, #4
 800d82c:	6010      	str	r0, [r2, #0]
 800d82e:	0628      	lsls	r0, r5, #24
 800d830:	d501      	bpl.n	800d836 <_printf_i+0xc2>
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	e002      	b.n	800d83c <_printf_i+0xc8>
 800d836:	0668      	lsls	r0, r5, #25
 800d838:	d5fb      	bpl.n	800d832 <_printf_i+0xbe>
 800d83a:	881b      	ldrh	r3, [r3, #0]
 800d83c:	4854      	ldr	r0, [pc, #336]	; (800d990 <_printf_i+0x21c>)
 800d83e:	296f      	cmp	r1, #111	; 0x6f
 800d840:	bf14      	ite	ne
 800d842:	220a      	movne	r2, #10
 800d844:	2208      	moveq	r2, #8
 800d846:	2100      	movs	r1, #0
 800d848:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d84c:	6865      	ldr	r5, [r4, #4]
 800d84e:	60a5      	str	r5, [r4, #8]
 800d850:	2d00      	cmp	r5, #0
 800d852:	f2c0 8095 	blt.w	800d980 <_printf_i+0x20c>
 800d856:	6821      	ldr	r1, [r4, #0]
 800d858:	f021 0104 	bic.w	r1, r1, #4
 800d85c:	6021      	str	r1, [r4, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d13d      	bne.n	800d8de <_printf_i+0x16a>
 800d862:	2d00      	cmp	r5, #0
 800d864:	f040 808e 	bne.w	800d984 <_printf_i+0x210>
 800d868:	4665      	mov	r5, ip
 800d86a:	2a08      	cmp	r2, #8
 800d86c:	d10b      	bne.n	800d886 <_printf_i+0x112>
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	07db      	lsls	r3, r3, #31
 800d872:	d508      	bpl.n	800d886 <_printf_i+0x112>
 800d874:	6923      	ldr	r3, [r4, #16]
 800d876:	6862      	ldr	r2, [r4, #4]
 800d878:	429a      	cmp	r2, r3
 800d87a:	bfde      	ittt	le
 800d87c:	2330      	movle	r3, #48	; 0x30
 800d87e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d882:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d886:	ebac 0305 	sub.w	r3, ip, r5
 800d88a:	6123      	str	r3, [r4, #16]
 800d88c:	f8cd 8000 	str.w	r8, [sp]
 800d890:	463b      	mov	r3, r7
 800d892:	aa03      	add	r2, sp, #12
 800d894:	4621      	mov	r1, r4
 800d896:	4630      	mov	r0, r6
 800d898:	f7ff fef6 	bl	800d688 <_printf_common>
 800d89c:	3001      	adds	r0, #1
 800d89e:	d14d      	bne.n	800d93c <_printf_i+0x1c8>
 800d8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a4:	b005      	add	sp, #20
 800d8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8aa:	4839      	ldr	r0, [pc, #228]	; (800d990 <_printf_i+0x21c>)
 800d8ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d8b0:	6813      	ldr	r3, [r2, #0]
 800d8b2:	6821      	ldr	r1, [r4, #0]
 800d8b4:	1d1d      	adds	r5, r3, #4
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	6015      	str	r5, [r2, #0]
 800d8ba:	060a      	lsls	r2, r1, #24
 800d8bc:	d50b      	bpl.n	800d8d6 <_printf_i+0x162>
 800d8be:	07ca      	lsls	r2, r1, #31
 800d8c0:	bf44      	itt	mi
 800d8c2:	f041 0120 	orrmi.w	r1, r1, #32
 800d8c6:	6021      	strmi	r1, [r4, #0]
 800d8c8:	b91b      	cbnz	r3, 800d8d2 <_printf_i+0x15e>
 800d8ca:	6822      	ldr	r2, [r4, #0]
 800d8cc:	f022 0220 	bic.w	r2, r2, #32
 800d8d0:	6022      	str	r2, [r4, #0]
 800d8d2:	2210      	movs	r2, #16
 800d8d4:	e7b7      	b.n	800d846 <_printf_i+0xd2>
 800d8d6:	064d      	lsls	r5, r1, #25
 800d8d8:	bf48      	it	mi
 800d8da:	b29b      	uxthmi	r3, r3
 800d8dc:	e7ef      	b.n	800d8be <_printf_i+0x14a>
 800d8de:	4665      	mov	r5, ip
 800d8e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d8e4:	fb02 3311 	mls	r3, r2, r1, r3
 800d8e8:	5cc3      	ldrb	r3, [r0, r3]
 800d8ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	2900      	cmp	r1, #0
 800d8f2:	d1f5      	bne.n	800d8e0 <_printf_i+0x16c>
 800d8f4:	e7b9      	b.n	800d86a <_printf_i+0xf6>
 800d8f6:	6813      	ldr	r3, [r2, #0]
 800d8f8:	6825      	ldr	r5, [r4, #0]
 800d8fa:	6961      	ldr	r1, [r4, #20]
 800d8fc:	1d18      	adds	r0, r3, #4
 800d8fe:	6010      	str	r0, [r2, #0]
 800d900:	0628      	lsls	r0, r5, #24
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	d501      	bpl.n	800d90a <_printf_i+0x196>
 800d906:	6019      	str	r1, [r3, #0]
 800d908:	e002      	b.n	800d910 <_printf_i+0x19c>
 800d90a:	066a      	lsls	r2, r5, #25
 800d90c:	d5fb      	bpl.n	800d906 <_printf_i+0x192>
 800d90e:	8019      	strh	r1, [r3, #0]
 800d910:	2300      	movs	r3, #0
 800d912:	6123      	str	r3, [r4, #16]
 800d914:	4665      	mov	r5, ip
 800d916:	e7b9      	b.n	800d88c <_printf_i+0x118>
 800d918:	6813      	ldr	r3, [r2, #0]
 800d91a:	1d19      	adds	r1, r3, #4
 800d91c:	6011      	str	r1, [r2, #0]
 800d91e:	681d      	ldr	r5, [r3, #0]
 800d920:	6862      	ldr	r2, [r4, #4]
 800d922:	2100      	movs	r1, #0
 800d924:	4628      	mov	r0, r5
 800d926:	f7f2 fc73 	bl	8000210 <memchr>
 800d92a:	b108      	cbz	r0, 800d930 <_printf_i+0x1bc>
 800d92c:	1b40      	subs	r0, r0, r5
 800d92e:	6060      	str	r0, [r4, #4]
 800d930:	6863      	ldr	r3, [r4, #4]
 800d932:	6123      	str	r3, [r4, #16]
 800d934:	2300      	movs	r3, #0
 800d936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d93a:	e7a7      	b.n	800d88c <_printf_i+0x118>
 800d93c:	6923      	ldr	r3, [r4, #16]
 800d93e:	462a      	mov	r2, r5
 800d940:	4639      	mov	r1, r7
 800d942:	4630      	mov	r0, r6
 800d944:	47c0      	blx	r8
 800d946:	3001      	adds	r0, #1
 800d948:	d0aa      	beq.n	800d8a0 <_printf_i+0x12c>
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	079b      	lsls	r3, r3, #30
 800d94e:	d413      	bmi.n	800d978 <_printf_i+0x204>
 800d950:	68e0      	ldr	r0, [r4, #12]
 800d952:	9b03      	ldr	r3, [sp, #12]
 800d954:	4298      	cmp	r0, r3
 800d956:	bfb8      	it	lt
 800d958:	4618      	movlt	r0, r3
 800d95a:	e7a3      	b.n	800d8a4 <_printf_i+0x130>
 800d95c:	2301      	movs	r3, #1
 800d95e:	464a      	mov	r2, r9
 800d960:	4639      	mov	r1, r7
 800d962:	4630      	mov	r0, r6
 800d964:	47c0      	blx	r8
 800d966:	3001      	adds	r0, #1
 800d968:	d09a      	beq.n	800d8a0 <_printf_i+0x12c>
 800d96a:	3501      	adds	r5, #1
 800d96c:	68e3      	ldr	r3, [r4, #12]
 800d96e:	9a03      	ldr	r2, [sp, #12]
 800d970:	1a9b      	subs	r3, r3, r2
 800d972:	42ab      	cmp	r3, r5
 800d974:	dcf2      	bgt.n	800d95c <_printf_i+0x1e8>
 800d976:	e7eb      	b.n	800d950 <_printf_i+0x1dc>
 800d978:	2500      	movs	r5, #0
 800d97a:	f104 0919 	add.w	r9, r4, #25
 800d97e:	e7f5      	b.n	800d96c <_printf_i+0x1f8>
 800d980:	2b00      	cmp	r3, #0
 800d982:	d1ac      	bne.n	800d8de <_printf_i+0x16a>
 800d984:	7803      	ldrb	r3, [r0, #0]
 800d986:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d98a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d98e:	e76c      	b.n	800d86a <_printf_i+0xf6>
 800d990:	0800f595 	.word	0x0800f595
 800d994:	0800f5a6 	.word	0x0800f5a6

0800d998 <_sbrk_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	4c06      	ldr	r4, [pc, #24]	; (800d9b4 <_sbrk_r+0x1c>)
 800d99c:	2300      	movs	r3, #0
 800d99e:	4605      	mov	r5, r0
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	6023      	str	r3, [r4, #0]
 800d9a4:	f7f5 fc3e 	bl	8003224 <_sbrk>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d102      	bne.n	800d9b2 <_sbrk_r+0x1a>
 800d9ac:	6823      	ldr	r3, [r4, #0]
 800d9ae:	b103      	cbz	r3, 800d9b2 <_sbrk_r+0x1a>
 800d9b0:	602b      	str	r3, [r5, #0]
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
 800d9b4:	20000b78 	.word	0x20000b78

0800d9b8 <memcpy>:
 800d9b8:	b510      	push	{r4, lr}
 800d9ba:	1e43      	subs	r3, r0, #1
 800d9bc:	440a      	add	r2, r1
 800d9be:	4291      	cmp	r1, r2
 800d9c0:	d100      	bne.n	800d9c4 <memcpy+0xc>
 800d9c2:	bd10      	pop	{r4, pc}
 800d9c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9cc:	e7f7      	b.n	800d9be <memcpy+0x6>

0800d9ce <memmove>:
 800d9ce:	4288      	cmp	r0, r1
 800d9d0:	b510      	push	{r4, lr}
 800d9d2:	eb01 0302 	add.w	r3, r1, r2
 800d9d6:	d807      	bhi.n	800d9e8 <memmove+0x1a>
 800d9d8:	1e42      	subs	r2, r0, #1
 800d9da:	4299      	cmp	r1, r3
 800d9dc:	d00a      	beq.n	800d9f4 <memmove+0x26>
 800d9de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d9e6:	e7f8      	b.n	800d9da <memmove+0xc>
 800d9e8:	4283      	cmp	r3, r0
 800d9ea:	d9f5      	bls.n	800d9d8 <memmove+0xa>
 800d9ec:	1881      	adds	r1, r0, r2
 800d9ee:	1ad2      	subs	r2, r2, r3
 800d9f0:	42d3      	cmn	r3, r2
 800d9f2:	d100      	bne.n	800d9f6 <memmove+0x28>
 800d9f4:	bd10      	pop	{r4, pc}
 800d9f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d9fe:	e7f7      	b.n	800d9f0 <memmove+0x22>

0800da00 <__malloc_lock>:
 800da00:	4770      	bx	lr

0800da02 <__malloc_unlock>:
 800da02:	4770      	bx	lr

0800da04 <_realloc_r>:
 800da04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da06:	4607      	mov	r7, r0
 800da08:	4614      	mov	r4, r2
 800da0a:	460e      	mov	r6, r1
 800da0c:	b921      	cbnz	r1, 800da18 <_realloc_r+0x14>
 800da0e:	4611      	mov	r1, r2
 800da10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800da14:	f7ff bc8c 	b.w	800d330 <_malloc_r>
 800da18:	b922      	cbnz	r2, 800da24 <_realloc_r+0x20>
 800da1a:	f7ff fc3b 	bl	800d294 <_free_r>
 800da1e:	4625      	mov	r5, r4
 800da20:	4628      	mov	r0, r5
 800da22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da24:	f000 f814 	bl	800da50 <_malloc_usable_size_r>
 800da28:	42a0      	cmp	r0, r4
 800da2a:	d20f      	bcs.n	800da4c <_realloc_r+0x48>
 800da2c:	4621      	mov	r1, r4
 800da2e:	4638      	mov	r0, r7
 800da30:	f7ff fc7e 	bl	800d330 <_malloc_r>
 800da34:	4605      	mov	r5, r0
 800da36:	2800      	cmp	r0, #0
 800da38:	d0f2      	beq.n	800da20 <_realloc_r+0x1c>
 800da3a:	4631      	mov	r1, r6
 800da3c:	4622      	mov	r2, r4
 800da3e:	f7ff ffbb 	bl	800d9b8 <memcpy>
 800da42:	4631      	mov	r1, r6
 800da44:	4638      	mov	r0, r7
 800da46:	f7ff fc25 	bl	800d294 <_free_r>
 800da4a:	e7e9      	b.n	800da20 <_realloc_r+0x1c>
 800da4c:	4635      	mov	r5, r6
 800da4e:	e7e7      	b.n	800da20 <_realloc_r+0x1c>

0800da50 <_malloc_usable_size_r>:
 800da50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da54:	1f18      	subs	r0, r3, #4
 800da56:	2b00      	cmp	r3, #0
 800da58:	bfbc      	itt	lt
 800da5a:	580b      	ldrlt	r3, [r1, r0]
 800da5c:	18c0      	addlt	r0, r0, r3
 800da5e:	4770      	bx	lr

0800da60 <_gettimeofday>:
 800da60:	4b02      	ldr	r3, [pc, #8]	; (800da6c <_gettimeofday+0xc>)
 800da62:	2258      	movs	r2, #88	; 0x58
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	f04f 30ff 	mov.w	r0, #4294967295
 800da6a:	4770      	bx	lr
 800da6c:	20000b78 	.word	0x20000b78

0800da70 <_init>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	bf00      	nop
 800da74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da76:	bc08      	pop	{r3}
 800da78:	469e      	mov	lr, r3
 800da7a:	4770      	bx	lr

0800da7c <_fini>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	bf00      	nop
 800da80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da82:	bc08      	pop	{r3}
 800da84:	469e      	mov	lr, r3
 800da86:	4770      	bx	lr
