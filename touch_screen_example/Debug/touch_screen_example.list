
touch_screen_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000200c  0800d7ac  0800d7ac  0001d7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7b8  0800f7b8  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7b8  0800f7b8  0001f7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7c0  0800f7c0  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7c0  0800f7c0  0001f7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7c4  0800f7c4  0001f7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  0800f7c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  200000ac  0800f874  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b94  0800f874  00020b94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b4e6  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e9d  00000000  00000000  0004b5c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002720  00000000  00000000  00050460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024c0  00000000  00000000  00052b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f8d4  00000000  00000000  00055040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ff11  00000000  00000000  00084914  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001189bc  00000000  00000000  000a4825  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bd1e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000afa4  00000000  00000000  001bd25c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d794 	.word	0x0800d794

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	0800d794 	.word	0x0800d794

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__io_putchar>:
 set to 'Yes') calls __io_putchar() */
  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFF);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	23ff      	movs	r3, #255	; 0xff
 80005bc:	2201      	movs	r2, #1
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <__io_putchar+0x20>)
 80005c0:	f00a feca 	bl	800b358 <HAL_UART_Transmit>
//HAL_UART_Transmit(UART_HandleTypeDef* huart, uint8_t pData, uint16_t Size, uint32_t Timeout);
  return ch;
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200007a4 	.word	0x200007a4

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b08e      	sub	sp, #56	; 0x38
 80005d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f004 f959 	bl	8004890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f8b3 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f001 f8d3 	bl	800178c <MX_GPIO_Init>
  MX_ADC3_Init();
 80005e6:	f000 f96f 	bl	80008c8 <MX_ADC3_Init>
  MX_DCMI_Init();
 80005ea:	f000 f9bf 	bl	800096c <MX_DCMI_Init>
  MX_DMA2D_Init();
 80005ee:	f000 f9f1 	bl	80009d4 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005f2:	f001 f87b 	bl	80016ec <MX_FMC_Init>
  MX_I2C1_Init();
 80005f6:	f000 fa1f 	bl	8000a38 <MX_I2C1_Init>
  MX_I2C3_Init();
 80005fa:	f000 fa5d 	bl	8000ab8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005fe:	f000 fa9b 	bl	8000b38 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000602:	f000 fb4f 	bl	8000ca4 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000606:	f000 fb79 	bl	8000cfc <MX_RTC_Init>
  MX_SAI2_Init();
 800060a:	f000 fc1d 	bl	8000e48 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800060e:	f000 fcc3 	bl	8000f98 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000612:	f000 fcf1 	bl	8000ff8 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000616:	f000 fd1f 	bl	8001058 <MX_SPI2_Init>
  MX_TIM1_Init();
 800061a:	f000 fd5b 	bl	80010d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800061e:	f000 fe05 	bl	800122c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000622:	f000 fe79 	bl	8001318 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000626:	f000 feef 	bl	8001408 <MX_TIM5_Init>
  MX_TIM8_Init();
 800062a:	f000 ff65 	bl	80014f8 <MX_TIM8_Init>
  MX_TIM12_Init();
 800062e:	f000 ffb7 	bl	80015a0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8000632:	f000 fffb 	bl	800162c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000636:	f001 f829 	bl	800168c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // LCD initial
  BSP_LCD_Init();
 800063a:	f003 f81f 	bl	800367c <BSP_LCD_Init>
  BSP_SDRAM_Init();  // seems to have no effect, comment this line also works. But you can't DeInit it.
 800063e:	f003 fd11 	bl	8004064 <BSP_SDRAM_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000642:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000646:	2000      	movs	r0, #0
 8000648:	f003 f8b0 	bl	80037ac <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 800064c:	2000      	movs	r0, #0
 800064e:	f003 f90d 	bl	800386c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000652:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000656:	f003 f97b 	bl	8003950 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800065a:	f04f 30ff 	mov.w	r0, #4294967295
 800065e:	f003 f915 	bl	800388c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000662:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000666:	f003 f929 	bl	80038bc <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font12);
 800066a:	4833      	ldr	r0, [pc, #204]	; (8000738 <main+0x164>)
 800066c:	f003 f940 	bl	80038f0 <BSP_LCD_SetFont>

  // Touch Screen initail
  BSP_TS_Init(480, 272);
 8000670:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000674:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000678:	f003 feaa 	bl	80043d0 <BSP_TS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t tk_disp_cord = 0;  // the previous tick refresh display of touch screen coordinates.
 800067c:	2300      	movs	r3, #0
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t tk_now = HAL_GetTick();
 8000680:	f004 f928 	bl	80048d4 <HAL_GetTick>
 8000684:	6278      	str	r0, [r7, #36]	; 0x24
  char str[32];   // format string buffer
  printf("Initialized.\r\n");
 8000686:	482d      	ldr	r0, [pc, #180]	; (800073c <main+0x168>)
 8000688:	f00c f92c 	bl	800c8e4 <puts>
  while (1)
  {
    tk_now = HAL_GetTick();
 800068c:	f004 f922 	bl	80048d4 <HAL_GetTick>
 8000690:	6278      	str	r0, [r7, #36]	; 0x24
    if(tk_now-tk_disp_cord > 50){
 8000692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	2b32      	cmp	r3, #50	; 0x32
 800069a:	d9f7      	bls.n	800068c <main+0xb8>
      tk_disp_cord = tk_now;
 800069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
      BSP_TS_GetState(&TS_State); // polling for touch screen state
 80006a0:	4827      	ldr	r0, [pc, #156]	; (8000740 <main+0x16c>)
 80006a2:	f003 fed5 	bl	8004450 <BSP_TS_GetState>
      if(TS_State.touchDetected){ // at least one touch point detected
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <main+0x16c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0ee      	beq.n	800068c <main+0xb8>
        for(uint8_t i=0; i<TS_MAX_NB_TOUCH; i++){
 80006ae:	2300      	movs	r3, #0
 80006b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80006b4:	e03a      	b.n	800072c <main+0x158>
          sprintf(str, "x[%d]:%03d, y[%d]:%03d", i, TS_State.touchX[i], i, TS_State.touchY[i]);
 80006b6:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 80006ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80006be:	4a20      	ldr	r2, [pc, #128]	; (8000740 <main+0x16c>)
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	885b      	ldrh	r3, [r3, #2]
 80006c6:	461d      	mov	r5, r3
 80006c8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80006cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80006d0:	491b      	ldr	r1, [pc, #108]	; (8000740 <main+0x16c>)
 80006d2:	3304      	adds	r3, #4
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	440b      	add	r3, r1
 80006d8:	889b      	ldrh	r3, [r3, #4]
 80006da:	1d38      	adds	r0, r7, #4
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	9200      	str	r2, [sp, #0]
 80006e0:	462b      	mov	r3, r5
 80006e2:	4622      	mov	r2, r4
 80006e4:	4917      	ldr	r1, [pc, #92]	; (8000744 <main+0x170>)
 80006e6:	f00c f905 	bl	800c8f4 <siprintf>
          BSP_LCD_DisplayStringAtLine(i, (uint8_t*)str);
 80006ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	1d3a      	adds	r2, r7, #4
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fa5b 	bl	8003bb0 <BSP_LCD_DisplayStringAtLine>
          TS_State.touchX[i] = TS_State.touchY[i] = 0;
 80006fa:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80006fe:	4910      	ldr	r1, [pc, #64]	; (8000740 <main+0x16c>)
 8000700:	1d13      	adds	r3, r2, #4
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	440b      	add	r3, r1
 8000706:	2100      	movs	r1, #0
 8000708:	8099      	strh	r1, [r3, #4]
 800070a:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800070e:	480c      	ldr	r0, [pc, #48]	; (8000740 <main+0x16c>)
 8000710:	1d13      	adds	r3, r2, #4
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	4403      	add	r3, r0
 8000716:	8898      	ldrh	r0, [r3, #4]
 8000718:	4a09      	ldr	r2, [pc, #36]	; (8000740 <main+0x16c>)
 800071a:	004b      	lsls	r3, r1, #1
 800071c:	4413      	add	r3, r2
 800071e:	4602      	mov	r2, r0
 8000720:	805a      	strh	r2, [r3, #2]
        for(uint8_t i=0; i<TS_MAX_NB_TOUCH; i++){
 8000722:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000726:	3301      	adds	r3, #1
 8000728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800072c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000730:	2b04      	cmp	r3, #4
 8000732:	d9c0      	bls.n	80006b6 <main+0xe2>
    tk_now = HAL_GetTick();
 8000734:	e7aa      	b.n	800068c <main+0xb8>
 8000736:	bf00      	nop
 8000738:	20000034 	.word	0x20000034
 800073c:	0800d7ac 	.word	0x0800d7ac
 8000740:	20000944 	.word	0x20000944
 8000744:	0800d7bc 	.word	0x0800d7bc

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0b4      	sub	sp, #208	; 0xd0
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000752:	2230      	movs	r2, #48	; 0x30
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f00c f860 	bl	800c81c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2284      	movs	r2, #132	; 0x84
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f00c f851 	bl	800c81c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800077a:	f006 fe0b 	bl	8007394 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b4f      	ldr	r3, [pc, #316]	; (80008bc <SystemClock_Config+0x174>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a4e      	ldr	r2, [pc, #312]	; (80008bc <SystemClock_Config+0x174>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b4c      	ldr	r3, [pc, #304]	; (80008bc <SystemClock_Config+0x174>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000796:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <SystemClock_Config+0x178>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a49      	ldr	r2, [pc, #292]	; (80008c0 <SystemClock_Config+0x178>)
 800079c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	4b47      	ldr	r3, [pc, #284]	; (80008c0 <SystemClock_Config+0x178>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007ae:	2309      	movs	r3, #9
 80007b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007d0:	2319      	movs	r3, #25
 80007d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80007d6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80007da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007de:	2302      	movs	r3, #2
 80007e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007e4:	2309      	movs	r3, #9
 80007e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f006 fef2 	bl	80075d8 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007fa:	f001 f9e1 	bl	8001bc0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007fe:	f006 fdd9 	bl	80073b4 <HAL_PWREx_EnableOverDrive>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000808:	f001 f9da 	bl	8001bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800081e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000822:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800082e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000832:	2106      	movs	r1, #6
 8000834:	4618      	mov	r0, r3
 8000836:	f007 f973 	bl	8007b20 <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000840:	f001 f9be 	bl	8001bc0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <SystemClock_Config+0x17c>)
 8000846:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000848:	2364      	movs	r3, #100	; 0x64
 800084a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000858:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800085c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800085e:	2305      	movs	r3, #5
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000866:	2303      	movs	r3, #3
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000872:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800087c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800087e:	2300      	movs	r3, #0
 8000880:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000882:	2300      	movs	r3, #0
 8000884:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000886:	2300      	movs	r3, #0
 8000888:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800088a:	2300      	movs	r3, #0
 800088c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800088e:	2300      	movs	r3, #0
 8000890:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000892:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000896:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800089a:	2300      	movs	r3, #0
 800089c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008a0:	f107 0308 	add.w	r3, r7, #8
 80008a4:	4618      	mov	r0, r3
 80008a6:	f007 fb3f 	bl	8007f28 <HAL_RCCEx_PeriphCLKConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80008b0:	f001 f986 	bl	8001bc0 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	37d0      	adds	r7, #208	; 0xd0
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000
 80008c4:	01b14868 	.word	0x01b14868

080008c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_ADC3_Init+0x98>)
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <MX_ADC3_Init+0x9c>)
 80008de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_ADC3_Init+0x98>)
 80008e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_ADC3_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_ADC3_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_ADC3_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_ADC3_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_ADC3_Init+0x98>)
 8000904:	2200      	movs	r2, #0
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_ADC3_Init+0x98>)
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <MX_ADC3_Init+0xa0>)
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_ADC3_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_ADC3_Init+0x98>)
 8000916:	2201      	movs	r2, #1
 8000918:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_ADC3_Init+0x98>)
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_ADC3_Init+0x98>)
 8000924:	2201      	movs	r2, #1
 8000926:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_ADC3_Init+0x98>)
 800092a:	f004 f801 	bl	8004930 <HAL_ADC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000934:	f001 f944 	bl	8001bc0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000938:	2304      	movs	r3, #4
 800093a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800093c:	2301      	movs	r3, #1
 800093e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	4619      	mov	r1, r3
 8000948:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_ADC3_Init+0x98>)
 800094a:	f004 f835 	bl	80049b8 <HAL_ADC_ConfigChannel>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000954:	f001 f934 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000070c 	.word	0x2000070c
 8000964:	40012200 	.word	0x40012200
 8000968:	0f000001 	.word	0x0f000001

0800096c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <MX_DCMI_Init+0x60>)
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <MX_DCMI_Init+0x64>)
 8000974:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <MX_DCMI_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <MX_DCMI_Init+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_DCMI_Init+0x60>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000988:	4b10      	ldr	r3, [pc, #64]	; (80009cc <MX_DCMI_Init+0x60>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_DCMI_Init+0x60>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_DCMI_Init+0x60>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_DCMI_Init+0x60>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_DCMI_Init+0x60>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_DCMI_Init+0x60>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_DCMI_Init+0x60>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_DCMI_Init+0x60>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_DCMI_Init+0x60>)
 80009ba:	f004 fb23 	bl	8005004 <HAL_DCMI_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f001 f8fc 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000754 	.word	0x20000754
 80009d0:	50050000 	.word	0x50050000

080009d4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009da:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <MX_DMA2D_Init+0x60>)
 80009dc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 8000a0a:	f004 fd31 	bl	8005470 <HAL_DMA2D_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a14:	f001 f8d4 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_DMA2D_Init+0x5c>)
 8000a1c:	f004 ff96 	bl	800594c <HAL_DMA2D_ConfigLayer>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a26:	f001 f8cb 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000904 	.word	0x20000904
 8000a34:	4002b000 	.word	0x4002b000

08000a38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a3e:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <MX_I2C1_Init+0x78>)
 8000a40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a44:	4a1b      	ldr	r2, [pc, #108]	; (8000ab4 <MX_I2C1_Init+0x7c>)
 8000a46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a74:	f005 fb66 	bl	8006144 <HAL_I2C_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a7e:	f001 f89f 	bl	8001bc0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a82:	2100      	movs	r1, #0
 8000a84:	4809      	ldr	r0, [pc, #36]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a86:	f006 f875 	bl	8006b74 <HAL_I2CEx_ConfigAnalogFilter>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a90:	f001 f896 	bl	8001bc0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a94:	2100      	movs	r1, #0
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a98:	f006 f8b7 	bl	8006c0a <HAL_I2CEx_ConfigDigitalFilter>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000aa2:	f001 f88d 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000514 	.word	0x20000514
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	00c0eaff 	.word	0x00c0eaff

08000ab8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <MX_I2C3_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <MX_I2C3_Init+0x7c>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000af2:	480e      	ldr	r0, [pc, #56]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000af4:	f005 fb26 	bl	8006144 <HAL_I2C_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000afe:	f001 f85f 	bl	8001bc0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4809      	ldr	r0, [pc, #36]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000b06:	f006 f835 	bl	8006b74 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b10:	f001 f856 	bl	8001bc0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_I2C3_Init+0x74>)
 8000b18:	f006 f877 	bl	8006c0a <HAL_I2CEx_ConfigDigitalFilter>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b22:	f001 f84d 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000354 	.word	0x20000354
 8000b30:	40005c00 	.word	0x40005c00
 8000b34:	00c0eaff 	.word	0x00c0eaff

08000b38 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09a      	sub	sp, #104	; 0x68
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b42:	2234      	movs	r2, #52	; 0x34
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f00b fe68 	bl	800c81c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	2234      	movs	r2, #52	; 0x34
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f00b fe62 	bl	800c81c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b58:	4b50      	ldr	r3, [pc, #320]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000b5a:	4a51      	ldr	r2, [pc, #324]	; (8000ca0 <MX_LTDC_Init+0x168>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b5e:	4b4f      	ldr	r3, [pc, #316]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b64:	4b4d      	ldr	r3, [pc, #308]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b6a:	4b4c      	ldr	r3, [pc, #304]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b70:	4b4a      	ldr	r3, [pc, #296]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000b76:	4b49      	ldr	r3, [pc, #292]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000b78:	2228      	movs	r2, #40	; 0x28
 8000b7a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b7c:	4b47      	ldr	r3, [pc, #284]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000b7e:	2209      	movs	r2, #9
 8000b80:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000b82:	4b46      	ldr	r3, [pc, #280]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000b84:	2235      	movs	r2, #53	; 0x35
 8000b86:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000b88:	4b44      	ldr	r3, [pc, #272]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000b8a:	220b      	movs	r2, #11
 8000b8c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b8e:	4b43      	ldr	r3, [pc, #268]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000b90:	f240 2215 	movw	r2, #533	; 0x215
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b96:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000b98:	f240 121b 	movw	r2, #283	; 0x11b
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000b9e:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000ba0:	f240 2235 	movw	r2, #565	; 0x235
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000ba6:	4b3d      	ldr	r3, [pc, #244]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000ba8:	f240 121d 	movw	r2, #285	; 0x11d
 8000bac:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bae:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bb6:	4b39      	ldr	r3, [pc, #228]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bbe:	4b37      	ldr	r3, [pc, #220]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bc6:	4835      	ldr	r0, [pc, #212]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000bc8:	f006 f86c 	bl	8006ca4 <HAL_LTDC_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000bd2:	f000 fff5 	bl	8001bc0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000bda:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bde:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000be4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000be8:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bea:	2302      	movs	r3, #2
 8000bec:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000bee:	23ff      	movs	r3, #255	; 0xff
 8000bf0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bf6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bfa:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000c00:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000c04:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000c06:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000c0c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000c10:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000c24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481b      	ldr	r0, [pc, #108]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000c2e:	f006 f9cb 	bl	8006fc8 <HAL_LTDC_ConfigLayer>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000c38:	f000 ffc2 	bl	8001bc0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c58:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c5a:	2305      	movs	r3, #5
 8000c5c:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4619      	mov	r1, r3
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <MX_LTDC_Init+0x164>)
 8000c84:	f006 f9a0 	bl	8006fc8 <HAL_LTDC_ConfigLayer>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000c8e:	f000 ff97 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	3768      	adds	r7, #104	; 0x68
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000664 	.word	0x20000664
 8000ca0:	40016800 	.word	0x40016800

08000ca4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_QUADSPI_Init+0x50>)
 8000caa:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <MX_QUADSPI_Init+0x54>)
 8000cac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_QUADSPI_Init+0x50>)
 8000cb0:	22ff      	movs	r2, #255	; 0xff
 8000cb2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_QUADSPI_Init+0x50>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_QUADSPI_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_QUADSPI_Init+0x50>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_QUADSPI_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_QUADSPI_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_QUADSPI_Init+0x50>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_QUADSPI_Init+0x50>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_QUADSPI_Init+0x50>)
 8000ce0:	f006 fbb8 	bl	8007454 <HAL_QSPI_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000cea:	f000 ff69 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000a24 	.word	0x20000a24
 8000cf8:	a0001000 	.word	0xa0001000

08000cfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b092      	sub	sp, #72	; 0x48
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000d18:	463b      	mov	r3, r7
 8000d1a:	222c      	movs	r2, #44	; 0x2c
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f00b fd7c 	bl	800c81c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d24:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d26:	4a47      	ldr	r2, [pc, #284]	; (8000e44 <MX_RTC_Init+0x148>)
 8000d28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d2a:	4b45      	ldr	r3, [pc, #276]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d30:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d32:	227f      	movs	r2, #127	; 0x7f
 8000d34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d36:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d38:	22ff      	movs	r2, #255	; 0xff
 8000d3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d3c:	4b40      	ldr	r3, [pc, #256]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d42:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d4e:	483c      	ldr	r0, [pc, #240]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d50:	f007 fe0c 	bl	800896c <HAL_RTC_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000d5a:	f000 ff31 	bl	8001bc0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d74:	2300      	movs	r3, #0
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4619      	mov	r1, r3
 8000d80:	482f      	ldr	r0, [pc, #188]	; (8000e40 <MX_RTC_Init+0x144>)
 8000d82:	f007 fe6f 	bl	8008a64 <HAL_RTC_SetTime>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000d8c:	f000 ff18 	bl	8001bc0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d90:	2301      	movs	r3, #1
 8000d92:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000d96:	2301      	movs	r3, #1
 8000d98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000da8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dac:	2201      	movs	r2, #1
 8000dae:	4619      	mov	r1, r3
 8000db0:	4823      	ldr	r0, [pc, #140]	; (8000e40 <MX_RTC_Init+0x144>)
 8000db2:	f007 ff15 	bl	8008be0 <HAL_RTC_SetDate>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000dbc:	f000 ff00 	bl	8001bc0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000df0:	463b      	mov	r3, r7
 8000df2:	2201      	movs	r2, #1
 8000df4:	4619      	mov	r1, r3
 8000df6:	4812      	ldr	r0, [pc, #72]	; (8000e40 <MX_RTC_Init+0x144>)
 8000df8:	f007 ff9a 	bl	8008d30 <HAL_RTC_SetAlarm>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000e02:	f000 fedd 	bl	8001bc0 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4619      	mov	r1, r3
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <MX_RTC_Init+0x144>)
 8000e14:	f007 ff8c 	bl	8008d30 <HAL_RTC_SetAlarm>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000e1e:	f000 fecf 	bl	8001bc0 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000e22:	2202      	movs	r2, #2
 8000e24:	2100      	movs	r1, #0
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_RTC_Init+0x144>)
 8000e28:	f008 f90c 	bl	8009044 <HAL_RTCEx_SetTimeStamp>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000e32:	f000 fec5 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3748      	adds	r7, #72	; 0x48
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000824 	.word	0x20000824
 8000e44:	40002800 	.word	0x40002800

08000e48 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000e4c:	4b4d      	ldr	r3, [pc, #308]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e4e:	4a4e      	ldr	r2, [pc, #312]	; (8000f88 <MX_SAI2_Init+0x140>)
 8000e50:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e52:	4b4c      	ldr	r3, [pc, #304]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e58:	4b4a      	ldr	r3, [pc, #296]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000e5e:	4b49      	ldr	r3, [pc, #292]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e60:	2240      	movs	r2, #64	; 0x40
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e64:	4b47      	ldr	r3, [pc, #284]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e6a:	4b46      	ldr	r3, [pc, #280]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e70:	4b44      	ldr	r3, [pc, #272]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e76:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e7c:	4b41      	ldr	r3, [pc, #260]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e82:	4b40      	ldr	r3, [pc, #256]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e88:	4b3e      	ldr	r3, [pc, #248]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e8a:	4a40      	ldr	r2, [pc, #256]	; (8000f8c <MX_SAI2_Init+0x144>)
 8000e8c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e8e:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e94:	4b3b      	ldr	r3, [pc, #236]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e9a:	4b3a      	ldr	r3, [pc, #232]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ea0:	4b38      	ldr	r3, [pc, #224]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000ea6:	4b37      	ldr	r3, [pc, #220]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000eac:	4b35      	ldr	r3, [pc, #212]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000eb2:	4b34      	ldr	r3, [pc, #208]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000eb8:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000ec4:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000edc:	4829      	ldr	r0, [pc, #164]	; (8000f84 <MX_SAI2_Init+0x13c>)
 8000ede:	f008 f907 	bl	80090f0 <HAL_SAI_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000ee8:	f000 fe6a 	bl	8001bc0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000eec:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000eee:	4a29      	ldr	r2, [pc, #164]	; (8000f94 <MX_SAI2_Init+0x14c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000ef8:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000efa:	2203      	movs	r2, #3
 8000efc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000efe:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f00:	2240      	movs	r2, #64	; 0x40
 8000f02:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f22:	4b1b      	ldr	r3, [pc, #108]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000f52:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000f70:	4807      	ldr	r0, [pc, #28]	; (8000f90 <MX_SAI2_Init+0x148>)
 8000f72:	f008 f8bd 	bl	80090f0 <HAL_SAI_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000f7c:	f000 fe20 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000490 	.word	0x20000490
 8000f88:	40015c04 	.word	0x40015c04
 8000f8c:	0002ee00 	.word	0x0002ee00
 8000f90:	200002d0 	.word	0x200002d0
 8000f94:	40015c24 	.word	0x40015c24

08000f98 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_SDMMC1_SD_Init+0x58>)
 8000f9e:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <MX_SDMMC1_SD_Init+0x5c>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <MX_SDMMC1_SD_Init+0x58>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_SDMMC1_SD_Init+0x58>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <MX_SDMMC1_SD_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_SDMMC1_SD_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <MX_SDMMC1_SD_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_SDMMC1_SD_Init+0x58>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000fc6:	480a      	ldr	r0, [pc, #40]	; (8000ff0 <MX_SDMMC1_SD_Init+0x58>)
 8000fc8:	f008 fa3a 	bl	8009440 <HAL_SD_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000fd2:	f000 fdf5 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000fd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_SDMMC1_SD_Init+0x58>)
 8000fdc:	f008 fc6c 	bl	80098b8 <HAL_SD_ConfigWideBusOperation>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8000fe6:	f000 fdeb 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000560 	.word	0x20000560
 8000ff4:	40012c00 	.word	0x40012c00

08000ff8 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 8000ffe:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001002:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_SPDIFRX_Init+0x5c>)
 8001042:	f008 fff1 	bl	800a028 <HAL_SPDIFRX_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 800104c:	f000 fdb8 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000444 	.word	0x20000444

08001058 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_SPI2_Init+0x74>)
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <MX_SPI2_Init+0x78>)
 8001060:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_SPI2_Init+0x74>)
 8001064:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001068:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <MX_SPI2_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_SPI2_Init+0x74>)
 8001072:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001076:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <MX_SPI2_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800107e:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_SPI2_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_SPI2_Init+0x74>)
 8001086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_SPI2_Init+0x74>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_SPI2_Init+0x74>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_SPI2_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_SPI2_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_SPI2_Init+0x74>)
 80010a6:	2207      	movs	r2, #7
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_SPI2_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_SPI2_Init+0x74>)
 80010b2:	2208      	movs	r2, #8
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_SPI2_Init+0x74>)
 80010b8:	f009 f812 	bl	800a0e0 <HAL_SPI_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010c2:	f000 fd7d 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200003a0 	.word	0x200003a0
 80010d0:	40003800 	.word	0x40003800

080010d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b09a      	sub	sp, #104	; 0x68
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	615a      	str	r2, [r3, #20]
 8001106:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	222c      	movs	r2, #44	; 0x2c
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f00b fb84 	bl	800c81c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001114:	4b43      	ldr	r3, [pc, #268]	; (8001224 <MX_TIM1_Init+0x150>)
 8001116:	4a44      	ldr	r2, [pc, #272]	; (8001228 <MX_TIM1_Init+0x154>)
 8001118:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <MX_TIM1_Init+0x150>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b40      	ldr	r3, [pc, #256]	; (8001224 <MX_TIM1_Init+0x150>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <MX_TIM1_Init+0x150>)
 8001128:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b3d      	ldr	r3, [pc, #244]	; (8001224 <MX_TIM1_Init+0x150>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001134:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <MX_TIM1_Init+0x150>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <MX_TIM1_Init+0x150>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001140:	4838      	ldr	r0, [pc, #224]	; (8001224 <MX_TIM1_Init+0x150>)
 8001142:	f009 f85f 	bl	800a204 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800114c:	f000 fd38 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800115a:	4619      	mov	r1, r3
 800115c:	4831      	ldr	r0, [pc, #196]	; (8001224 <MX_TIM1_Init+0x150>)
 800115e:	f009 fb09 	bl	800a774 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001168:	f000 fd2a 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800116c:	482d      	ldr	r0, [pc, #180]	; (8001224 <MX_TIM1_Init+0x150>)
 800116e:	f009 f89f 	bl	800a2b0 <HAL_TIM_PWM_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001178:	f000 fd22 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001188:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800118c:	4619      	mov	r1, r3
 800118e:	4825      	ldr	r0, [pc, #148]	; (8001224 <MX_TIM1_Init+0x150>)
 8001190:	f009 ff6a 	bl	800b068 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800119a:	f000 fd11 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119e:	2360      	movs	r3, #96	; 0x60
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011aa:	2300      	movs	r3, #0
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4818      	ldr	r0, [pc, #96]	; (8001224 <MX_TIM1_Init+0x150>)
 80011c4:	f009 f9be 	bl	800a544 <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011ce:	f000 fcf7 	bl	8001bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <MX_TIM1_Init+0x150>)
 8001208:	f009 ffbc 	bl	800b184 <HAL_TIMEx_ConfigBreakDeadTime>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001212:	f000 fcd5 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <MX_TIM1_Init+0x150>)
 8001218:	f001 f9fa 	bl	8002610 <HAL_TIM_MspPostInit>

}
 800121c:	bf00      	nop
 800121e:	3768      	adds	r7, #104	; 0x68
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000844 	.word	0x20000844
 8001228:	40010000 	.word	0x40010000

0800122c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	; 0x38
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800124c:	463b      	mov	r3, r7
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	615a      	str	r2, [r3, #20]
 800125c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <MX_TIM2_Init+0xe8>)
 8001260:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001264:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <MX_TIM2_Init+0xe8>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b29      	ldr	r3, [pc, #164]	; (8001314 <MX_TIM2_Init+0xe8>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001272:	4b28      	ldr	r3, [pc, #160]	; (8001314 <MX_TIM2_Init+0xe8>)
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b26      	ldr	r3, [pc, #152]	; (8001314 <MX_TIM2_Init+0xe8>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <MX_TIM2_Init+0xe8>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001286:	4823      	ldr	r0, [pc, #140]	; (8001314 <MX_TIM2_Init+0xe8>)
 8001288:	f008 ffbc 	bl	800a204 <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001292:	f000 fc95 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a0:	4619      	mov	r1, r3
 80012a2:	481c      	ldr	r0, [pc, #112]	; (8001314 <MX_TIM2_Init+0xe8>)
 80012a4:	f009 fa66 	bl	800a774 <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012ae:	f000 fc87 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012b2:	4818      	ldr	r0, [pc, #96]	; (8001314 <MX_TIM2_Init+0xe8>)
 80012b4:	f008 fffc 	bl	800a2b0 <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012be:	f000 fc7f 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ca:	f107 031c 	add.w	r3, r7, #28
 80012ce:	4619      	mov	r1, r3
 80012d0:	4810      	ldr	r0, [pc, #64]	; (8001314 <MX_TIM2_Init+0xe8>)
 80012d2:	f009 fec9 	bl	800b068 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012dc:	f000 fc70 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	; 0x60
 80012e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f0:	463b      	mov	r3, r7
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4807      	ldr	r0, [pc, #28]	; (8001314 <MX_TIM2_Init+0xe8>)
 80012f8:	f009 f924 	bl	800a544 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001302:	f000 fc5d 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001306:	4803      	ldr	r0, [pc, #12]	; (8001314 <MX_TIM2_Init+0xe8>)
 8001308:	f001 f982 	bl	8002610 <HAL_TIM_MspPostInit>

}
 800130c:	bf00      	nop
 800130e:	3738      	adds	r7, #56	; 0x38
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000970 	.word	0x20000970

08001318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08e      	sub	sp, #56	; 0x38
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001338:	463b      	mov	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
 8001346:	615a      	str	r2, [r3, #20]
 8001348:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <MX_TIM3_Init+0xe8>)
 800134c:	4a2d      	ldr	r2, [pc, #180]	; (8001404 <MX_TIM3_Init+0xec>)
 800134e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001350:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <MX_TIM3_Init+0xe8>)
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <MX_TIM3_Init+0xe8>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <MX_TIM3_Init+0xe8>)
 800135e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001362:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001364:	4b26      	ldr	r3, [pc, #152]	; (8001400 <MX_TIM3_Init+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <MX_TIM3_Init+0xe8>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001370:	4823      	ldr	r0, [pc, #140]	; (8001400 <MX_TIM3_Init+0xe8>)
 8001372:	f008 ff47 	bl	800a204 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800137c:	f000 fc20 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800138a:	4619      	mov	r1, r3
 800138c:	481c      	ldr	r0, [pc, #112]	; (8001400 <MX_TIM3_Init+0xe8>)
 800138e:	f009 f9f1 	bl	800a774 <HAL_TIM_ConfigClockSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001398:	f000 fc12 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800139c:	4818      	ldr	r0, [pc, #96]	; (8001400 <MX_TIM3_Init+0xe8>)
 800139e:	f008 ff87 	bl	800a2b0 <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013a8:	f000 fc0a 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	4811      	ldr	r0, [pc, #68]	; (8001400 <MX_TIM3_Init+0xe8>)
 80013bc:	f009 fe54 	bl	800b068 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013c6:	f000 fbfb 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ca:	2360      	movs	r3, #96	; 0x60
 80013cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	2200      	movs	r2, #0
 80013de:	4619      	mov	r1, r3
 80013e0:	4807      	ldr	r0, [pc, #28]	; (8001400 <MX_TIM3_Init+0xe8>)
 80013e2:	f009 f8af 	bl	800a544 <HAL_TIM_PWM_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80013ec:	f000 fbe8 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013f0:	4803      	ldr	r0, [pc, #12]	; (8001400 <MX_TIM3_Init+0xe8>)
 80013f2:	f001 f90d 	bl	8002610 <HAL_TIM_MspPostInit>

}
 80013f6:	bf00      	nop
 80013f8:	3738      	adds	r7, #56	; 0x38
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000624 	.word	0x20000624
 8001404:	40000400 	.word	0x40000400

08001408 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_TIM5_Init+0xe8>)
 800143c:	4a2d      	ldr	r2, [pc, #180]	; (80014f4 <MX_TIM5_Init+0xec>)
 800143e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <MX_TIM5_Init+0xe8>)
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_TIM5_Init+0xe8>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_TIM5_Init+0xe8>)
 800144e:	f04f 32ff 	mov.w	r2, #4294967295
 8001452:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <MX_TIM5_Init+0xe8>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b25      	ldr	r3, [pc, #148]	; (80014f0 <MX_TIM5_Init+0xe8>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001460:	4823      	ldr	r0, [pc, #140]	; (80014f0 <MX_TIM5_Init+0xe8>)
 8001462:	f008 fecf 	bl	800a204 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800146c:	f000 fba8 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147a:	4619      	mov	r1, r3
 800147c:	481c      	ldr	r0, [pc, #112]	; (80014f0 <MX_TIM5_Init+0xe8>)
 800147e:	f009 f979 	bl	800a774 <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001488:	f000 fb9a 	bl	8001bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800148c:	4818      	ldr	r0, [pc, #96]	; (80014f0 <MX_TIM5_Init+0xe8>)
 800148e:	f008 ff0f 	bl	800a2b0 <HAL_TIM_PWM_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001498:	f000 fb92 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4811      	ldr	r0, [pc, #68]	; (80014f0 <MX_TIM5_Init+0xe8>)
 80014ac:	f009 fddc 	bl	800b068 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80014b6:	f000 fb83 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ba:	2360      	movs	r3, #96	; 0x60
 80014bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	220c      	movs	r2, #12
 80014ce:	4619      	mov	r1, r3
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <MX_TIM5_Init+0xe8>)
 80014d2:	f009 f837 	bl	800a544 <HAL_TIM_PWM_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80014dc:	f000 fb70 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014e0:	4803      	ldr	r0, [pc, #12]	; (80014f0 <MX_TIM5_Init+0xe8>)
 80014e2:	f001 f895 	bl	8002610 <HAL_TIM_MspPostInit>

}
 80014e6:	bf00      	nop
 80014e8:	3738      	adds	r7, #56	; 0x38
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200005e4 	.word	0x200005e4
 80014f4:	40000c00 	.word	0x40000c00

080014f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <MX_TIM8_Init+0xa0>)
 8001518:	4a20      	ldr	r2, [pc, #128]	; (800159c <MX_TIM8_Init+0xa4>)
 800151a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_TIM8_Init+0xa0>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <MX_TIM8_Init+0xa0>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_TIM8_Init+0xa0>)
 800152a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_TIM8_Init+0xa0>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_TIM8_Init+0xa0>)
 8001538:	2200      	movs	r2, #0
 800153a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b16      	ldr	r3, [pc, #88]	; (8001598 <MX_TIM8_Init+0xa0>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001542:	4815      	ldr	r0, [pc, #84]	; (8001598 <MX_TIM8_Init+0xa0>)
 8001544:	f008 fe5e 	bl	800a204 <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800154e:	f000 fb37 	bl	8001bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001556:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4619      	mov	r1, r3
 800155e:	480e      	ldr	r0, [pc, #56]	; (8001598 <MX_TIM8_Init+0xa0>)
 8001560:	f009 f908 	bl	800a774 <HAL_TIM_ConfigClockSource>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800156a:	f000 fb29 	bl	8001bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_TIM8_Init+0xa0>)
 8001580:	f009 fd72 	bl	800b068 <HAL_TIMEx_MasterConfigSynchronization>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800158a:	f000 fb19 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000404 	.word	0x20000404
 800159c:	40010400 	.word	0x40010400

080015a0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_TIM12_Init+0x84>)
 80015ba:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <MX_TIM12_Init+0x88>)
 80015bc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_TIM12_Init+0x84>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_TIM12_Init+0x84>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_TIM12_Init+0x84>)
 80015cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_TIM12_Init+0x84>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_TIM12_Init+0x84>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80015de:	4811      	ldr	r0, [pc, #68]	; (8001624 <MX_TIM12_Init+0x84>)
 80015e0:	f008 fe66 	bl	800a2b0 <HAL_TIM_PWM_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80015ea:	f000 fae9 	bl	8001bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ee:	2360      	movs	r3, #96	; 0x60
 80015f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	4619      	mov	r1, r3
 8001604:	4807      	ldr	r0, [pc, #28]	; (8001624 <MX_TIM12_Init+0x84>)
 8001606:	f008 ff9d 	bl	800a544 <HAL_TIM_PWM_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001610:	f000 fad6 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001614:	4803      	ldr	r0, [pc, #12]	; (8001624 <MX_TIM12_Init+0x84>)
 8001616:	f000 fffb 	bl	8002610 <HAL_TIM_MspPostInit>

}
 800161a:	bf00      	nop
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200009b0 	.word	0x200009b0
 8001628:	40001800 	.word	0x40001800

0800162c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001632:	4a15      	ldr	r2, [pc, #84]	; (8001688 <MX_USART1_UART_Init+0x5c>)
 8001634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_USART1_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_USART1_UART_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_USART1_UART_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_USART1_UART_Init+0x58>)
 8001670:	f009 fe24 	bl	800b2bc <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800167a:	f000 faa1 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200007a4 	.word	0x200007a4
 8001688:	40011000 	.word	0x40011000

0800168c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 8001692:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <MX_USART6_UART_Init+0x5c>)
 8001694:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_USART6_UART_Init+0x58>)
 80016d0:	f009 fdf4 	bl	800b2bc <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80016da:	f000 fa71 	bl	8001bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000884 	.word	0x20000884
 80016e8:	40011400 	.word	0x40011400

080016ec <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
 8001700:	615a      	str	r2, [r3, #20]
 8001702:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <MX_FMC_Init+0x98>)
 8001706:	4a20      	ldr	r2, [pc, #128]	; (8001788 <MX_FMC_Init+0x9c>)
 8001708:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <MX_FMC_Init+0x98>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_FMC_Init+0x98>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_FMC_Init+0x98>)
 8001718:	2204      	movs	r2, #4
 800171a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_FMC_Init+0x98>)
 800171e:	2210      	movs	r2, #16
 8001720:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_FMC_Init+0x98>)
 8001724:	2240      	movs	r2, #64	; 0x40
 8001726:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_FMC_Init+0x98>)
 800172a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800172e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_FMC_Init+0x98>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <MX_FMC_Init+0x98>)
 8001738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800173c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_FMC_Init+0x98>)
 8001740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_FMC_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800174c:	2302      	movs	r3, #2
 800174e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001750:	2307      	movs	r3, #7
 8001752:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001754:	2304      	movs	r3, #4
 8001756:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001758:	2307      	movs	r3, #7
 800175a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800175c:	2303      	movs	r3, #3
 800175e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001764:	2302      	movs	r3, #2
 8001766:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_FMC_Init+0x98>)
 800176e:	f008 fbdb 	bl	8009f28 <HAL_SDRAM_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001778:	f000 fa22 	bl	8001bc0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800177c:	bf00      	nop
 800177e:	3720      	adds	r7, #32
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200009f0 	.word	0x200009f0
 8001788:	a0000140 	.word	0xa0000140

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b090      	sub	sp, #64	; 0x40
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a2:	4baf      	ldr	r3, [pc, #700]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4aae      	ldr	r2, [pc, #696]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4bac      	ldr	r3, [pc, #688]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ba:	4ba9      	ldr	r3, [pc, #676]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4aa8      	ldr	r2, [pc, #672]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4ba6      	ldr	r3, [pc, #664]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	4ba3      	ldr	r3, [pc, #652]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4aa2      	ldr	r2, [pc, #648]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4ba0      	ldr	r3, [pc, #640]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	623b      	str	r3, [r7, #32]
 80017e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ea:	4b9d      	ldr	r3, [pc, #628]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a9c      	ldr	r2, [pc, #624]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b9a      	ldr	r3, [pc, #616]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	4b97      	ldr	r3, [pc, #604]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a96      	ldr	r2, [pc, #600]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001808:	f043 0304 	orr.w	r3, r3, #4
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b94      	ldr	r3, [pc, #592]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181a:	4b91      	ldr	r3, [pc, #580]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a90      	ldr	r2, [pc, #576]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b8e      	ldr	r3, [pc, #568]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001832:	4b8b      	ldr	r3, [pc, #556]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a8a      	ldr	r2, [pc, #552]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800184a:	4b85      	ldr	r3, [pc, #532]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a84      	ldr	r2, [pc, #528]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b82      	ldr	r3, [pc, #520]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001862:	4b7f      	ldr	r3, [pc, #508]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a7e      	ldr	r2, [pc, #504]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b7c      	ldr	r3, [pc, #496]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800187a:	4b79      	ldr	r3, [pc, #484]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a78      	ldr	r2, [pc, #480]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001880:	f043 0320 	orr.w	r3, r3, #32
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b76      	ldr	r3, [pc, #472]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001892:	4b73      	ldr	r3, [pc, #460]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a72      	ldr	r2, [pc, #456]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 8001898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <MX_GPIO_Init+0x2d4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018aa:	2201      	movs	r2, #1
 80018ac:	2120      	movs	r1, #32
 80018ae:	486d      	ldr	r0, [pc, #436]	; (8001a64 <MX_GPIO_Init+0x2d8>)
 80018b0:	f004 fc2e 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	210c      	movs	r1, #12
 80018b8:	486b      	ldr	r0, [pc, #428]	; (8001a68 <MX_GPIO_Init+0x2dc>)
 80018ba:	f004 fc29 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80018be:	2201      	movs	r2, #1
 80018c0:	2108      	movs	r1, #8
 80018c2:	486a      	ldr	r0, [pc, #424]	; (8001a6c <MX_GPIO_Init+0x2e0>)
 80018c4:	f004 fc24 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	4866      	ldr	r0, [pc, #408]	; (8001a68 <MX_GPIO_Init+0x2dc>)
 80018d0:	f004 fc1e 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018da:	4865      	ldr	r0, [pc, #404]	; (8001a70 <MX_GPIO_Init+0x2e4>)
 80018dc:	f004 fc18 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	21c8      	movs	r1, #200	; 0xc8
 80018e4:	4863      	ldr	r0, [pc, #396]	; (8001a74 <MX_GPIO_Init+0x2e8>)
 80018e6:	f004 fc13 	bl	8006110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80018ea:	2308      	movs	r3, #8
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ee:	2300      	movs	r3, #0
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fa:	4619      	mov	r1, r3
 80018fc:	485e      	ldr	r0, [pc, #376]	; (8001a78 <MX_GPIO_Init+0x2ec>)
 80018fe:	f004 f953 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001902:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001914:	230b      	movs	r3, #11
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800191c:	4619      	mov	r1, r3
 800191e:	4855      	ldr	r0, [pc, #340]	; (8001a74 <MX_GPIO_Init+0x2e8>)
 8001920:	f004 f942 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001924:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2303      	movs	r3, #3
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001936:	230a      	movs	r3, #10
 8001938:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800193e:	4619      	mov	r1, r3
 8001940:	484e      	ldr	r0, [pc, #312]	; (8001a7c <MX_GPIO_Init+0x2f0>)
 8001942:	f004 f931 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194c:	2300      	movs	r3, #0
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001958:	4619      	mov	r1, r3
 800195a:	4849      	ldr	r0, [pc, #292]	; (8001a80 <MX_GPIO_Init+0x2f4>)
 800195c:	f004 f924 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001960:	2340      	movs	r3, #64	; 0x40
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001964:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <MX_GPIO_Init+0x2f8>)
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001970:	4619      	mov	r1, r3
 8001972:	483c      	ldr	r0, [pc, #240]	; (8001a64 <MX_GPIO_Init+0x2d8>)
 8001974:	f004 f918 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001978:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800198a:	230a      	movs	r3, #10
 800198c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001992:	4619      	mov	r1, r3
 8001994:	483c      	ldr	r0, [pc, #240]	; (8001a88 <MX_GPIO_Init+0x2fc>)
 8001996:	f004 f907 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800199a:	2320      	movs	r3, #32
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199e:	2301      	movs	r3, #1
 80019a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ae:	4619      	mov	r1, r3
 80019b0:	482c      	ldr	r0, [pc, #176]	; (8001a64 <MX_GPIO_Init+0x2d8>)
 80019b2:	f004 f8f9 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80019b6:	f241 030c 	movw	r3, #4108	; 0x100c
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019cc:	4619      	mov	r1, r3
 80019ce:	4826      	ldr	r0, [pc, #152]	; (8001a68 <MX_GPIO_Init+0x2dc>)
 80019d0:	f004 f8ea 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e6:	4619      	mov	r1, r3
 80019e8:	4828      	ldr	r0, [pc, #160]	; (8001a8c <MX_GPIO_Init+0x300>)
 80019ea:	f004 f8dd 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019ee:	2308      	movs	r3, #8
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a02:	4619      	mov	r1, r3
 8001a04:	4819      	ldr	r0, [pc, #100]	; (8001a6c <MX_GPIO_Init+0x2e0>)
 8001a06:	f004 f8cf 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a0a:	2310      	movs	r3, #16
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4811      	ldr	r0, [pc, #68]	; (8001a64 <MX_GPIO_Init+0x2d8>)
 8001a1e:	f004 f8c3 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001a22:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a34:	4619      	mov	r1, r3
 8001a36:	480e      	ldr	r0, [pc, #56]	; (8001a70 <MX_GPIO_Init+0x2e4>)
 8001a38:	f004 f8b6 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a52:	4619      	mov	r1, r3
 8001a54:	4806      	ldr	r0, [pc, #24]	; (8001a70 <MX_GPIO_Init+0x2e4>)
 8001a56:	f004 f8a7 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5e:	e017      	b.n	8001a90 <MX_GPIO_Init+0x304>
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	40022800 	.word	0x40022800
 8001a70:	40021c00 	.word	0x40021c00
 8001a74:	40021800 	.word	0x40021800
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40022400 	.word	0x40022400
 8001a84:	10120000 	.word	0x10120000
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a92:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <MX_GPIO_Init+0x3f8>)
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4839      	ldr	r0, [pc, #228]	; (8001b88 <MX_GPIO_Init+0x3fc>)
 8001aa2:	f004 f881 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4832      	ldr	r0, [pc, #200]	; (8001b8c <MX_GPIO_Init+0x400>)
 8001ac2:	f004 f871 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001ac6:	23c8      	movs	r3, #200	; 0xc8
 8001ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ada:	4619      	mov	r1, r3
 8001adc:	482c      	ldr	r0, [pc, #176]	; (8001b90 <MX_GPIO_Init+0x404>)
 8001ade:	f004 f863 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aee:	2303      	movs	r3, #3
 8001af0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001af2:	230a      	movs	r3, #10
 8001af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001afa:	4619      	mov	r1, r3
 8001afc:	4825      	ldr	r0, [pc, #148]	; (8001b94 <MX_GPIO_Init+0x408>)
 8001afe:	f004 f853 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b02:	2332      	movs	r3, #50	; 0x32
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b12:	230b      	movs	r3, #11
 8001b14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	481d      	ldr	r0, [pc, #116]	; (8001b94 <MX_GPIO_Init+0x408>)
 8001b1e:	f004 f843 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001b22:	2304      	movs	r3, #4
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b26:	2300      	movs	r3, #0
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b32:	4619      	mov	r1, r3
 8001b34:	4816      	ldr	r0, [pc, #88]	; (8001b90 <MX_GPIO_Init+0x404>)
 8001b36:	f004 f837 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b3a:	2386      	movs	r3, #134	; 0x86
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b4a:	230b      	movs	r3, #11
 8001b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b52:	4619      	mov	r1, r3
 8001b54:	4810      	ldr	r0, [pc, #64]	; (8001b98 <MX_GPIO_Init+0x40c>)
 8001b56:	f004 f827 	bl	8005ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001b5a:	2328      	movs	r3, #40	; 0x28
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b6a:	230a      	movs	r3, #10
 8001b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b72:	4619      	mov	r1, r3
 8001b74:	4808      	ldr	r0, [pc, #32]	; (8001b98 <MX_GPIO_Init+0x40c>)
 8001b76:	f004 f817 	bl	8005ba8 <HAL_GPIO_Init>

}
 8001b7a:	bf00      	nop
 8001b7c:	3740      	adds	r7, #64	; 0x40
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	10120000 	.word	0x10120000
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	40021c00 	.word	0x40021c00
 8001b90:	40021800 	.word	0x40021800
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40020000 	.word	0x40020000

08001b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bae:	f002 fe7d 	bl	80048ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40001000 	.word	0x40001000

08001bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be0:	6413      	str	r3, [r2, #64]	; 0x40
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_MspInit+0x4c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_MspInit+0x4c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	210f      	movs	r1, #15
 8001c0a:	f06f 0001 	mvn.w	r0, #1
 8001c0e:	f003 f9cf 	bl	8004fb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <HAL_ADC_MspInit+0xa4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d13c      	bne.n	8001cbc <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_ADC_MspInit+0xa8>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_ADC_MspInit+0xa8>)
 8001c48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_ADC_MspInit+0xa8>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_ADC_MspInit+0xa8>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a1a      	ldr	r2, [pc, #104]	; (8001cc8 <HAL_ADC_MspInit+0xa8>)
 8001c60:	f043 0320 	orr.w	r3, r3, #32
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <HAL_ADC_MspInit+0xa8>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_ADC_MspInit+0xa8>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a14      	ldr	r2, [pc, #80]	; (8001cc8 <HAL_ADC_MspInit+0xa8>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_ADC_MspInit+0xa8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001c8a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c8e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c90:	2303      	movs	r3, #3
 8001c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	480b      	ldr	r0, [pc, #44]	; (8001ccc <HAL_ADC_MspInit+0xac>)
 8001ca0:	f003 ff82 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <HAL_ADC_MspInit+0xb0>)
 8001cb8:	f003 ff76 	bl	8005ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3728      	adds	r7, #40	; 0x28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40012200 	.word	0x40012200
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40021400 	.word	0x40021400
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08e      	sub	sp, #56	; 0x38
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a50      	ldr	r2, [pc, #320]	; (8001e34 <HAL_DCMI_MspInit+0x160>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	f040 809a 	bne.w	8001e2c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001cf8:	4b4f      	ldr	r3, [pc, #316]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	4a4e      	ldr	r2, [pc, #312]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6353      	str	r3, [r2, #52]	; 0x34
 8001d04:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d10:	4b49      	ldr	r3, [pc, #292]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	4a48      	ldr	r2, [pc, #288]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d16:	f043 0310 	orr.w	r3, r3, #16
 8001d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1c:	4b46      	ldr	r3, [pc, #280]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d28:	4b43      	ldr	r3, [pc, #268]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a42      	ldr	r2, [pc, #264]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d2e:	f043 0308 	orr.w	r3, r3, #8
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d40:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	4a3c      	ldr	r2, [pc, #240]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4c:	4b3a      	ldr	r3, [pc, #232]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d58:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	4a36      	ldr	r2, [pc, #216]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d62:	6313      	str	r3, [r2, #48]	; 0x30
 8001d64:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_DCMI_MspInit+0x164>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001d88:	2360      	movs	r3, #96	; 0x60
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001d98:	230d      	movs	r3, #13
 8001d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da0:	4619      	mov	r1, r3
 8001da2:	4826      	ldr	r0, [pc, #152]	; (8001e3c <HAL_DCMI_MspInit+0x168>)
 8001da4:	f003 ff00 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001da8:	2308      	movs	r3, #8
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001db8:	230d      	movs	r3, #13
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	481f      	ldr	r0, [pc, #124]	; (8001e40 <HAL_DCMI_MspInit+0x16c>)
 8001dc4:	f003 fef0 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dda:	230d      	movs	r3, #13
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de2:	4619      	mov	r1, r3
 8001de4:	4817      	ldr	r0, [pc, #92]	; (8001e44 <HAL_DCMI_MspInit+0x170>)
 8001de6:	f003 fedf 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001dea:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dfc:	230d      	movs	r3, #13
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e04:	4619      	mov	r1, r3
 8001e06:	4810      	ldr	r0, [pc, #64]	; (8001e48 <HAL_DCMI_MspInit+0x174>)
 8001e08:	f003 fece 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001e0c:	2350      	movs	r3, #80	; 0x50
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e1c:	230d      	movs	r3, #13
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e24:	4619      	mov	r1, r3
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <HAL_DCMI_MspInit+0x178>)
 8001e28:	f003 febe 	bl	8005ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001e2c:	bf00      	nop
 8001e2e:	3738      	adds	r7, #56	; 0x38
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	50050000 	.word	0x50050000
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40020c00 	.word	0x40020c00
 8001e44:	40021800 	.word	0x40021800
 8001e48:	40021c00 	.word	0x40021c00
 8001e4c:	40020000 	.word	0x40020000

08001e50 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_DMA2D_MspInit+0x44>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d113      	bne.n	8001e8a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <HAL_DMA2D_MspInit+0x48>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a0c      	ldr	r2, [pc, #48]	; (8001e98 <HAL_DMA2D_MspInit+0x48>)
 8001e68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_DMA2D_MspInit+0x48>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	205a      	movs	r0, #90	; 0x5a
 8001e80:	f003 f896 	bl	8004fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001e84:	205a      	movs	r0, #90	; 0x5a
 8001e86:	f003 f8af 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	4002b000 	.word	0x4002b000
 8001e98:	40023800 	.word	0x40023800

08001e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08c      	sub	sp, #48	; 0x30
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 031c 	add.w	r3, r7, #28
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2f      	ldr	r2, [pc, #188]	; (8001f78 <HAL_I2C_MspInit+0xdc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d129      	bne.n	8001f12 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	4b2f      	ldr	r3, [pc, #188]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a2e      	ldr	r2, [pc, #184]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b2c      	ldr	r3, [pc, #176]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001ed6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001edc:	2312      	movs	r3, #18
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ee8:	2304      	movs	r3, #4
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4823      	ldr	r0, [pc, #140]	; (8001f80 <HAL_I2C_MspInit+0xe4>)
 8001ef4:	f003 fe58 	bl	8005ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef8:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	4a1f      	ldr	r2, [pc, #124]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001efe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f02:	6413      	str	r3, [r2, #64]	; 0x40
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f10:	e02d      	b.n	8001f6e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1b      	ldr	r2, [pc, #108]	; (8001f84 <HAL_I2C_MspInit+0xe8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d128      	bne.n	8001f6e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f26:	6313      	str	r3, [r2, #48]	; 0x30
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001f34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3a:	2312      	movs	r3, #18
 8001f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f46:	2304      	movs	r3, #4
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <HAL_I2C_MspInit+0xec>)
 8001f52:	f003 fe29 	bl	8005ba8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001f5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_I2C_MspInit+0xe0>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
}
 8001f6e:	bf00      	nop
 8001f70:	3730      	adds	r7, #48	; 0x30
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020400 	.word	0x40020400
 8001f84:	40005c00 	.word	0x40005c00
 8001f88:	40021c00 	.word	0x40021c00

08001f8c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a15      	ldr	r2, [pc, #84]	; (8001ff0 <HAL_I2C_MspDeInit+0x64>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d110      	bne.n	8001fc0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001f9e:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <HAL_I2C_MspDeInit+0x68>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <HAL_I2C_MspDeInit+0x68>)
 8001fa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8001faa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fae:	4812      	ldr	r0, [pc, #72]	; (8001ff8 <HAL_I2C_MspDeInit+0x6c>)
 8001fb0:	f003 ffa4 	bl	8005efc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8001fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb8:	480f      	ldr	r0, [pc, #60]	; (8001ff8 <HAL_I2C_MspDeInit+0x6c>)
 8001fba:	f003 ff9f 	bl	8005efc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001fbe:	e013      	b.n	8001fe8 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_I2C_MspDeInit+0x70>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_I2C_MspDeInit+0x68>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <HAL_I2C_MspDeInit+0x68>)
 8001fd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	4809      	ldr	r0, [pc, #36]	; (8002000 <HAL_I2C_MspDeInit+0x74>)
 8001fda:	f003 ff8f 	bl	8005efc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe2:	4807      	ldr	r0, [pc, #28]	; (8002000 <HAL_I2C_MspDeInit+0x74>)
 8001fe4:	f003 ff8a 	bl	8005efc <HAL_GPIO_DeInit>
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40005400 	.word	0x40005400
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020400 	.word	0x40020400
 8001ffc:	40005c00 	.word	0x40005c00
 8002000:	40021c00 	.word	0x40021c00

08002004 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08e      	sub	sp, #56	; 0x38
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a55      	ldr	r2, [pc, #340]	; (8002178 <HAL_LTDC_MspInit+0x174>)
 8002022:	4293      	cmp	r3, r2
 8002024:	f040 80a3 	bne.w	800216e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002028:	4b54      	ldr	r3, [pc, #336]	; (800217c <HAL_LTDC_MspInit+0x178>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	4a53      	ldr	r2, [pc, #332]	; (800217c <HAL_LTDC_MspInit+0x178>)
 800202e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002032:	6453      	str	r3, [r2, #68]	; 0x44
 8002034:	4b51      	ldr	r3, [pc, #324]	; (800217c <HAL_LTDC_MspInit+0x178>)
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002040:	4b4e      	ldr	r3, [pc, #312]	; (800217c <HAL_LTDC_MspInit+0x178>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	4a4d      	ldr	r2, [pc, #308]	; (800217c <HAL_LTDC_MspInit+0x178>)
 8002046:	f043 0310 	orr.w	r3, r3, #16
 800204a:	6313      	str	r3, [r2, #48]	; 0x30
 800204c:	4b4b      	ldr	r3, [pc, #300]	; (800217c <HAL_LTDC_MspInit+0x178>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002058:	4b48      	ldr	r3, [pc, #288]	; (800217c <HAL_LTDC_MspInit+0x178>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	4a47      	ldr	r2, [pc, #284]	; (800217c <HAL_LTDC_MspInit+0x178>)
 800205e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002062:	6313      	str	r3, [r2, #48]	; 0x30
 8002064:	4b45      	ldr	r3, [pc, #276]	; (800217c <HAL_LTDC_MspInit+0x178>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206c:	61bb      	str	r3, [r7, #24]
 800206e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002070:	4b42      	ldr	r3, [pc, #264]	; (800217c <HAL_LTDC_MspInit+0x178>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	4a41      	ldr	r2, [pc, #260]	; (800217c <HAL_LTDC_MspInit+0x178>)
 8002076:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800207a:	6313      	str	r3, [r2, #48]	; 0x30
 800207c:	4b3f      	ldr	r3, [pc, #252]	; (800217c <HAL_LTDC_MspInit+0x178>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002088:	4b3c      	ldr	r3, [pc, #240]	; (800217c <HAL_LTDC_MspInit+0x178>)
 800208a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208c:	4a3b      	ldr	r2, [pc, #236]	; (800217c <HAL_LTDC_MspInit+0x178>)
 800208e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002092:	6313      	str	r3, [r2, #48]	; 0x30
 8002094:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_LTDC_MspInit+0x178>)
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80020a0:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_LTDC_MspInit+0x178>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a4:	4a35      	ldr	r2, [pc, #212]	; (800217c <HAL_LTDC_MspInit+0x178>)
 80020a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020aa:	6313      	str	r3, [r2, #48]	; 0x30
 80020ac:	4b33      	ldr	r3, [pc, #204]	; (800217c <HAL_LTDC_MspInit+0x178>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80020b8:	2310      	movs	r3, #16
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020c8:	230e      	movs	r3, #14
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80020cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d0:	4619      	mov	r1, r3
 80020d2:	482b      	ldr	r0, [pc, #172]	; (8002180 <HAL_LTDC_MspInit+0x17c>)
 80020d4:	f003 fd68 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80020d8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020ea:	230e      	movs	r3, #14
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020f2:	4619      	mov	r1, r3
 80020f4:	4823      	ldr	r0, [pc, #140]	; (8002184 <HAL_LTDC_MspInit+0x180>)
 80020f6:	f003 fd57 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80020fa:	23f7      	movs	r3, #247	; 0xf7
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002106:	2300      	movs	r3, #0
 8002108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800210a:	230e      	movs	r3, #14
 800210c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800210e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002112:	4619      	mov	r1, r3
 8002114:	481c      	ldr	r0, [pc, #112]	; (8002188 <HAL_LTDC_MspInit+0x184>)
 8002116:	f003 fd47 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800211a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800212c:	2309      	movs	r3, #9
 800212e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4619      	mov	r1, r3
 8002136:	4815      	ldr	r0, [pc, #84]	; (800218c <HAL_LTDC_MspInit+0x188>)
 8002138:	f003 fd36 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800213c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2300      	movs	r3, #0
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800214e:	230e      	movs	r3, #14
 8002150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002156:	4619      	mov	r1, r3
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <HAL_LTDC_MspInit+0x18c>)
 800215a:	f003 fd25 	bl	8005ba8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	2100      	movs	r1, #0
 8002162:	2058      	movs	r0, #88	; 0x58
 8002164:	f002 ff24 	bl	8004fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002168:	2058      	movs	r0, #88	; 0x58
 800216a:	f002 ff3d 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800216e:	bf00      	nop
 8002170:	3738      	adds	r7, #56	; 0x38
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40016800 	.word	0x40016800
 800217c:	40023800 	.word	0x40023800
 8002180:	40021000 	.word	0x40021000
 8002184:	40022400 	.word	0x40022400
 8002188:	40022800 	.word	0x40022800
 800218c:	40021800 	.word	0x40021800
 8002190:	40022000 	.word	0x40022000

08002194 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	; 0x30
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <HAL_QSPI_MspInit+0x10c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d170      	bne.n	8002298 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80021b6:	4b3b      	ldr	r3, [pc, #236]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	6393      	str	r3, [r2, #56]	; 0x38
 80021c2:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ce:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a34      	ldr	r2, [pc, #208]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4a2e      	ldr	r2, [pc, #184]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	6313      	str	r3, [r2, #48]	; 0x30
 80021f2:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a28      	ldr	r2, [pc, #160]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <HAL_QSPI_MspInit+0x110>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002216:	2304      	movs	r3, #4
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002226:	2309      	movs	r3, #9
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	481d      	ldr	r0, [pc, #116]	; (80022a8 <HAL_QSPI_MspInit+0x114>)
 8002232:	f003 fcb9 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002236:	2340      	movs	r3, #64	; 0x40
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002246:	230a      	movs	r3, #10
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	4816      	ldr	r0, [pc, #88]	; (80022ac <HAL_QSPI_MspInit+0x118>)
 8002252:	f003 fca9 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002256:	2304      	movs	r3, #4
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002262:	2303      	movs	r3, #3
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002266:	2309      	movs	r3, #9
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	4619      	mov	r1, r3
 8002270:	480e      	ldr	r0, [pc, #56]	; (80022ac <HAL_QSPI_MspInit+0x118>)
 8002272:	f003 fc99 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002276:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800227a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002284:	2303      	movs	r3, #3
 8002286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002288:	2309      	movs	r3, #9
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	4619      	mov	r1, r3
 8002292:	4807      	ldr	r0, [pc, #28]	; (80022b0 <HAL_QSPI_MspInit+0x11c>)
 8002294:	f003 fc88 	bl	8005ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002298:	bf00      	nop
 800229a:	3730      	adds	r7, #48	; 0x30
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	a0001000 	.word	0xa0001000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40020c00 	.word	0x40020c00

080022b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_RTC_MspInit+0x2c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d105      	bne.n	80022d2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_RTC_MspInit+0x30>)
 80022c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ca:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <HAL_RTC_MspInit+0x30>)
 80022cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40002800 	.word	0x40002800
 80022e4:	40023800 	.word	0x40023800

080022e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_SD_MspInit+0xb4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d144      	bne.n	8002394 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800230a:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_SD_MspInit+0xb8>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <HAL_SD_MspInit+0xb8>)
 8002310:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002314:	6453      	str	r3, [r2, #68]	; 0x44
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <HAL_SD_MspInit+0xb8>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <HAL_SD_MspInit+0xb8>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a1e      	ldr	r2, [pc, #120]	; (80023a0 <HAL_SD_MspInit+0xb8>)
 8002328:	f043 0304 	orr.w	r3, r3, #4
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <HAL_SD_MspInit+0xb8>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_SD_MspInit+0xb8>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a18      	ldr	r2, [pc, #96]	; (80023a0 <HAL_SD_MspInit+0xb8>)
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <HAL_SD_MspInit+0xb8>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002352:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002356:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002364:	230c      	movs	r3, #12
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	480d      	ldr	r0, [pc, #52]	; (80023a4 <HAL_SD_MspInit+0xbc>)
 8002370:	f003 fc1a 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002374:	2304      	movs	r3, #4
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002384:	230c      	movs	r3, #12
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4806      	ldr	r0, [pc, #24]	; (80023a8 <HAL_SD_MspInit+0xc0>)
 8002390:	f003 fc0a 	bl	8005ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002394:	bf00      	nop
 8002396:	3728      	adds	r7, #40	; 0x28
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020800 	.word	0x40020800
 80023a8:	40020c00 	.word	0x40020c00

080023ac <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80023cc:	d127      	bne.n	800241e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_SPDIFRX_MspInit+0x7c>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a15      	ldr	r2, [pc, #84]	; (8002428 <HAL_SPDIFRX_MspInit+0x7c>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <HAL_SPDIFRX_MspInit+0x7c>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <HAL_SPDIFRX_MspInit+0x7c>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <HAL_SPDIFRX_MspInit+0x7c>)
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_SPDIFRX_MspInit+0x7c>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800240e:	2308      	movs	r3, #8
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4804      	ldr	r0, [pc, #16]	; (800242c <HAL_SPDIFRX_MspInit+0x80>)
 800241a:	f003 fbc5 	bl	8005ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800
 800242c:	40020c00 	.word	0x40020c00

08002430 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_SPI_MspInit+0xb4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d144      	bne.n	80024dc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_SPI_MspInit+0xb8>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <HAL_SPI_MspInit+0xb8>)
 8002458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <HAL_SPI_MspInit+0xb8>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <HAL_SPI_MspInit+0xb8>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <HAL_SPI_MspInit+0xb8>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <HAL_SPI_MspInit+0xb8>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_SPI_MspInit+0xb8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <HAL_SPI_MspInit+0xb8>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_SPI_MspInit+0xb8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800249a:	2302      	movs	r3, #2
 800249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024aa:	2305      	movs	r3, #5
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	480d      	ldr	r0, [pc, #52]	; (80024ec <HAL_SPI_MspInit+0xbc>)
 80024b6:	f003 fb77 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80024ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024cc:	2305      	movs	r3, #5
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4619      	mov	r1, r3
 80024d6:	4806      	ldr	r0, [pc, #24]	; (80024f0 <HAL_SPI_MspInit+0xc0>)
 80024d8:	f003 fb66 	bl	8005ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024dc:	bf00      	nop
 80024de:	3728      	adds	r7, #40	; 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40003800 	.word	0x40003800
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40022000 	.word	0x40022000
 80024f0:	40020400 	.word	0x40020400

080024f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	; 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2e      	ldr	r2, [pc, #184]	; (80025bc <HAL_TIM_Base_MspInit+0xc8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10c      	bne.n	8002520 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002506:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a2d      	ldr	r2, [pc, #180]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800251e:	e046      	b.n	80025ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002528:	d10c      	bne.n	8002544 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800252a:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	4a24      	ldr	r2, [pc, #144]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6413      	str	r3, [r2, #64]	; 0x40
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	69bb      	ldr	r3, [r7, #24]
}
 8002542:	e034      	b.n	80025ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <HAL_TIM_Base_MspInit+0xd0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10c      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800254e:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697b      	ldr	r3, [r7, #20]
}
 8002566:	e022      	b.n	80025ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <HAL_TIM_Base_MspInit+0xd4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10c      	bne.n	800258c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a12      	ldr	r2, [pc, #72]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]
}
 800258a:	e010      	b.n	80025ae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_TIM_Base_MspInit+0xd8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10b      	bne.n	80025ae <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	6453      	str	r3, [r2, #68]	; 0x44
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_TIM_Base_MspInit+0xcc>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
}
 80025ae:	bf00      	nop
 80025b0:	3724      	adds	r7, #36	; 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40010000 	.word	0x40010000
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40000400 	.word	0x40000400
 80025c8:	40000c00 	.word	0x40000c00
 80025cc:	40010400 	.word	0x40010400

080025d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_TIM_PWM_MspInit+0x38>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10b      	bne.n	80025fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_TIM_PWM_MspInit+0x3c>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_TIM_PWM_MspInit+0x3c>)
 80025e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ec:	6413      	str	r3, [r2, #64]	; 0x40
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <HAL_TIM_PWM_MspInit+0x3c>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40001800 	.word	0x40001800
 800260c:	40023800 	.word	0x40023800

08002610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	; 0x30
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 031c 	add.w	r3, r7, #28
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a56      	ldr	r2, [pc, #344]	; (8002788 <HAL_TIM_MspPostInit+0x178>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d11d      	bne.n	800266e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	4b56      	ldr	r3, [pc, #344]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a55      	ldr	r2, [pc, #340]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800264a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800264e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002658:	2300      	movs	r3, #0
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800265c:	2301      	movs	r3, #1
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002660:	f107 031c 	add.w	r3, r7, #28
 8002664:	4619      	mov	r1, r3
 8002666:	484a      	ldr	r0, [pc, #296]	; (8002790 <HAL_TIM_MspPostInit+0x180>)
 8002668:	f003 fa9e 	bl	8005ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800266c:	e087      	b.n	800277e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002676:	d11d      	bne.n	80026b4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b44      	ldr	r3, [pc, #272]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	4a43      	ldr	r2, [pc, #268]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6313      	str	r3, [r2, #48]	; 0x30
 8002684:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269e:	2300      	movs	r3, #0
 80026a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026a2:	2301      	movs	r3, #1
 80026a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80026a6:	f107 031c 	add.w	r3, r7, #28
 80026aa:	4619      	mov	r1, r3
 80026ac:	4838      	ldr	r0, [pc, #224]	; (8002790 <HAL_TIM_MspPostInit+0x180>)
 80026ae:	f003 fa7b 	bl	8005ba8 <HAL_GPIO_Init>
}
 80026b2:	e064      	b.n	800277e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a36      	ldr	r2, [pc, #216]	; (8002794 <HAL_TIM_MspPostInit+0x184>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d11c      	bne.n	80026f8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026be:	4b33      	ldr	r3, [pc, #204]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a32      	ldr	r2, [pc, #200]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b30      	ldr	r3, [pc, #192]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80026d6:	2310      	movs	r3, #16
 80026d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026e6:	2302      	movs	r3, #2
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80026ea:	f107 031c 	add.w	r3, r7, #28
 80026ee:	4619      	mov	r1, r3
 80026f0:	4829      	ldr	r0, [pc, #164]	; (8002798 <HAL_TIM_MspPostInit+0x188>)
 80026f2:	f003 fa59 	bl	8005ba8 <HAL_GPIO_Init>
}
 80026f6:	e042      	b.n	800277e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a27      	ldr	r2, [pc, #156]	; (800279c <HAL_TIM_MspPostInit+0x18c>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d11c      	bne.n	800273c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002702:	4b22      	ldr	r3, [pc, #136]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a21      	ldr	r2, [pc, #132]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b1f      	ldr	r3, [pc, #124]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800271a:	2301      	movs	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800272a:	2302      	movs	r3, #2
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4619      	mov	r1, r3
 8002734:	481a      	ldr	r0, [pc, #104]	; (80027a0 <HAL_TIM_MspPostInit+0x190>)
 8002736:	f003 fa37 	bl	8005ba8 <HAL_GPIO_Init>
}
 800273a:	e020      	b.n	800277e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <HAL_TIM_MspPostInit+0x194>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d11b      	bne.n	800277e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a10      	ldr	r2, [pc, #64]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 800274c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <HAL_TIM_MspPostInit+0x17c>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800275e:	2340      	movs	r3, #64	; 0x40
 8002760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276a:	2300      	movs	r3, #0
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800276e:	2309      	movs	r3, #9
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002772:	f107 031c 	add.w	r3, r7, #28
 8002776:	4619      	mov	r1, r3
 8002778:	480b      	ldr	r0, [pc, #44]	; (80027a8 <HAL_TIM_MspPostInit+0x198>)
 800277a:	f003 fa15 	bl	8005ba8 <HAL_GPIO_Init>
}
 800277e:	bf00      	nop
 8002780:	3730      	adds	r7, #48	; 0x30
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40010000 	.word	0x40010000
 800278c:	40023800 	.word	0x40023800
 8002790:	40020000 	.word	0x40020000
 8002794:	40000400 	.word	0x40000400
 8002798:	40020400 	.word	0x40020400
 800279c:	40000c00 	.word	0x40000c00
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40001800 	.word	0x40001800
 80027a8:	40021c00 	.word	0x40021c00

080027ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08c      	sub	sp, #48	; 0x30
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 031c 	add.w	r3, r7, #28
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a3c      	ldr	r2, [pc, #240]	; (80028bc <HAL_UART_MspInit+0x110>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d145      	bne.n	800285a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ce:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <HAL_UART_MspInit+0x114>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a3b      	ldr	r2, [pc, #236]	; (80028c0 <HAL_UART_MspInit+0x114>)
 80027d4:	f043 0310 	orr.w	r3, r3, #16
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_UART_MspInit+0x114>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_UART_MspInit+0x114>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a35      	ldr	r2, [pc, #212]	; (80028c0 <HAL_UART_MspInit+0x114>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_UART_MspInit+0x114>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fe:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <HAL_UART_MspInit+0x114>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a2f      	ldr	r2, [pc, #188]	; (80028c0 <HAL_UART_MspInit+0x114>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_UART_MspInit+0x114>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002822:	2300      	movs	r3, #0
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002826:	2307      	movs	r3, #7
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800282a:	f107 031c 	add.w	r3, r7, #28
 800282e:	4619      	mov	r1, r3
 8002830:	4824      	ldr	r0, [pc, #144]	; (80028c4 <HAL_UART_MspInit+0x118>)
 8002832:	f003 f9b9 	bl	8005ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	2300      	movs	r3, #0
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002848:	2307      	movs	r3, #7
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	4619      	mov	r1, r3
 8002852:	481d      	ldr	r0, [pc, #116]	; (80028c8 <HAL_UART_MspInit+0x11c>)
 8002854:	f003 f9a8 	bl	8005ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002858:	e02c      	b.n	80028b4 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_UART_MspInit+0x120>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d127      	bne.n	80028b4 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002864:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <HAL_UART_MspInit+0x114>)
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	4a15      	ldr	r2, [pc, #84]	; (80028c0 <HAL_UART_MspInit+0x114>)
 800286a:	f043 0320 	orr.w	r3, r3, #32
 800286e:	6453      	str	r3, [r2, #68]	; 0x44
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_UART_MspInit+0x114>)
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800287c:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_UART_MspInit+0x114>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <HAL_UART_MspInit+0x114>)
 8002882:	f043 0304 	orr.w	r3, r3, #4
 8002886:	6313      	str	r3, [r2, #48]	; 0x30
 8002888:	4b0d      	ldr	r3, [pc, #52]	; (80028c0 <HAL_UART_MspInit+0x114>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002894:	23c0      	movs	r3, #192	; 0xc0
 8002896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a0:	2303      	movs	r3, #3
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80028a4:	2308      	movs	r3, #8
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a8:	f107 031c 	add.w	r3, r7, #28
 80028ac:	4619      	mov	r1, r3
 80028ae:	4808      	ldr	r0, [pc, #32]	; (80028d0 <HAL_UART_MspInit+0x124>)
 80028b0:	f003 f97a 	bl	8005ba8 <HAL_GPIO_Init>
}
 80028b4:	bf00      	nop
 80028b6:	3730      	adds	r7, #48	; 0x30
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40011000 	.word	0x40011000
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020400 	.word	0x40020400
 80028c8:	40020000 	.word	0x40020000
 80028cc:	40011400 	.word	0x40011400
 80028d0:	40020800 	.word	0x40020800

080028d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80028e8:	4b3a      	ldr	r3, [pc, #232]	; (80029d4 <HAL_FMC_MspInit+0x100>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d16d      	bne.n	80029cc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80028f0:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <HAL_FMC_MspInit+0x100>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_FMC_MspInit+0x104>)
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	4a37      	ldr	r2, [pc, #220]	; (80029d8 <HAL_FMC_MspInit+0x104>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6393      	str	r3, [r2, #56]	; 0x38
 8002902:	4b35      	ldr	r3, [pc, #212]	; (80029d8 <HAL_FMC_MspInit+0x104>)
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800290e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002912:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002920:	230c      	movs	r3, #12
 8002922:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	4619      	mov	r1, r3
 8002928:	482c      	ldr	r0, [pc, #176]	; (80029dc <HAL_FMC_MspInit+0x108>)
 800292a:	f003 f93d 	bl	8005ba8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800292e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002932:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293c:	2303      	movs	r3, #3
 800293e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002940:	230c      	movs	r3, #12
 8002942:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002944:	1d3b      	adds	r3, r7, #4
 8002946:	4619      	mov	r1, r3
 8002948:	4825      	ldr	r0, [pc, #148]	; (80029e0 <HAL_FMC_MspInit+0x10c>)
 800294a:	f003 f92d 	bl	8005ba8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800294e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002952:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002954:	2302      	movs	r3, #2
 8002956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295c:	2303      	movs	r3, #3
 800295e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002960:	230c      	movs	r3, #12
 8002962:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	4619      	mov	r1, r3
 8002968:	481e      	ldr	r0, [pc, #120]	; (80029e4 <HAL_FMC_MspInit+0x110>)
 800296a:	f003 f91d 	bl	8005ba8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800296e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002972:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002980:	230c      	movs	r3, #12
 8002982:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	4619      	mov	r1, r3
 8002988:	4817      	ldr	r0, [pc, #92]	; (80029e8 <HAL_FMC_MspInit+0x114>)
 800298a:	f003 f90d 	bl	8005ba8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800298e:	2328      	movs	r3, #40	; 0x28
 8002990:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299a:	2303      	movs	r3, #3
 800299c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800299e:	230c      	movs	r3, #12
 80029a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	4619      	mov	r1, r3
 80029a6:	4811      	ldr	r0, [pc, #68]	; (80029ec <HAL_FMC_MspInit+0x118>)
 80029a8:	f003 f8fe 	bl	8005ba8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80029ac:	2308      	movs	r3, #8
 80029ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029bc:	230c      	movs	r3, #12
 80029be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	480a      	ldr	r0, [pc, #40]	; (80029f0 <HAL_FMC_MspInit+0x11c>)
 80029c6:	f003 f8ef 	bl	8005ba8 <HAL_GPIO_Init>
 80029ca:	e000      	b.n	80029ce <HAL_FMC_MspInit+0xfa>
    return;
 80029cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	200000c8 	.word	0x200000c8
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40021800 	.word	0x40021800
 80029e4:	40020c00 	.word	0x40020c00
 80029e8:	40021400 	.word	0x40021400
 80029ec:	40021c00 	.word	0x40021c00
 80029f0:	40020800 	.word	0x40020800

080029f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80029fc:	f7ff ff6a 	bl	80028d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a2b      	ldr	r2, [pc, #172]	; (8002ac4 <HAL_SAI_MspInit+0xbc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d124      	bne.n	8002a64 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <HAL_SAI_MspInit+0xc0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10b      	bne.n	8002a3a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002a22:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <HAL_SAI_MspInit+0xc4>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a29      	ldr	r2, [pc, #164]	; (8002acc <HAL_SAI_MspInit+0xc4>)
 8002a28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_SAI_MspInit+0xc4>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002a3a:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <HAL_SAI_MspInit+0xc0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <HAL_SAI_MspInit+0xc0>)
 8002a42:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002a44:	23f0      	movs	r3, #240	; 0xf0
 8002a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002a54:	230a      	movs	r3, #10
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	481c      	ldr	r0, [pc, #112]	; (8002ad0 <HAL_SAI_MspInit+0xc8>)
 8002a60:	f003 f8a2 	bl	8005ba8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <HAL_SAI_MspInit+0xcc>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d125      	bne.n	8002aba <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_SAI_MspInit+0xc0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_SAI_MspInit+0xc4>)
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	4a14      	ldr	r2, [pc, #80]	; (8002acc <HAL_SAI_MspInit+0xc4>)
 8002a7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a80:	6453      	str	r3, [r2, #68]	; 0x44
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_SAI_MspInit+0xc4>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_SAI_MspInit+0xc0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <HAL_SAI_MspInit+0xc0>)
 8002a96:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002aaa:	230a      	movs	r3, #10
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4808      	ldr	r0, [pc, #32]	; (8002ad8 <HAL_SAI_MspInit+0xd0>)
 8002ab6:	f003 f877 	bl	8005ba8 <HAL_GPIO_Init>

    }
}
 8002aba:	bf00      	nop
 8002abc:	3728      	adds	r7, #40	; 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40015c04 	.word	0x40015c04
 8002ac8:	200000cc 	.word	0x200000cc
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40015c24 	.word	0x40015c24
 8002ad8:	40021800 	.word	0x40021800

08002adc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	; 0x30
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002aec:	2200      	movs	r2, #0
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	2036      	movs	r0, #54	; 0x36
 8002af2:	f002 fa5d 	bl	8004fb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002af6:	2036      	movs	r0, #54	; 0x36
 8002af8:	f002 fa76 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002afc:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <HAL_InitTick+0xa0>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <HAL_InitTick+0xa0>)
 8002b02:	f043 0310 	orr.w	r3, r3, #16
 8002b06:	6413      	str	r3, [r2, #64]	; 0x40
 8002b08:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <HAL_InitTick+0xa0>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b14:	f107 0210 	add.w	r2, r7, #16
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f005 f9d0 	bl	8007ec4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002b24:	f005 f9a6 	bl	8007e74 <HAL_RCC_GetPCLK1Freq>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b30:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <HAL_InitTick+0xa4>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0c9b      	lsrs	r3, r3, #18
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_InitTick+0xa8>)
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <HAL_InitTick+0xac>)
 8002b40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_InitTick+0xa8>)
 8002b44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b48:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002b4a:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <HAL_InitTick+0xa8>)
 8002b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <HAL_InitTick+0xa8>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_InitTick+0xa8>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002b5c:	4809      	ldr	r0, [pc, #36]	; (8002b84 <HAL_InitTick+0xa8>)
 8002b5e:	f007 fb51 	bl	800a204 <HAL_TIM_Base_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002b68:	4806      	ldr	r0, [pc, #24]	; (8002b84 <HAL_InitTick+0xa8>)
 8002b6a:	f007 fb77 	bl	800a25c <HAL_TIM_Base_Start_IT>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	e000      	b.n	8002b74 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3730      	adds	r7, #48	; 0x30
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	431bde83 	.word	0x431bde83
 8002b84:	20000a70 	.word	0x20000a70
 8002b88:	40001000 	.word	0x40001000

08002b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <HardFault_Handler+0x4>

08002ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <MemManage_Handler+0x4>

08002ba6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002baa:	e7fe      	b.n	8002baa <BusFault_Handler+0x4>

08002bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bb0:	e7fe      	b.n	8002bb0 <UsageFault_Handler+0x4>

08002bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc4:	bf00      	nop
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bf0:	4802      	ldr	r0, [pc, #8]	; (8002bfc <TIM6_DAC_IRQHandler+0x10>)
 8002bf2:	f007 fb88 	bl	800a306 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000a70 	.word	0x20000a70

08002c00 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002c04:	4802      	ldr	r0, [pc, #8]	; (8002c10 <LTDC_IRQHandler+0x10>)
 8002c06:	f004 f91d 	bl	8006e44 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000664 	.word	0x20000664

08002c14 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002c18:	4802      	ldr	r0, [pc, #8]	; (8002c24 <DMA2D_IRQHandler+0x10>)
 8002c1a:	f002 fd87 	bl	800572c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000904 	.word	0x20000904

08002c28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e00a      	b.n	8002c50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c3a:	f3af 8000 	nop.w
 8002c3e:	4601      	mov	r1, r0
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	60ba      	str	r2, [r7, #8]
 8002c46:	b2ca      	uxtb	r2, r1
 8002c48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	dbf0      	blt.n	8002c3a <_read+0x12>
	}

return len;
 8002c58:	687b      	ldr	r3, [r7, #4]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e009      	b.n	8002c88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	60ba      	str	r2, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc97 	bl	80005b0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3301      	adds	r3, #1
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	dbf1      	blt.n	8002c74 <_write+0x12>
	}
	return len;
 8002c90:	687b      	ldr	r3, [r7, #4]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <_close>:

int _close(int file)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <_isatty>:

int _isatty(int file)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
	return 1;
 8002cda:	2301      	movs	r3, #1
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
	return 0;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d0c:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <_sbrk+0x5c>)
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <_sbrk+0x60>)
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d18:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d102      	bne.n	8002d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d20:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <_sbrk+0x64>)
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <_sbrk+0x68>)
 8002d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d207      	bcs.n	8002d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d34:	f009 fd48 	bl	800c7c8 <__errno>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	230c      	movs	r3, #12
 8002d3c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	e009      	b.n	8002d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <_sbrk+0x64>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <_sbrk+0x64>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <_sbrk+0x64>)
 8002d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d56:	68fb      	ldr	r3, [r7, #12]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20050000 	.word	0x20050000
 8002d64:	00000400 	.word	0x00000400
 8002d68:	200000d0 	.word	0x200000d0
 8002d6c:	20000b98 	.word	0x20000b98

08002d70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <SystemInit+0x28>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <SystemInit+0x28>)
 8002d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <SystemInit+0x28>)
 8002d86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d8a:	609a      	str	r2, [r3, #8]
#endif
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dd4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002da0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002da2:	e003      	b.n	8002dac <LoopCopyDataInit>

08002da4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002da6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002da8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002daa:	3104      	adds	r1, #4

08002dac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dac:	480b      	ldr	r0, [pc, #44]	; (8002ddc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dae:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002db0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002db2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002db4:	d3f6      	bcc.n	8002da4 <CopyDataInit>
  ldr  r2, =_sbss
 8002db6:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002db8:	e002      	b.n	8002dc0 <LoopFillZerobss>

08002dba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002dbc:	f842 3b04 	str.w	r3, [r2], #4

08002dc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dc4:	d3f9      	bcc.n	8002dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dc6:	f7ff ffd3 	bl	8002d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dca:	f009 fd03 	bl	800c7d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dce:	f7fd fc01 	bl	80005d4 <main>
  bx  lr    
 8002dd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dd4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002dd8:	0800f7c8 	.word	0x0800f7c8
  ldr  r0, =_sdata
 8002ddc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002de0:	200000ac 	.word	0x200000ac
  ldr  r2, =_sbss
 8002de4:	200000ac 	.word	0x200000ac
  ldr  r3, = _ebss
 8002de8:	20000b94 	.word	0x20000b94

08002dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dec:	e7fe      	b.n	8002dec <ADC_IRQHandler>

08002dee <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8002df8:	20c8      	movs	r0, #200	; 0xc8
 8002dfa:	f000 fc33 	bl	8003664 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002dfe:	f000 fa7b 	bl	80032f8 <ft5336_I2C_InitializeIfRequired>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8002e32:	2300      	movs	r3, #0
 8002e34:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002e36:	f000 fa5f 	bl	80032f8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	e010      	b.n	8002e62 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	21a8      	movs	r1, #168	; 0xa8
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fbee 	bl	8003628 <TS_IO_Read>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8002e50:	7b7b      	ldrb	r3, [r7, #13]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b51      	cmp	r3, #81	; 0x51
 8002e56:	d101      	bne.n	8002e5c <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d802      	bhi.n	8002e6e <ft5336_ReadID+0x4e>
 8002e68:	7bbb      	ldrb	r3, [r7, #14]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0e8      	beq.n	8002e40 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002e6e:	7b7b      	ldrb	r3, [r7, #13]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	b29b      	uxth	r3, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fa45 	bl	8003318 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 f933 	bl	80030fc <ft5336_TS_DisableIT>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2102      	movs	r1, #2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 fbb7 	bl	8003628 <TS_IO_Read>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d901      	bls.n	8002ed6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <ft5336_TS_DetectTouch+0x50>)
 8002edc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8002ede:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <ft5336_TS_DetectTouch+0x50>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	b2db      	uxtb	r3, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200000d4 	.word	0x200000d4

08002ef4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8002f16:	4b6d      	ldr	r3, [pc, #436]	; (80030cc <ft5336_TS_GetXY+0x1d8>)
 8002f18:	789a      	ldrb	r2, [r3, #2]
 8002f1a:	4b6c      	ldr	r3, [pc, #432]	; (80030cc <ft5336_TS_GetXY+0x1d8>)
 8002f1c:	785b      	ldrb	r3, [r3, #1]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	f080 80cf 	bcs.w	80030c2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8002f24:	4b69      	ldr	r3, [pc, #420]	; (80030cc <ft5336_TS_GetXY+0x1d8>)
 8002f26:	789b      	ldrb	r3, [r3, #2]
 8002f28:	2b09      	cmp	r3, #9
 8002f2a:	d871      	bhi.n	8003010 <ft5336_TS_GetXY+0x11c>
 8002f2c:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <ft5336_TS_GetXY+0x40>)
 8002f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f32:	bf00      	nop
 8002f34:	08002f5d 	.word	0x08002f5d
 8002f38:	08002f6f 	.word	0x08002f6f
 8002f3c:	08002f81 	.word	0x08002f81
 8002f40:	08002f93 	.word	0x08002f93
 8002f44:	08002fa5 	.word	0x08002fa5
 8002f48:	08002fb7 	.word	0x08002fb7
 8002f4c:	08002fc9 	.word	0x08002fc9
 8002f50:	08002fdb 	.word	0x08002fdb
 8002f54:	08002fed 	.word	0x08002fed
 8002f58:	08002fff 	.word	0x08002fff
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002f60:	2303      	movs	r3, #3
 8002f62:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8002f64:	2306      	movs	r3, #6
 8002f66:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002f68:	2305      	movs	r3, #5
 8002f6a:	753b      	strb	r3, [r7, #20]
      break;
 8002f6c:	e051      	b.n	8003012 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8002f6e:	230a      	movs	r3, #10
 8002f70:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8002f72:	2309      	movs	r3, #9
 8002f74:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8002f76:	230c      	movs	r3, #12
 8002f78:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8002f7a:	230b      	movs	r3, #11
 8002f7c:	753b      	strb	r3, [r7, #20]
      break;
 8002f7e:	e048      	b.n	8003012 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002f80:	2310      	movs	r3, #16
 8002f82:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8002f84:	230f      	movs	r3, #15
 8002f86:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002f88:	2312      	movs	r3, #18
 8002f8a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8002f8c:	2311      	movs	r3, #17
 8002f8e:	753b      	strb	r3, [r7, #20]
      break;
 8002f90:	e03f      	b.n	8003012 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8002f92:	2316      	movs	r3, #22
 8002f94:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8002f96:	2315      	movs	r3, #21
 8002f98:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8002f9a:	2318      	movs	r3, #24
 8002f9c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8002f9e:	2317      	movs	r3, #23
 8002fa0:	753b      	strb	r3, [r7, #20]
      break;
 8002fa2:	e036      	b.n	8003012 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8002fa4:	231c      	movs	r3, #28
 8002fa6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8002fa8:	231b      	movs	r3, #27
 8002faa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8002fac:	231e      	movs	r3, #30
 8002fae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8002fb0:	231d      	movs	r3, #29
 8002fb2:	753b      	strb	r3, [r7, #20]
      break;
 8002fb4:	e02d      	b.n	8003012 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8002fb6:	2322      	movs	r3, #34	; 0x22
 8002fb8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8002fba:	2321      	movs	r3, #33	; 0x21
 8002fbc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8002fbe:	2324      	movs	r3, #36	; 0x24
 8002fc0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8002fc2:	2323      	movs	r3, #35	; 0x23
 8002fc4:	753b      	strb	r3, [r7, #20]
      break;
 8002fc6:	e024      	b.n	8003012 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8002fc8:	2328      	movs	r3, #40	; 0x28
 8002fca:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8002fcc:	2327      	movs	r3, #39	; 0x27
 8002fce:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8002fd0:	232a      	movs	r3, #42	; 0x2a
 8002fd2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8002fd4:	2329      	movs	r3, #41	; 0x29
 8002fd6:	753b      	strb	r3, [r7, #20]
      break;
 8002fd8:	e01b      	b.n	8003012 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8002fda:	232e      	movs	r3, #46	; 0x2e
 8002fdc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8002fde:	232d      	movs	r3, #45	; 0x2d
 8002fe0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8002fe2:	2330      	movs	r3, #48	; 0x30
 8002fe4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8002fe6:	232f      	movs	r3, #47	; 0x2f
 8002fe8:	753b      	strb	r3, [r7, #20]
      break;
 8002fea:	e012      	b.n	8003012 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8002fec:	2334      	movs	r3, #52	; 0x34
 8002fee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8002ff0:	2333      	movs	r3, #51	; 0x33
 8002ff2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8002ff4:	2336      	movs	r3, #54	; 0x36
 8002ff6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8002ff8:	2335      	movs	r3, #53	; 0x35
 8002ffa:	753b      	strb	r3, [r7, #20]
      break;
 8002ffc:	e009      	b.n	8003012 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8002ffe:	233a      	movs	r3, #58	; 0x3a
 8003000:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8003002:	2339      	movs	r3, #57	; 0x39
 8003004:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8003006:	233c      	movs	r3, #60	; 0x3c
 8003008:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800300a:	233b      	movs	r3, #59	; 0x3b
 800300c:	753b      	strb	r3, [r7, #20]
      break;
 800300e:	e000      	b.n	8003012 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8003010:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003012:	89fb      	ldrh	r3, [r7, #14]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	7dfa      	ldrb	r2, [r7, #23]
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fb04 	bl	8003628 <TS_IO_Read>
 8003020:	4603      	mov	r3, r0
 8003022:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	b29a      	uxth	r2, r3
 800302a:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <ft5336_TS_GetXY+0x1dc>)
 800302c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800302e:	89fb      	ldrh	r3, [r7, #14]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	7dba      	ldrb	r2, [r7, #22]
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f000 faf6 	bl	8003628 <TS_IO_Read>
 800303c:	4603      	mov	r3, r0
 800303e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800304a:	b21a      	sxth	r2, r3
 800304c:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <ft5336_TS_GetXY+0x1dc>)
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	b21b      	sxth	r3, r3
 8003052:	4313      	orrs	r3, r2
 8003054:	b21b      	sxth	r3, r3
 8003056:	b29a      	uxth	r2, r3
 8003058:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <ft5336_TS_GetXY+0x1dc>)
 800305a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800305c:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <ft5336_TS_GetXY+0x1dc>)
 800305e:	881a      	ldrh	r2, [r3, #0]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8003064:	89fb      	ldrh	r3, [r7, #14]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	7d7a      	ldrb	r2, [r7, #21]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fadb 	bl	8003628 <TS_IO_Read>
 8003072:	4603      	mov	r3, r0
 8003074:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	b2db      	uxtb	r3, r3
 800307a:	b29a      	uxth	r2, r3
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <ft5336_TS_GetXY+0x1dc>)
 800307e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8003080:	89fb      	ldrh	r3, [r7, #14]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	7d3a      	ldrb	r2, [r7, #20]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f000 facd 	bl	8003628 <TS_IO_Read>
 800308e:	4603      	mov	r3, r0
 8003090:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800309c:	b21a      	sxth	r2, r3
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <ft5336_TS_GetXY+0x1dc>)
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b21b      	sxth	r3, r3
 80030a4:	4313      	orrs	r3, r2
 80030a6:	b21b      	sxth	r3, r3
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <ft5336_TS_GetXY+0x1dc>)
 80030ac:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <ft5336_TS_GetXY+0x1dc>)
 80030b0:	881a      	ldrh	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <ft5336_TS_GetXY+0x1d8>)
 80030b8:	789b      	ldrb	r3, [r3, #2]
 80030ba:	3301      	adds	r3, #1
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4b03      	ldr	r3, [pc, #12]	; (80030cc <ft5336_TS_GetXY+0x1d8>)
 80030c0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80030c2:	bf00      	nop
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200000d4 	.word	0x200000d4
 80030d0:	200000d8 	.word	0x200000d8

080030d4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	21a4      	movs	r1, #164	; 0xa4
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fa80 	bl	80035f4 <TS_IO_Write>
}
 80030f4:	bf00      	nop
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	21a4      	movs	r1, #164	; 0xa4
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fa6c 	bl	80035f4 <TS_IO_Write>
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	6039      	str	r1, [r7, #0]
 800315c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2101      	movs	r1, #1
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fa5d 	bl	8003628 <TS_IO_Read>
 800316e:	4603      	mov	r3, r0
 8003170:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	461a      	mov	r2, r3
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	601a      	str	r2, [r3, #0]
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4603      	mov	r3, r0
 8003192:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80031a4:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <ft5336_TS_GetTouchInfo+0x158>)
 80031a6:	785b      	ldrb	r3, [r3, #1]
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4293      	cmp	r3, r2
 80031ae:	f080 8090 	bcs.w	80032d2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b09      	cmp	r3, #9
 80031b6:	d85d      	bhi.n	8003274 <ft5336_TS_GetTouchInfo+0xf0>
 80031b8:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <ft5336_TS_GetTouchInfo+0x3c>)
 80031ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031be:	bf00      	nop
 80031c0:	080031e9 	.word	0x080031e9
 80031c4:	080031f7 	.word	0x080031f7
 80031c8:	08003205 	.word	0x08003205
 80031cc:	08003213 	.word	0x08003213
 80031d0:	08003221 	.word	0x08003221
 80031d4:	0800322f 	.word	0x0800322f
 80031d8:	0800323d 	.word	0x0800323d
 80031dc:	0800324b 	.word	0x0800324b
 80031e0:	08003259 	.word	0x08003259
 80031e4:	08003267 	.word	0x08003267
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80031e8:	2303      	movs	r3, #3
 80031ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80031ec:	2307      	movs	r3, #7
 80031ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80031f0:	2308      	movs	r3, #8
 80031f2:	757b      	strb	r3, [r7, #21]
      break;
 80031f4:	e03f      	b.n	8003276 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80031f6:	2309      	movs	r3, #9
 80031f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80031fa:	230d      	movs	r3, #13
 80031fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80031fe:	230e      	movs	r3, #14
 8003200:	757b      	strb	r3, [r7, #21]
      break;
 8003202:	e038      	b.n	8003276 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8003204:	230f      	movs	r3, #15
 8003206:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8003208:	2313      	movs	r3, #19
 800320a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800320c:	2314      	movs	r3, #20
 800320e:	757b      	strb	r3, [r7, #21]
      break;
 8003210:	e031      	b.n	8003276 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8003212:	2315      	movs	r3, #21
 8003214:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8003216:	2319      	movs	r3, #25
 8003218:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800321a:	231a      	movs	r3, #26
 800321c:	757b      	strb	r3, [r7, #21]
      break;
 800321e:	e02a      	b.n	8003276 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8003220:	231b      	movs	r3, #27
 8003222:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8003224:	231f      	movs	r3, #31
 8003226:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8003228:	2320      	movs	r3, #32
 800322a:	757b      	strb	r3, [r7, #21]
      break;
 800322c:	e023      	b.n	8003276 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800322e:	2321      	movs	r3, #33	; 0x21
 8003230:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8003232:	2325      	movs	r3, #37	; 0x25
 8003234:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8003236:	2326      	movs	r3, #38	; 0x26
 8003238:	757b      	strb	r3, [r7, #21]
      break;
 800323a:	e01c      	b.n	8003276 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800323c:	2327      	movs	r3, #39	; 0x27
 800323e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8003240:	232b      	movs	r3, #43	; 0x2b
 8003242:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8003244:	232c      	movs	r3, #44	; 0x2c
 8003246:	757b      	strb	r3, [r7, #21]
      break;
 8003248:	e015      	b.n	8003276 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800324a:	232d      	movs	r3, #45	; 0x2d
 800324c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800324e:	2331      	movs	r3, #49	; 0x31
 8003250:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8003252:	2332      	movs	r3, #50	; 0x32
 8003254:	757b      	strb	r3, [r7, #21]
      break;
 8003256:	e00e      	b.n	8003276 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8003258:	2333      	movs	r3, #51	; 0x33
 800325a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800325c:	2337      	movs	r3, #55	; 0x37
 800325e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8003260:	2338      	movs	r3, #56	; 0x38
 8003262:	757b      	strb	r3, [r7, #21]
      break;
 8003264:	e007      	b.n	8003276 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8003266:	2339      	movs	r3, #57	; 0x39
 8003268:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800326a:	233d      	movs	r3, #61	; 0x3d
 800326c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800326e:	233e      	movs	r3, #62	; 0x3e
 8003270:	757b      	strb	r3, [r7, #21]
      break;
 8003272:	e000      	b.n	8003276 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8003274:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8003276:	89fb      	ldrh	r3, [r7, #14]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	7dfa      	ldrb	r2, [r7, #23]
 800327c:	4611      	mov	r1, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f9d2 	bl	8003628 <TS_IO_Read>
 8003284:	4603      	mov	r3, r0
 8003286:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8003288:	7d3b      	ldrb	r3, [r7, #20]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	119b      	asrs	r3, r3, #6
 800328e:	f003 0203 	and.w	r2, r3, #3
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8003296:	89fb      	ldrh	r3, [r7, #14]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	7dba      	ldrb	r2, [r7, #22]
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f9c2 	bl	8003628 <TS_IO_Read>
 80032a4:	4603      	mov	r3, r0
 80032a6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80032a8:	7d3b      	ldrb	r3, [r7, #20]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80032b2:	89fb      	ldrh	r3, [r7, #14]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	7d7a      	ldrb	r2, [r7, #21]
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f9b4 	bl	8003628 <TS_IO_Read>
 80032c0:	4603      	mov	r3, r0
 80032c2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80032c4:	7d3b      	ldrb	r3, [r7, #20]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	111b      	asrs	r3, r3, #4
 80032ca:	f003 0204 	and.w	r2, r3, #4
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	200000d4 	.word	0x200000d4

080032e0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	200000d4 	.word	0x200000d4

080032f8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80032fc:	f7ff fff0 	bl	80032e0 <ft5336_Get_I2C_InitializedStatus>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d104      	bne.n	8003310 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8003306:	f000 f96b 	bl	80035e0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800330a:	4b02      	ldr	r3, [pc, #8]	; (8003314 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800330c:	2201      	movs	r2, #1
 800330e:	701a      	strb	r2, [r3, #0]
  }
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}
 8003314:	200000d4 	.word	0x200000d4

08003318 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8003326:	68fb      	ldr	r3, [r7, #12]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	; 0x30
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a51      	ldr	r2, [pc, #324]	; (8003484 <I2Cx_MspInit+0x150>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d14d      	bne.n	80033e0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003344:	4b50      	ldr	r3, [pc, #320]	; (8003488 <I2Cx_MspInit+0x154>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	4a4f      	ldr	r2, [pc, #316]	; (8003488 <I2Cx_MspInit+0x154>)
 800334a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800334e:	6313      	str	r3, [r2, #48]	; 0x30
 8003350:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <I2Cx_MspInit+0x154>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003360:	2312      	movs	r3, #18
 8003362:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003368:	2302      	movs	r3, #2
 800336a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800336c:	2304      	movs	r3, #4
 800336e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003370:	f107 031c 	add.w	r3, r7, #28
 8003374:	4619      	mov	r1, r3
 8003376:	4845      	ldr	r0, [pc, #276]	; (800348c <I2Cx_MspInit+0x158>)
 8003378:	f002 fc16 	bl	8005ba8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800337c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003382:	f107 031c 	add.w	r3, r7, #28
 8003386:	4619      	mov	r1, r3
 8003388:	4840      	ldr	r0, [pc, #256]	; (800348c <I2Cx_MspInit+0x158>)
 800338a:	f002 fc0d 	bl	8005ba8 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800338e:	4b3e      	ldr	r3, [pc, #248]	; (8003488 <I2Cx_MspInit+0x154>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	4a3d      	ldr	r2, [pc, #244]	; (8003488 <I2Cx_MspInit+0x154>)
 8003394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003398:	6413      	str	r3, [r2, #64]	; 0x40
 800339a:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <I2Cx_MspInit+0x154>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80033a6:	4b38      	ldr	r3, [pc, #224]	; (8003488 <I2Cx_MspInit+0x154>)
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	4a37      	ldr	r2, [pc, #220]	; (8003488 <I2Cx_MspInit+0x154>)
 80033ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033b0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80033b2:	4b35      	ldr	r3, [pc, #212]	; (8003488 <I2Cx_MspInit+0x154>)
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	4a34      	ldr	r2, [pc, #208]	; (8003488 <I2Cx_MspInit+0x154>)
 80033b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033bc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80033be:	2200      	movs	r2, #0
 80033c0:	210f      	movs	r1, #15
 80033c2:	2048      	movs	r0, #72	; 0x48
 80033c4:	f001 fdf4 	bl	8004fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80033c8:	2048      	movs	r0, #72	; 0x48
 80033ca:	f001 fe0d 	bl	8004fe8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80033ce:	2200      	movs	r2, #0
 80033d0:	210f      	movs	r1, #15
 80033d2:	2049      	movs	r0, #73	; 0x49
 80033d4:	f001 fdec 	bl	8004fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80033d8:	2049      	movs	r0, #73	; 0x49
 80033da:	f001 fe05 	bl	8004fe8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80033de:	e04d      	b.n	800347c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80033e0:	4b29      	ldr	r3, [pc, #164]	; (8003488 <I2Cx_MspInit+0x154>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4a28      	ldr	r2, [pc, #160]	; (8003488 <I2Cx_MspInit+0x154>)
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	6313      	str	r3, [r2, #48]	; 0x30
 80033ec:	4b26      	ldr	r3, [pc, #152]	; (8003488 <I2Cx_MspInit+0x154>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80033f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033fc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80033fe:	2312      	movs	r3, #18
 8003400:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003406:	2302      	movs	r3, #2
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800340a:	2304      	movs	r3, #4
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800340e:	f107 031c 	add.w	r3, r7, #28
 8003412:	4619      	mov	r1, r3
 8003414:	481e      	ldr	r0, [pc, #120]	; (8003490 <I2Cx_MspInit+0x15c>)
 8003416:	f002 fbc7 	bl	8005ba8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800341a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800341e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003420:	f107 031c 	add.w	r3, r7, #28
 8003424:	4619      	mov	r1, r3
 8003426:	481a      	ldr	r0, [pc, #104]	; (8003490 <I2Cx_MspInit+0x15c>)
 8003428:	f002 fbbe 	bl	8005ba8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <I2Cx_MspInit+0x154>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	4a15      	ldr	r2, [pc, #84]	; (8003488 <I2Cx_MspInit+0x154>)
 8003432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003436:	6413      	str	r3, [r2, #64]	; 0x40
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <I2Cx_MspInit+0x154>)
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003444:	4b10      	ldr	r3, [pc, #64]	; (8003488 <I2Cx_MspInit+0x154>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <I2Cx_MspInit+0x154>)
 800344a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800344e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003450:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <I2Cx_MspInit+0x154>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <I2Cx_MspInit+0x154>)
 8003456:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800345a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	210f      	movs	r1, #15
 8003460:	201f      	movs	r0, #31
 8003462:	f001 fda5 	bl	8004fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003466:	201f      	movs	r0, #31
 8003468:	f001 fdbe 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800346c:	2200      	movs	r2, #0
 800346e:	210f      	movs	r1, #15
 8003470:	2020      	movs	r0, #32
 8003472:	f001 fd9d 	bl	8004fb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003476:	2020      	movs	r0, #32
 8003478:	f001 fdb6 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
}
 800347c:	bf00      	nop
 800347e:	3730      	adds	r7, #48	; 0x30
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	200000dc 	.word	0x200000dc
 8003488:	40023800 	.word	0x40023800
 800348c:	40021c00 	.word	0x40021c00
 8003490:	40020400 	.word	0x40020400

08003494 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f003 f93f 	bl	8006720 <HAL_I2C_GetState>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d125      	bne.n	80034f4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a14      	ldr	r2, [pc, #80]	; (80034fc <I2Cx_Init+0x68>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d103      	bne.n	80034b8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a13      	ldr	r2, [pc, #76]	; (8003500 <I2Cx_Init+0x6c>)
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e002      	b.n	80034be <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a12      	ldr	r2, [pc, #72]	; (8003504 <I2Cx_Init+0x70>)
 80034bc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a11      	ldr	r2, [pc, #68]	; (8003508 <I2Cx_Init+0x74>)
 80034c2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff23 	bl	8003334 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f002 fe28 	bl	8006144 <HAL_I2C_Init>
  }
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	200000dc 	.word	0x200000dc
 8003500:	40005c00 	.word	0x40005c00
 8003504:	40005400 	.word	0x40005400
 8003508:	40912732 	.word	0x40912732

0800350c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	; 0x28
 8003510:	af04      	add	r7, sp, #16
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	4608      	mov	r0, r1
 8003516:	4611      	mov	r1, r2
 8003518:	461a      	mov	r2, r3
 800351a:	4603      	mov	r3, r0
 800351c:	72fb      	strb	r3, [r7, #11]
 800351e:	460b      	mov	r3, r1
 8003520:	813b      	strh	r3, [r7, #8]
 8003522:	4613      	mov	r3, r2
 8003524:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800352a:	7afb      	ldrb	r3, [r7, #11]
 800352c:	b299      	uxth	r1, r3
 800352e:	88f8      	ldrh	r0, [r7, #6]
 8003530:	893a      	ldrh	r2, [r7, #8]
 8003532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003536:	9302      	str	r3, [sp, #8]
 8003538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800353a:	9301      	str	r3, [sp, #4]
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	4603      	mov	r3, r0
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f002 ffd2 	bl	80064ec <HAL_I2C_Mem_Read>
 8003548:	4603      	mov	r3, r0
 800354a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800354c:	7dfb      	ldrb	r3, [r7, #23]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003552:	7afb      	ldrb	r3, [r7, #11]
 8003554:	4619      	mov	r1, r3
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f832 	bl	80035c0 <I2Cx_Error>
  }
  return status;    
 800355c:	7dfb      	ldrb	r3, [r7, #23]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b08a      	sub	sp, #40	; 0x28
 800356a:	af04      	add	r7, sp, #16
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	4608      	mov	r0, r1
 8003570:	4611      	mov	r1, r2
 8003572:	461a      	mov	r2, r3
 8003574:	4603      	mov	r3, r0
 8003576:	72fb      	strb	r3, [r7, #11]
 8003578:	460b      	mov	r3, r1
 800357a:	813b      	strh	r3, [r7, #8]
 800357c:	4613      	mov	r3, r2
 800357e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003584:	7afb      	ldrb	r3, [r7, #11]
 8003586:	b299      	uxth	r1, r3
 8003588:	88f8      	ldrh	r0, [r7, #6]
 800358a:	893a      	ldrh	r2, [r7, #8]
 800358c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003590:	9302      	str	r3, [sp, #8]
 8003592:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	4603      	mov	r3, r0
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f002 fe91 	bl	80062c4 <HAL_I2C_Mem_Write>
 80035a2:	4603      	mov	r3, r0
 80035a4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80035a6:	7dfb      	ldrb	r3, [r7, #23]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d004      	beq.n	80035b6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80035ac:	7afb      	ldrb	r3, [r7, #11]
 80035ae:	4619      	mov	r1, r3
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f805 	bl	80035c0 <I2Cx_Error>
  }
  return status;
 80035b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f002 fe49 	bl	8006264 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff5e 	bl	8003494 <I2Cx_Init>
}
 80035d8:	bf00      	nop
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80035e4:	4802      	ldr	r0, [pc, #8]	; (80035f0 <TS_IO_Init+0x10>)
 80035e6:	f7ff ff55 	bl	8003494 <I2Cx_Init>
}
 80035ea:	bf00      	nop
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	200000dc 	.word	0x200000dc

080035f4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	4603      	mov	r3, r0
 80035fc:	71fb      	strb	r3, [r7, #7]
 80035fe:	460b      	mov	r3, r1
 8003600:	71bb      	strb	r3, [r7, #6]
 8003602:	4613      	mov	r3, r2
 8003604:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003606:	79bb      	ldrb	r3, [r7, #6]
 8003608:	b29a      	uxth	r2, r3
 800360a:	79f9      	ldrb	r1, [r7, #7]
 800360c:	2301      	movs	r3, #1
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	1d7b      	adds	r3, r7, #5
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2301      	movs	r3, #1
 8003616:	4803      	ldr	r0, [pc, #12]	; (8003624 <TS_IO_Write+0x30>)
 8003618:	f7ff ffa5 	bl	8003566 <I2Cx_WriteMultiple>
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	200000dc 	.word	0x200000dc

08003628 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af02      	add	r7, sp, #8
 800362e:	4603      	mov	r3, r0
 8003630:	460a      	mov	r2, r1
 8003632:	71fb      	strb	r3, [r7, #7]
 8003634:	4613      	mov	r3, r2
 8003636:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800363c:	79bb      	ldrb	r3, [r7, #6]
 800363e:	b29a      	uxth	r2, r3
 8003640:	79f9      	ldrb	r1, [r7, #7]
 8003642:	2301      	movs	r3, #1
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	f107 030f 	add.w	r3, r7, #15
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	2301      	movs	r3, #1
 800364e:	4804      	ldr	r0, [pc, #16]	; (8003660 <TS_IO_Read+0x38>)
 8003650:	f7ff ff5c 	bl	800350c <I2Cx_ReadMultiple>

  return read_value;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200000dc 	.word	0x200000dc

08003664 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f001 f93d 	bl	80048ec <HAL_Delay>
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003680:	4b31      	ldr	r3, [pc, #196]	; (8003748 <BSP_LCD_Init+0xcc>)
 8003682:	2228      	movs	r2, #40	; 0x28
 8003684:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003686:	4b30      	ldr	r3, [pc, #192]	; (8003748 <BSP_LCD_Init+0xcc>)
 8003688:	2209      	movs	r2, #9
 800368a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800368c:	4b2e      	ldr	r3, [pc, #184]	; (8003748 <BSP_LCD_Init+0xcc>)
 800368e:	2235      	movs	r2, #53	; 0x35
 8003690:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <BSP_LCD_Init+0xcc>)
 8003694:	220b      	movs	r2, #11
 8003696:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003698:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <BSP_LCD_Init+0xcc>)
 800369a:	f240 121b 	movw	r2, #283	; 0x11b
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036a2:	f240 2215 	movw	r2, #533	; 0x215
 80036a6:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80036a8:	4b27      	ldr	r3, [pc, #156]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036aa:	f240 121d 	movw	r2, #285	; 0x11d
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80036b0:	4b25      	ldr	r3, [pc, #148]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036b2:	f240 2235 	movw	r2, #565	; 0x235
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80036b8:	2100      	movs	r1, #0
 80036ba:	4823      	ldr	r0, [pc, #140]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036bc:	f000 fbb2 	bl	8003e24 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80036c6:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036ca:	f44f 7288 	mov.w	r2, #272	; 0x110
 80036ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80036e8:	4b17      	ldr	r3, [pc, #92]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80036ee:	4b16      	ldr	r3, [pc, #88]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80036f4:	4b14      	ldr	r3, [pc, #80]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80036fa:	4b13      	ldr	r3, [pc, #76]	; (8003748 <BSP_LCD_Init+0xcc>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <BSP_LCD_Init+0xcc>)
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <BSP_LCD_Init+0xd0>)
 8003704:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003706:	4810      	ldr	r0, [pc, #64]	; (8003748 <BSP_LCD_Init+0xcc>)
 8003708:	f003 fc9c 	bl	8007044 <HAL_LTDC_GetState>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003712:	2100      	movs	r1, #0
 8003714:	480c      	ldr	r0, [pc, #48]	; (8003748 <BSP_LCD_Init+0xcc>)
 8003716:	f000 faab 	bl	8003c70 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800371a:	480b      	ldr	r0, [pc, #44]	; (8003748 <BSP_LCD_Init+0xcc>)
 800371c:	f003 fac2 	bl	8006ca4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003720:	2201      	movs	r2, #1
 8003722:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003726:	480a      	ldr	r0, [pc, #40]	; (8003750 <BSP_LCD_Init+0xd4>)
 8003728:	f002 fcf2 	bl	8006110 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800372c:	2201      	movs	r2, #1
 800372e:	2108      	movs	r1, #8
 8003730:	4808      	ldr	r0, [pc, #32]	; (8003754 <BSP_LCD_Init+0xd8>)
 8003732:	f002 fced 	bl	8006110 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003736:	f000 fc95 	bl	8004064 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800373a:	4807      	ldr	r0, [pc, #28]	; (8003758 <BSP_LCD_Init+0xdc>)
 800373c:	f000 f8d8 	bl	80038f0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000ab0 	.word	0x20000ab0
 800374c:	40016800 	.word	0x40016800
 8003750:	40022000 	.word	0x40022000
 8003754:	40022800 	.word	0x40022800
 8003758:	2000002c 	.word	0x2000002c

0800375c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003760:	4b06      	ldr	r3, [pc, #24]	; (800377c <BSP_LCD_GetXSize+0x20>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a06      	ldr	r2, [pc, #24]	; (8003780 <BSP_LCD_GetXSize+0x24>)
 8003766:	2134      	movs	r1, #52	; 0x34
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	4413      	add	r3, r2
 800376e:	3360      	adds	r3, #96	; 0x60
 8003770:	681b      	ldr	r3, [r3, #0]
}
 8003772:	4618      	mov	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	20000168 	.word	0x20000168
 8003780:	20000ab0 	.word	0x20000ab0

08003784 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <BSP_LCD_GetYSize+0x20>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a06      	ldr	r2, [pc, #24]	; (80037a8 <BSP_LCD_GetYSize+0x24>)
 800378e:	2134      	movs	r1, #52	; 0x34
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	3364      	adds	r3, #100	; 0x64
 8003798:	681b      	ldr	r3, [r3, #0]
}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	20000168 	.word	0x20000168
 80037a8:	20000ab0 	.word	0x20000ab0

080037ac <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b090      	sub	sp, #64	; 0x40
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80037bc:	f7ff ffce 	bl	800375c <BSP_LCD_GetXSize>
 80037c0:	4603      	mov	r3, r0
 80037c2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80037c8:	f7ff ffdc 	bl	8003784 <BSP_LCD_GetYSize>
 80037cc:	4603      	mov	r3, r0
 80037ce:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80037d8:	23ff      	movs	r3, #255	; 0xff
 80037da:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80037f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80037f6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80037f8:	2307      	movs	r3, #7
 80037fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80037fc:	f7ff ffae 	bl	800375c <BSP_LCD_GetXSize>
 8003800:	4603      	mov	r3, r0
 8003802:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003804:	f7ff ffbe 	bl	8003784 <BSP_LCD_GetYSize>
 8003808:	4603      	mov	r3, r0
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800380c:	88fa      	ldrh	r2, [r7, #6]
 800380e:	f107 030c 	add.w	r3, r7, #12
 8003812:	4619      	mov	r1, r3
 8003814:	4812      	ldr	r0, [pc, #72]	; (8003860 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003816:	f003 fbd7 	bl	8006fc8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800381a:	88fa      	ldrh	r2, [r7, #6]
 800381c:	4911      	ldr	r1, [pc, #68]	; (8003864 <BSP_LCD_LayerDefaultInit+0xb8>)
 800381e:	4613      	mov	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	3304      	adds	r3, #4
 800382a:	f04f 32ff 	mov.w	r2, #4294967295
 800382e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003830:	88fa      	ldrh	r2, [r7, #6]
 8003832:	490c      	ldr	r1, [pc, #48]	; (8003864 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	3308      	adds	r3, #8
 8003840:	4a09      	ldr	r2, [pc, #36]	; (8003868 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003842:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003844:	88fa      	ldrh	r2, [r7, #6]
 8003846:	4907      	ldr	r1, [pc, #28]	; (8003864 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003848:	4613      	mov	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003856:	601a      	str	r2, [r3, #0]
}
 8003858:	bf00      	nop
 800385a:	3740      	adds	r7, #64	; 0x40
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000ab0 	.word	0x20000ab0
 8003864:	2000016c 	.word	0x2000016c
 8003868:	2000002c 	.word	0x2000002c

0800386c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003874:	4a04      	ldr	r2, [pc, #16]	; (8003888 <BSP_LCD_SelectLayer+0x1c>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6013      	str	r3, [r2, #0]
} 
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000168 	.word	0x20000168

0800388c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <BSP_LCD_SetTextColor+0x28>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	4907      	ldr	r1, [pc, #28]	; (80038b8 <BSP_LCD_SetTextColor+0x2c>)
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	601a      	str	r2, [r3, #0]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	20000168 	.word	0x20000168
 80038b8:	2000016c 	.word	0x2000016c

080038bc <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <BSP_LCD_SetBackColor+0x2c>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	4908      	ldr	r1, [pc, #32]	; (80038ec <BSP_LCD_SetBackColor+0x30>)
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	3304      	adds	r3, #4
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	601a      	str	r2, [r3, #0]
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000168 	.word	0x20000168
 80038ec:	2000016c 	.word	0x2000016c

080038f0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80038f8:	4b08      	ldr	r3, [pc, #32]	; (800391c <BSP_LCD_SetFont+0x2c>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4908      	ldr	r1, [pc, #32]	; (8003920 <BSP_LCD_SetFont+0x30>)
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	3308      	adds	r3, #8
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	601a      	str	r2, [r3, #0]
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000168 	.word	0x20000168
 8003920:	2000016c 	.word	0x2000016c

08003924 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003928:	4b07      	ldr	r3, [pc, #28]	; (8003948 <BSP_LCD_GetFont+0x24>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	4907      	ldr	r1, [pc, #28]	; (800394c <BSP_LCD_GetFont+0x28>)
 800392e:	4613      	mov	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	3308      	adds	r3, #8
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20000168 	.word	0x20000168
 800394c:	2000016c 	.word	0x2000016c

08003950 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003952:	b085      	sub	sp, #20
 8003954:	af02      	add	r7, sp, #8
 8003956:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <BSP_LCD_Clear+0x48>)
 800395a:	681c      	ldr	r4, [r3, #0]
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <BSP_LCD_Clear+0x48>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a0e      	ldr	r2, [pc, #56]	; (800399c <BSP_LCD_Clear+0x4c>)
 8003962:	2134      	movs	r1, #52	; 0x34
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	335c      	adds	r3, #92	; 0x5c
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	461d      	mov	r5, r3
 8003970:	f7ff fef4 	bl	800375c <BSP_LCD_GetXSize>
 8003974:	4606      	mov	r6, r0
 8003976:	f7ff ff05 	bl	8003784 <BSP_LCD_GetYSize>
 800397a:	4602      	mov	r2, r0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	2300      	movs	r3, #0
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4613      	mov	r3, r2
 8003986:	4632      	mov	r2, r6
 8003988:	4629      	mov	r1, r5
 800398a:	4620      	mov	r0, r4
 800398c:	f000 fb1e 	bl	8003fcc <LL_FillBuffer>
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003998:	20000168 	.word	0x20000168
 800399c:	20000ab0 	.word	0x20000ab0

080039a0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	80fb      	strh	r3, [r7, #6]
 80039aa:	460b      	mov	r3, r1
 80039ac:	80bb      	strh	r3, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <BSP_LCD_DisplayChar+0x80>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	491b      	ldr	r1, [pc, #108]	; (8003a24 <BSP_LCD_DisplayChar+0x84>)
 80039b8:	4613      	mov	r3, r2
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	3308      	adds	r3, #8
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80039ce:	4b14      	ldr	r3, [pc, #80]	; (8003a20 <BSP_LCD_DisplayChar+0x80>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4c14      	ldr	r4, [pc, #80]	; (8003a24 <BSP_LCD_DisplayChar+0x84>)
 80039d4:	4613      	mov	r3, r2
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4423      	add	r3, r4
 80039de:	3308      	adds	r3, #8
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80039e4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <BSP_LCD_DisplayChar+0x80>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4c0d      	ldr	r4, [pc, #52]	; (8003a24 <BSP_LCD_DisplayChar+0x84>)
 80039ee:	4613      	mov	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4423      	add	r3, r4
 80039f8:	3308      	adds	r3, #8
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	889b      	ldrh	r3, [r3, #4]
 80039fe:	3307      	adds	r3, #7
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	da00      	bge.n	8003a06 <BSP_LCD_DisplayChar+0x66>
 8003a04:	3307      	adds	r3, #7
 8003a06:	10db      	asrs	r3, r3, #3
 8003a08:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a0c:	18ca      	adds	r2, r1, r3
 8003a0e:	88b9      	ldrh	r1, [r7, #4]
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fa22 	bl	8003e5c <DrawChar>
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd90      	pop	{r4, r7, pc}
 8003a20:	20000168 	.word	0x20000168
 8003a24:	2000016c 	.word	0x2000016c

08003a28 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003a28:	b5b0      	push	{r4, r5, r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60ba      	str	r2, [r7, #8]
 8003a30:	461a      	mov	r2, r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	81fb      	strh	r3, [r7, #14]
 8003a36:	460b      	mov	r3, r1
 8003a38:	81bb      	strh	r3, [r7, #12]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	83fb      	strh	r3, [r7, #30]
 8003a42:	2300      	movs	r3, #0
 8003a44:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003a52:	e002      	b.n	8003a5a <BSP_LCD_DisplayStringAt+0x32>
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	3301      	adds	r3, #1
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	617a      	str	r2, [r7, #20]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f6      	bne.n	8003a54 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003a66:	f7ff fe79 	bl	800375c <BSP_LCD_GetXSize>
 8003a6a:	4b4f      	ldr	r3, [pc, #316]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x180>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	494f      	ldr	r1, [pc, #316]	; (8003bac <BSP_LCD_DisplayStringAt+0x184>)
 8003a70:	4613      	mov	r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	889b      	ldrh	r3, [r3, #4]
 8003a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a84:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d01c      	beq.n	8003ac6 <BSP_LCD_DisplayStringAt+0x9e>
 8003a8c:	2b03      	cmp	r3, #3
 8003a8e:	d017      	beq.n	8003ac0 <BSP_LCD_DisplayStringAt+0x98>
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d12e      	bne.n	8003af2 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	1ad1      	subs	r1, r2, r3
 8003a9a:	4b43      	ldr	r3, [pc, #268]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x180>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4843      	ldr	r0, [pc, #268]	; (8003bac <BSP_LCD_DisplayStringAt+0x184>)
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4403      	add	r3, r0
 8003aaa:	3308      	adds	r3, #8
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	889b      	ldrh	r3, [r3, #4]
 8003ab0:	fb03 f301 	mul.w	r3, r3, r1
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	89fb      	ldrh	r3, [r7, #14]
 8003aba:	4413      	add	r3, r2
 8003abc:	83fb      	strh	r3, [r7, #30]
      break;
 8003abe:	e01b      	b.n	8003af8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003ac0:	89fb      	ldrh	r3, [r7, #14]
 8003ac2:	83fb      	strh	r3, [r7, #30]
      break;
 8003ac4:	e018      	b.n	8003af8 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	b299      	uxth	r1, r3
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x180>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4836      	ldr	r0, [pc, #216]	; (8003bac <BSP_LCD_DisplayStringAt+0x184>)
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4403      	add	r3, r0
 8003ade:	3308      	adds	r3, #8
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	889b      	ldrh	r3, [r3, #4]
 8003ae4:	fb11 f303 	smulbb	r3, r1, r3
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	89fb      	ldrh	r3, [r7, #14]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	83fb      	strh	r3, [r7, #30]
      break;
 8003af0:	e002      	b.n	8003af8 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8003af2:	89fb      	ldrh	r3, [r7, #14]
 8003af4:	83fb      	strh	r3, [r7, #30]
      break;
 8003af6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003af8:	8bfb      	ldrh	r3, [r7, #30]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <BSP_LCD_DisplayStringAt+0xde>
 8003afe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	da1d      	bge.n	8003b42 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003b0a:	e01a      	b.n	8003b42 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	89b9      	ldrh	r1, [r7, #12]
 8003b12:	8bfb      	ldrh	r3, [r7, #30]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff43 	bl	80039a0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003b1a:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x180>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4923      	ldr	r1, [pc, #140]	; (8003bac <BSP_LCD_DisplayStringAt+0x184>)
 8003b20:	4613      	mov	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	889a      	ldrh	r2, [r3, #4]
 8003b30:	8bfb      	ldrh	r3, [r7, #30]
 8003b32:	4413      	add	r3, r2
 8003b34:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	3301      	adds	r3, #1
 8003b3a:	60bb      	str	r3, [r7, #8]
    i++;
 8003b3c:	8bbb      	ldrh	r3, [r7, #28]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bf14      	ite	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	2300      	moveq	r3, #0
 8003b4e:	b2dc      	uxtb	r4, r3
 8003b50:	f7ff fe04 	bl	800375c <BSP_LCD_GetXSize>
 8003b54:	4605      	mov	r5, r0
 8003b56:	8bb9      	ldrh	r1, [r7, #28]
 8003b58:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x180>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	4813      	ldr	r0, [pc, #76]	; (8003bac <BSP_LCD_DisplayStringAt+0x184>)
 8003b5e:	4613      	mov	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4403      	add	r3, r0
 8003b68:	3308      	adds	r3, #8
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	889b      	ldrh	r3, [r3, #4]
 8003b6e:	fb03 f301 	mul.w	r3, r3, r1
 8003b72:	1aeb      	subs	r3, r5, r3
 8003b74:	b299      	uxth	r1, r3
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <BSP_LCD_DisplayStringAt+0x180>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	480c      	ldr	r0, [pc, #48]	; (8003bac <BSP_LCD_DisplayStringAt+0x184>)
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4403      	add	r3, r0
 8003b86:	3308      	adds	r3, #8
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	889b      	ldrh	r3, [r3, #4]
 8003b8c:	4299      	cmp	r1, r3
 8003b8e:	bf2c      	ite	cs
 8003b90:	2301      	movcs	r3, #1
 8003b92:	2300      	movcc	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	4023      	ands	r3, r4
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1b6      	bne.n	8003b0c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8003b9e:	bf00      	nop
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000168 	.word	0x20000168
 8003bac:	2000016c 	.word	0x2000016c

08003bb0 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	6039      	str	r1, [r7, #0]
 8003bba:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003bbc:	f7ff feb2 	bl	8003924 <BSP_LCD_GetFont>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	88db      	ldrh	r3, [r3, #6]
 8003bc4:	88fa      	ldrh	r2, [r7, #6]
 8003bc6:	fb12 f303 	smulbb	r3, r2, r3
 8003bca:	b299      	uxth	r1, r3
 8003bcc:	2303      	movs	r3, #3
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f7ff ff29 	bl	8003a28 <BSP_LCD_DisplayStringAt>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	603a      	str	r2, [r7, #0]
 8003bea:	80fb      	strh	r3, [r7, #6]
 8003bec:	460b      	mov	r3, r1
 8003bee:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003bf0:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <BSP_LCD_DrawPixel+0x88>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <BSP_LCD_DrawPixel+0x8c>)
 8003bf6:	2134      	movs	r1, #52	; 0x34
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3348      	adds	r3, #72	; 0x48
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d116      	bne.n	8003c34 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <BSP_LCD_DrawPixel+0x88>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a18      	ldr	r2, [pc, #96]	; (8003c6c <BSP_LCD_DrawPixel+0x8c>)
 8003c0c:	2134      	movs	r1, #52	; 0x34
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	335c      	adds	r3, #92	; 0x5c
 8003c16:	681c      	ldr	r4, [r3, #0]
 8003c18:	88bd      	ldrh	r5, [r7, #4]
 8003c1a:	f7ff fd9f 	bl	800375c <BSP_LCD_GetXSize>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	fb03 f205 	mul.w	r2, r3, r5
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	4413      	add	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4423      	add	r3, r4
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	b292      	uxth	r2, r2
 8003c30:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003c32:	e015      	b.n	8003c60 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <BSP_LCD_DrawPixel+0x88>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <BSP_LCD_DrawPixel+0x8c>)
 8003c3a:	2134      	movs	r1, #52	; 0x34
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	335c      	adds	r3, #92	; 0x5c
 8003c44:	681c      	ldr	r4, [r3, #0]
 8003c46:	88bd      	ldrh	r5, [r7, #4]
 8003c48:	f7ff fd88 	bl	800375c <BSP_LCD_GetXSize>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	fb03 f205 	mul.w	r2, r3, r5
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4423      	add	r3, r4
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6013      	str	r3, [r2, #0]
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bdb0      	pop	{r4, r5, r7, pc}
 8003c68:	20000168 	.word	0x20000168
 8003c6c:	20000ab0 	.word	0x20000ab0

08003c70 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b090      	sub	sp, #64	; 0x40
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c7a:	4b64      	ldr	r3, [pc, #400]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	4a63      	ldr	r2, [pc, #396]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003c80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c84:	6453      	str	r3, [r2, #68]	; 0x44
 8003c86:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003c92:	4b5e      	ldr	r3, [pc, #376]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	4a5d      	ldr	r2, [pc, #372]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003c98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9e:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003caa:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a57      	ldr	r2, [pc, #348]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003cb0:	f043 0310 	orr.w	r3, r3, #16
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b55      	ldr	r3, [pc, #340]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	623b      	str	r3, [r7, #32]
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cc2:	4b52      	ldr	r3, [pc, #328]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	4a51      	ldr	r2, [pc, #324]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cce:	4b4f      	ldr	r3, [pc, #316]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cda:	4b4c      	ldr	r3, [pc, #304]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	4a4b      	ldr	r2, [pc, #300]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003cf2:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	4a45      	ldr	r2, [pc, #276]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfe:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003d0a:	4b40      	ldr	r3, [pc, #256]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	4a3f      	ldr	r2, [pc, #252]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003d10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d14:	6313      	str	r3, [r2, #48]	; 0x30
 8003d16:	4b3d      	ldr	r3, [pc, #244]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003d22:	4b3a      	ldr	r3, [pc, #232]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	4a39      	ldr	r2, [pc, #228]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2e:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003d3a:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	4a33      	ldr	r2, [pc, #204]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003d40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d44:	6313      	str	r3, [r2, #48]	; 0x30
 8003d46:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <BSP_LCD_MspInit+0x19c>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003d52:	2310      	movs	r3, #16
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d56:	2302      	movs	r3, #2
 8003d58:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003d62:	230e      	movs	r3, #14
 8003d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003d66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4828      	ldr	r0, [pc, #160]	; (8003e10 <BSP_LCD_MspInit+0x1a0>)
 8003d6e:	f001 ff1b 	bl	8005ba8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003d72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003d7c:	2309      	movs	r3, #9
 8003d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d84:	4619      	mov	r1, r3
 8003d86:	4823      	ldr	r0, [pc, #140]	; (8003e14 <BSP_LCD_MspInit+0x1a4>)
 8003d88:	f001 ff0e 	bl	8005ba8 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003d8c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d92:	2302      	movs	r3, #2
 8003d94:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003d96:	230e      	movs	r3, #14
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003d9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d9e:	4619      	mov	r1, r3
 8003da0:	481d      	ldr	r0, [pc, #116]	; (8003e18 <BSP_LCD_MspInit+0x1a8>)
 8003da2:	f001 ff01 	bl	8005ba8 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003da6:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003dac:	2302      	movs	r3, #2
 8003dae:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003db0:	230e      	movs	r3, #14
 8003db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003db4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003db8:	4619      	mov	r1, r3
 8003dba:	4818      	ldr	r0, [pc, #96]	; (8003e1c <BSP_LCD_MspInit+0x1ac>)
 8003dbc:	f001 fef4 	bl	8005ba8 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003dc0:	23f7      	movs	r3, #247	; 0xf7
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003dc8:	230e      	movs	r3, #14
 8003dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4813      	ldr	r0, [pc, #76]	; (8003e20 <BSP_LCD_MspInit+0x1b0>)
 8003dd4:	f001 fee8 	bl	8005ba8 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003dde:	2301      	movs	r3, #1
 8003de0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003de6:	4619      	mov	r1, r3
 8003de8:	480b      	ldr	r0, [pc, #44]	; (8003e18 <BSP_LCD_MspInit+0x1a8>)
 8003dea:	f001 fedd 	bl	8005ba8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003dee:	2308      	movs	r3, #8
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003df2:	2301      	movs	r3, #1
 8003df4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4808      	ldr	r0, [pc, #32]	; (8003e20 <BSP_LCD_MspInit+0x1b0>)
 8003dfe:	f001 fed3 	bl	8005ba8 <HAL_GPIO_Init>
}
 8003e02:	bf00      	nop
 8003e04:	3740      	adds	r7, #64	; 0x40
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40021800 	.word	0x40021800
 8003e18:	40022000 	.word	0x40022000
 8003e1c:	40022400 	.word	0x40022400
 8003e20:	40022800 	.word	0x40022800

08003e24 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <BSP_LCD_ClockConfig+0x34>)
 8003e30:	2208      	movs	r2, #8
 8003e32:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003e34:	4b08      	ldr	r3, [pc, #32]	; (8003e58 <BSP_LCD_ClockConfig+0x34>)
 8003e36:	22c0      	movs	r2, #192	; 0xc0
 8003e38:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003e3a:	4b07      	ldr	r3, [pc, #28]	; (8003e58 <BSP_LCD_ClockConfig+0x34>)
 8003e3c:	2205      	movs	r2, #5
 8003e3e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <BSP_LCD_ClockConfig+0x34>)
 8003e42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e46:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003e48:	4803      	ldr	r0, [pc, #12]	; (8003e58 <BSP_LCD_ClockConfig+0x34>)
 8003e4a:	f004 f86d 	bl	8007f28 <HAL_RCCEx_PeriphCLKConfig>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000184 	.word	0x20000184

08003e5c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	603a      	str	r2, [r7, #0]
 8003e66:	80fb      	strh	r3, [r7, #6]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003e74:	4b53      	ldr	r3, [pc, #332]	; (8003fc4 <DrawChar+0x168>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4953      	ldr	r1, [pc, #332]	; (8003fc8 <DrawChar+0x16c>)
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	3308      	adds	r3, #8
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	88db      	ldrh	r3, [r3, #6]
 8003e8a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003e8c:	4b4d      	ldr	r3, [pc, #308]	; (8003fc4 <DrawChar+0x168>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	494d      	ldr	r1, [pc, #308]	; (8003fc8 <DrawChar+0x16c>)
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	889b      	ldrh	r3, [r3, #4]
 8003ea2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003ea4:	8a3b      	ldrh	r3, [r7, #16]
 8003ea6:	3307      	adds	r3, #7
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	da00      	bge.n	8003eae <DrawChar+0x52>
 8003eac:	3307      	adds	r3, #7
 8003eae:	10db      	asrs	r3, r3, #3
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	8a3b      	ldrh	r3, [r7, #16]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e076      	b.n	8003fb2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003ec4:	8a3b      	ldrh	r3, [r7, #16]
 8003ec6:	3307      	adds	r3, #7
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	da00      	bge.n	8003ece <DrawChar+0x72>
 8003ecc:	3307      	adds	r3, #7
 8003ece:	10db      	asrs	r3, r3, #3
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	fb03 f302 	mul.w	r3, r3, r2
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	4413      	add	r3, r2
 8003edc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003ede:	8a3b      	ldrh	r3, [r7, #16]
 8003ee0:	3307      	adds	r3, #7
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	da00      	bge.n	8003ee8 <DrawChar+0x8c>
 8003ee6:	3307      	adds	r3, #7
 8003ee8:	10db      	asrs	r3, r3, #3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d002      	beq.n	8003ef4 <DrawChar+0x98>
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d004      	beq.n	8003efc <DrawChar+0xa0>
 8003ef2:	e00c      	b.n	8003f0e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	617b      	str	r3, [r7, #20]
      break;
 8003efa:	e016      	b.n	8003f2a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	3201      	adds	r2, #1
 8003f06:	7812      	ldrb	r2, [r2, #0]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
      break;
 8003f0c:	e00d      	b.n	8003f2a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	041a      	lsls	r2, r3, #16
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	3301      	adds	r3, #1
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	021b      	lsls	r3, r3, #8
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	3202      	adds	r2, #2
 8003f22:	7812      	ldrb	r2, [r2, #0]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
      break;
 8003f28:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	e036      	b.n	8003f9e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003f30:	8a3a      	ldrh	r2, [r7, #16]
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	1ad2      	subs	r2, r2, r3
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	4413      	add	r3, r2
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d012      	beq.n	8003f72 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	88fb      	ldrh	r3, [r7, #6]
 8003f52:	4413      	add	r3, r2
 8003f54:	b298      	uxth	r0, r3
 8003f56:	4b1b      	ldr	r3, [pc, #108]	; (8003fc4 <DrawChar+0x168>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	491b      	ldr	r1, [pc, #108]	; (8003fc8 <DrawChar+0x16c>)
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	88bb      	ldrh	r3, [r7, #4]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f7ff fe38 	bl	8003be0 <BSP_LCD_DrawPixel>
 8003f70:	e012      	b.n	8003f98 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	4413      	add	r3, r2
 8003f7a:	b298      	uxth	r0, r3
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <DrawChar+0x168>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	4911      	ldr	r1, [pc, #68]	; (8003fc8 <DrawChar+0x16c>)
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	88bb      	ldrh	r3, [r7, #4]
 8003f92:	4619      	mov	r1, r3
 8003f94:	f7ff fe24 	bl	8003be0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	8a3b      	ldrh	r3, [r7, #16]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d3c4      	bcc.n	8003f30 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003fa6:	88bb      	ldrh	r3, [r7, #4]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	61fb      	str	r3, [r7, #28]
 8003fb2:	8a7b      	ldrh	r3, [r7, #18]
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d384      	bcc.n	8003ec4 <DrawChar+0x68>
  }
}
 8003fba:	bf00      	nop
 8003fbc:	3720      	adds	r7, #32
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000168 	.word	0x20000168
 8003fc8:	2000016c 	.word	0x2000016c

08003fcc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003fda:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <LL_FillBuffer+0x88>)
 8003fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003fe0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <LL_FillBuffer+0x8c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1d      	ldr	r2, [pc, #116]	; (800405c <LL_FillBuffer+0x90>)
 8003fe8:	2134      	movs	r1, #52	; 0x34
 8003fea:	fb01 f303 	mul.w	r3, r1, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	3348      	adds	r3, #72	; 0x48
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d103      	bne.n	8004000 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003ff8:	4b16      	ldr	r3, [pc, #88]	; (8004054 <LL_FillBuffer+0x88>)
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	609a      	str	r2, [r3, #8]
 8003ffe:	e002      	b.n	8004006 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <LL_FillBuffer+0x88>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004006:	4a13      	ldr	r2, [pc, #76]	; (8004054 <LL_FillBuffer+0x88>)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <LL_FillBuffer+0x88>)
 800400e:	4a14      	ldr	r2, [pc, #80]	; (8004060 <LL_FillBuffer+0x94>)
 8004010:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004012:	4810      	ldr	r0, [pc, #64]	; (8004054 <LL_FillBuffer+0x88>)
 8004014:	f001 fa2c 	bl	8005470 <HAL_DMA2D_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d115      	bne.n	800404a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800401e:	68f9      	ldr	r1, [r7, #12]
 8004020:	480c      	ldr	r0, [pc, #48]	; (8004054 <LL_FillBuffer+0x88>)
 8004022:	f001 fc93 	bl	800594c <HAL_DMA2D_ConfigLayer>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10e      	bne.n	800404a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69f9      	ldr	r1, [r7, #28]
 8004036:	4807      	ldr	r0, [pc, #28]	; (8004054 <LL_FillBuffer+0x88>)
 8004038:	f001 fa64 	bl	8005504 <HAL_DMA2D_Start>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004042:	210a      	movs	r1, #10
 8004044:	4803      	ldr	r0, [pc, #12]	; (8004054 <LL_FillBuffer+0x88>)
 8004046:	f001 fa88 	bl	800555a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000128 	.word	0x20000128
 8004058:	20000168 	.word	0x20000168
 800405c:	20000ab0 	.word	0x20000ab0
 8004060:	4002b000 	.word	0x4002b000

08004064 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004068:	4b29      	ldr	r3, [pc, #164]	; (8004110 <BSP_SDRAM_Init+0xac>)
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <BSP_SDRAM_Init+0xb0>)
 800406c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800406e:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <BSP_SDRAM_Init+0xb4>)
 8004070:	2202      	movs	r2, #2
 8004072:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004074:	4b28      	ldr	r3, [pc, #160]	; (8004118 <BSP_SDRAM_Init+0xb4>)
 8004076:	2207      	movs	r2, #7
 8004078:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800407a:	4b27      	ldr	r3, [pc, #156]	; (8004118 <BSP_SDRAM_Init+0xb4>)
 800407c:	2204      	movs	r2, #4
 800407e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004080:	4b25      	ldr	r3, [pc, #148]	; (8004118 <BSP_SDRAM_Init+0xb4>)
 8004082:	2207      	movs	r2, #7
 8004084:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <BSP_SDRAM_Init+0xb4>)
 8004088:	2202      	movs	r2, #2
 800408a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800408c:	4b22      	ldr	r3, [pc, #136]	; (8004118 <BSP_SDRAM_Init+0xb4>)
 800408e:	2202      	movs	r2, #2
 8004090:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004092:	4b21      	ldr	r3, [pc, #132]	; (8004118 <BSP_SDRAM_Init+0xb4>)
 8004094:	2202      	movs	r2, #2
 8004096:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004098:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <BSP_SDRAM_Init+0xac>)
 800409a:	2200      	movs	r2, #0
 800409c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800409e:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <BSP_SDRAM_Init+0xac>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <BSP_SDRAM_Init+0xac>)
 80040a6:	2204      	movs	r2, #4
 80040a8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80040aa:	4b19      	ldr	r3, [pc, #100]	; (8004110 <BSP_SDRAM_Init+0xac>)
 80040ac:	2210      	movs	r2, #16
 80040ae:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80040b0:	4b17      	ldr	r3, [pc, #92]	; (8004110 <BSP_SDRAM_Init+0xac>)
 80040b2:	2240      	movs	r2, #64	; 0x40
 80040b4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80040b6:	4b16      	ldr	r3, [pc, #88]	; (8004110 <BSP_SDRAM_Init+0xac>)
 80040b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040bc:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80040be:	4b14      	ldr	r3, [pc, #80]	; (8004110 <BSP_SDRAM_Init+0xac>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <BSP_SDRAM_Init+0xac>)
 80040c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040ca:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <BSP_SDRAM_Init+0xac>)
 80040ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <BSP_SDRAM_Init+0xac>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80040da:	2100      	movs	r1, #0
 80040dc:	480c      	ldr	r0, [pc, #48]	; (8004110 <BSP_SDRAM_Init+0xac>)
 80040de:	f000 f87f 	bl	80041e0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80040e2:	490d      	ldr	r1, [pc, #52]	; (8004118 <BSP_SDRAM_Init+0xb4>)
 80040e4:	480a      	ldr	r0, [pc, #40]	; (8004110 <BSP_SDRAM_Init+0xac>)
 80040e6:	f005 ff1f 	bl	8009f28 <HAL_SDRAM_Init>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <BSP_SDRAM_Init+0xb8>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e002      	b.n	80040fe <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80040f8:	4b08      	ldr	r3, [pc, #32]	; (800411c <BSP_SDRAM_Init+0xb8>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80040fe:	f240 6003 	movw	r0, #1539	; 0x603
 8004102:	f000 f80d 	bl	8004120 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <BSP_SDRAM_Init+0xb8>)
 8004108:	781b      	ldrb	r3, [r3, #0]
}
 800410a:	4618      	mov	r0, r3
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000b58 	.word	0x20000b58
 8004114:	a0000140 	.word	0xa0000140
 8004118:	20000208 	.word	0x20000208
 800411c:	2000003c 	.word	0x2000003c

08004120 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800412c:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004132:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004134:	2210      	movs	r2, #16
 8004136:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004138:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800413a:	2201      	movs	r2, #1
 800413c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004140:	2200      	movs	r2, #0
 8004142:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004148:	4923      	ldr	r1, [pc, #140]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800414a:	4824      	ldr	r0, [pc, #144]	; (80041dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800414c:	f005 ff20 	bl	8009f90 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004150:	2001      	movs	r0, #1
 8004152:	f000 fbcb 	bl	80048ec <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004156:	4b20      	ldr	r3, [pc, #128]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004158:	2202      	movs	r2, #2
 800415a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800415c:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800415e:	2210      	movs	r2, #16
 8004160:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004162:	4b1d      	ldr	r3, [pc, #116]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004164:	2201      	movs	r2, #1
 8004166:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800416a:	2200      	movs	r2, #0
 800416c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800416e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004172:	4919      	ldr	r1, [pc, #100]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004174:	4819      	ldr	r0, [pc, #100]	; (80041dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004176:	f005 ff0b 	bl	8009f90 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800417a:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800417c:	2203      	movs	r2, #3
 800417e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004180:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004182:	2210      	movs	r2, #16
 8004184:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004186:	4b14      	ldr	r3, [pc, #80]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004188:	2208      	movs	r2, #8
 800418a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800418c:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800418e:	2200      	movs	r2, #0
 8004190:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004196:	4910      	ldr	r1, [pc, #64]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004198:	4810      	ldr	r0, [pc, #64]	; (80041dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800419a:	f005 fef9 	bl	8009f90 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800419e:	f44f 7308 	mov.w	r3, #544	; 0x220
 80041a2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041a6:	2204      	movs	r2, #4
 80041a8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041ac:	2210      	movs	r2, #16
 80041ae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041ba:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80041bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041c0:	4905      	ldr	r1, [pc, #20]	; (80041d8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041c2:	4806      	ldr	r0, [pc, #24]	; (80041dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80041c4:	f005 fee4 	bl	8009f90 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4804      	ldr	r0, [pc, #16]	; (80041dc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80041cc:	f005 ff0b 	bl	8009fe6 <HAL_SDRAM_ProgramRefreshRate>
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000224 	.word	0x20000224
 80041dc:	20000b58 	.word	0x20000b58

080041e0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b090      	sub	sp, #64	; 0x40
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80041ea:	4b70      	ldr	r3, [pc, #448]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	4a6f      	ldr	r2, [pc, #444]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	6393      	str	r3, [r2, #56]	; 0x38
 80041f6:	4b6d      	ldr	r3, [pc, #436]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004202:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	4a69      	ldr	r2, [pc, #420]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800420c:	6313      	str	r3, [r2, #48]	; 0x30
 800420e:	4b67      	ldr	r3, [pc, #412]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800421a:	4b64      	ldr	r3, [pc, #400]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	4a63      	ldr	r2, [pc, #396]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	6313      	str	r3, [r2, #48]	; 0x30
 8004226:	4b61      	ldr	r3, [pc, #388]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	623b      	str	r3, [r7, #32]
 8004230:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004232:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	4a5d      	ldr	r2, [pc, #372]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004238:	f043 0308 	orr.w	r3, r3, #8
 800423c:	6313      	str	r3, [r2, #48]	; 0x30
 800423e:	4b5b      	ldr	r3, [pc, #364]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	61fb      	str	r3, [r7, #28]
 8004248:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800424a:	4b58      	ldr	r3, [pc, #352]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	4a57      	ldr	r2, [pc, #348]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004250:	f043 0310 	orr.w	r3, r3, #16
 8004254:	6313      	str	r3, [r2, #48]	; 0x30
 8004256:	4b55      	ldr	r3, [pc, #340]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	61bb      	str	r3, [r7, #24]
 8004260:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004262:	4b52      	ldr	r3, [pc, #328]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	4a51      	ldr	r2, [pc, #324]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004268:	f043 0320 	orr.w	r3, r3, #32
 800426c:	6313      	str	r3, [r2, #48]	; 0x30
 800426e:	4b4f      	ldr	r3, [pc, #316]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800427a:	4b4c      	ldr	r3, [pc, #304]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427e:	4a4b      	ldr	r2, [pc, #300]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004284:	6313      	str	r3, [r2, #48]	; 0x30
 8004286:	4b49      	ldr	r3, [pc, #292]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004292:	4b46      	ldr	r3, [pc, #280]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	4a45      	ldr	r2, [pc, #276]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 8004298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429c:	6313      	str	r3, [r2, #48]	; 0x30
 800429e:	4b43      	ldr	r3, [pc, #268]	; (80043ac <BSP_SDRAM_MspInit+0x1cc>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80042aa:	2302      	movs	r3, #2
 80042ac:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80042ae:	2301      	movs	r3, #1
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80042b2:	2302      	movs	r3, #2
 80042b4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80042b6:	230c      	movs	r3, #12
 80042b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80042ba:	2308      	movs	r3, #8
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80042be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042c2:	4619      	mov	r1, r3
 80042c4:	483a      	ldr	r0, [pc, #232]	; (80043b0 <BSP_SDRAM_MspInit+0x1d0>)
 80042c6:	f001 fc6f 	bl	8005ba8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80042ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80042d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042d4:	4619      	mov	r1, r3
 80042d6:	4837      	ldr	r0, [pc, #220]	; (80043b4 <BSP_SDRAM_MspInit+0x1d4>)
 80042d8:	f001 fc66 	bl	8005ba8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80042dc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80042e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042e6:	4619      	mov	r1, r3
 80042e8:	4833      	ldr	r0, [pc, #204]	; (80043b8 <BSP_SDRAM_MspInit+0x1d8>)
 80042ea:	f001 fc5d 	bl	8005ba8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80042ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80042f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042f8:	4619      	mov	r1, r3
 80042fa:	4830      	ldr	r0, [pc, #192]	; (80043bc <BSP_SDRAM_MspInit+0x1dc>)
 80042fc:	f001 fc54 	bl	8005ba8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004300:	f248 1333 	movw	r3, #33075	; 0x8133
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800430a:	4619      	mov	r1, r3
 800430c:	482c      	ldr	r0, [pc, #176]	; (80043c0 <BSP_SDRAM_MspInit+0x1e0>)
 800430e:	f001 fc4b 	bl	8005ba8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004312:	2328      	movs	r3, #40	; 0x28
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800431a:	4619      	mov	r1, r3
 800431c:	4829      	ldr	r0, [pc, #164]	; (80043c4 <BSP_SDRAM_MspInit+0x1e4>)
 800431e:	f001 fc43 	bl	8005ba8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004322:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004324:	2200      	movs	r2, #0
 8004326:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004328:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 800432a:	2280      	movs	r2, #128	; 0x80
 800432c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800432e:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004334:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004336:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004338:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800433c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800433e:	4b22      	ldr	r3, [pc, #136]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004340:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004344:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004346:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004348:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800434c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800434e:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004350:	2200      	movs	r2, #0
 8004352:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004354:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004356:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800435a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800435c:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 800435e:	2200      	movs	r2, #0
 8004360:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004362:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004364:	2203      	movs	r2, #3
 8004366:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004368:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 800436a:	2200      	movs	r2, #0
 800436c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800436e:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004374:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004376:	4a15      	ldr	r2, [pc, #84]	; (80043cc <BSP_SDRAM_MspInit+0x1ec>)
 8004378:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a12      	ldr	r2, [pc, #72]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
 8004380:	4a11      	ldr	r2, [pc, #68]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004386:	4810      	ldr	r0, [pc, #64]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 8004388:	f000 ff64 	bl	8005254 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800438c:	480e      	ldr	r0, [pc, #56]	; (80043c8 <BSP_SDRAM_MspInit+0x1e8>)
 800438e:	f000 feb3 	bl	80050f8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004392:	2200      	movs	r2, #0
 8004394:	210f      	movs	r1, #15
 8004396:	2038      	movs	r0, #56	; 0x38
 8004398:	f000 fe0a 	bl	8004fb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800439c:	2038      	movs	r0, #56	; 0x38
 800439e:	f000 fe23 	bl	8004fe8 <HAL_NVIC_EnableIRQ>
}
 80043a2:	bf00      	nop
 80043a4:	3740      	adds	r7, #64	; 0x40
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800
 80043b0:	40020800 	.word	0x40020800
 80043b4:	40020c00 	.word	0x40020c00
 80043b8:	40021000 	.word	0x40021000
 80043bc:	40021400 	.word	0x40021400
 80043c0:	40021800 	.word	0x40021800
 80043c4:	40021c00 	.word	0x40021c00
 80043c8:	20000234 	.word	0x20000234
 80043cc:	40026410 	.word	0x40026410

080043d0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	460a      	mov	r2, r1
 80043da:	80fb      	strh	r3, [r7, #6]
 80043dc:	4613      	mov	r3, r2
 80043de:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80043e4:	4a14      	ldr	r2, [pc, #80]	; (8004438 <BSP_TS_Init+0x68>)
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80043ea:	4a14      	ldr	r2, [pc, #80]	; (800443c <BSP_TS_Init+0x6c>)
 80043ec:	88bb      	ldrh	r3, [r7, #4]
 80043ee:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80043f0:	4b13      	ldr	r3, [pc, #76]	; (8004440 <BSP_TS_Init+0x70>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2070      	movs	r0, #112	; 0x70
 80043f6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80043f8:	4b11      	ldr	r3, [pc, #68]	; (8004440 <BSP_TS_Init+0x70>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2070      	movs	r0, #112	; 0x70
 80043fe:	4798      	blx	r3
 8004400:	4603      	mov	r3, r0
 8004402:	2b51      	cmp	r3, #81	; 0x51
 8004404:	d111      	bne.n	800442a <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004406:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <BSP_TS_Init+0x74>)
 8004408:	4a0d      	ldr	r2, [pc, #52]	; (8004440 <BSP_TS_Init+0x70>)
 800440a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800440c:	4b0e      	ldr	r3, [pc, #56]	; (8004448 <BSP_TS_Init+0x78>)
 800440e:	2270      	movs	r2, #112	; 0x70
 8004410:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004412:	4b0e      	ldr	r3, [pc, #56]	; (800444c <BSP_TS_Init+0x7c>)
 8004414:	2208      	movs	r2, #8
 8004416:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <BSP_TS_Init+0x74>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <BSP_TS_Init+0x78>)
 8004420:	7812      	ldrb	r2, [r2, #0]
 8004422:	b292      	uxth	r2, r2
 8004424:	4610      	mov	r0, r2
 8004426:	4798      	blx	r3
 8004428:	e001      	b.n	800442e <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800442a:	2303      	movs	r3, #3
 800442c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800442e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000298 	.word	0x20000298
 800443c:	2000029a 	.word	0x2000029a
 8004440:	20000004 	.word	0x20000004
 8004444:	20000294 	.word	0x20000294
 8004448:	2000029d 	.word	0x2000029d
 800444c:	2000029c 	.word	0x2000029c

08004450 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004450:	b590      	push	{r4, r7, lr}
 8004452:	b097      	sub	sp, #92	; 0x5c
 8004454:	af02      	add	r7, sp, #8
 8004456:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800446a:	4b97      	ldr	r3, [pc, #604]	; (80046c8 <BSP_TS_GetState+0x278>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	4a96      	ldr	r2, [pc, #600]	; (80046cc <BSP_TS_GetState+0x27c>)
 8004472:	7812      	ldrb	r2, [r2, #0]
 8004474:	b292      	uxth	r2, r2
 8004476:	4610      	mov	r0, r2
 8004478:	4798      	blx	r3
 800447a:	4603      	mov	r3, r0
 800447c:	461a      	mov	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 81a8 	beq.w	80047dc <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800448c:	2300      	movs	r3, #0
 800448e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004490:	e197      	b.n	80047c2 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004492:	4b8d      	ldr	r3, [pc, #564]	; (80046c8 <BSP_TS_GetState+0x278>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	4a8c      	ldr	r2, [pc, #560]	; (80046cc <BSP_TS_GetState+0x27c>)
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	b290      	uxth	r0, r2
 800449e:	f107 0120 	add.w	r1, r7, #32
 80044a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a4:	0052      	lsls	r2, r2, #1
 80044a6:	188c      	adds	r4, r1, r2
 80044a8:	f107 0114 	add.w	r1, r7, #20
 80044ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ae:	0052      	lsls	r2, r2, #1
 80044b0:	440a      	add	r2, r1
 80044b2:	4621      	mov	r1, r4
 80044b4:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80044b6:	4b86      	ldr	r3, [pc, #536]	; (80046d0 <BSP_TS_GetState+0x280>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d11b      	bne.n	80044f6 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 80044be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80044c6:	4413      	add	r3, r2
 80044c8:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80044cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80044d4:	440b      	add	r3, r1
 80044d6:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80044da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80044e2:	4413      	add	r3, r2
 80044e4:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80044e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80044f0:	440b      	add	r3, r1
 80044f2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80044f6:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <BSP_TS_GetState+0x280>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d010      	beq.n	8004524 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8004502:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800450a:	4413      	add	r3, r2
 800450c:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004510:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004514:	b29a      	uxth	r2, r3
 8004516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800451e:	440b      	add	r3, r1
 8004520:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004524:	4b6a      	ldr	r3, [pc, #424]	; (80046d0 <BSP_TS_GetState+0x280>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d010      	beq.n	8004552 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8004530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004538:	4413      	add	r3, r2
 800453a:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800453e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004542:	b29a      	uxth	r2, r3
 8004544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800454c:	440b      	add	r3, r1
 800454e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004552:	4b5f      	ldr	r3, [pc, #380]	; (80046d0 <BSP_TS_GetState+0x280>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	f003 0308 	and.w	r3, r3, #8
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01b      	beq.n	8004596 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 800455e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004566:	4413      	add	r3, r2
 8004568:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800456c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004574:	440b      	add	r3, r1
 8004576:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800457a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004582:	4413      	add	r3, r2
 8004584:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004590:	440b      	add	r3, r1
 8004592:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800459e:	4413      	add	r3, r2
 80045a0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80045a4:	4619      	mov	r1, r3
 80045a6:	4a4b      	ldr	r2, [pc, #300]	; (80046d4 <BSP_TS_GetState+0x284>)
 80045a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ae:	4299      	cmp	r1, r3
 80045b0:	d90e      	bls.n	80045d0 <BSP_TS_GetState+0x180>
 80045b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80045ba:	4413      	add	r3, r2
 80045bc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80045c0:	4944      	ldr	r1, [pc, #272]	; (80046d4 <BSP_TS_GetState+0x284>)
 80045c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	e00d      	b.n	80045ec <BSP_TS_GetState+0x19c>
 80045d0:	4a40      	ldr	r2, [pc, #256]	; (80046d4 <BSP_TS_GetState+0x284>)
 80045d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d8:	b29a      	uxth	r2, r3
 80045da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80045e2:	440b      	add	r3, r1
 80045e4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80045f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80045f8:	4413      	add	r3, r2
 80045fa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80045fe:	4619      	mov	r1, r3
 8004600:	4a35      	ldr	r2, [pc, #212]	; (80046d8 <BSP_TS_GetState+0x288>)
 8004602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	4299      	cmp	r1, r3
 800460a:	d90e      	bls.n	800462a <BSP_TS_GetState+0x1da>
 800460c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004614:	4413      	add	r3, r2
 8004616:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800461a:	492f      	ldr	r1, [pc, #188]	; (80046d8 <BSP_TS_GetState+0x288>)
 800461c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004622:	b29b      	uxth	r3, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	b29b      	uxth	r3, r3
 8004628:	e00d      	b.n	8004646 <BSP_TS_GetState+0x1f6>
 800462a:	4a2b      	ldr	r2, [pc, #172]	; (80046d8 <BSP_TS_GetState+0x288>)
 800462c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004632:	b29a      	uxth	r2, r3
 8004634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800463c:	440b      	add	r3, r1
 800463e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	b29b      	uxth	r3, r3
 8004646:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800464a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800464e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004652:	4413      	add	r3, r2
 8004654:	2b05      	cmp	r3, #5
 8004656:	dd17      	ble.n	8004688 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8004658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004660:	4413      	add	r3, r2
 8004662:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004666:	4619      	mov	r1, r3
 8004668:	4a1a      	ldr	r2, [pc, #104]	; (80046d4 <BSP_TS_GetState+0x284>)
 800466a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004678:	4413      	add	r3, r2
 800467a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800467e:	4619      	mov	r1, r3
 8004680:	4a15      	ldr	r2, [pc, #84]	; (80046d8 <BSP_TS_GetState+0x288>)
 8004682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004684:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004688:	4b10      	ldr	r3, [pc, #64]	; (80046cc <BSP_TS_GetState+0x27c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b70      	cmp	r3, #112	; 0x70
 800468e:	d125      	bne.n	80046dc <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8004690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004698:	4413      	add	r3, r2
 800469a:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4413      	add	r3, r2
 80046a6:	460a      	mov	r2, r1
 80046a8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80046aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80046b2:	4413      	add	r3, r2
 80046b4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046bc:	3304      	adds	r3, #4
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4413      	add	r3, r2
 80046c2:	460a      	mov	r2, r1
 80046c4:	809a      	strh	r2, [r3, #4]
 80046c6:	e02c      	b.n	8004722 <BSP_TS_GetState+0x2d2>
 80046c8:	20000294 	.word	0x20000294
 80046cc:	2000029d 	.word	0x2000029d
 80046d0:	2000029c 	.word	0x2000029c
 80046d4:	200002a0 	.word	0x200002a0
 80046d8:	200002b4 	.word	0x200002b4
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80046dc:	4b42      	ldr	r3, [pc, #264]	; (80047e8 <BSP_TS_GetState+0x398>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	4619      	mov	r1, r3
 80046e2:	4a42      	ldr	r2, [pc, #264]	; (80047ec <BSP_TS_GetState+0x39c>)
 80046e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ea:	fb03 f301 	mul.w	r3, r3, r1
 80046ee:	0b1b      	lsrs	r3, r3, #12
 80046f0:	b299      	uxth	r1, r3
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4413      	add	r3, r2
 80046fa:	460a      	mov	r2, r1
 80046fc:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80046fe:	4b3c      	ldr	r3, [pc, #240]	; (80047f0 <BSP_TS_GetState+0x3a0>)
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	4619      	mov	r1, r3
 8004704:	4a3b      	ldr	r2, [pc, #236]	; (80047f4 <BSP_TS_GetState+0x3a4>)
 8004706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470c:	fb03 f301 	mul.w	r3, r3, r1
 8004710:	0b1b      	lsrs	r3, r3, #12
 8004712:	b299      	uxth	r1, r3
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004718:	3304      	adds	r3, #4
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	4413      	add	r3, r2
 800471e:	460a      	mov	r2, r1
 8004720:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004722:	4b35      	ldr	r3, [pc, #212]	; (80047f8 <BSP_TS_GetState+0x3a8>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b298      	uxth	r0, r3
 8004728:	f107 010c 	add.w	r1, r7, #12
 800472c:	f107 0210 	add.w	r2, r7, #16
 8004730:	f107 0308 	add.w	r3, r7, #8
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	460b      	mov	r3, r1
 8004738:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800473a:	f7fe fd23 	bl	8003184 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	b2d9      	uxtb	r1, r3
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004746:	4413      	add	r3, r2
 8004748:	3316      	adds	r3, #22
 800474a:	460a      	mov	r2, r1
 800474c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	b2d9      	uxtb	r1, r3
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004756:	4413      	add	r3, r2
 8004758:	3320      	adds	r3, #32
 800475a:	460a      	mov	r2, r1
 800475c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b03      	cmp	r3, #3
 8004762:	d827      	bhi.n	80047b4 <BSP_TS_GetState+0x364>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <BSP_TS_GetState+0x31c>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	0800477d 	.word	0x0800477d
 8004770:	0800478b 	.word	0x0800478b
 8004774:	08004799 	.word	0x08004799
 8004778:	080047a7 	.word	0x080047a7
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004780:	4413      	add	r3, r2
 8004782:	331b      	adds	r3, #27
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
          break;
 8004788:	e018      	b.n	80047bc <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478e:	4413      	add	r3, r2
 8004790:	331b      	adds	r3, #27
 8004792:	2202      	movs	r2, #2
 8004794:	701a      	strb	r2, [r3, #0]
          break;
 8004796:	e011      	b.n	80047bc <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479c:	4413      	add	r3, r2
 800479e:	331b      	adds	r3, #27
 80047a0:	2203      	movs	r2, #3
 80047a2:	701a      	strb	r2, [r3, #0]
          break;
 80047a4:	e00a      	b.n	80047bc <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047aa:	4413      	add	r3, r2
 80047ac:	331b      	adds	r3, #27
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
          break;
 80047b2:	e003      	b.n	80047bc <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80047ba:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80047bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047be:	3301      	adds	r3, #1
 80047c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ca:	4293      	cmp	r3, r2
 80047cc:	f4ff ae61 	bcc.w	8004492 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f813 	bl	80047fc <BSP_TS_Get_GestureId>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80047dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3754      	adds	r7, #84	; 0x54
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd90      	pop	{r4, r7, pc}
 80047e8:	20000298 	.word	0x20000298
 80047ec:	200002a0 	.word	0x200002a0
 80047f0:	2000029a 	.word	0x2000029a
 80047f4:	200002b4 	.word	0x200002b4
 80047f8:	2000029d 	.word	0x2000029d

080047fc <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800480c:	4b1f      	ldr	r3, [pc, #124]	; (800488c <BSP_TS_Get_GestureId+0x90>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f107 0208 	add.w	r2, r7, #8
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f7fe fc9a 	bl	8003152 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b18      	cmp	r3, #24
 8004822:	d01b      	beq.n	800485c <BSP_TS_Get_GestureId+0x60>
 8004824:	2b18      	cmp	r3, #24
 8004826:	d806      	bhi.n	8004836 <BSP_TS_Get_GestureId+0x3a>
 8004828:	2b10      	cmp	r3, #16
 800482a:	d00f      	beq.n	800484c <BSP_TS_Get_GestureId+0x50>
 800482c:	2b14      	cmp	r3, #20
 800482e:	d011      	beq.n	8004854 <BSP_TS_Get_GestureId+0x58>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <BSP_TS_Get_GestureId+0x48>
 8004834:	e022      	b.n	800487c <BSP_TS_Get_GestureId+0x80>
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d018      	beq.n	800486c <BSP_TS_Get_GestureId+0x70>
 800483a:	2b49      	cmp	r3, #73	; 0x49
 800483c:	d01a      	beq.n	8004874 <BSP_TS_Get_GestureId+0x78>
 800483e:	2b1c      	cmp	r3, #28
 8004840:	d010      	beq.n	8004864 <BSP_TS_Get_GestureId+0x68>
 8004842:	e01b      	b.n	800487c <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800484a:	e01a      	b.n	8004882 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004852:	e016      	b.n	8004882 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800485a:	e012      	b.n	8004882 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2203      	movs	r2, #3
 8004860:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004862:	e00e      	b.n	8004882 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2204      	movs	r2, #4
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800486a:	e00a      	b.n	8004882 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2205      	movs	r2, #5
 8004870:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004872:	e006      	b.n	8004882 <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2206      	movs	r2, #6
 8004878:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800487a:	e002      	b.n	8004882 <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      break;
 8004880:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004882:	7bfb      	ldrb	r3, [r7, #15]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	2000029d 	.word	0x2000029d

08004890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004894:	2003      	movs	r0, #3
 8004896:	f000 fb80 	bl	8004f9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800489a:	2000      	movs	r0, #0
 800489c:	f7fe f91e 	bl	8002adc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80048a0:	f7fd f996 	bl	8001bd0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_IncTick+0x20>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_IncTick+0x24>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4413      	add	r3, r2
 80048bc:	4a04      	ldr	r2, [pc, #16]	; (80048d0 <HAL_IncTick+0x24>)
 80048be:	6013      	str	r3, [r2, #0]
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000044 	.word	0x20000044
 80048d0:	20000b8c 	.word	0x20000b8c

080048d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return uwTick;
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <HAL_GetTick+0x14>)
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000b8c 	.word	0x20000b8c

080048ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048f4:	f7ff ffee 	bl	80048d4 <HAL_GetTick>
 80048f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004904:	d005      	beq.n	8004912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004906:	4b09      	ldr	r3, [pc, #36]	; (800492c <HAL_Delay+0x40>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004912:	bf00      	nop
 8004914:	f7ff ffde 	bl	80048d4 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	429a      	cmp	r2, r3
 8004922:	d8f7      	bhi.n	8004914 <HAL_Delay+0x28>
  {
  }
}
 8004924:	bf00      	nop
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000044 	.word	0x20000044

08004930 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004938:	2300      	movs	r3, #0
 800493a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e031      	b.n	80049aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fd f966 	bl	8001c20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d116      	bne.n	800499c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <HAL_ADC_Init+0x84>)
 8004974:	4013      	ands	r3, r2
 8004976:	f043 0202 	orr.w	r2, r3, #2
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f964 	bl	8004c4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f023 0303 	bic.w	r3, r3, #3
 8004992:	f043 0201 	orr.w	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
 800499a:	e001      	b.n	80049a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	ffffeefd 	.word	0xffffeefd

080049b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x1c>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e12a      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x272>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b09      	cmp	r3, #9
 80049e2:	d93a      	bls.n	8004a5a <HAL_ADC_ConfigChannel+0xa2>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ec:	d035      	beq.n	8004a5a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68d9      	ldr	r1, [r3, #12]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	4613      	mov	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	4413      	add	r3, r2
 8004a02:	3b1e      	subs	r3, #30
 8004a04:	2207      	movs	r2, #7
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	400a      	ands	r2, r1
 8004a12:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a87      	ldr	r2, [pc, #540]	; (8004c38 <HAL_ADC_ConfigChannel+0x280>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10a      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68d9      	ldr	r1, [r3, #12]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	061a      	lsls	r2, r3, #24
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a32:	e035      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68d9      	ldr	r1, [r3, #12]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	4618      	mov	r0, r3
 8004a46:	4603      	mov	r3, r0
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	4403      	add	r3, r0
 8004a4c:	3b1e      	subs	r3, #30
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a58:	e022      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6919      	ldr	r1, [r3, #16]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	4613      	mov	r3, r2
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	4413      	add	r3, r2
 8004a6e:	2207      	movs	r2, #7
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	43da      	mvns	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	400a      	ands	r2, r1
 8004a7c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6919      	ldr	r1, [r3, #16]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	4618      	mov	r0, r3
 8004a90:	4603      	mov	r3, r0
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	4403      	add	r3, r0
 8004a96:	409a      	lsls	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b06      	cmp	r3, #6
 8004aa6:	d824      	bhi.n	8004af2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3b05      	subs	r3, #5
 8004aba:	221f      	movs	r2, #31
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	43da      	mvns	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	400a      	ands	r2, r1
 8004ac8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	3b05      	subs	r3, #5
 8004ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	635a      	str	r2, [r3, #52]	; 0x34
 8004af0:	e04c      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b0c      	cmp	r3, #12
 8004af8:	d824      	bhi.n	8004b44 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	3b23      	subs	r3, #35	; 0x23
 8004b0c:	221f      	movs	r2, #31
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	43da      	mvns	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	400a      	ands	r2, r1
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	4618      	mov	r0, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	3b23      	subs	r3, #35	; 0x23
 8004b36:	fa00 f203 	lsl.w	r2, r0, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	631a      	str	r2, [r3, #48]	; 0x30
 8004b42:	e023      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	3b41      	subs	r3, #65	; 0x41
 8004b56:	221f      	movs	r2, #31
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	43da      	mvns	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	400a      	ands	r2, r1
 8004b64:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	4618      	mov	r0, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3b41      	subs	r3, #65	; 0x41
 8004b80:	fa00 f203 	lsl.w	r2, r0, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2a      	ldr	r2, [pc, #168]	; (8004c3c <HAL_ADC_ConfigChannel+0x284>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d10a      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x1f4>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b9e:	d105      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004ba0:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <HAL_ADC_ConfigChannel+0x288>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4a26      	ldr	r2, [pc, #152]	; (8004c40 <HAL_ADC_ConfigChannel+0x288>)
 8004ba6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004baa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <HAL_ADC_ConfigChannel+0x284>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d109      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x212>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b12      	cmp	r3, #18
 8004bbc:	d105      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004bbe:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <HAL_ADC_ConfigChannel+0x288>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4a1f      	ldr	r2, [pc, #124]	; (8004c40 <HAL_ADC_ConfigChannel+0x288>)
 8004bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bc8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <HAL_ADC_ConfigChannel+0x284>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d125      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x268>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a17      	ldr	r2, [pc, #92]	; (8004c38 <HAL_ADC_ConfigChannel+0x280>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <HAL_ADC_ConfigChannel+0x22e>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b11      	cmp	r3, #17
 8004be4:	d11c      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004be6:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <HAL_ADC_ConfigChannel+0x288>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4a15      	ldr	r2, [pc, #84]	; (8004c40 <HAL_ADC_ConfigChannel+0x288>)
 8004bec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bf0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a10      	ldr	r2, [pc, #64]	; (8004c38 <HAL_ADC_ConfigChannel+0x280>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d111      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004bfc:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <HAL_ADC_ConfigChannel+0x28c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a11      	ldr	r2, [pc, #68]	; (8004c48 <HAL_ADC_ConfigChannel+0x290>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	0c9a      	lsrs	r2, r3, #18
 8004c08:	4613      	mov	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004c12:	e002      	b.n	8004c1a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1f9      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	10000012 	.word	0x10000012
 8004c3c:	40012000 	.word	0x40012000
 8004c40:	40012300 	.word	0x40012300
 8004c44:	20000000 	.word	0x20000000
 8004c48:	431bde83 	.word	0x431bde83

08004c4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004c54:	4b78      	ldr	r3, [pc, #480]	; (8004e38 <ADC_Init+0x1ec>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	4a77      	ldr	r2, [pc, #476]	; (8004e38 <ADC_Init+0x1ec>)
 8004c5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004c5e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004c60:	4b75      	ldr	r3, [pc, #468]	; (8004e38 <ADC_Init+0x1ec>)
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4973      	ldr	r1, [pc, #460]	; (8004e38 <ADC_Init+0x1ec>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6859      	ldr	r1, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	021a      	lsls	r2, r3, #8
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ca0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6859      	ldr	r1, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6899      	ldr	r1, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	4a58      	ldr	r2, [pc, #352]	; (8004e3c <ADC_Init+0x1f0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d022      	beq.n	8004d26 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6899      	ldr	r1, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6899      	ldr	r1, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]
 8004d24:	e00f      	b.n	8004d46 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0202 	bic.w	r2, r2, #2
 8004d54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6899      	ldr	r1, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	005a      	lsls	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01b      	beq.n	8004dac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6859      	ldr	r1, [r3, #4]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	035a      	lsls	r2, r3, #13
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	e007      	b.n	8004dbc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	051a      	lsls	r2, r3, #20
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6899      	ldr	r1, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004dfe:	025a      	lsls	r2, r3, #9
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6899      	ldr	r1, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	029a      	lsls	r2, r3, #10
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	609a      	str	r2, [r3, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	40012300 	.word	0x40012300
 8004e3c:	0f000001 	.word	0x0f000001

08004e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <__NVIC_SetPriorityGrouping+0x40>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <__NVIC_SetPriorityGrouping+0x44>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e6e:	4a04      	ldr	r2, [pc, #16]	; (8004e80 <__NVIC_SetPriorityGrouping+0x40>)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	60d3      	str	r3, [r2, #12]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	e000ed00 	.word	0xe000ed00
 8004e84:	05fa0000 	.word	0x05fa0000

08004e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	0a1b      	lsrs	r3, r3, #8
 8004e92:	f003 0307 	and.w	r3, r3, #7
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	e000ed00 	.word	0xe000ed00

08004ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	4603      	mov	r3, r0
 8004eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	db0b      	blt.n	8004ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	f003 021f 	and.w	r2, r3, #31
 8004ebc:	4907      	ldr	r1, [pc, #28]	; (8004edc <__NVIC_EnableIRQ+0x38>)
 8004ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8004eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	e000e100 	.word	0xe000e100

08004ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	6039      	str	r1, [r7, #0]
 8004eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	db0a      	blt.n	8004f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	490c      	ldr	r1, [pc, #48]	; (8004f2c <__NVIC_SetPriority+0x4c>)
 8004efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efe:	0112      	lsls	r2, r2, #4
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	440b      	add	r3, r1
 8004f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f08:	e00a      	b.n	8004f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4908      	ldr	r1, [pc, #32]	; (8004f30 <__NVIC_SetPriority+0x50>)
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	3b04      	subs	r3, #4
 8004f18:	0112      	lsls	r2, r2, #4
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	761a      	strb	r2, [r3, #24]
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	e000e100 	.word	0xe000e100
 8004f30:	e000ed00 	.word	0xe000ed00

08004f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	; 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f1c3 0307 	rsb	r3, r3, #7
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	bf28      	it	cs
 8004f52:	2304      	movcs	r3, #4
 8004f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	2b06      	cmp	r3, #6
 8004f5c:	d902      	bls.n	8004f64 <NVIC_EncodePriority+0x30>
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3b03      	subs	r3, #3
 8004f62:	e000      	b.n	8004f66 <NVIC_EncodePriority+0x32>
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f68:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43da      	mvns	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	401a      	ands	r2, r3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	43d9      	mvns	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f8c:	4313      	orrs	r3, r2
         );
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3724      	adds	r7, #36	; 0x24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff ff4c 	bl	8004e40 <__NVIC_SetPriorityGrouping>
}
 8004fa8:	bf00      	nop
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fc2:	f7ff ff61 	bl	8004e88 <__NVIC_GetPriorityGrouping>
 8004fc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	6978      	ldr	r0, [r7, #20]
 8004fce:	f7ff ffb1 	bl	8004f34 <NVIC_EncodePriority>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd8:	4611      	mov	r1, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff ff80 	bl	8004ee0 <__NVIC_SetPriority>
}
 8004fe0:	bf00      	nop
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ff54 	bl	8004ea4 <__NVIC_EnableIRQ>
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e069      	b.n	80050ea <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fc fe56 	bl	8001cd4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6819      	ldr	r1, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4b2a      	ldr	r3, [pc, #168]	; (80050f4 <HAL_DCMI_Init+0xf0>)
 800504a:	400b      	ands	r3, r1
 800504c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6819      	ldr	r1, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005062:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800506e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800507a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005086:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005092:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d112      	bne.n	80050ca <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7f1b      	ldrb	r3, [r3, #28]
 80050a8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	7f5b      	ldrb	r3, [r3, #29]
 80050ae:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050b0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	7f9b      	ldrb	r3, [r3, #30]
 80050b6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80050b8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	7fdb      	ldrb	r3, [r3, #31]
 80050c0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80050c6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80050c8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 021e 	orr.w	r2, r2, #30
 80050d8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	ffe0f007 	.word	0xffe0f007

080050f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005104:	f7ff fbe6 	bl	80048d4 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e099      	b.n	8005248 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0201 	bic.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005134:	e00f      	b.n	8005156 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005136:	f7ff fbcd 	bl	80048d4 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b05      	cmp	r3, #5
 8005142:	d908      	bls.n	8005156 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2203      	movs	r2, #3
 800514e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e078      	b.n	8005248 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e8      	bne.n	8005136 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4b38      	ldr	r3, [pc, #224]	; (8005250 <HAL_DMA_Init+0x158>)
 8005170:	4013      	ands	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800518e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800519a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	2b04      	cmp	r3, #4
 80051ae:	d107      	bne.n	80051c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	4313      	orrs	r3, r2
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0307 	bic.w	r3, r3, #7
 80051d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d117      	bne.n	800521a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00e      	beq.n	800521a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f8bd 	bl	800537c <DMA_CheckFifoParam>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d008      	beq.n	800521a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2240      	movs	r2, #64	; 0x40
 800520c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005216:	2301      	movs	r3, #1
 8005218:	e016      	b.n	8005248 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f874 	bl	8005310 <DMA_CalcBaseAndBitshift>
 8005228:	4603      	mov	r3, r0
 800522a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005230:	223f      	movs	r2, #63	; 0x3f
 8005232:	409a      	lsls	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	f010803f 	.word	0xf010803f

08005254 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e050      	b.n	8005308 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d101      	bne.n	8005276 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005272:	2302      	movs	r3, #2
 8005274:	e048      	b.n	8005308 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0201 	bic.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2200      	movs	r2, #0
 800529c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2200      	movs	r2, #0
 80052a4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2200      	movs	r2, #0
 80052ac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2221      	movs	r2, #33	; 0x21
 80052b4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f82a 	bl	8005310 <DMA_CalcBaseAndBitshift>
 80052bc:	4603      	mov	r3, r0
 80052be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c4:	223f      	movs	r2, #63	; 0x3f
 80052c6:	409a      	lsls	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	3b10      	subs	r3, #16
 8005320:	4a13      	ldr	r2, [pc, #76]	; (8005370 <DMA_CalcBaseAndBitshift+0x60>)
 8005322:	fba2 2303 	umull	r2, r3, r2, r3
 8005326:	091b      	lsrs	r3, r3, #4
 8005328:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800532a:	4a12      	ldr	r2, [pc, #72]	; (8005374 <DMA_CalcBaseAndBitshift+0x64>)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b03      	cmp	r3, #3
 800533c:	d908      	bls.n	8005350 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <DMA_CalcBaseAndBitshift+0x68>)
 8005346:	4013      	ands	r3, r2
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	659a      	str	r2, [r3, #88]	; 0x58
 800534e:	e006      	b.n	800535e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	4b08      	ldr	r3, [pc, #32]	; (8005378 <DMA_CalcBaseAndBitshift+0x68>)
 8005358:	4013      	ands	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	aaaaaaab 	.word	0xaaaaaaab
 8005374:	0800f718 	.word	0x0800f718
 8005378:	fffffc00 	.word	0xfffffc00

0800537c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d11f      	bne.n	80053d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d855      	bhi.n	8005448 <DMA_CheckFifoParam+0xcc>
 800539c:	a201      	add	r2, pc, #4	; (adr r2, 80053a4 <DMA_CheckFifoParam+0x28>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053b5 	.word	0x080053b5
 80053a8:	080053c7 	.word	0x080053c7
 80053ac:	080053b5 	.word	0x080053b5
 80053b0:	08005449 	.word	0x08005449
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d045      	beq.n	800544c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c4:	e042      	b.n	800544c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053ce:	d13f      	bne.n	8005450 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053d4:	e03c      	b.n	8005450 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053de:	d121      	bne.n	8005424 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d836      	bhi.n	8005454 <DMA_CheckFifoParam+0xd8>
 80053e6:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <DMA_CheckFifoParam+0x70>)
 80053e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ec:	080053fd 	.word	0x080053fd
 80053f0:	08005403 	.word	0x08005403
 80053f4:	080053fd 	.word	0x080053fd
 80053f8:	08005415 	.word	0x08005415
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	e02f      	b.n	8005462 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d024      	beq.n	8005458 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005412:	e021      	b.n	8005458 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800541c:	d11e      	bne.n	800545c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005422:	e01b      	b.n	800545c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d902      	bls.n	8005430 <DMA_CheckFifoParam+0xb4>
 800542a:	2b03      	cmp	r3, #3
 800542c:	d003      	beq.n	8005436 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800542e:	e018      	b.n	8005462 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
      break;
 8005434:	e015      	b.n	8005462 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	73fb      	strb	r3, [r7, #15]
      break;
 8005446:	e00b      	b.n	8005460 <DMA_CheckFifoParam+0xe4>
      break;
 8005448:	bf00      	nop
 800544a:	e00a      	b.n	8005462 <DMA_CheckFifoParam+0xe6>
      break;
 800544c:	bf00      	nop
 800544e:	e008      	b.n	8005462 <DMA_CheckFifoParam+0xe6>
      break;
 8005450:	bf00      	nop
 8005452:	e006      	b.n	8005462 <DMA_CheckFifoParam+0xe6>
      break;
 8005454:	bf00      	nop
 8005456:	e004      	b.n	8005462 <DMA_CheckFifoParam+0xe6>
      break;
 8005458:	bf00      	nop
 800545a:	e002      	b.n	8005462 <DMA_CheckFifoParam+0xe6>
      break;   
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <DMA_CheckFifoParam+0xe6>
      break;
 8005460:	bf00      	nop
    }
  } 
  
  return status; 
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e039      	b.n	80054f6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d106      	bne.n	800549c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fc fcda 	bl	8001e50 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c0:	f023 0107 	bic.w	r1, r3, #7
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d6:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <HAL_DMA2D_Init+0x90>)
 80054d8:	4013      	ands	r3, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	68d1      	ldr	r1, [r2, #12]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6812      	ldr	r2, [r2, #0]
 80054e2:	430b      	orrs	r3, r1
 80054e4:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	ffffc000 	.word	0xffffc000

08005504 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_DMA2D_Start+0x1c>
 800551c:	2302      	movs	r3, #2
 800551e:	e018      	b.n	8005552 <HAL_DMA2D_Start+0x4e>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fa98 	bl	8005a70 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b086      	sub	sp, #24
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d056      	beq.n	8005624 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005576:	f7ff f9ad 	bl	80048d4 <HAL_GetTick>
 800557a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800557c:	e04b      	b.n	8005616 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800558c:	2b00      	cmp	r3, #0
 800558e:	d023      	beq.n	80055d8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	f043 0202 	orr.w	r2, r3, #2
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b4:	f043 0201 	orr.w	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2221      	movs	r2, #33	; 0x21
 80055c2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2204      	movs	r2, #4
 80055c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0a5      	b.n	8005724 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d01a      	beq.n	8005616 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80055e0:	f7ff f978 	bl	80048d4 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d302      	bcc.n	80055f6 <HAL_DMA2D_PollForTransfer+0x9c>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fa:	f043 0220 	orr.w	r2, r3, #32
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2203      	movs	r2, #3
 8005606:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e086      	b.n	8005724 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0ac      	beq.n	800557e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d061      	beq.n	800570a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005646:	f7ff f945 	bl	80048d4 <HAL_GetTick>
 800564a:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800564c:	e056      	b.n	80056fc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800565c:	2b00      	cmp	r3, #0
 800565e:	d02e      	beq.n	80056be <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566e:	f043 0204 	orr.w	r2, r3, #4
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005684:	f043 0202 	orr.w	r2, r3, #2
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	f043 0201 	orr.w	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2229      	movs	r2, #41	; 0x29
 80056a8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2204      	movs	r2, #4
 80056ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e032      	b.n	8005724 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c4:	d01a      	beq.n	80056fc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80056c6:	f7ff f905 	bl	80048d4 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d302      	bcc.n	80056dc <HAL_DMA2D_PollForTransfer+0x182>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10f      	bne.n	80056fc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e0:	f043 0220 	orr.w	r2, r3, #32
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2203      	movs	r2, #3
 80056ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e013      	b.n	8005724 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0a1      	beq.n	800564e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2212      	movs	r2, #18
 8005710:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d026      	beq.n	800579c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005754:	2b00      	cmp	r3, #0
 8005756:	d021      	beq.n	800579c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005766:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576c:	f043 0201 	orr.w	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2201      	movs	r2, #1
 800577a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2204      	movs	r2, #4
 8005780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d026      	beq.n	80057f4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d021      	beq.n	80057f4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057be:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2220      	movs	r2, #32
 80057c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057cc:	f043 0202 	orr.w	r2, r3, #2
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2204      	movs	r2, #4
 80057d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d026      	beq.n	800584c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005804:	2b00      	cmp	r3, #0
 8005806:	d021      	beq.n	800584c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005816:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2208      	movs	r2, #8
 800581e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005824:	f043 0204 	orr.w	r2, r3, #4
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2204      	movs	r2, #4
 8005830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d013      	beq.n	800587e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00e      	beq.n	800587e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2204      	movs	r2, #4
 8005876:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f853 	bl	8005924 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d024      	beq.n	80058d2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800588e:	2b00      	cmp	r3, #0
 8005890:	d01f      	beq.n	80058d2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058a0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2202      	movs	r2, #2
 80058a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01f      	beq.n	800591c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d01a      	beq.n	800591c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058f4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2210      	movs	r2, #16
 80058fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f80e 	bl	8005938 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_DMA2D_ConfigLayer+0x20>
 8005968:	2302      	movs	r3, #2
 800596a:	e079      	b.n	8005a60 <HAL_DMA2D_ConfigLayer+0x114>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	011b      	lsls	r3, r3, #4
 8005980:	3318      	adds	r3, #24
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	4413      	add	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	041b      	lsls	r3, r3, #16
 8005992:	4313      	orrs	r3, r2
 8005994:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005996:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <HAL_DMA2D_ConfigLayer+0x120>)
 8005998:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b0a      	cmp	r3, #10
 80059a0:	d003      	beq.n	80059aa <HAL_DMA2D_ConfigLayer+0x5e>
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b09      	cmp	r3, #9
 80059a8:	d107      	bne.n	80059ba <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e005      	b.n	80059c6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	061b      	lsls	r3, r3, #24
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d120      	bne.n	8005a0e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	43db      	mvns	r3, r3
 80059d6:	ea02 0103 	and.w	r1, r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2b0a      	cmp	r3, #10
 80059f4:	d003      	beq.n	80059fe <HAL_DMA2D_ConfigLayer+0xb2>
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b09      	cmp	r3, #9
 80059fc:	d127      	bne.n	8005a4e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a0c:	e01f      	b.n	8005a4e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69da      	ldr	r2, [r3, #28]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	43db      	mvns	r3, r3
 8005a18:	ea02 0103 	and.w	r1, r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	6812      	ldr	r2, [r2, #0]
 8005a2e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b0a      	cmp	r3, #10
 8005a36:	d003      	beq.n	8005a40 <HAL_DMA2D_ConfigLayer+0xf4>
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b09      	cmp	r3, #9
 8005a3e:	d106      	bne.n	8005a4e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005a4c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	ff03000f 	.word	0xff03000f

08005a70 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b08b      	sub	sp, #44	; 0x2c
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a84:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	041a      	lsls	r2, r3, #16
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005aa8:	d174      	bne.n	8005b94 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005ab0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ab8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ac0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d108      	bne.n	8005ae2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae0:	e053      	b.n	8005b8a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d106      	bne.n	8005af8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
 8005af6:	e048      	b.n	8005b8a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d111      	bne.n	8005b24 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	0cdb      	lsrs	r3, r3, #19
 8005b04:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	0a9b      	lsrs	r3, r3, #10
 8005b0a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	08db      	lsrs	r3, r3, #3
 8005b10:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	02db      	lsls	r3, r3, #11
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
 8005b22:	e032      	b.n	8005b8a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d117      	bne.n	8005b5c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	0fdb      	lsrs	r3, r3, #31
 8005b30:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	0cdb      	lsrs	r3, r3, #19
 8005b36:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	0adb      	lsrs	r3, r3, #11
 8005b3c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	08db      	lsrs	r3, r3, #3
 8005b42:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	029b      	lsls	r3, r3, #10
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	03db      	lsls	r3, r3, #15
 8005b52:	4313      	orrs	r3, r2
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5a:	e016      	b.n	8005b8a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	0f1b      	lsrs	r3, r3, #28
 8005b60:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	0d1b      	lsrs	r3, r3, #20
 8005b66:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	0b1b      	lsrs	r3, r3, #12
 8005b6c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	091b      	lsrs	r3, r3, #4
 8005b72:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	011a      	lsls	r2, r3, #4
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	6a3b      	ldr	r3, [r7, #32]
 8005b80:	031b      	lsls	r3, r3, #12
 8005b82:	4313      	orrs	r3, r2
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005b92:	e003      	b.n	8005b9c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	60da      	str	r2, [r3, #12]
}
 8005b9c:	bf00      	nop
 8005b9e:	372c      	adds	r7, #44	; 0x2c
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b089      	sub	sp, #36	; 0x24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
 8005bc6:	e175      	b.n	8005eb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005bc8:	2201      	movs	r2, #1
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	f040 8164 	bne.w	8005eae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d00b      	beq.n	8005c06 <HAL_GPIO_Init+0x5e>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d007      	beq.n	8005c06 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005bfa:	2b11      	cmp	r3, #17
 8005bfc:	d003      	beq.n	8005c06 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b12      	cmp	r3, #18
 8005c04:	d130      	bne.n	8005c68 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	2203      	movs	r2, #3
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	fa02 f303 	lsl.w	r3, r2, r3
 8005c44:	43db      	mvns	r3, r3
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	4013      	ands	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	091b      	lsrs	r3, r3, #4
 8005c52:	f003 0201 	and.w	r2, r3, #1
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	2203      	movs	r2, #3
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d003      	beq.n	8005ca8 <HAL_GPIO_Init+0x100>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2b12      	cmp	r3, #18
 8005ca6:	d123      	bne.n	8005cf0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	08da      	lsrs	r2, r3, #3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	3208      	adds	r2, #8
 8005cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	220f      	movs	r2, #15
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	08da      	lsrs	r2, r3, #3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3208      	adds	r2, #8
 8005cea:	69b9      	ldr	r1, [r7, #24]
 8005cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	2203      	movs	r2, #3
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	4013      	ands	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f003 0203 	and.w	r2, r3, #3
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	fa02 f303 	lsl.w	r3, r2, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80be 	beq.w	8005eae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d32:	4b65      	ldr	r3, [pc, #404]	; (8005ec8 <HAL_GPIO_Init+0x320>)
 8005d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d36:	4a64      	ldr	r2, [pc, #400]	; (8005ec8 <HAL_GPIO_Init+0x320>)
 8005d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d3e:	4b62      	ldr	r3, [pc, #392]	; (8005ec8 <HAL_GPIO_Init+0x320>)
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005d4a:	4a60      	ldr	r2, [pc, #384]	; (8005ecc <HAL_GPIO_Init+0x324>)
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	089b      	lsrs	r3, r3, #2
 8005d50:	3302      	adds	r3, #2
 8005d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	220f      	movs	r2, #15
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	43db      	mvns	r3, r3
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a57      	ldr	r2, [pc, #348]	; (8005ed0 <HAL_GPIO_Init+0x328>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d037      	beq.n	8005de6 <HAL_GPIO_Init+0x23e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a56      	ldr	r2, [pc, #344]	; (8005ed4 <HAL_GPIO_Init+0x32c>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d031      	beq.n	8005de2 <HAL_GPIO_Init+0x23a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a55      	ldr	r2, [pc, #340]	; (8005ed8 <HAL_GPIO_Init+0x330>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d02b      	beq.n	8005dde <HAL_GPIO_Init+0x236>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a54      	ldr	r2, [pc, #336]	; (8005edc <HAL_GPIO_Init+0x334>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d025      	beq.n	8005dda <HAL_GPIO_Init+0x232>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a53      	ldr	r2, [pc, #332]	; (8005ee0 <HAL_GPIO_Init+0x338>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d01f      	beq.n	8005dd6 <HAL_GPIO_Init+0x22e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a52      	ldr	r2, [pc, #328]	; (8005ee4 <HAL_GPIO_Init+0x33c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d019      	beq.n	8005dd2 <HAL_GPIO_Init+0x22a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a51      	ldr	r2, [pc, #324]	; (8005ee8 <HAL_GPIO_Init+0x340>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_GPIO_Init+0x226>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a50      	ldr	r2, [pc, #320]	; (8005eec <HAL_GPIO_Init+0x344>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00d      	beq.n	8005dca <HAL_GPIO_Init+0x222>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a4f      	ldr	r2, [pc, #316]	; (8005ef0 <HAL_GPIO_Init+0x348>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d007      	beq.n	8005dc6 <HAL_GPIO_Init+0x21e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a4e      	ldr	r2, [pc, #312]	; (8005ef4 <HAL_GPIO_Init+0x34c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d101      	bne.n	8005dc2 <HAL_GPIO_Init+0x21a>
 8005dbe:	2309      	movs	r3, #9
 8005dc0:	e012      	b.n	8005de8 <HAL_GPIO_Init+0x240>
 8005dc2:	230a      	movs	r3, #10
 8005dc4:	e010      	b.n	8005de8 <HAL_GPIO_Init+0x240>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	e00e      	b.n	8005de8 <HAL_GPIO_Init+0x240>
 8005dca:	2307      	movs	r3, #7
 8005dcc:	e00c      	b.n	8005de8 <HAL_GPIO_Init+0x240>
 8005dce:	2306      	movs	r3, #6
 8005dd0:	e00a      	b.n	8005de8 <HAL_GPIO_Init+0x240>
 8005dd2:	2305      	movs	r3, #5
 8005dd4:	e008      	b.n	8005de8 <HAL_GPIO_Init+0x240>
 8005dd6:	2304      	movs	r3, #4
 8005dd8:	e006      	b.n	8005de8 <HAL_GPIO_Init+0x240>
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e004      	b.n	8005de8 <HAL_GPIO_Init+0x240>
 8005dde:	2302      	movs	r3, #2
 8005de0:	e002      	b.n	8005de8 <HAL_GPIO_Init+0x240>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <HAL_GPIO_Init+0x240>
 8005de6:	2300      	movs	r3, #0
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	f002 0203 	and.w	r2, r2, #3
 8005dee:	0092      	lsls	r2, r2, #2
 8005df0:	4093      	lsls	r3, r2
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005df8:	4934      	ldr	r1, [pc, #208]	; (8005ecc <HAL_GPIO_Init+0x324>)
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	089b      	lsrs	r3, r3, #2
 8005dfe:	3302      	adds	r3, #2
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e06:	4b3c      	ldr	r3, [pc, #240]	; (8005ef8 <HAL_GPIO_Init+0x350>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4013      	ands	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e2a:	4a33      	ldr	r2, [pc, #204]	; (8005ef8 <HAL_GPIO_Init+0x350>)
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005e30:	4b31      	ldr	r3, [pc, #196]	; (8005ef8 <HAL_GPIO_Init+0x350>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e54:	4a28      	ldr	r2, [pc, #160]	; (8005ef8 <HAL_GPIO_Init+0x350>)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e5a:	4b27      	ldr	r3, [pc, #156]	; (8005ef8 <HAL_GPIO_Init+0x350>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	43db      	mvns	r3, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4013      	ands	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <HAL_GPIO_Init+0x350>)
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e84:	4b1c      	ldr	r3, [pc, #112]	; (8005ef8 <HAL_GPIO_Init+0x350>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	69ba      	ldr	r2, [r7, #24]
 8005e90:	4013      	ands	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ea8:	4a13      	ldr	r2, [pc, #76]	; (8005ef8 <HAL_GPIO_Init+0x350>)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2b0f      	cmp	r3, #15
 8005eb8:	f67f ae86 	bls.w	8005bc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005ebc:	bf00      	nop
 8005ebe:	3724      	adds	r7, #36	; 0x24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	40013800 	.word	0x40013800
 8005ed0:	40020000 	.word	0x40020000
 8005ed4:	40020400 	.word	0x40020400
 8005ed8:	40020800 	.word	0x40020800
 8005edc:	40020c00 	.word	0x40020c00
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40021400 	.word	0x40021400
 8005ee8:	40021800 	.word	0x40021800
 8005eec:	40021c00 	.word	0x40021c00
 8005ef0:	40022000 	.word	0x40022000
 8005ef4:	40022400 	.word	0x40022400
 8005ef8:	40013c00 	.word	0x40013c00

08005efc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e0d9      	b.n	80060cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005f18:	2201      	movs	r2, #1
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4013      	ands	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	f040 80c9 	bne.w	80060c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005f34:	4a6a      	ldr	r2, [pc, #424]	; (80060e0 <HAL_GPIO_DeInit+0x1e4>)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	089b      	lsrs	r3, r3, #2
 8005f3a:	3302      	adds	r3, #2
 8005f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f40:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	220f      	movs	r2, #15
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	4013      	ands	r3, r2
 8005f54:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a62      	ldr	r2, [pc, #392]	; (80060e4 <HAL_GPIO_DeInit+0x1e8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d037      	beq.n	8005fce <HAL_GPIO_DeInit+0xd2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a61      	ldr	r2, [pc, #388]	; (80060e8 <HAL_GPIO_DeInit+0x1ec>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d031      	beq.n	8005fca <HAL_GPIO_DeInit+0xce>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a60      	ldr	r2, [pc, #384]	; (80060ec <HAL_GPIO_DeInit+0x1f0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d02b      	beq.n	8005fc6 <HAL_GPIO_DeInit+0xca>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a5f      	ldr	r2, [pc, #380]	; (80060f0 <HAL_GPIO_DeInit+0x1f4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d025      	beq.n	8005fc2 <HAL_GPIO_DeInit+0xc6>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a5e      	ldr	r2, [pc, #376]	; (80060f4 <HAL_GPIO_DeInit+0x1f8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d01f      	beq.n	8005fbe <HAL_GPIO_DeInit+0xc2>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <HAL_GPIO_DeInit+0x1fc>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d019      	beq.n	8005fba <HAL_GPIO_DeInit+0xbe>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a5c      	ldr	r2, [pc, #368]	; (80060fc <HAL_GPIO_DeInit+0x200>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_GPIO_DeInit+0xba>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a5b      	ldr	r2, [pc, #364]	; (8006100 <HAL_GPIO_DeInit+0x204>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00d      	beq.n	8005fb2 <HAL_GPIO_DeInit+0xb6>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a5a      	ldr	r2, [pc, #360]	; (8006104 <HAL_GPIO_DeInit+0x208>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d007      	beq.n	8005fae <HAL_GPIO_DeInit+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a59      	ldr	r2, [pc, #356]	; (8006108 <HAL_GPIO_DeInit+0x20c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d101      	bne.n	8005faa <HAL_GPIO_DeInit+0xae>
 8005fa6:	2309      	movs	r3, #9
 8005fa8:	e012      	b.n	8005fd0 <HAL_GPIO_DeInit+0xd4>
 8005faa:	230a      	movs	r3, #10
 8005fac:	e010      	b.n	8005fd0 <HAL_GPIO_DeInit+0xd4>
 8005fae:	2308      	movs	r3, #8
 8005fb0:	e00e      	b.n	8005fd0 <HAL_GPIO_DeInit+0xd4>
 8005fb2:	2307      	movs	r3, #7
 8005fb4:	e00c      	b.n	8005fd0 <HAL_GPIO_DeInit+0xd4>
 8005fb6:	2306      	movs	r3, #6
 8005fb8:	e00a      	b.n	8005fd0 <HAL_GPIO_DeInit+0xd4>
 8005fba:	2305      	movs	r3, #5
 8005fbc:	e008      	b.n	8005fd0 <HAL_GPIO_DeInit+0xd4>
 8005fbe:	2304      	movs	r3, #4
 8005fc0:	e006      	b.n	8005fd0 <HAL_GPIO_DeInit+0xd4>
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e004      	b.n	8005fd0 <HAL_GPIO_DeInit+0xd4>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e002      	b.n	8005fd0 <HAL_GPIO_DeInit+0xd4>
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e000      	b.n	8005fd0 <HAL_GPIO_DeInit+0xd4>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	f002 0203 	and.w	r2, r2, #3
 8005fd6:	0092      	lsls	r2, r2, #2
 8005fd8:	4093      	lsls	r3, r2
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d132      	bne.n	8006046 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005fe0:	4b4a      	ldr	r3, [pc, #296]	; (800610c <HAL_GPIO_DeInit+0x210>)
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	43db      	mvns	r3, r3
 8005fe8:	4948      	ldr	r1, [pc, #288]	; (800610c <HAL_GPIO_DeInit+0x210>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005fee:	4b47      	ldr	r3, [pc, #284]	; (800610c <HAL_GPIO_DeInit+0x210>)
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	4945      	ldr	r1, [pc, #276]	; (800610c <HAL_GPIO_DeInit+0x210>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005ffc:	4b43      	ldr	r3, [pc, #268]	; (800610c <HAL_GPIO_DeInit+0x210>)
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	43db      	mvns	r3, r3
 8006004:	4941      	ldr	r1, [pc, #260]	; (800610c <HAL_GPIO_DeInit+0x210>)
 8006006:	4013      	ands	r3, r2
 8006008:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800600a:	4b40      	ldr	r3, [pc, #256]	; (800610c <HAL_GPIO_DeInit+0x210>)
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	43db      	mvns	r3, r3
 8006012:	493e      	ldr	r1, [pc, #248]	; (800610c <HAL_GPIO_DeInit+0x210>)
 8006014:	4013      	ands	r3, r2
 8006016:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	220f      	movs	r2, #15
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006028:	4a2d      	ldr	r2, [pc, #180]	; (80060e0 <HAL_GPIO_DeInit+0x1e4>)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	089b      	lsrs	r3, r3, #2
 800602e:	3302      	adds	r3, #2
 8006030:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	43da      	mvns	r2, r3
 8006038:	4829      	ldr	r0, [pc, #164]	; (80060e0 <HAL_GPIO_DeInit+0x1e4>)
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	089b      	lsrs	r3, r3, #2
 800603e:	400a      	ands	r2, r1
 8006040:	3302      	adds	r3, #2
 8006042:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	2103      	movs	r1, #3
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	43db      	mvns	r3, r3
 8006056:	401a      	ands	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	08da      	lsrs	r2, r3, #3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3208      	adds	r2, #8
 8006064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f003 0307 	and.w	r3, r3, #7
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	220f      	movs	r2, #15
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	43db      	mvns	r3, r3
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	08d2      	lsrs	r2, r2, #3
 800607c:	4019      	ands	r1, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3208      	adds	r2, #8
 8006082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	2103      	movs	r1, #3
 8006090:	fa01 f303 	lsl.w	r3, r1, r3
 8006094:	43db      	mvns	r3, r3
 8006096:	401a      	ands	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	2101      	movs	r1, #1
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	fa01 f303 	lsl.w	r3, r1, r3
 80060a8:	43db      	mvns	r3, r3
 80060aa:	401a      	ands	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	2103      	movs	r1, #3
 80060ba:	fa01 f303 	lsl.w	r3, r1, r3
 80060be:	43db      	mvns	r3, r3
 80060c0:	401a      	ands	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	3301      	adds	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2b0f      	cmp	r3, #15
 80060d0:	f67f af22 	bls.w	8005f18 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80060d4:	bf00      	nop
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	40013800 	.word	0x40013800
 80060e4:	40020000 	.word	0x40020000
 80060e8:	40020400 	.word	0x40020400
 80060ec:	40020800 	.word	0x40020800
 80060f0:	40020c00 	.word	0x40020c00
 80060f4:	40021000 	.word	0x40021000
 80060f8:	40021400 	.word	0x40021400
 80060fc:	40021800 	.word	0x40021800
 8006100:	40021c00 	.word	0x40021c00
 8006104:	40022000 	.word	0x40022000
 8006108:	40022400 	.word	0x40022400
 800610c:	40013c00 	.word	0x40013c00

08006110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	807b      	strh	r3, [r7, #2]
 800611c:	4613      	mov	r3, r2
 800611e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006120:	787b      	ldrb	r3, [r7, #1]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006126:	887a      	ldrh	r2, [r7, #2]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800612c:	e003      	b.n	8006136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800612e:	887b      	ldrh	r3, [r7, #2]
 8006130:	041a      	lsls	r2, r3, #16
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	619a      	str	r2, [r3, #24]
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e07f      	b.n	8006256 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fb fe96 	bl	8001e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2224      	movs	r2, #36	; 0x24
 8006174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0201 	bic.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685a      	ldr	r2, [r3, #4]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006194:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d107      	bne.n	80061be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061ba:	609a      	str	r2, [r3, #8]
 80061bc:	e006      	b.n	80061cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689a      	ldr	r2, [r3, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80061ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d104      	bne.n	80061de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6859      	ldr	r1, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <HAL_I2C_Init+0x11c>)
 80061ea:	430b      	orrs	r3, r1
 80061ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	ea42 0103 	orr.w	r1, r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	430a      	orrs	r2, r1
 8006216:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	69d9      	ldr	r1, [r3, #28]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1a      	ldr	r2, [r3, #32]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	02008000 	.word	0x02008000

08006264 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e021      	b.n	80062ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2224      	movs	r2, #36	; 0x24
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7fb fe7c 	bl	8001f8c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	4608      	mov	r0, r1
 80062ce:	4611      	mov	r1, r2
 80062d0:	461a      	mov	r2, r3
 80062d2:	4603      	mov	r3, r0
 80062d4:	817b      	strh	r3, [r7, #10]
 80062d6:	460b      	mov	r3, r1
 80062d8:	813b      	strh	r3, [r7, #8]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	f040 80f9 	bne.w	80064de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_I2C_Mem_Write+0x34>
 80062f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d105      	bne.n	8006304 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0ed      	b.n	80064e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_I2C_Mem_Write+0x4e>
 800630e:	2302      	movs	r3, #2
 8006310:	e0e6      	b.n	80064e0 <HAL_I2C_Mem_Write+0x21c>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800631a:	f7fe fadb 	bl	80048d4 <HAL_GetTick>
 800631e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	2319      	movs	r3, #25
 8006326:	2201      	movs	r2, #1
 8006328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fad1 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e0d1      	b.n	80064e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2221      	movs	r2, #33	; 0x21
 8006340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2240      	movs	r2, #64	; 0x40
 8006348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6a3a      	ldr	r2, [r7, #32]
 8006356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800635c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006364:	88f8      	ldrh	r0, [r7, #6]
 8006366:	893a      	ldrh	r2, [r7, #8]
 8006368:	8979      	ldrh	r1, [r7, #10]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	4603      	mov	r3, r0
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f9e1 	bl	800673c <I2C_RequestMemoryWrite>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e0a9      	b.n	80064e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006390:	b29b      	uxth	r3, r3
 8006392:	2bff      	cmp	r3, #255	; 0xff
 8006394:	d90e      	bls.n	80063b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	22ff      	movs	r2, #255	; 0xff
 800639a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	8979      	ldrh	r1, [r7, #10]
 80063a4:	2300      	movs	r3, #0
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fbb3 	bl	8006b18 <I2C_TransferConfig>
 80063b2:	e00f      	b.n	80063d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c2:	b2da      	uxtb	r2, r3
 80063c4:	8979      	ldrh	r1, [r7, #10]
 80063c6:	2300      	movs	r3, #0
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 fba2 	bl	8006b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fabb 	bl	8006954 <I2C_WaitOnTXISFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e07b      	b.n	80064e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	781a      	ldrb	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d034      	beq.n	800648c <HAL_I2C_Mem_Write+0x1c8>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006426:	2b00      	cmp	r3, #0
 8006428:	d130      	bne.n	800648c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	2200      	movs	r2, #0
 8006432:	2180      	movs	r1, #128	; 0x80
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fa4d 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e04d      	b.n	80064e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006448:	b29b      	uxth	r3, r3
 800644a:	2bff      	cmp	r3, #255	; 0xff
 800644c:	d90e      	bls.n	800646c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	22ff      	movs	r2, #255	; 0xff
 8006452:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006458:	b2da      	uxtb	r2, r3
 800645a:	8979      	ldrh	r1, [r7, #10]
 800645c:	2300      	movs	r3, #0
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fb57 	bl	8006b18 <I2C_TransferConfig>
 800646a:	e00f      	b.n	800648c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006470:	b29a      	uxth	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800647a:	b2da      	uxtb	r2, r3
 800647c:	8979      	ldrh	r1, [r7, #10]
 800647e:	2300      	movs	r3, #0
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 fb46 	bl	8006b18 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006490:	b29b      	uxth	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d19e      	bne.n	80063d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 fa9a 	bl	80069d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e01a      	b.n	80064e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2220      	movs	r2, #32
 80064b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6859      	ldr	r1, [r3, #4]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	4b0a      	ldr	r3, [pc, #40]	; (80064e8 <HAL_I2C_Mem_Write+0x224>)
 80064be:	400b      	ands	r3, r1
 80064c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064da:	2300      	movs	r3, #0
 80064dc:	e000      	b.n	80064e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80064de:	2302      	movs	r3, #2
  }
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	fe00e800 	.word	0xfe00e800

080064ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af02      	add	r7, sp, #8
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	4608      	mov	r0, r1
 80064f6:	4611      	mov	r1, r2
 80064f8:	461a      	mov	r2, r3
 80064fa:	4603      	mov	r3, r0
 80064fc:	817b      	strh	r3, [r7, #10]
 80064fe:	460b      	mov	r3, r1
 8006500:	813b      	strh	r3, [r7, #8]
 8006502:	4613      	mov	r3, r2
 8006504:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b20      	cmp	r3, #32
 8006510:	f040 80fd 	bne.w	800670e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_I2C_Mem_Read+0x34>
 800651a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800651c:	2b00      	cmp	r3, #0
 800651e:	d105      	bne.n	800652c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006526:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e0f1      	b.n	8006710 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_I2C_Mem_Read+0x4e>
 8006536:	2302      	movs	r3, #2
 8006538:	e0ea      	b.n	8006710 <HAL_I2C_Mem_Read+0x224>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006542:	f7fe f9c7 	bl	80048d4 <HAL_GetTick>
 8006546:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	2319      	movs	r3, #25
 800654e:	2201      	movs	r2, #1
 8006550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f9bd 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e0d5      	b.n	8006710 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2222      	movs	r2, #34	; 0x22
 8006568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2240      	movs	r2, #64	; 0x40
 8006570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a3a      	ldr	r2, [r7, #32]
 800657e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800658c:	88f8      	ldrh	r0, [r7, #6]
 800658e:	893a      	ldrh	r2, [r7, #8]
 8006590:	8979      	ldrh	r1, [r7, #10]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	4603      	mov	r3, r0
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f921 	bl	80067e4 <I2C_RequestMemoryRead>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0ad      	b.n	8006710 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2bff      	cmp	r3, #255	; 0xff
 80065bc:	d90e      	bls.n	80065dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	22ff      	movs	r2, #255	; 0xff
 80065c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	8979      	ldrh	r1, [r7, #10]
 80065cc:	4b52      	ldr	r3, [pc, #328]	; (8006718 <HAL_I2C_Mem_Read+0x22c>)
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 fa9f 	bl	8006b18 <I2C_TransferConfig>
 80065da:	e00f      	b.n	80065fc <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	b2da      	uxtb	r2, r3
 80065ec:	8979      	ldrh	r1, [r7, #10]
 80065ee:	4b4a      	ldr	r3, [pc, #296]	; (8006718 <HAL_I2C_Mem_Read+0x22c>)
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fa8e 	bl	8006b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	2200      	movs	r2, #0
 8006604:	2104      	movs	r1, #4
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f964 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e07c      	b.n	8006710 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	1c5a      	adds	r2, r3, #1
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006632:	3b01      	subs	r3, #1
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d034      	beq.n	80066bc <HAL_I2C_Mem_Read+0x1d0>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006656:	2b00      	cmp	r3, #0
 8006658:	d130      	bne.n	80066bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	2200      	movs	r2, #0
 8006662:	2180      	movs	r1, #128	; 0x80
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f935 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e04d      	b.n	8006710 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006678:	b29b      	uxth	r3, r3
 800667a:	2bff      	cmp	r3, #255	; 0xff
 800667c:	d90e      	bls.n	800669c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	22ff      	movs	r2, #255	; 0xff
 8006682:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006688:	b2da      	uxtb	r2, r3
 800668a:	8979      	ldrh	r1, [r7, #10]
 800668c:	2300      	movs	r3, #0
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fa3f 	bl	8006b18 <I2C_TransferConfig>
 800669a:	e00f      	b.n	80066bc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	8979      	ldrh	r1, [r7, #10]
 80066ae:	2300      	movs	r3, #0
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 fa2e 	bl	8006b18 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d19a      	bne.n	80065fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 f982 	bl	80069d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e01a      	b.n	8006710 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2220      	movs	r2, #32
 80066e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6859      	ldr	r1, [r3, #4]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <HAL_I2C_Mem_Read+0x230>)
 80066ee:	400b      	ands	r3, r1
 80066f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e000      	b.n	8006710 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800670e:	2302      	movs	r3, #2
  }
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	80002400 	.word	0x80002400
 800671c:	fe00e800 	.word	0xfe00e800

08006720 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800672e:	b2db      	uxtb	r3, r3
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4603      	mov	r3, r0
 800674c:	817b      	strh	r3, [r7, #10]
 800674e:	460b      	mov	r3, r1
 8006750:	813b      	strh	r3, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006756:	88fb      	ldrh	r3, [r7, #6]
 8006758:	b2da      	uxtb	r2, r3
 800675a:	8979      	ldrh	r1, [r7, #10]
 800675c:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <I2C_RequestMemoryWrite+0xa4>)
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f9d7 	bl	8006b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	69b9      	ldr	r1, [r7, #24]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f8f0 	bl	8006954 <I2C_WaitOnTXISFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e02c      	b.n	80067d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d105      	bne.n	8006790 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006784:	893b      	ldrh	r3, [r7, #8]
 8006786:	b2da      	uxtb	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	629a      	str	r2, [r3, #40]	; 0x28
 800678e:	e015      	b.n	80067bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006790:	893b      	ldrh	r3, [r7, #8]
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	b29b      	uxth	r3, r3
 8006796:	b2da      	uxtb	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	69b9      	ldr	r1, [r7, #24]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f8d6 	bl	8006954 <I2C_WaitOnTXISFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e012      	b.n	80067d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067b2:	893b      	ldrh	r3, [r7, #8]
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2180      	movs	r1, #128	; 0x80
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f884 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3710      	adds	r7, #16
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	80002000 	.word	0x80002000

080067e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af02      	add	r7, sp, #8
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	4608      	mov	r0, r1
 80067ee:	4611      	mov	r1, r2
 80067f0:	461a      	mov	r2, r3
 80067f2:	4603      	mov	r3, r0
 80067f4:	817b      	strh	r3, [r7, #10]
 80067f6:	460b      	mov	r3, r1
 80067f8:	813b      	strh	r3, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80067fe:	88fb      	ldrh	r3, [r7, #6]
 8006800:	b2da      	uxtb	r2, r3
 8006802:	8979      	ldrh	r1, [r7, #10]
 8006804:	4b20      	ldr	r3, [pc, #128]	; (8006888 <I2C_RequestMemoryRead+0xa4>)
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2300      	movs	r3, #0
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 f984 	bl	8006b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	69b9      	ldr	r1, [r7, #24]
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f000 f89d 	bl	8006954 <I2C_WaitOnTXISFlagUntilTimeout>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e02c      	b.n	800687e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006824:	88fb      	ldrh	r3, [r7, #6]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d105      	bne.n	8006836 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800682a:	893b      	ldrh	r3, [r7, #8]
 800682c:	b2da      	uxtb	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	629a      	str	r2, [r3, #40]	; 0x28
 8006834:	e015      	b.n	8006862 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006836:	893b      	ldrh	r3, [r7, #8]
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	b29b      	uxth	r3, r3
 800683c:	b2da      	uxtb	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	69b9      	ldr	r1, [r7, #24]
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f883 	bl	8006954 <I2C_WaitOnTXISFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e012      	b.n	800687e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006858:	893b      	ldrh	r3, [r7, #8]
 800685a:	b2da      	uxtb	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2200      	movs	r2, #0
 800686a:	2140      	movs	r1, #64	; 0x40
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f831 	bl	80068d4 <I2C_WaitOnFlagUntilTimeout>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d001      	beq.n	800687c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	80002000 	.word	0x80002000

0800688c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699b      	ldr	r3, [r3, #24]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d103      	bne.n	80068aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2200      	movs	r2, #0
 80068a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d007      	beq.n	80068c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	619a      	str	r2, [r3, #24]
  }
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	4613      	mov	r3, r2
 80068e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068e4:	e022      	b.n	800692c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d01e      	beq.n	800692c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ee:	f7fd fff1 	bl	80048d4 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d302      	bcc.n	8006904 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d113      	bne.n	800692c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	f043 0220 	orr.w	r2, r3, #32
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2220      	movs	r2, #32
 8006914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e00f      	b.n	800694c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4013      	ands	r3, r2
 8006936:	68ba      	ldr	r2, [r7, #8]
 8006938:	429a      	cmp	r2, r3
 800693a:	bf0c      	ite	eq
 800693c:	2301      	moveq	r3, #1
 800693e:	2300      	movne	r3, #0
 8006940:	b2db      	uxtb	r3, r3
 8006942:	461a      	mov	r2, r3
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	429a      	cmp	r2, r3
 8006948:	d0cd      	beq.n	80068e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006960:	e02c      	b.n	80069bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	68b9      	ldr	r1, [r7, #8]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f870 	bl	8006a4c <I2C_IsAcknowledgeFailed>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e02a      	b.n	80069cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d01e      	beq.n	80069bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697e:	f7fd ffa9 	bl	80048d4 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d113      	bne.n	80069bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006998:	f043 0220 	orr.w	r2, r3, #32
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e007      	b.n	80069cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d1cb      	bne.n	8006962 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069e0:	e028      	b.n	8006a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f830 	bl	8006a4c <I2C_IsAcknowledgeFailed>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e026      	b.n	8006a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fd ff6d 	bl	80048d4 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d113      	bne.n	8006a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a10:	f043 0220 	orr.w	r2, r3, #32
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e007      	b.n	8006a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	d1cf      	bne.n	80069e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	f003 0310 	and.w	r3, r3, #16
 8006a62:	2b10      	cmp	r3, #16
 8006a64:	d151      	bne.n	8006b0a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a66:	e022      	b.n	8006aae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d01e      	beq.n	8006aae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a70:	f7fd ff30 	bl	80048d4 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d302      	bcc.n	8006a86 <I2C_IsAcknowledgeFailed+0x3a>
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d113      	bne.n	8006aae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8a:	f043 0220 	orr.w	r2, r3, #32
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e02e      	b.n	8006b0c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d1d5      	bne.n	8006a68 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2210      	movs	r2, #16
 8006ac2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7ff fedd 	bl	800688c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6859      	ldr	r1, [r3, #4]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <I2C_IsAcknowledgeFailed+0xc8>)
 8006ade:	400b      	ands	r3, r1
 8006ae0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae6:	f043 0204 	orr.w	r2, r3, #4
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	fe00e800 	.word	0xfe00e800

08006b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	607b      	str	r3, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	817b      	strh	r3, [r7, #10]
 8006b26:	4613      	mov	r3, r2
 8006b28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	0d5b      	lsrs	r3, r3, #21
 8006b34:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b38:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <I2C_TransferConfig+0x58>)
 8006b3a:	430b      	orrs	r3, r1
 8006b3c:	43db      	mvns	r3, r3
 8006b3e:	ea02 0103 	and.w	r1, r2, r3
 8006b42:	897b      	ldrh	r3, [r7, #10]
 8006b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b48:	7a7b      	ldrb	r3, [r7, #9]
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	431a      	orrs	r2, r3
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	03ff63ff 	.word	0x03ff63ff

08006b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d138      	bne.n	8006bfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e032      	b.n	8006bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2224      	movs	r2, #36	; 0x24
 8006ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6819      	ldr	r1, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f042 0201 	orr.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e000      	b.n	8006bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bfc:	2302      	movs	r3, #2
  }
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
 8006c12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d139      	bne.n	8006c94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e033      	b.n	8006c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2224      	movs	r2, #36	; 0x24
 8006c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	021b      	lsls	r3, r3, #8
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e000      	b.n	8006c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c94:	2302      	movs	r3, #2
  }
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e0bf      	b.n	8006e36 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fb f99a 	bl	8002004 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006ce6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6999      	ldr	r1, [r3, #24]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006cfc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6899      	ldr	r1, [r3, #8]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	4b4a      	ldr	r3, [pc, #296]	; (8006e40 <HAL_LTDC_Init+0x19c>)
 8006d18:	400b      	ands	r3, r1
 8006d1a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	041b      	lsls	r3, r3, #16
 8006d22:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6899      	ldr	r1, [r3, #8]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699a      	ldr	r2, [r3, #24]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	431a      	orrs	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68d9      	ldr	r1, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	4b3e      	ldr	r3, [pc, #248]	; (8006e40 <HAL_LTDC_Init+0x19c>)
 8006d46:	400b      	ands	r3, r1
 8006d48:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	041b      	lsls	r3, r3, #16
 8006d50:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68d9      	ldr	r1, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a1a      	ldr	r2, [r3, #32]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	6919      	ldr	r1, [r3, #16]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b33      	ldr	r3, [pc, #204]	; (8006e40 <HAL_LTDC_Init+0x19c>)
 8006d74:	400b      	ands	r3, r1
 8006d76:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	041b      	lsls	r3, r3, #16
 8006d7e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6919      	ldr	r1, [r3, #16]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6959      	ldr	r1, [r3, #20]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	4b27      	ldr	r3, [pc, #156]	; (8006e40 <HAL_LTDC_Init+0x19c>)
 8006da2:	400b      	ands	r3, r1
 8006da4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	041b      	lsls	r3, r3, #16
 8006dac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	6959      	ldr	r1, [r3, #20]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dca:	021b      	lsls	r3, r3, #8
 8006dcc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006dd4:	041b      	lsls	r3, r3, #16
 8006dd6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0206 	orr.w	r2, r2, #6
 8006e12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	f000f800 	.word	0xf000f800

08006e44 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d023      	beq.n	8006eae <HAL_LTDC_IRQHandler+0x6a>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01e      	beq.n	8006eae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0204 	bic.w	r2, r2, #4
 8006e7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2204      	movs	r2, #4
 8006e86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e8e:	f043 0201 	orr.w	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f86f 	bl	8006f8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d023      	beq.n	8006f00 <HAL_LTDC_IRQHandler+0xbc>
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d01e      	beq.n	8006f00 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0202 	bic.w	r2, r2, #2
 8006ed0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ee0:	f043 0202 	orr.w	r2, r3, #2
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2204      	movs	r2, #4
 8006eee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f846 	bl	8006f8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01b      	beq.n	8006f42 <HAL_LTDC_IRQHandler+0xfe>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d016      	beq.n	8006f42 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0201 	bic.w	r2, r2, #1
 8006f22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f82f 	bl	8006fa0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f003 0308 	and.w	r3, r3, #8
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01b      	beq.n	8006f84 <HAL_LTDC_IRQHandler+0x140>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d016      	beq.n	8006f84 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0208 	bic.w	r2, r2, #8
 8006f64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2208      	movs	r2, #8
 8006f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f818 	bl	8006fb4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006fc8:	b5b0      	push	{r4, r5, r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <HAL_LTDC_ConfigLayer+0x1a>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e02c      	b.n	800703c <HAL_LTDC_ConfigLayer+0x74>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2202      	movs	r2, #2
 8006fee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2134      	movs	r1, #52	; 0x34
 8006ff8:	fb01 f303 	mul.w	r3, r1, r3
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4614      	mov	r4, r2
 8007006:	461d      	mov	r5, r3
 8007008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800700a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800700c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800700e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007014:	682b      	ldr	r3, [r5, #0]
 8007016:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f81f 	bl	8007060 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2201      	movs	r2, #1
 8007028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bdb0      	pop	{r4, r5, r7, pc}

08007044 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007052:	b2db      	uxtb	r3, r3
}
 8007054:	4618      	mov	r0, r3
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007060:	b480      	push	{r7}
 8007062:	b089      	sub	sp, #36	; 0x24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	0c1b      	lsrs	r3, r3, #16
 8007078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800707c:	4413      	add	r3, r2
 800707e:	041b      	lsls	r3, r3, #16
 8007080:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	01db      	lsls	r3, r3, #7
 800708c:	4413      	add	r3, r2
 800708e:	3384      	adds	r3, #132	; 0x84
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	4611      	mov	r1, r2
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	01d2      	lsls	r2, r2, #7
 800709c:	440a      	add	r2, r1
 800709e:	3284      	adds	r2, #132	; 0x84
 80070a0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80070a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	0c1b      	lsrs	r3, r3, #16
 80070b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070b6:	4413      	add	r3, r2
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4619      	mov	r1, r3
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	01db      	lsls	r3, r3, #7
 80070c4:	440b      	add	r3, r1
 80070c6:	3384      	adds	r3, #132	; 0x84
 80070c8:	4619      	mov	r1, r3
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070de:	4413      	add	r3, r2
 80070e0:	041b      	lsls	r3, r3, #16
 80070e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	01db      	lsls	r3, r3, #7
 80070ee:	4413      	add	r3, r2
 80070f0:	3384      	adds	r3, #132	; 0x84
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	4611      	mov	r1, r2
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	01d2      	lsls	r2, r2, #7
 80070fe:	440a      	add	r2, r1
 8007100:	3284      	adds	r2, #132	; 0x84
 8007102:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007106:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007116:	4413      	add	r3, r2
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4619      	mov	r1, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	01db      	lsls	r3, r3, #7
 8007124:	440b      	add	r3, r1
 8007126:	3384      	adds	r3, #132	; 0x84
 8007128:	4619      	mov	r1, r3
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	4313      	orrs	r3, r2
 800712e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	01db      	lsls	r3, r3, #7
 800713a:	4413      	add	r3, r2
 800713c:	3384      	adds	r3, #132	; 0x84
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	6812      	ldr	r2, [r2, #0]
 8007144:	4611      	mov	r1, r2
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	01d2      	lsls	r2, r2, #7
 800714a:	440a      	add	r2, r1
 800714c:	3284      	adds	r2, #132	; 0x84
 800714e:	f023 0307 	bic.w	r3, r3, #7
 8007152:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	461a      	mov	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	01db      	lsls	r3, r3, #7
 800715e:	4413      	add	r3, r2
 8007160:	3384      	adds	r3, #132	; 0x84
 8007162:	461a      	mov	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007170:	021b      	lsls	r3, r3, #8
 8007172:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800717a:	041b      	lsls	r3, r3, #16
 800717c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	061b      	lsls	r3, r3, #24
 8007184:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	01db      	lsls	r3, r3, #7
 8007190:	4413      	add	r3, r2
 8007192:	3384      	adds	r3, #132	; 0x84
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	01db      	lsls	r3, r3, #7
 80071a0:	4413      	add	r3, r2
 80071a2:	3384      	adds	r3, #132	; 0x84
 80071a4:	461a      	mov	r2, r3
 80071a6:	2300      	movs	r3, #0
 80071a8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071b0:	461a      	mov	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	431a      	orrs	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4619      	mov	r1, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	01db      	lsls	r3, r3, #7
 80071c4:	440b      	add	r3, r1
 80071c6:	3384      	adds	r3, #132	; 0x84
 80071c8:	4619      	mov	r1, r3
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	01db      	lsls	r3, r3, #7
 80071da:	4413      	add	r3, r2
 80071dc:	3384      	adds	r3, #132	; 0x84
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	4611      	mov	r1, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	01d2      	lsls	r2, r2, #7
 80071ea:	440a      	add	r2, r1
 80071ec:	3284      	adds	r2, #132	; 0x84
 80071ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	01db      	lsls	r3, r3, #7
 80071fe:	4413      	add	r3, r2
 8007200:	3384      	adds	r3, #132	; 0x84
 8007202:	461a      	mov	r2, r3
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	01db      	lsls	r3, r3, #7
 8007214:	4413      	add	r3, r2
 8007216:	3384      	adds	r3, #132	; 0x84
 8007218:	69da      	ldr	r2, [r3, #28]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4619      	mov	r1, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	01db      	lsls	r3, r3, #7
 8007224:	440b      	add	r3, r1
 8007226:	3384      	adds	r3, #132	; 0x84
 8007228:	4619      	mov	r1, r3
 800722a:	4b58      	ldr	r3, [pc, #352]	; (800738c <LTDC_SetConfig+0x32c>)
 800722c:	4013      	ands	r3, r2
 800722e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	68f9      	ldr	r1, [r7, #12]
 800723a:	6809      	ldr	r1, [r1, #0]
 800723c:	4608      	mov	r0, r1
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	01c9      	lsls	r1, r1, #7
 8007242:	4401      	add	r1, r0
 8007244:	3184      	adds	r1, #132	; 0x84
 8007246:	4313      	orrs	r3, r2
 8007248:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	01db      	lsls	r3, r3, #7
 8007254:	4413      	add	r3, r2
 8007256:	3384      	adds	r3, #132	; 0x84
 8007258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	01db      	lsls	r3, r3, #7
 8007264:	4413      	add	r3, r2
 8007266:	3384      	adds	r3, #132	; 0x84
 8007268:	461a      	mov	r2, r3
 800726a:	2300      	movs	r3, #0
 800726c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	01db      	lsls	r3, r3, #7
 8007278:	4413      	add	r3, r2
 800727a:	3384      	adds	r3, #132	; 0x84
 800727c:	461a      	mov	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800728c:	2304      	movs	r3, #4
 800728e:	61fb      	str	r3, [r7, #28]
 8007290:	e01b      	b.n	80072ca <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d102      	bne.n	80072a0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800729a:	2303      	movs	r3, #3
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	e014      	b.n	80072ca <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d00b      	beq.n	80072c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d007      	beq.n	80072c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d003      	beq.n	80072c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80072bc:	2b07      	cmp	r3, #7
 80072be:	d102      	bne.n	80072c6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80072c0:	2302      	movs	r3, #2
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	e001      	b.n	80072ca <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80072c6:	2301      	movs	r3, #1
 80072c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	01db      	lsls	r3, r3, #7
 80072d4:	4413      	add	r3, r2
 80072d6:	3384      	adds	r3, #132	; 0x84
 80072d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	4611      	mov	r1, r2
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	01d2      	lsls	r2, r2, #7
 80072e4:	440a      	add	r2, r1
 80072e6:	3284      	adds	r2, #132	; 0x84
 80072e8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80072ec:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	fb02 f303 	mul.w	r3, r2, r3
 80072f8:	041a      	lsls	r2, r3, #16
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6859      	ldr	r1, [r3, #4]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	1acb      	subs	r3, r1, r3
 8007304:	69f9      	ldr	r1, [r7, #28]
 8007306:	fb01 f303 	mul.w	r3, r1, r3
 800730a:	3303      	adds	r3, #3
 800730c:	68f9      	ldr	r1, [r7, #12]
 800730e:	6809      	ldr	r1, [r1, #0]
 8007310:	4608      	mov	r0, r1
 8007312:	6879      	ldr	r1, [r7, #4]
 8007314:	01c9      	lsls	r1, r1, #7
 8007316:	4401      	add	r1, r0
 8007318:	3184      	adds	r1, #132	; 0x84
 800731a:	4313      	orrs	r3, r2
 800731c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	01db      	lsls	r3, r3, #7
 8007328:	4413      	add	r3, r2
 800732a:	3384      	adds	r3, #132	; 0x84
 800732c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4619      	mov	r1, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	01db      	lsls	r3, r3, #7
 8007338:	440b      	add	r3, r1
 800733a:	3384      	adds	r3, #132	; 0x84
 800733c:	4619      	mov	r1, r3
 800733e:	4b14      	ldr	r3, [pc, #80]	; (8007390 <LTDC_SetConfig+0x330>)
 8007340:	4013      	ands	r3, r2
 8007342:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	01db      	lsls	r3, r3, #7
 800734e:	4413      	add	r3, r2
 8007350:	3384      	adds	r3, #132	; 0x84
 8007352:	461a      	mov	r2, r3
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	01db      	lsls	r3, r3, #7
 8007364:	4413      	add	r3, r2
 8007366:	3384      	adds	r3, #132	; 0x84
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	4611      	mov	r1, r2
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	01d2      	lsls	r2, r2, #7
 8007374:	440a      	add	r2, r1
 8007376:	3284      	adds	r2, #132	; 0x84
 8007378:	f043 0301 	orr.w	r3, r3, #1
 800737c:	6013      	str	r3, [r2, #0]
}
 800737e:	bf00      	nop
 8007380:	3724      	adds	r7, #36	; 0x24
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	fffff8f8 	.word	0xfffff8f8
 8007390:	fffff800 	.word	0xfffff800

08007394 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a04      	ldr	r2, [pc, #16]	; (80073b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800739e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073a2:	6013      	str	r3, [r2, #0]
}
 80073a4:	bf00      	nop
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	40007000 	.word	0x40007000

080073b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80073be:	4b23      	ldr	r3, [pc, #140]	; (800744c <HAL_PWREx_EnableOverDrive+0x98>)
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	4a22      	ldr	r2, [pc, #136]	; (800744c <HAL_PWREx_EnableOverDrive+0x98>)
 80073c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073c8:	6413      	str	r3, [r2, #64]	; 0x40
 80073ca:	4b20      	ldr	r3, [pc, #128]	; (800744c <HAL_PWREx_EnableOverDrive+0x98>)
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80073d6:	4b1e      	ldr	r3, [pc, #120]	; (8007450 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1d      	ldr	r2, [pc, #116]	; (8007450 <HAL_PWREx_EnableOverDrive+0x9c>)
 80073dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80073e2:	f7fd fa77 	bl	80048d4 <HAL_GetTick>
 80073e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80073e8:	e009      	b.n	80073fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80073ea:	f7fd fa73 	bl	80048d4 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073f8:	d901      	bls.n	80073fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e022      	b.n	8007444 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740a:	d1ee      	bne.n	80073ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800740c:	4b10      	ldr	r3, [pc, #64]	; (8007450 <HAL_PWREx_EnableOverDrive+0x9c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a0f      	ldr	r2, [pc, #60]	; (8007450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007416:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007418:	f7fd fa5c 	bl	80048d4 <HAL_GetTick>
 800741c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800741e:	e009      	b.n	8007434 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007420:	f7fd fa58 	bl	80048d4 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800742e:	d901      	bls.n	8007434 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e007      	b.n	8007444 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007434:	4b06      	ldr	r3, [pc, #24]	; (8007450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800743c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007440:	d1ee      	bne.n	8007420 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	40023800 	.word	0x40023800
 8007450:	40007000 	.word	0x40007000

08007454 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af02      	add	r7, sp, #8
 800745a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800745c:	f7fd fa3a 	bl	80048d4 <HAL_GetTick>
 8007460:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e067      	b.n	800753c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10b      	bne.n	8007490 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fa fe87 	bl	8002194 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007486:	f241 3188 	movw	r1, #5000	; 0x1388
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f85e 	bl	800754c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	3b01      	subs	r3, #1
 80074a0:	021a      	lsls	r2, r3, #8
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	2120      	movs	r1, #32
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f856 	bl	8007568 <QSPI_WaitFlagStateUntilTimeout>
 80074bc:	4603      	mov	r3, r0
 80074be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d135      	bne.n	8007532 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	4b1d      	ldr	r3, [pc, #116]	; (8007544 <HAL_QSPI_Init+0xf0>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	6852      	ldr	r2, [r2, #4]
 80074d4:	0611      	lsls	r1, r2, #24
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	68d2      	ldr	r2, [r2, #12]
 80074da:	4311      	orrs	r1, r2
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	69d2      	ldr	r2, [r2, #28]
 80074e0:	4311      	orrs	r1, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6a12      	ldr	r2, [r2, #32]
 80074e6:	4311      	orrs	r1, r2
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6812      	ldr	r2, [r2, #0]
 80074ec:	430b      	orrs	r3, r1
 80074ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	4b14      	ldr	r3, [pc, #80]	; (8007548 <HAL_QSPI_Init+0xf4>)
 80074f8:	4013      	ands	r3, r2
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	6912      	ldr	r2, [r2, #16]
 80074fe:	0411      	lsls	r1, r2, #16
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6952      	ldr	r2, [r2, #20]
 8007504:	4311      	orrs	r1, r2
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	6992      	ldr	r2, [r2, #24]
 800750a:	4311      	orrs	r1, r2
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6812      	ldr	r2, [r2, #0]
 8007510:	430b      	orrs	r3, r1
 8007512:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0201 	orr.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800753a:	7afb      	ldrb	r3, [r7, #11]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	00ffff2f 	.word	0x00ffff2f
 8007548:	ffe0f8fe 	.word	0xffe0f8fe

0800754c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	683a      	ldr	r2, [r7, #0]
 800755a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	4613      	mov	r3, r2
 8007576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007578:	e01a      	b.n	80075b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007580:	d016      	beq.n	80075b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007582:	f7fd f9a7 	bl	80048d4 <HAL_GetTick>
 8007586:	4602      	mov	r2, r0
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	1ad3      	subs	r3, r2, r3
 800758c:	69ba      	ldr	r2, [r7, #24]
 800758e:	429a      	cmp	r2, r3
 8007590:	d302      	bcc.n	8007598 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10b      	bne.n	80075b0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2204      	movs	r2, #4
 800759c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a4:	f043 0201 	orr.w	r2, r3, #1
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e00e      	b.n	80075ce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4013      	ands	r3, r2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	bf14      	ite	ne
 80075be:	2301      	movne	r3, #1
 80075c0:	2300      	moveq	r3, #0
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d1d6      	bne.n	800757a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
	...

080075d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80075e0:	2300      	movs	r3, #0
 80075e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e291      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8087 	beq.w	800770a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80075fc:	4b96      	ldr	r3, [pc, #600]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 030c 	and.w	r3, r3, #12
 8007604:	2b04      	cmp	r3, #4
 8007606:	d00c      	beq.n	8007622 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007608:	4b93      	ldr	r3, [pc, #588]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f003 030c 	and.w	r3, r3, #12
 8007610:	2b08      	cmp	r3, #8
 8007612:	d112      	bne.n	800763a <HAL_RCC_OscConfig+0x62>
 8007614:	4b90      	ldr	r3, [pc, #576]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800761c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007620:	d10b      	bne.n	800763a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007622:	4b8d      	ldr	r3, [pc, #564]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d06c      	beq.n	8007708 <HAL_RCC_OscConfig+0x130>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d168      	bne.n	8007708 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e26b      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007642:	d106      	bne.n	8007652 <HAL_RCC_OscConfig+0x7a>
 8007644:	4b84      	ldr	r3, [pc, #528]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a83      	ldr	r2, [pc, #524]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 800764a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	e02e      	b.n	80076b0 <HAL_RCC_OscConfig+0xd8>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10c      	bne.n	8007674 <HAL_RCC_OscConfig+0x9c>
 800765a:	4b7f      	ldr	r3, [pc, #508]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a7e      	ldr	r2, [pc, #504]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	4b7c      	ldr	r3, [pc, #496]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a7b      	ldr	r2, [pc, #492]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 800766c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	e01d      	b.n	80076b0 <HAL_RCC_OscConfig+0xd8>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800767c:	d10c      	bne.n	8007698 <HAL_RCC_OscConfig+0xc0>
 800767e:	4b76      	ldr	r3, [pc, #472]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a75      	ldr	r2, [pc, #468]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007688:	6013      	str	r3, [r2, #0]
 800768a:	4b73      	ldr	r3, [pc, #460]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a72      	ldr	r2, [pc, #456]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	e00b      	b.n	80076b0 <HAL_RCC_OscConfig+0xd8>
 8007698:	4b6f      	ldr	r3, [pc, #444]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a6e      	ldr	r2, [pc, #440]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 800769e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	4b6c      	ldr	r3, [pc, #432]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a6b      	ldr	r2, [pc, #428]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 80076aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d013      	beq.n	80076e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b8:	f7fd f90c 	bl	80048d4 <HAL_GetTick>
 80076bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076be:	e008      	b.n	80076d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076c0:	f7fd f908 	bl	80048d4 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b64      	cmp	r3, #100	; 0x64
 80076cc:	d901      	bls.n	80076d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e21f      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076d2:	4b61      	ldr	r3, [pc, #388]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0f0      	beq.n	80076c0 <HAL_RCC_OscConfig+0xe8>
 80076de:	e014      	b.n	800770a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e0:	f7fd f8f8 	bl	80048d4 <HAL_GetTick>
 80076e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076e6:	e008      	b.n	80076fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076e8:	f7fd f8f4 	bl	80048d4 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b64      	cmp	r3, #100	; 0x64
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e20b      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076fa:	4b57      	ldr	r3, [pc, #348]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1f0      	bne.n	80076e8 <HAL_RCC_OscConfig+0x110>
 8007706:	e000      	b.n	800770a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d069      	beq.n	80077ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007716:	4b50      	ldr	r3, [pc, #320]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f003 030c 	and.w	r3, r3, #12
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007722:	4b4d      	ldr	r3, [pc, #308]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 030c 	and.w	r3, r3, #12
 800772a:	2b08      	cmp	r3, #8
 800772c:	d11c      	bne.n	8007768 <HAL_RCC_OscConfig+0x190>
 800772e:	4b4a      	ldr	r3, [pc, #296]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d116      	bne.n	8007768 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800773a:	4b47      	ldr	r3, [pc, #284]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <HAL_RCC_OscConfig+0x17a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d001      	beq.n	8007752 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e1df      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007752:	4b41      	ldr	r3, [pc, #260]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	493d      	ldr	r1, [pc, #244]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007762:	4313      	orrs	r3, r2
 8007764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007766:	e040      	b.n	80077ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d023      	beq.n	80077b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007770:	4b39      	ldr	r3, [pc, #228]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a38      	ldr	r2, [pc, #224]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007776:	f043 0301 	orr.w	r3, r3, #1
 800777a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777c:	f7fd f8aa 	bl	80048d4 <HAL_GetTick>
 8007780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007784:	f7fd f8a6 	bl	80048d4 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b02      	cmp	r3, #2
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e1bd      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007796:	4b30      	ldr	r3, [pc, #192]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d0f0      	beq.n	8007784 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077a2:	4b2d      	ldr	r3, [pc, #180]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	4929      	ldr	r1, [pc, #164]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	600b      	str	r3, [r1, #0]
 80077b6:	e018      	b.n	80077ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077b8:	4b27      	ldr	r3, [pc, #156]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a26      	ldr	r2, [pc, #152]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c4:	f7fd f886 	bl	80048d4 <HAL_GetTick>
 80077c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077ca:	e008      	b.n	80077de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077cc:	f7fd f882 	bl	80048d4 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e199      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077de:	4b1e      	ldr	r3, [pc, #120]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1f0      	bne.n	80077cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0308 	and.w	r3, r3, #8
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d038      	beq.n	8007868 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d019      	beq.n	8007832 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077fe:	4b16      	ldr	r3, [pc, #88]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007802:	4a15      	ldr	r2, [pc, #84]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007804:	f043 0301 	orr.w	r3, r3, #1
 8007808:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800780a:	f7fd f863 	bl	80048d4 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007810:	e008      	b.n	8007824 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007812:	f7fd f85f 	bl	80048d4 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d901      	bls.n	8007824 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e176      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007824:	4b0c      	ldr	r3, [pc, #48]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0f0      	beq.n	8007812 <HAL_RCC_OscConfig+0x23a>
 8007830:	e01a      	b.n	8007868 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007832:	4b09      	ldr	r3, [pc, #36]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007836:	4a08      	ldr	r2, [pc, #32]	; (8007858 <HAL_RCC_OscConfig+0x280>)
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800783e:	f7fd f849 	bl	80048d4 <HAL_GetTick>
 8007842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007844:	e00a      	b.n	800785c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007846:	f7fd f845 	bl	80048d4 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b02      	cmp	r3, #2
 8007852:	d903      	bls.n	800785c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e15c      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
 8007858:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800785c:	4b91      	ldr	r3, [pc, #580]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 800785e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1ee      	bne.n	8007846 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80a4 	beq.w	80079be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007876:	4b8b      	ldr	r3, [pc, #556]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10d      	bne.n	800789e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007882:	4b88      	ldr	r3, [pc, #544]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	4a87      	ldr	r2, [pc, #540]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800788c:	6413      	str	r3, [r2, #64]	; 0x40
 800788e:	4b85      	ldr	r3, [pc, #532]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007896:	60bb      	str	r3, [r7, #8]
 8007898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800789a:	2301      	movs	r3, #1
 800789c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800789e:	4b82      	ldr	r3, [pc, #520]	; (8007aa8 <HAL_RCC_OscConfig+0x4d0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d118      	bne.n	80078dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80078aa:	4b7f      	ldr	r3, [pc, #508]	; (8007aa8 <HAL_RCC_OscConfig+0x4d0>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a7e      	ldr	r2, [pc, #504]	; (8007aa8 <HAL_RCC_OscConfig+0x4d0>)
 80078b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078b6:	f7fd f80d 	bl	80048d4 <HAL_GetTick>
 80078ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078bc:	e008      	b.n	80078d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078be:	f7fd f809 	bl	80048d4 <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	2b64      	cmp	r3, #100	; 0x64
 80078ca:	d901      	bls.n	80078d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e120      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078d0:	4b75      	ldr	r3, [pc, #468]	; (8007aa8 <HAL_RCC_OscConfig+0x4d0>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d0f0      	beq.n	80078be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d106      	bne.n	80078f2 <HAL_RCC_OscConfig+0x31a>
 80078e4:	4b6f      	ldr	r3, [pc, #444]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 80078e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e8:	4a6e      	ldr	r2, [pc, #440]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	6713      	str	r3, [r2, #112]	; 0x70
 80078f0:	e02d      	b.n	800794e <HAL_RCC_OscConfig+0x376>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10c      	bne.n	8007914 <HAL_RCC_OscConfig+0x33c>
 80078fa:	4b6a      	ldr	r3, [pc, #424]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 80078fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fe:	4a69      	ldr	r2, [pc, #420]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007900:	f023 0301 	bic.w	r3, r3, #1
 8007904:	6713      	str	r3, [r2, #112]	; 0x70
 8007906:	4b67      	ldr	r3, [pc, #412]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790a:	4a66      	ldr	r2, [pc, #408]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 800790c:	f023 0304 	bic.w	r3, r3, #4
 8007910:	6713      	str	r3, [r2, #112]	; 0x70
 8007912:	e01c      	b.n	800794e <HAL_RCC_OscConfig+0x376>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	2b05      	cmp	r3, #5
 800791a:	d10c      	bne.n	8007936 <HAL_RCC_OscConfig+0x35e>
 800791c:	4b61      	ldr	r3, [pc, #388]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 800791e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007920:	4a60      	ldr	r2, [pc, #384]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007922:	f043 0304 	orr.w	r3, r3, #4
 8007926:	6713      	str	r3, [r2, #112]	; 0x70
 8007928:	4b5e      	ldr	r3, [pc, #376]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 800792a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792c:	4a5d      	ldr	r2, [pc, #372]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 800792e:	f043 0301 	orr.w	r3, r3, #1
 8007932:	6713      	str	r3, [r2, #112]	; 0x70
 8007934:	e00b      	b.n	800794e <HAL_RCC_OscConfig+0x376>
 8007936:	4b5b      	ldr	r3, [pc, #364]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793a:	4a5a      	ldr	r2, [pc, #360]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 800793c:	f023 0301 	bic.w	r3, r3, #1
 8007940:	6713      	str	r3, [r2, #112]	; 0x70
 8007942:	4b58      	ldr	r3, [pc, #352]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007946:	4a57      	ldr	r2, [pc, #348]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007948:	f023 0304 	bic.w	r3, r3, #4
 800794c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d015      	beq.n	8007982 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007956:	f7fc ffbd 	bl	80048d4 <HAL_GetTick>
 800795a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800795c:	e00a      	b.n	8007974 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800795e:	f7fc ffb9 	bl	80048d4 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	f241 3288 	movw	r2, #5000	; 0x1388
 800796c:	4293      	cmp	r3, r2
 800796e:	d901      	bls.n	8007974 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e0ce      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007974:	4b4b      	ldr	r3, [pc, #300]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0ee      	beq.n	800795e <HAL_RCC_OscConfig+0x386>
 8007980:	e014      	b.n	80079ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007982:	f7fc ffa7 	bl	80048d4 <HAL_GetTick>
 8007986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007988:	e00a      	b.n	80079a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800798a:	f7fc ffa3 	bl	80048d4 <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	f241 3288 	movw	r2, #5000	; 0x1388
 8007998:	4293      	cmp	r3, r2
 800799a:	d901      	bls.n	80079a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e0b8      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079a0:	4b40      	ldr	r3, [pc, #256]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 80079a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1ee      	bne.n	800798a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d105      	bne.n	80079be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079b2:	4b3c      	ldr	r3, [pc, #240]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	4a3b      	ldr	r2, [pc, #236]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 80079b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 80a4 	beq.w	8007b10 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079c8:	4b36      	ldr	r3, [pc, #216]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 030c 	and.w	r3, r3, #12
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d06b      	beq.n	8007aac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d149      	bne.n	8007a70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079dc:	4b31      	ldr	r3, [pc, #196]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a30      	ldr	r2, [pc, #192]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 80079e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e8:	f7fc ff74 	bl	80048d4 <HAL_GetTick>
 80079ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ee:	e008      	b.n	8007a02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079f0:	f7fc ff70 	bl	80048d4 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e087      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a02:	4b28      	ldr	r3, [pc, #160]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1f0      	bne.n	80079f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69da      	ldr	r2, [r3, #28]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	019b      	lsls	r3, r3, #6
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	085b      	lsrs	r3, r3, #1
 8007a26:	3b01      	subs	r3, #1
 8007a28:	041b      	lsls	r3, r3, #16
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	061b      	lsls	r3, r3, #24
 8007a32:	4313      	orrs	r3, r2
 8007a34:	4a1b      	ldr	r2, [pc, #108]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007a36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a3c:	4b19      	ldr	r3, [pc, #100]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a18      	ldr	r2, [pc, #96]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a48:	f7fc ff44 	bl	80048d4 <HAL_GetTick>
 8007a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a50:	f7fc ff40 	bl	80048d4 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e057      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a62:	4b10      	ldr	r3, [pc, #64]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0f0      	beq.n	8007a50 <HAL_RCC_OscConfig+0x478>
 8007a6e:	e04f      	b.n	8007b10 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a70:	4b0c      	ldr	r3, [pc, #48]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a0b      	ldr	r2, [pc, #44]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7c:	f7fc ff2a 	bl	80048d4 <HAL_GetTick>
 8007a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a82:	e008      	b.n	8007a96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a84:	f7fc ff26 	bl	80048d4 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e03d      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a96:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <HAL_RCC_OscConfig+0x4cc>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1f0      	bne.n	8007a84 <HAL_RCC_OscConfig+0x4ac>
 8007aa2:	e035      	b.n	8007b10 <HAL_RCC_OscConfig+0x538>
 8007aa4:	40023800 	.word	0x40023800
 8007aa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007aac:	4b1b      	ldr	r3, [pc, #108]	; (8007b1c <HAL_RCC_OscConfig+0x544>)
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d028      	beq.n	8007b0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d121      	bne.n	8007b0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d11a      	bne.n	8007b0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007adc:	4013      	ands	r3, r2
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ae2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d111      	bne.n	8007b0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	3b01      	subs	r3, #1
 8007af6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d107      	bne.n	8007b0c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d001      	beq.n	8007b10 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	40023800 	.word	0x40023800

08007b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e0d0      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b38:	4b6a      	ldr	r3, [pc, #424]	; (8007ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 030f 	and.w	r3, r3, #15
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d910      	bls.n	8007b68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b46:	4b67      	ldr	r3, [pc, #412]	; (8007ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f023 020f 	bic.w	r2, r3, #15
 8007b4e:	4965      	ldr	r1, [pc, #404]	; (8007ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b56:	4b63      	ldr	r3, [pc, #396]	; (8007ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d001      	beq.n	8007b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e0b8      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d020      	beq.n	8007bb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0304 	and.w	r3, r3, #4
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d005      	beq.n	8007b8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b80:	4b59      	ldr	r3, [pc, #356]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	4a58      	ldr	r2, [pc, #352]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0308 	and.w	r3, r3, #8
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b98:	4b53      	ldr	r3, [pc, #332]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	4a52      	ldr	r2, [pc, #328]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ba2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ba4:	4b50      	ldr	r3, [pc, #320]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	494d      	ldr	r1, [pc, #308]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d040      	beq.n	8007c44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d107      	bne.n	8007bda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bca:	4b47      	ldr	r3, [pc, #284]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d115      	bne.n	8007c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e07f      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d107      	bne.n	8007bf2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007be2:	4b41      	ldr	r3, [pc, #260]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e073      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bf2:	4b3d      	ldr	r3, [pc, #244]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e06b      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c02:	4b39      	ldr	r3, [pc, #228]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f023 0203 	bic.w	r2, r3, #3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	4936      	ldr	r1, [pc, #216]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c14:	f7fc fe5e 	bl	80048d4 <HAL_GetTick>
 8007c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c1a:	e00a      	b.n	8007c32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c1c:	f7fc fe5a 	bl	80048d4 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e053      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c32:	4b2d      	ldr	r3, [pc, #180]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f003 020c 	and.w	r2, r3, #12
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d1eb      	bne.n	8007c1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c44:	4b27      	ldr	r3, [pc, #156]	; (8007ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 030f 	and.w	r3, r3, #15
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d210      	bcs.n	8007c74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c52:	4b24      	ldr	r3, [pc, #144]	; (8007ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f023 020f 	bic.w	r2, r3, #15
 8007c5a:	4922      	ldr	r1, [pc, #136]	; (8007ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c62:	4b20      	ldr	r3, [pc, #128]	; (8007ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 030f 	and.w	r3, r3, #15
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d001      	beq.n	8007c74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e032      	b.n	8007cda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d008      	beq.n	8007c92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c80:	4b19      	ldr	r3, [pc, #100]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	4916      	ldr	r1, [pc, #88]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0308 	and.w	r3, r3, #8
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d009      	beq.n	8007cb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c9e:	4b12      	ldr	r3, [pc, #72]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	490e      	ldr	r1, [pc, #56]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cb2:	f000 f821 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	4b0b      	ldr	r3, [pc, #44]	; (8007ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	091b      	lsrs	r3, r3, #4
 8007cbe:	f003 030f 	and.w	r3, r3, #15
 8007cc2:	4a0a      	ldr	r2, [pc, #40]	; (8007cec <HAL_RCC_ClockConfig+0x1cc>)
 8007cc4:	5cd3      	ldrb	r3, [r2, r3]
 8007cc6:	fa21 f303 	lsr.w	r3, r1, r3
 8007cca:	4a09      	ldr	r2, [pc, #36]	; (8007cf0 <HAL_RCC_ClockConfig+0x1d0>)
 8007ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007cce:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <HAL_RCC_ClockConfig+0x1d4>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fa ff02 	bl	8002adc <HAL_InitTick>

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	40023c00 	.word	0x40023c00
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	0800d7d4 	.word	0x0800d7d4
 8007cf0:	20000000 	.word	0x20000000
 8007cf4:	20000040 	.word	0x20000040

08007cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	607b      	str	r3, [r7, #4]
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	2300      	movs	r3, #0
 8007d08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d0e:	4b50      	ldr	r3, [pc, #320]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f003 030c 	and.w	r3, r3, #12
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d007      	beq.n	8007d2a <HAL_RCC_GetSysClockFreq+0x32>
 8007d1a:	2b08      	cmp	r3, #8
 8007d1c:	d008      	beq.n	8007d30 <HAL_RCC_GetSysClockFreq+0x38>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f040 808d 	bne.w	8007e3e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d24:	4b4b      	ldr	r3, [pc, #300]	; (8007e54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007d26:	60bb      	str	r3, [r7, #8]
      break;
 8007d28:	e08c      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d2a:	4b4b      	ldr	r3, [pc, #300]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d2c:	60bb      	str	r3, [r7, #8]
      break;
 8007d2e:	e089      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d30:	4b47      	ldr	r3, [pc, #284]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d38:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007d3a:	4b45      	ldr	r3, [pc, #276]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d023      	beq.n	8007d8e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d46:	4b42      	ldr	r3, [pc, #264]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	099b      	lsrs	r3, r3, #6
 8007d4c:	f04f 0400 	mov.w	r4, #0
 8007d50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007d54:	f04f 0200 	mov.w	r2, #0
 8007d58:	ea03 0501 	and.w	r5, r3, r1
 8007d5c:	ea04 0602 	and.w	r6, r4, r2
 8007d60:	4a3d      	ldr	r2, [pc, #244]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d62:	fb02 f106 	mul.w	r1, r2, r6
 8007d66:	2200      	movs	r2, #0
 8007d68:	fb02 f205 	mul.w	r2, r2, r5
 8007d6c:	440a      	add	r2, r1
 8007d6e:	493a      	ldr	r1, [pc, #232]	; (8007e58 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d70:	fba5 0101 	umull	r0, r1, r5, r1
 8007d74:	1853      	adds	r3, r2, r1
 8007d76:	4619      	mov	r1, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f04f 0400 	mov.w	r4, #0
 8007d7e:	461a      	mov	r2, r3
 8007d80:	4623      	mov	r3, r4
 8007d82:	f7f8 fa95 	bl	80002b0 <__aeabi_uldivmod>
 8007d86:	4603      	mov	r3, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	e049      	b.n	8007e22 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d8e:	4b30      	ldr	r3, [pc, #192]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	099b      	lsrs	r3, r3, #6
 8007d94:	f04f 0400 	mov.w	r4, #0
 8007d98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007d9c:	f04f 0200 	mov.w	r2, #0
 8007da0:	ea03 0501 	and.w	r5, r3, r1
 8007da4:	ea04 0602 	and.w	r6, r4, r2
 8007da8:	4629      	mov	r1, r5
 8007daa:	4632      	mov	r2, r6
 8007dac:	f04f 0300 	mov.w	r3, #0
 8007db0:	f04f 0400 	mov.w	r4, #0
 8007db4:	0154      	lsls	r4, r2, #5
 8007db6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007dba:	014b      	lsls	r3, r1, #5
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	1b49      	subs	r1, r1, r5
 8007dc2:	eb62 0206 	sbc.w	r2, r2, r6
 8007dc6:	f04f 0300 	mov.w	r3, #0
 8007dca:	f04f 0400 	mov.w	r4, #0
 8007dce:	0194      	lsls	r4, r2, #6
 8007dd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007dd4:	018b      	lsls	r3, r1, #6
 8007dd6:	1a5b      	subs	r3, r3, r1
 8007dd8:	eb64 0402 	sbc.w	r4, r4, r2
 8007ddc:	f04f 0100 	mov.w	r1, #0
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	00e2      	lsls	r2, r4, #3
 8007de6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007dea:	00d9      	lsls	r1, r3, #3
 8007dec:	460b      	mov	r3, r1
 8007dee:	4614      	mov	r4, r2
 8007df0:	195b      	adds	r3, r3, r5
 8007df2:	eb44 0406 	adc.w	r4, r4, r6
 8007df6:	f04f 0100 	mov.w	r1, #0
 8007dfa:	f04f 0200 	mov.w	r2, #0
 8007dfe:	02a2      	lsls	r2, r4, #10
 8007e00:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007e04:	0299      	lsls	r1, r3, #10
 8007e06:	460b      	mov	r3, r1
 8007e08:	4614      	mov	r4, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f04f 0400 	mov.w	r4, #0
 8007e14:	461a      	mov	r2, r3
 8007e16:	4623      	mov	r3, r4
 8007e18:	f7f8 fa4a 	bl	80002b0 <__aeabi_uldivmod>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	460c      	mov	r4, r1
 8007e20:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007e22:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x158>)
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	0c1b      	lsrs	r3, r3, #16
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e3a:	60bb      	str	r3, [r7, #8]
      break;
 8007e3c:	e002      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007e40:	60bb      	str	r3, [r7, #8]
      break;
 8007e42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e44:	68bb      	ldr	r3, [r7, #8]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	40023800 	.word	0x40023800
 8007e54:	00f42400 	.word	0x00f42400
 8007e58:	017d7840 	.word	0x017d7840

08007e5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e60:	4b03      	ldr	r3, [pc, #12]	; (8007e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e62:	681b      	ldr	r3, [r3, #0]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	20000000 	.word	0x20000000

08007e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e78:	f7ff fff0 	bl	8007e5c <HAL_RCC_GetHCLKFreq>
 8007e7c:	4601      	mov	r1, r0
 8007e7e:	4b05      	ldr	r3, [pc, #20]	; (8007e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	0a9b      	lsrs	r3, r3, #10
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	4a03      	ldr	r2, [pc, #12]	; (8007e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e8a:	5cd3      	ldrb	r3, [r2, r3]
 8007e8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	40023800 	.word	0x40023800
 8007e98:	0800d7e4 	.word	0x0800d7e4

08007e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ea0:	f7ff ffdc 	bl	8007e5c <HAL_RCC_GetHCLKFreq>
 8007ea4:	4601      	mov	r1, r0
 8007ea6:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	0b5b      	lsrs	r3, r3, #13
 8007eac:	f003 0307 	and.w	r3, r3, #7
 8007eb0:	4a03      	ldr	r2, [pc, #12]	; (8007ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007eb2:	5cd3      	ldrb	r3, [r2, r3]
 8007eb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	40023800 	.word	0x40023800
 8007ec0:	0800d7e4 	.word	0x0800d7e4

08007ec4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	220f      	movs	r2, #15
 8007ed2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ed4:	4b12      	ldr	r3, [pc, #72]	; (8007f20 <HAL_RCC_GetClockConfig+0x5c>)
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f003 0203 	and.w	r2, r3, #3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ee0:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <HAL_RCC_GetClockConfig+0x5c>)
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007eec:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <HAL_RCC_GetClockConfig+0x5c>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007ef8:	4b09      	ldr	r3, [pc, #36]	; (8007f20 <HAL_RCC_GetClockConfig+0x5c>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	08db      	lsrs	r3, r3, #3
 8007efe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f06:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <HAL_RCC_GetClockConfig+0x60>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 020f 	and.w	r2, r3, #15
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	601a      	str	r2, [r3, #0]
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	40023800 	.word	0x40023800
 8007f24:	40023c00 	.word	0x40023c00

08007f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b088      	sub	sp, #32
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d012      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f50:	4b69      	ldr	r3, [pc, #420]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	4a68      	ldr	r2, [pc, #416]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007f5a:	6093      	str	r3, [r2, #8]
 8007f5c:	4b66      	ldr	r3, [pc, #408]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f64:	4964      	ldr	r1, [pc, #400]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f66:	4313      	orrs	r3, r2
 8007f68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007f72:	2301      	movs	r3, #1
 8007f74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d017      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f82:	4b5d      	ldr	r3, [pc, #372]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f90:	4959      	ldr	r1, [pc, #356]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fa0:	d101      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d017      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007fbe:	4b4e      	ldr	r3, [pc, #312]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	494a      	ldr	r1, [pc, #296]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fdc:	d101      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007fea:	2301      	movs	r3, #1
 8007fec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 808b 	beq.w	8008122 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800800c:	4b3a      	ldr	r3, [pc, #232]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800800e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008010:	4a39      	ldr	r2, [pc, #228]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008016:	6413      	str	r3, [r2, #64]	; 0x40
 8008018:	4b37      	ldr	r3, [pc, #220]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800801a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008020:	60bb      	str	r3, [r7, #8]
 8008022:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008024:	4b35      	ldr	r3, [pc, #212]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a34      	ldr	r2, [pc, #208]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800802a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800802e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008030:	f7fc fc50 	bl	80048d4 <HAL_GetTick>
 8008034:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008036:	e008      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008038:	f7fc fc4c 	bl	80048d4 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b64      	cmp	r3, #100	; 0x64
 8008044:	d901      	bls.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e355      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800804a:	4b2c      	ldr	r3, [pc, #176]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0f0      	beq.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008056:	4b28      	ldr	r3, [pc, #160]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d035      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800806a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	429a      	cmp	r2, r3
 8008072:	d02e      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008074:	4b20      	ldr	r3, [pc, #128]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800807c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800807e:	4b1e      	ldr	r3, [pc, #120]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008082:	4a1d      	ldr	r2, [pc, #116]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008088:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800808a:	4b1b      	ldr	r3, [pc, #108]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800808c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808e:	4a1a      	ldr	r2, [pc, #104]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008094:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008096:	4a18      	ldr	r2, [pc, #96]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800809c:	4b16      	ldr	r3, [pc, #88]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800809e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d114      	bne.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a8:	f7fc fc14 	bl	80048d4 <HAL_GetTick>
 80080ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080ae:	e00a      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080b0:	f7fc fc10 	bl	80048d4 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80080be:	4293      	cmp	r3, r2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e317      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080c6:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0ee      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080de:	d111      	bne.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80080e0:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80080ec:	4b04      	ldr	r3, [pc, #16]	; (8008100 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80080ee:	400b      	ands	r3, r1
 80080f0:	4901      	ldr	r1, [pc, #4]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	608b      	str	r3, [r1, #8]
 80080f6:	e00b      	b.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80080f8:	40023800 	.word	0x40023800
 80080fc:	40007000 	.word	0x40007000
 8008100:	0ffffcff 	.word	0x0ffffcff
 8008104:	4bb0      	ldr	r3, [pc, #704]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	4aaf      	ldr	r2, [pc, #700]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800810a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800810e:	6093      	str	r3, [r2, #8]
 8008110:	4bad      	ldr	r3, [pc, #692]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008112:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800811c:	49aa      	ldr	r1, [pc, #680]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800811e:	4313      	orrs	r3, r2
 8008120:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0310 	and.w	r3, r3, #16
 800812a:	2b00      	cmp	r3, #0
 800812c:	d010      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800812e:	4ba6      	ldr	r3, [pc, #664]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008134:	4aa4      	ldr	r2, [pc, #656]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800813a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800813e:	4ba2      	ldr	r3, [pc, #648]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008140:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	499f      	ldr	r1, [pc, #636]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800814a:	4313      	orrs	r3, r2
 800814c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800815c:	4b9a      	ldr	r3, [pc, #616]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800815e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008162:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800816a:	4997      	ldr	r1, [pc, #604]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800816c:	4313      	orrs	r3, r2
 800816e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00a      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800817e:	4b92      	ldr	r3, [pc, #584]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008184:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800818c:	498e      	ldr	r1, [pc, #568]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800818e:	4313      	orrs	r3, r2
 8008190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00a      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081a0:	4b89      	ldr	r3, [pc, #548]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ae:	4986      	ldr	r1, [pc, #536]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00a      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081c2:	4b81      	ldr	r3, [pc, #516]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d0:	497d      	ldr	r1, [pc, #500]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00a      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081e4:	4b78      	ldr	r3, [pc, #480]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ea:	f023 0203 	bic.w	r2, r3, #3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f2:	4975      	ldr	r1, [pc, #468]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00a      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008206:	4b70      	ldr	r3, [pc, #448]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820c:	f023 020c 	bic.w	r2, r3, #12
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008214:	496c      	ldr	r1, [pc, #432]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008216:	4313      	orrs	r3, r2
 8008218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00a      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008228:	4b67      	ldr	r3, [pc, #412]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800822a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008236:	4964      	ldr	r1, [pc, #400]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008238:	4313      	orrs	r3, r2
 800823a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00a      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800824a:	4b5f      	ldr	r3, [pc, #380]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800824c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008250:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008258:	495b      	ldr	r1, [pc, #364]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800825a:	4313      	orrs	r3, r2
 800825c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00a      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800826c:	4b56      	ldr	r3, [pc, #344]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800826e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800827a:	4953      	ldr	r1, [pc, #332]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800827c:	4313      	orrs	r3, r2
 800827e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800828e:	4b4e      	ldr	r3, [pc, #312]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008294:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829c:	494a      	ldr	r1, [pc, #296]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00a      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80082b0:	4b45      	ldr	r3, [pc, #276]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082be:	4942      	ldr	r1, [pc, #264]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80082d2:	4b3d      	ldr	r3, [pc, #244]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082e0:	4939      	ldr	r1, [pc, #228]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00a      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082f4:	4b34      	ldr	r3, [pc, #208]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008302:	4931      	ldr	r1, [pc, #196]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008304:	4313      	orrs	r3, r2
 8008306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d011      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008316:	4b2c      	ldr	r3, [pc, #176]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008324:	4928      	ldr	r1, [pc, #160]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008334:	d101      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008336:	2301      	movs	r3, #1
 8008338:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008346:	2301      	movs	r3, #1
 8008348:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00a      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008356:	4b1c      	ldr	r3, [pc, #112]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008364:	4918      	ldr	r1, [pc, #96]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008366:	4313      	orrs	r3, r2
 8008368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00b      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008378:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800837a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008388:	490f      	ldr	r1, [pc, #60]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800838a:	4313      	orrs	r3, r2
 800838c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d005      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800839e:	f040 80d8 	bne.w	8008552 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80083a2:	4b09      	ldr	r3, [pc, #36]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a08      	ldr	r2, [pc, #32]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ae:	f7fc fa91 	bl	80048d4 <HAL_GetTick>
 80083b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083b4:	e00a      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80083b6:	f7fc fa8d 	bl	80048d4 <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	2b64      	cmp	r3, #100	; 0x64
 80083c2:	d903      	bls.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e196      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80083c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083cc:	4b6c      	ldr	r3, [pc, #432]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1ee      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d021      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d11d      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083ec:	4b64      	ldr	r3, [pc, #400]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f2:	0c1b      	lsrs	r3, r3, #16
 80083f4:	f003 0303 	and.w	r3, r3, #3
 80083f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083fa:	4b61      	ldr	r3, [pc, #388]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80083fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008400:	0e1b      	lsrs	r3, r3, #24
 8008402:	f003 030f 	and.w	r3, r3, #15
 8008406:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	019a      	lsls	r2, r3, #6
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	041b      	lsls	r3, r3, #16
 8008412:	431a      	orrs	r2, r3
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	061b      	lsls	r3, r3, #24
 8008418:	431a      	orrs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	071b      	lsls	r3, r3, #28
 8008420:	4957      	ldr	r1, [pc, #348]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008422:	4313      	orrs	r3, r2
 8008424:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d004      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800843c:	d00a      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008446:	2b00      	cmp	r3, #0
 8008448:	d02e      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008452:	d129      	bne.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008454:	4b4a      	ldr	r3, [pc, #296]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800845a:	0c1b      	lsrs	r3, r3, #16
 800845c:	f003 0303 	and.w	r3, r3, #3
 8008460:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008462:	4b47      	ldr	r3, [pc, #284]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008468:	0f1b      	lsrs	r3, r3, #28
 800846a:	f003 0307 	and.w	r3, r3, #7
 800846e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	019a      	lsls	r2, r3, #6
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	041b      	lsls	r3, r3, #16
 800847a:	431a      	orrs	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	061b      	lsls	r3, r3, #24
 8008482:	431a      	orrs	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	071b      	lsls	r3, r3, #28
 8008488:	493d      	ldr	r1, [pc, #244]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800848a:	4313      	orrs	r3, r2
 800848c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008490:	4b3b      	ldr	r3, [pc, #236]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008496:	f023 021f 	bic.w	r2, r3, #31
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	3b01      	subs	r3, #1
 80084a0:	4937      	ldr	r1, [pc, #220]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01d      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80084b4:	4b32      	ldr	r3, [pc, #200]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ba:	0e1b      	lsrs	r3, r3, #24
 80084bc:	f003 030f 	and.w	r3, r3, #15
 80084c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80084c2:	4b2f      	ldr	r3, [pc, #188]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084c8:	0f1b      	lsrs	r3, r3, #28
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	019a      	lsls	r2, r3, #6
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	041b      	lsls	r3, r3, #16
 80084dc:	431a      	orrs	r2, r3
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	061b      	lsls	r3, r3, #24
 80084e2:	431a      	orrs	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	071b      	lsls	r3, r3, #28
 80084e8:	4925      	ldr	r1, [pc, #148]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d011      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	019a      	lsls	r2, r3, #6
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	041b      	lsls	r3, r3, #16
 8008508:	431a      	orrs	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	061b      	lsls	r3, r3, #24
 8008510:	431a      	orrs	r2, r3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	071b      	lsls	r3, r3, #28
 8008518:	4919      	ldr	r1, [pc, #100]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800851a:	4313      	orrs	r3, r2
 800851c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008520:	4b17      	ldr	r3, [pc, #92]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a16      	ldr	r2, [pc, #88]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008526:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800852a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800852c:	f7fc f9d2 	bl	80048d4 <HAL_GetTick>
 8008530:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008532:	e008      	b.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008534:	f7fc f9ce 	bl	80048d4 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b64      	cmp	r3, #100	; 0x64
 8008540:	d901      	bls.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e0d7      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008546:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d0f0      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	2b01      	cmp	r3, #1
 8008556:	f040 80cd 	bne.w	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a08      	ldr	r2, [pc, #32]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008566:	f7fc f9b5 	bl	80048d4 <HAL_GetTick>
 800856a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800856c:	e00a      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800856e:	f7fc f9b1 	bl	80048d4 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b64      	cmp	r3, #100	; 0x64
 800857a:	d903      	bls.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e0ba      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008580:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008584:	4b5e      	ldr	r3, [pc, #376]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800858c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008590:	d0ed      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d02e      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d12a      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085ba:	4b51      	ldr	r3, [pc, #324]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c0:	0c1b      	lsrs	r3, r3, #16
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085c8:	4b4d      	ldr	r3, [pc, #308]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ce:	0f1b      	lsrs	r3, r3, #28
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	019a      	lsls	r2, r3, #6
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	041b      	lsls	r3, r3, #16
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	061b      	lsls	r3, r3, #24
 80085e8:	431a      	orrs	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	071b      	lsls	r3, r3, #28
 80085ee:	4944      	ldr	r1, [pc, #272]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80085f6:	4b42      	ldr	r3, [pc, #264]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008604:	3b01      	subs	r3, #1
 8008606:	021b      	lsls	r3, r3, #8
 8008608:	493d      	ldr	r1, [pc, #244]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800860a:	4313      	orrs	r3, r2
 800860c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d022      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008624:	d11d      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008626:	4b36      	ldr	r3, [pc, #216]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800862c:	0e1b      	lsrs	r3, r3, #24
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008634:	4b32      	ldr	r3, [pc, #200]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863a:	0f1b      	lsrs	r3, r3, #28
 800863c:	f003 0307 	and.w	r3, r3, #7
 8008640:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	019a      	lsls	r2, r3, #6
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	041b      	lsls	r3, r3, #16
 800864e:	431a      	orrs	r2, r3
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	061b      	lsls	r3, r3, #24
 8008654:	431a      	orrs	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	071b      	lsls	r3, r3, #28
 800865a:	4929      	ldr	r1, [pc, #164]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800865c:	4313      	orrs	r3, r2
 800865e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b00      	cmp	r3, #0
 800866c:	d028      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800866e:	4b24      	ldr	r3, [pc, #144]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008674:	0e1b      	lsrs	r3, r3, #24
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800867c:	4b20      	ldr	r3, [pc, #128]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800867e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008682:	0c1b      	lsrs	r3, r3, #16
 8008684:	f003 0303 	and.w	r3, r3, #3
 8008688:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	019a      	lsls	r2, r3, #6
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	431a      	orrs	r2, r3
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	061b      	lsls	r3, r3, #24
 800869a:	431a      	orrs	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	071b      	lsls	r3, r3, #28
 80086a2:	4917      	ldr	r1, [pc, #92]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80086aa:	4b15      	ldr	r3, [pc, #84]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4911      	ldr	r1, [pc, #68]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80086c0:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a0e      	ldr	r2, [pc, #56]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086cc:	f7fc f902 	bl	80048d4 <HAL_GetTick>
 80086d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086d2:	e008      	b.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80086d4:	f7fc f8fe 	bl	80048d4 <HAL_GetTick>
 80086d8:	4602      	mov	r2, r0
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	2b64      	cmp	r3, #100	; 0x64
 80086e0:	d901      	bls.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e007      	b.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80086e6:	4b06      	ldr	r3, [pc, #24]	; (8008700 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f2:	d1ef      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3720      	adds	r7, #32
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	40023800 	.word	0x40023800

08008704 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008718:	2300      	movs	r3, #0
 800871a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008722:	f040 8086 	bne.w	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008726:	4b8d      	ldr	r3, [pc, #564]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800872c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008734:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800873c:	d03e      	beq.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800873e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008742:	d073      	beq.n	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8008744:	2b00      	cmp	r3, #0
 8008746:	d000      	beq.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008748:	e074      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800874a:	4b84      	ldr	r3, [pc, #528]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d108      	bne.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008756:	4b81      	ldr	r3, [pc, #516]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800875e:	4a80      	ldr	r2, [pc, #512]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008760:	fbb2 f3f3 	udiv	r3, r2, r3
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	e007      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008768:	4b7c      	ldr	r3, [pc, #496]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008770:	4a7c      	ldr	r2, [pc, #496]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8008772:	fbb2 f3f3 	udiv	r3, r2, r3
 8008776:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008778:	4b78      	ldr	r3, [pc, #480]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800877a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800877e:	0e1b      	lsrs	r3, r3, #24
 8008780:	f003 030f 	and.w	r3, r3, #15
 8008784:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008786:	4b75      	ldr	r3, [pc, #468]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878c:	099b      	lsrs	r3, r3, #6
 800878e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	fb02 f203 	mul.w	r2, r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	fbb2 f3f3 	udiv	r3, r2, r3
 800879e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80087a0:	4b6e      	ldr	r3, [pc, #440]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80087a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087a6:	0a1b      	lsrs	r3, r3, #8
 80087a8:	f003 031f 	and.w	r3, r3, #31
 80087ac:	3301      	adds	r3, #1
 80087ae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b8:	617b      	str	r3, [r7, #20]
        break;
 80087ba:	e03b      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80087bc:	4b67      	ldr	r3, [pc, #412]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d108      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80087c8:	4b64      	ldr	r3, [pc, #400]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087d0:	4a63      	ldr	r2, [pc, #396]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80087d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d6:	613b      	str	r3, [r7, #16]
 80087d8:	e007      	b.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80087da:	4b60      	ldr	r3, [pc, #384]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087e2:	4a60      	ldr	r2, [pc, #384]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80087e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80087ea:	4b5c      	ldr	r3, [pc, #368]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80087ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087f0:	0e1b      	lsrs	r3, r3, #24
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80087f8:	4b58      	ldr	r3, [pc, #352]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80087fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087fe:	099b      	lsrs	r3, r3, #6
 8008800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	fb02 f203 	mul.w	r2, r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008810:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8008812:	4b52      	ldr	r3, [pc, #328]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008818:	f003 031f 	and.w	r3, r3, #31
 800881c:	3301      	adds	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008820:	697a      	ldr	r2, [r7, #20]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	fbb2 f3f3 	udiv	r3, r2, r3
 8008828:	617b      	str	r3, [r7, #20]
        break;
 800882a:	e003      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 800882c:	4b4e      	ldr	r3, [pc, #312]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800882e:	617b      	str	r3, [r7, #20]
        break;
 8008830:	e000      	b.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8008832:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800883a:	f040 8086 	bne.w	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800883e:	4b47      	ldr	r3, [pc, #284]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008844:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800884c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008854:	d03e      	beq.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800885a:	d073      	beq.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800885c:	2b00      	cmp	r3, #0
 800885e:	d000      	beq.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008860:	e074      	b.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008862:	4b3e      	ldr	r3, [pc, #248]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d108      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800886e:	4b3b      	ldr	r3, [pc, #236]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008876:	4a3a      	ldr	r2, [pc, #232]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008878:	fbb2 f3f3 	udiv	r3, r2, r3
 800887c:	613b      	str	r3, [r7, #16]
 800887e:	e007      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008880:	4b36      	ldr	r3, [pc, #216]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008888:	4a36      	ldr	r2, [pc, #216]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800888a:	fbb2 f3f3 	udiv	r3, r2, r3
 800888e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008890:	4b32      	ldr	r3, [pc, #200]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008896:	0e1b      	lsrs	r3, r3, #24
 8008898:	f003 030f 	and.w	r3, r3, #15
 800889c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800889e:	4b2f      	ldr	r3, [pc, #188]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80088a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a4:	099b      	lsrs	r3, r3, #6
 80088a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	fb02 f203 	mul.w	r2, r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80088b8:	4b28      	ldr	r3, [pc, #160]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80088ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088be:	0a1b      	lsrs	r3, r3, #8
 80088c0:	f003 031f 	and.w	r3, r3, #31
 80088c4:	3301      	adds	r3, #1
 80088c6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d0:	617b      	str	r3, [r7, #20]
        break;
 80088d2:	e03b      	b.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80088d4:	4b21      	ldr	r3, [pc, #132]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d108      	bne.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80088e0:	4b1e      	ldr	r3, [pc, #120]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088e8:	4a1d      	ldr	r2, [pc, #116]	; (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80088ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ee:	613b      	str	r3, [r7, #16]
 80088f0:	e007      	b.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80088f2:	4b1a      	ldr	r3, [pc, #104]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088fa:	4a1a      	ldr	r2, [pc, #104]	; (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80088fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008900:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8008902:	4b16      	ldr	r3, [pc, #88]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008908:	0e1b      	lsrs	r3, r3, #24
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8008910:	4b12      	ldr	r3, [pc, #72]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008916:	099b      	lsrs	r3, r3, #6
 8008918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	fb02 f203 	mul.w	r2, r2, r3
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	fbb2 f3f3 	udiv	r3, r2, r3
 8008928:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800892a:	4b0c      	ldr	r3, [pc, #48]	; (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800892c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008930:	f003 031f 	and.w	r3, r3, #31
 8008934:	3301      	adds	r3, #1
 8008936:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008940:	617b      	str	r3, [r7, #20]
        break;
 8008942:	e003      	b.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008944:	4b08      	ldr	r3, [pc, #32]	; (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8008946:	617b      	str	r3, [r7, #20]
        break;
 8008948:	e000      	b.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 800894a:	bf00      	nop

  return frequency;
 800894c:	697b      	ldr	r3, [r7, #20]
}
 800894e:	4618      	mov	r0, r3
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	40023800 	.word	0x40023800
 8008960:	00f42400 	.word	0x00f42400
 8008964:	017d7840 	.word	0x017d7840
 8008968:	00bb8000 	.word	0x00bb8000

0800896c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e06b      	b.n	8008a56 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	7f5b      	ldrb	r3, [r3, #29]
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	d105      	bne.n	8008994 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7f9 fc90 	bl	80022b4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2202      	movs	r2, #2
 8008998:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	22ca      	movs	r2, #202	; 0xca
 80089a0:	625a      	str	r2, [r3, #36]	; 0x24
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2253      	movs	r2, #83	; 0x53
 80089a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fb00 	bl	8008fb0 <RTC_EnterInitMode>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d008      	beq.n	80089c8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	22ff      	movs	r2, #255	; 0xff
 80089bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2204      	movs	r2, #4
 80089c2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e046      	b.n	8008a56 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6899      	ldr	r1, [r3, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4b23      	ldr	r3, [pc, #140]	; (8008a60 <HAL_RTC_Init+0xf4>)
 80089d4:	400b      	ands	r3, r1
 80089d6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6899      	ldr	r1, [r3, #8]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	431a      	orrs	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	68d2      	ldr	r2, [r2, #12]
 80089fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6919      	ldr	r1, [r3, #16]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	041a      	lsls	r2, r3, #16
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68da      	ldr	r2, [r3, #12]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a22:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f022 0208 	bic.w	r2, r2, #8
 8008a32:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	699a      	ldr	r2, [r3, #24]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	22ff      	movs	r2, #255	; 0xff
 8008a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008a54:	2300      	movs	r3, #0
  }
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	ff8fffbf 	.word	0xff8fffbf

08008a64 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a64:	b590      	push	{r4, r7, lr}
 8008a66:	b087      	sub	sp, #28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	7f1b      	ldrb	r3, [r3, #28]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <HAL_RTC_SetTime+0x1c>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e0a8      	b.n	8008bd2 <HAL_RTC_SetTime+0x16e>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2201      	movs	r2, #1
 8008a84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2202      	movs	r2, #2
 8008a8a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d126      	bne.n	8008ae0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 faac 	bl	8009008 <RTC_ByteToBcd2>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	785b      	ldrb	r3, [r3, #1]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 faa5 	bl	8009008 <RTC_ByteToBcd2>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008ac2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	789b      	ldrb	r3, [r3, #2]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fa9d 	bl	8009008 <RTC_ByteToBcd2>
 8008ace:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008ad0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	7b1b      	ldrb	r3, [r3, #12]
 8008ad8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]
 8008ade:	e018      	b.n	8008b12 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d102      	bne.n	8008af4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2200      	movs	r2, #0
 8008af2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008b00:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008b06:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	7b1b      	ldrb	r3, [r3, #12]
 8008b0c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	22ca      	movs	r2, #202	; 0xca
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2253      	movs	r2, #83	; 0x53
 8008b20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fa44 	bl	8008fb0 <RTC_EnterInitMode>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00b      	beq.n	8008b46 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	22ff      	movs	r2, #255	; 0xff
 8008b34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2204      	movs	r2, #4
 8008b3a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e045      	b.n	8008bd2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	6979      	ldr	r1, [r7, #20]
 8008b4c:	4b23      	ldr	r3, [pc, #140]	; (8008bdc <HAL_RTC_SetTime+0x178>)
 8008b4e:	400b      	ands	r3, r1
 8008b50:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6899      	ldr	r1, [r3, #8]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	691a      	ldr	r2, [r3, #16]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	431a      	orrs	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b88:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f003 0320 	and.w	r3, r3, #32
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d111      	bne.n	8008bbc <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 f9e1 	bl	8008f60 <HAL_RTC_WaitForSynchro>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00b      	beq.n	8008bbc <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	22ff      	movs	r2, #255	; 0xff
 8008baa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2204      	movs	r2, #4
 8008bb0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e00a      	b.n	8008bd2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	22ff      	movs	r2, #255	; 0xff
 8008bc2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
  }
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd90      	pop	{r4, r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	007f7f7f 	.word	0x007f7f7f

08008be0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008be0:	b590      	push	{r4, r7, lr}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008bec:	2300      	movs	r3, #0
 8008bee:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	7f1b      	ldrb	r3, [r3, #28]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d101      	bne.n	8008bfc <HAL_RTC_SetDate+0x1c>
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	e092      	b.n	8008d22 <HAL_RTC_SetDate+0x142>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2202      	movs	r2, #2
 8008c06:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10e      	bne.n	8008c2c <HAL_RTC_SetDate+0x4c>
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	785b      	ldrb	r3, [r3, #1]
 8008c12:	f003 0310 	and.w	r3, r3, #16
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d008      	beq.n	8008c2c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	785b      	ldrb	r3, [r3, #1]
 8008c1e:	f023 0310 	bic.w	r3, r3, #16
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	330a      	adds	r3, #10
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d11c      	bne.n	8008c6c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	78db      	ldrb	r3, [r3, #3]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 f9e6 	bl	8009008 <RTC_ByteToBcd2>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 f9df 	bl	8009008 <RTC_ByteToBcd2>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008c4e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	789b      	ldrb	r3, [r3, #2]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 f9d7 	bl	8009008 <RTC_ByteToBcd2>
 8008c5a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008c5c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008c66:	4313      	orrs	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]
 8008c6a:	e00e      	b.n	8008c8a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	78db      	ldrb	r3, [r3, #3]
 8008c70:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	785b      	ldrb	r3, [r3, #1]
 8008c76:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008c78:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008c7e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008c86:	4313      	orrs	r3, r2
 8008c88:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	22ca      	movs	r2, #202	; 0xca
 8008c90:	625a      	str	r2, [r3, #36]	; 0x24
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2253      	movs	r2, #83	; 0x53
 8008c98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f000 f988 	bl	8008fb0 <RTC_EnterInitMode>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00b      	beq.n	8008cbe <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	22ff      	movs	r2, #255	; 0xff
 8008cac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2204      	movs	r2, #4
 8008cb2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e031      	b.n	8008d22 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	6979      	ldr	r1, [r7, #20]
 8008cc4:	4b19      	ldr	r3, [pc, #100]	; (8008d2c <HAL_RTC_SetDate+0x14c>)
 8008cc6:	400b      	ands	r3, r1
 8008cc8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68da      	ldr	r2, [r3, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cd8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f003 0320 	and.w	r3, r3, #32
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d111      	bne.n	8008d0c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f000 f939 	bl	8008f60 <HAL_RTC_WaitForSynchro>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00b      	beq.n	8008d0c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	22ff      	movs	r2, #255	; 0xff
 8008cfa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2204      	movs	r2, #4
 8008d00:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e00a      	b.n	8008d22 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	22ff      	movs	r2, #255	; 0xff
 8008d12:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2201      	movs	r2, #1
 8008d18:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008d20:	2300      	movs	r3, #0
  }
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	371c      	adds	r7, #28
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd90      	pop	{r4, r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	00ffff3f 	.word	0x00ffff3f

08008d30 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008d30:	b590      	push	{r4, r7, lr}
 8008d32:	b089      	sub	sp, #36	; 0x24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61fb      	str	r3, [r7, #28]
 8008d44:	2300      	movs	r3, #0
 8008d46:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	7f1b      	ldrb	r3, [r3, #28]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d101      	bne.n	8008d54 <HAL_RTC_SetAlarm+0x24>
 8008d50:	2302      	movs	r3, #2
 8008d52:	e101      	b.n	8008f58 <HAL_RTC_SetAlarm+0x228>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2201      	movs	r2, #1
 8008d58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d137      	bne.n	8008dd6 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d102      	bne.n	8008d7a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2200      	movs	r2, #0
 8008d78:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 f942 	bl	8009008 <RTC_ByteToBcd2>
 8008d84:	4603      	mov	r3, r0
 8008d86:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	785b      	ldrb	r3, [r3, #1]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 f93b 	bl	8009008 <RTC_ByteToBcd2>
 8008d92:	4603      	mov	r3, r0
 8008d94:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008d96:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	789b      	ldrb	r3, [r3, #2]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 f933 	bl	8009008 <RTC_ByteToBcd2>
 8008da2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008da4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	7b1b      	ldrb	r3, [r3, #12]
 8008dac:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008dae:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 f925 	bl	8009008 <RTC_ByteToBcd2>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008dc2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008dca:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	61fb      	str	r3, [r7, #28]
 8008dd4:	e023      	b.n	8008e1e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d102      	bne.n	8008dea <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	2200      	movs	r2, #0
 8008de8:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	785b      	ldrb	r3, [r3, #1]
 8008df4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008df6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008dfc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	7b1b      	ldrb	r3, [r3, #12]
 8008e02:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008e04:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008e0c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008e0e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008e14:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	22ca      	movs	r2, #202	; 0xca
 8008e30:	625a      	str	r2, [r3, #36]	; 0x24
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2253      	movs	r2, #83	; 0x53
 8008e38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e42:	d13f      	bne.n	8008ec4 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e52:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689a      	ldr	r2, [r3, #8]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e62:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e64:	f7fb fd36 	bl	80048d4 <HAL_GetTick>
 8008e68:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008e6a:	e013      	b.n	8008e94 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008e6c:	f7fb fd32 	bl	80048d4 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e7a:	d90b      	bls.n	8008e94 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	22ff      	movs	r2, #255	; 0xff
 8008e82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2203      	movs	r2, #3
 8008e88:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e061      	b.n	8008f58 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0e4      	beq.n	8008e6c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ec0:	609a      	str	r2, [r3, #8]
 8008ec2:	e03e      	b.n	8008f42 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008ed2:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689a      	ldr	r2, [r3, #8]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ee2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ee4:	f7fb fcf6 	bl	80048d4 <HAL_GetTick>
 8008ee8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008eea:	e013      	b.n	8008f14 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008eec:	f7fb fcf2 	bl	80048d4 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008efa:	d90b      	bls.n	8008f14 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	22ff      	movs	r2, #255	; 0xff
 8008f02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2203      	movs	r2, #3
 8008f08:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e021      	b.n	8008f58 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0e4      	beq.n	8008eec <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	69fa      	ldr	r2, [r7, #28]
 8008f28:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689a      	ldr	r2, [r3, #8]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f40:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	22ff      	movs	r2, #255	; 0xff
 8008f48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3724      	adds	r7, #36	; 0x24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd90      	pop	{r4, r7, pc}

08008f60 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008f7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f7c:	f7fb fcaa 	bl	80048d4 <HAL_GetTick>
 8008f80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008f82:	e009      	b.n	8008f98 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008f84:	f7fb fca6 	bl	80048d4 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f92:	d901      	bls.n	8008f98 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e007      	b.n	8008fa8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f003 0320 	and.w	r3, r3, #32
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d0ee      	beq.n	8008f84 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d119      	bne.n	8008ffe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fd4:	f7fb fc7e 	bl	80048d4 <HAL_GetTick>
 8008fd8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008fda:	e009      	b.n	8008ff0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008fdc:	f7fb fc7a 	bl	80048d4 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fea:	d901      	bls.n	8008ff0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e007      	b.n	8009000 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0ee      	beq.n	8008fdc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009016:	e005      	b.n	8009024 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3301      	adds	r3, #1
 800901c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	3b0a      	subs	r3, #10
 8009022:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	2b09      	cmp	r3, #9
 8009028:	d8f6      	bhi.n	8009018 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	b2da      	uxtb	r2, r3
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	4313      	orrs	r3, r2
 8009036:	b2db      	uxtb	r3, r3
}
 8009038:	4618      	mov	r0, r3
 800903a:	3714      	adds	r7, #20
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	7f1b      	ldrb	r3, [r3, #28]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_RTCEx_SetTimeStamp+0x1c>
 800905c:	2302      	movs	r3, #2
 800905e:	e03e      	b.n	80090de <HAL_RTCEx_SetTimeStamp+0x9a>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2201      	movs	r2, #1
 8009064:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2202      	movs	r2, #2
 800906a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	689a      	ldr	r2, [r3, #8]
 8009072:	4b1e      	ldr	r3, [pc, #120]	; (80090ec <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009074:	4013      	ands	r3, r2
 8009076:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	4313      	orrs	r3, r2
 800907e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	22ca      	movs	r2, #202	; 0xca
 8009086:	625a      	str	r2, [r3, #36]	; 0x24
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2253      	movs	r2, #83	; 0x53
 800908e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0206 	bic.w	r2, r2, #6
 800909e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090c6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	22ff      	movs	r2, #255	; 0xff
 80090ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2201      	movs	r2, #1
 80090d4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	fffff7f7 	.word	0xfffff7f7

080090f0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e149      	b.n	80093a2 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d106      	bne.n	8009128 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f7f9 fc70 	bl	8002a08 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f94f 	bl	80093d4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d007      	beq.n	800914e <HAL_SAI_Init+0x5e>
 800913e:	2b01      	cmp	r3, #1
 8009140:	d302      	bcc.n	8009148 <HAL_SAI_Init+0x58>
 8009142:	2b02      	cmp	r3, #2
 8009144:	d006      	beq.n	8009154 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8009146:	e008      	b.n	800915a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8009148:	2300      	movs	r3, #0
 800914a:	61fb      	str	r3, [r7, #28]
      break;
 800914c:	e005      	b.n	800915a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800914e:	2310      	movs	r3, #16
 8009150:	61fb      	str	r3, [r7, #28]
      break;
 8009152:	e002      	b.n	800915a <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009154:	2320      	movs	r3, #32
 8009156:	61fb      	str	r3, [r7, #28]
      break;
 8009158:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	2b03      	cmp	r3, #3
 8009160:	d81d      	bhi.n	800919e <HAL_SAI_Init+0xae>
 8009162:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <HAL_SAI_Init+0x78>)
 8009164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009168:	08009179 	.word	0x08009179
 800916c:	0800917f 	.word	0x0800917f
 8009170:	08009187 	.word	0x08009187
 8009174:	0800918f 	.word	0x0800918f
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]
      }
      break;
 800917c:	e010      	b.n	80091a0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800917e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009182:	617b      	str	r3, [r7, #20]
      }
      break;
 8009184:	e00c      	b.n	80091a0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8009186:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800918a:	617b      	str	r3, [r7, #20]
      }
      break;
 800918c:	e008      	b.n	80091a0 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800918e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009192:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	f043 0301 	orr.w	r3, r3, #1
 800919a:	61fb      	str	r3, [r7, #28]
      }
      break;
 800919c:	e000      	b.n	80091a0 <HAL_SAI_Init+0xb0>
  default:
    break;
 800919e:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a81      	ldr	r2, [pc, #516]	; (80093ac <HAL_SAI_Init+0x2bc>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d004      	beq.n	80091b4 <HAL_SAI_Init+0xc4>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a80      	ldr	r2, [pc, #512]	; (80093b0 <HAL_SAI_Init+0x2c0>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d103      	bne.n	80091bc <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 80091b4:	4a7f      	ldr	r2, [pc, #508]	; (80093b4 <HAL_SAI_Init+0x2c4>)
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	6013      	str	r3, [r2, #0]
 80091ba:	e002      	b.n	80091c2 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80091bc:	4a7e      	ldr	r2, [pc, #504]	; (80093b8 <HAL_SAI_Init+0x2c8>)
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d043      	beq.n	8009252 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a76      	ldr	r2, [pc, #472]	; (80093ac <HAL_SAI_Init+0x2bc>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d004      	beq.n	80091e2 <HAL_SAI_Init+0xf2>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a74      	ldr	r2, [pc, #464]	; (80093b0 <HAL_SAI_Init+0x2c0>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d104      	bne.n	80091ec <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80091e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80091e6:	f7ff fa8d 	bl	8008704 <HAL_RCCEx_GetPeriphCLKFreq>
 80091ea:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a72      	ldr	r2, [pc, #456]	; (80093bc <HAL_SAI_Init+0x2cc>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d004      	beq.n	8009200 <HAL_SAI_Init+0x110>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a71      	ldr	r2, [pc, #452]	; (80093c0 <HAL_SAI_Init+0x2d0>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d104      	bne.n	800920a <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009200:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009204:	f7ff fa7e 	bl	8008704 <HAL_RCCEx_GetPeriphCLKFreq>
 8009208:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	005b      	lsls	r3, r3, #1
 8009214:	461a      	mov	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	025b      	lsls	r3, r3, #9
 800921c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009220:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	4a67      	ldr	r2, [pc, #412]	; (80093c4 <HAL_SAI_Init+0x2d4>)
 8009226:	fba2 2303 	umull	r2, r3, r2, r3
 800922a:	08da      	lsrs	r2, r3, #3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8009230:	68f9      	ldr	r1, [r7, #12]
 8009232:	4b64      	ldr	r3, [pc, #400]	; (80093c4 <HAL_SAI_Init+0x2d4>)
 8009234:	fba3 2301 	umull	r2, r3, r3, r1
 8009238:	08da      	lsrs	r2, r3, #3
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	005b      	lsls	r3, r3, #1
 8009242:	1aca      	subs	r2, r1, r3
 8009244:	2a08      	cmp	r2, #8
 8009246:	d904      	bls.n	8009252 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a1b      	ldr	r3, [r3, #32]
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <HAL_SAI_Init+0x172>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	2b02      	cmp	r3, #2
 8009260:	d109      	bne.n	8009276 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009266:	2b01      	cmp	r3, #1
 8009268:	d101      	bne.n	800926e <HAL_SAI_Init+0x17e>
 800926a:	2300      	movs	r3, #0
 800926c:	e001      	b.n	8009272 <HAL_SAI_Init+0x182>
 800926e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009272:	61bb      	str	r3, [r7, #24]
 8009274:	e008      	b.n	8009288 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927a:	2b01      	cmp	r3, #1
 800927c:	d102      	bne.n	8009284 <HAL_SAI_Init+0x194>
 800927e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009282:	e000      	b.n	8009286 <HAL_SAI_Init+0x196>
 8009284:	2300      	movs	r3, #0
 8009286:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6819      	ldr	r1, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	4b4d      	ldr	r3, [pc, #308]	; (80093c8 <HAL_SAI_Init+0x2d8>)
 8009294:	400b      	ands	r3, r1
 8009296:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6819      	ldr	r1, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a6:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092ac:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b2:	431a      	orrs	r2, r3
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80092c0:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80092cc:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	051b      	lsls	r3, r3, #20
 80092d4:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	6859      	ldr	r1, [r3, #4]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	4b38      	ldr	r3, [pc, #224]	; (80093cc <HAL_SAI_Init+0x2dc>)
 80092ea:	400b      	ands	r3, r1
 80092ec:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6859      	ldr	r1, [r3, #4]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	699a      	ldr	r2, [r3, #24]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fc:	431a      	orrs	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009302:	431a      	orrs	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6899      	ldr	r1, [r3, #8]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	4b2e      	ldr	r3, [pc, #184]	; (80093d0 <HAL_SAI_Init+0x2e0>)
 8009318:	400b      	ands	r3, r1
 800931a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6899      	ldr	r1, [r3, #8]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009326:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800932c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8009332:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8009338:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800933e:	3b01      	subs	r3, #1
 8009340:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8009342:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68d9      	ldr	r1, [r3, #12]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	f24f 0320 	movw	r3, #61472	; 0xf020
 800935a:	400b      	ands	r3, r1
 800935c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68d9      	ldr	r1, [r3, #12]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800936c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009372:	041b      	lsls	r3, r3, #16
 8009374:	431a      	orrs	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800937a:	3b01      	subs	r3, #1
 800937c:	021b      	lsls	r3, r3, #8
 800937e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	40015804 	.word	0x40015804
 80093b0:	40015824 	.word	0x40015824
 80093b4:	40015800 	.word	0x40015800
 80093b8:	40015c00 	.word	0x40015c00
 80093bc:	40015c04 	.word	0x40015c04
 80093c0:	40015c24 	.word	0x40015c24
 80093c4:	cccccccd 	.word	0xcccccccd
 80093c8:	ff05c010 	.word	0xff05c010
 80093cc:	ffff1ff0 	.word	0xffff1ff0
 80093d0:	fff88000 	.word	0xfff88000

080093d4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80093d4:	b490      	push	{r4, r7}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80093dc:	4b16      	ldr	r3, [pc, #88]	; (8009438 <SAI_Disable+0x64>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a16      	ldr	r2, [pc, #88]	; (800943c <SAI_Disable+0x68>)
 80093e2:	fba2 2303 	umull	r2, r3, r2, r3
 80093e6:	0b1b      	lsrs	r3, r3, #12
 80093e8:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80093fc:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80093fe:	4623      	mov	r3, r4
 8009400:	1e5c      	subs	r4, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800940c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	73fb      	strb	r3, [r7, #15]
      break;
 800941a:	e006      	b.n	800942a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e9      	bne.n	80093fe <SAI_Disable+0x2a>

  return status;
 800942a:	7bfb      	ldrb	r3, [r7, #15]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bc90      	pop	{r4, r7}
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	20000000 	.word	0x20000000
 800943c:	95cbec1b 	.word	0x95cbec1b

08009440 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800944e:	2301      	movs	r3, #1
 8009450:	e022      	b.n	8009498 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d105      	bne.n	800946a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7f8 ff3f 	bl	80022e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2203      	movs	r2, #3
 800946e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f814 	bl	80094a0 <HAL_SD_InitCard>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e00a      	b.n	8009498 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80094a0:	b5b0      	push	{r4, r5, r7, lr}
 80094a2:	b08e      	sub	sp, #56	; 0x38
 80094a4:	af04      	add	r7, sp, #16
 80094a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80094a8:	2300      	movs	r3, #0
 80094aa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80094b0:	2300      	movs	r3, #0
 80094b2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80094b4:	2300      	movs	r3, #0
 80094b6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80094bc:	2376      	movs	r3, #118	; 0x76
 80094be:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681d      	ldr	r5, [r3, #0]
 80094c4:	466c      	mov	r4, sp
 80094c6:	f107 0314 	add.w	r3, r7, #20
 80094ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094d2:	f107 0308 	add.w	r3, r7, #8
 80094d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094d8:	4628      	mov	r0, r5
 80094da:	f002 fceb 	bl	800beb4 <SDMMC_Init>
 80094de:	4603      	mov	r3, r0
 80094e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80094e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e03b      	b.n	8009568 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094fe:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4618      	mov	r0, r3
 8009506:	f002 fd0e 	bl	800bf26 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009518:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fb16 	bl	8009b4c <SD_PowerON>
 8009520:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009522:	6a3b      	ldr	r3, [r7, #32]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00b      	beq.n	8009540 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	431a      	orrs	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e013      	b.n	8009568 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fa35 	bl	80099b0 <SD_InitCard>
 8009546:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00b      	beq.n	8009566 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	431a      	orrs	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e000      	b.n	8009568 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3728      	adds	r7, #40	; 0x28
 800956c:	46bd      	mov	sp, r7
 800956e:	bdb0      	pop	{r4, r5, r7, pc}

08009570 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800957e:	0f9b      	lsrs	r3, r3, #30
 8009580:	b2da      	uxtb	r2, r3
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800958a:	0e9b      	lsrs	r3, r3, #26
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f003 030f 	and.w	r3, r3, #15
 8009592:	b2da      	uxtb	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800959c:	0e1b      	lsrs	r3, r3, #24
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	f003 0303 	and.w	r3, r3, #3
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ae:	0c1b      	lsrs	r3, r3, #16
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ba:	0a1b      	lsrs	r3, r3, #8
 80095bc:	b2da      	uxtb	r2, r3
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095d0:	0d1b      	lsrs	r3, r3, #20
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095dc:	0c1b      	lsrs	r3, r3, #16
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	f003 030f 	and.w	r3, r3, #15
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ee:	0bdb      	lsrs	r3, r3, #15
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	f003 0301 	and.w	r3, r3, #1
 80095f6:	b2da      	uxtb	r2, r3
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009600:	0b9b      	lsrs	r3, r3, #14
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	b2da      	uxtb	r2, r3
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009612:	0b5b      	lsrs	r3, r3, #13
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	b2da      	uxtb	r2, r3
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009624:	0b1b      	lsrs	r3, r3, #12
 8009626:	b2db      	uxtb	r3, r3
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	b2da      	uxtb	r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	2200      	movs	r2, #0
 8009636:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800963c:	2b00      	cmp	r3, #0
 800963e:	d163      	bne.n	8009708 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009644:	009a      	lsls	r2, r3, #2
 8009646:	f640 73fc 	movw	r3, #4092	; 0xffc
 800964a:	4013      	ands	r3, r2
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009650:	0f92      	lsrs	r2, r2, #30
 8009652:	431a      	orrs	r2, r3
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800965c:	0edb      	lsrs	r3, r3, #27
 800965e:	b2db      	uxtb	r3, r3
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	b2da      	uxtb	r2, r3
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966e:	0e1b      	lsrs	r3, r3, #24
 8009670:	b2db      	uxtb	r3, r3
 8009672:	f003 0307 	and.w	r3, r3, #7
 8009676:	b2da      	uxtb	r2, r3
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009680:	0d5b      	lsrs	r3, r3, #21
 8009682:	b2db      	uxtb	r3, r3
 8009684:	f003 0307 	and.w	r3, r3, #7
 8009688:	b2da      	uxtb	r2, r3
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009692:	0c9b      	lsrs	r3, r3, #18
 8009694:	b2db      	uxtb	r3, r3
 8009696:	f003 0307 	and.w	r3, r3, #7
 800969a:	b2da      	uxtb	r2, r3
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a4:	0bdb      	lsrs	r3, r3, #15
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	f003 0307 	and.w	r3, r3, #7
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	1c5a      	adds	r2, r3, #1
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	7e1b      	ldrb	r3, [r3, #24]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	f003 0307 	and.w	r3, r3, #7
 80096c6:	3302      	adds	r3, #2
 80096c8:	2201      	movs	r2, #1
 80096ca:	fa02 f303 	lsl.w	r3, r2, r3
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80096d2:	fb02 f203 	mul.w	r2, r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	7a1b      	ldrb	r3, [r3, #8]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 030f 	and.w	r3, r3, #15
 80096e4:	2201      	movs	r2, #1
 80096e6:	409a      	lsls	r2, r3
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80096f4:	0a52      	lsrs	r2, r2, #9
 80096f6:	fb02 f203 	mul.w	r2, r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009704:	661a      	str	r2, [r3, #96]	; 0x60
 8009706:	e031      	b.n	800976c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800970c:	2b01      	cmp	r3, #1
 800970e:	d11d      	bne.n	800974c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009714:	041b      	lsls	r3, r3, #16
 8009716:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800971e:	0c1b      	lsrs	r3, r3, #16
 8009720:	431a      	orrs	r2, r3
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	691b      	ldr	r3, [r3, #16]
 800972a:	3301      	adds	r3, #1
 800972c:	029a      	lsls	r2, r3, #10
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009740:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	661a      	str	r2, [r3, #96]	; 0x60
 800974a:	e00f      	b.n	800976c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a58      	ldr	r2, [pc, #352]	; (80098b4 <HAL_SD_GetCardCSD+0x344>)
 8009752:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009758:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e09d      	b.n	80098a8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009770:	0b9b      	lsrs	r3, r3, #14
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	b2da      	uxtb	r2, r3
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009782:	09db      	lsrs	r3, r3, #7
 8009784:	b2db      	uxtb	r3, r3
 8009786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800978a:	b2da      	uxtb	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009794:	b2db      	uxtb	r3, r3
 8009796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800979a:	b2da      	uxtb	r2, r3
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a4:	0fdb      	lsrs	r3, r3, #31
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b0:	0f5b      	lsrs	r3, r3, #29
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f003 0303 	and.w	r3, r3, #3
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c2:	0e9b      	lsrs	r3, r3, #26
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d4:	0d9b      	lsrs	r3, r3, #22
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	f003 030f 	and.w	r3, r3, #15
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e6:	0d5b      	lsrs	r3, r3, #21
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009802:	0c1b      	lsrs	r3, r3, #16
 8009804:	b2db      	uxtb	r3, r3
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	b2da      	uxtb	r2, r3
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009816:	0bdb      	lsrs	r3, r3, #15
 8009818:	b2db      	uxtb	r3, r3
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	b2da      	uxtb	r2, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982a:	0b9b      	lsrs	r3, r3, #14
 800982c:	b2db      	uxtb	r3, r3
 800982e:	f003 0301 	and.w	r3, r3, #1
 8009832:	b2da      	uxtb	r2, r3
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800983e:	0b5b      	lsrs	r3, r3, #13
 8009840:	b2db      	uxtb	r3, r3
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	b2da      	uxtb	r2, r3
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009852:	0b1b      	lsrs	r3, r3, #12
 8009854:	b2db      	uxtb	r3, r3
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	b2da      	uxtb	r2, r3
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009866:	0a9b      	lsrs	r3, r3, #10
 8009868:	b2db      	uxtb	r3, r3
 800986a:	f003 0303 	and.w	r3, r3, #3
 800986e:	b2da      	uxtb	r2, r3
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987a:	0a1b      	lsrs	r3, r3, #8
 800987c:	b2db      	uxtb	r3, r3
 800987e:	f003 0303 	and.w	r3, r3, #3
 8009882:	b2da      	uxtb	r2, r3
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988e:	085b      	lsrs	r3, r3, #1
 8009890:	b2db      	uxtb	r3, r3
 8009892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009896:	b2da      	uxtb	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr
 80098b4:	004005ff 	.word	0x004005ff

080098b8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80098b8:	b5b0      	push	{r4, r5, r7, lr}
 80098ba:	b08e      	sub	sp, #56	; 0x38
 80098bc:	af04      	add	r7, sp, #16
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2203      	movs	r2, #3
 80098c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d02e      	beq.n	8009930 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d8:	d106      	bne.n	80098e8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	639a      	str	r2, [r3, #56]	; 0x38
 80098e6:	e029      	b.n	800993c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098ee:	d10a      	bne.n	8009906 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f9b9 	bl	8009c68 <SD_WideBus_Enable>
 80098f6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fe:	431a      	orrs	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	639a      	str	r2, [r3, #56]	; 0x38
 8009904:	e01a      	b.n	800993c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f9f6 	bl	8009cfe <SD_WideBus_Disable>
 8009912:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991a:	431a      	orrs	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	639a      	str	r2, [r3, #56]	; 0x38
 8009920:	e00c      	b.n	800993c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009926:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	639a      	str	r2, [r3, #56]	; 0x38
 800992e:	e005      	b.n	800993c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009940:	2b00      	cmp	r3, #0
 8009942:	d009      	beq.n	8009958 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a18      	ldr	r2, [pc, #96]	; (80099ac <HAL_SD_ConfigWideBusOperation+0xf4>)
 800994a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e024      	b.n	80099a2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681d      	ldr	r5, [r3, #0]
 800997e:	466c      	mov	r4, sp
 8009980:	f107 0318 	add.w	r3, r7, #24
 8009984:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009988:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800998c:	f107 030c 	add.w	r3, r7, #12
 8009990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009992:	4628      	mov	r0, r5
 8009994:	f002 fa8e 	bl	800beb4 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3728      	adds	r7, #40	; 0x28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bdb0      	pop	{r4, r5, r7, pc}
 80099aa:	bf00      	nop
 80099ac:	004005ff 	.word	0x004005ff

080099b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80099b0:	b5b0      	push	{r4, r5, r7, lr}
 80099b2:	b094      	sub	sp, #80	; 0x50
 80099b4:	af04      	add	r7, sp, #16
 80099b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80099b8:	2301      	movs	r3, #1
 80099ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f002 fabf 	bl	800bf44 <SDMMC_GetPowerState>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d102      	bne.n	80099d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80099d0:	e0b7      	b.n	8009b42 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d02f      	beq.n	8009a3a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4618      	mov	r0, r3
 80099e0:	f002 fc3f 	bl	800c262 <SDMMC_CmdSendCID>
 80099e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80099ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ee:	e0a8      	b.n	8009b42 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2100      	movs	r1, #0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f002 fae9 	bl	800bfce <SDMMC_GetResponse>
 80099fc:	4602      	mov	r2, r0
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2104      	movs	r1, #4
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f002 fae0 	bl	800bfce <SDMMC_GetResponse>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2108      	movs	r1, #8
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f002 fad7 	bl	800bfce <SDMMC_GetResponse>
 8009a20:	4602      	mov	r2, r0
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	210c      	movs	r1, #12
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f002 face 	bl	800bfce <SDMMC_GetResponse>
 8009a32:	4602      	mov	r2, r0
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a3e:	2b03      	cmp	r3, #3
 8009a40:	d00d      	beq.n	8009a5e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f107 020e 	add.w	r2, r7, #14
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f002 fc45 	bl	800c2dc <SDMMC_CmdSetRelAdd>
 8009a52:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <SD_InitCard+0xae>
    {
      return errorstate;
 8009a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5c:	e071      	b.n	8009b42 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d036      	beq.n	8009ad4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009a66:	89fb      	ldrh	r3, [r7, #14]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a76:	041b      	lsls	r3, r3, #16
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	f002 fc0f 	bl	800c29e <SDMMC_CmdSendCSD>
 8009a80:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a8a:	e05a      	b.n	8009b42 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2100      	movs	r1, #0
 8009a92:	4618      	mov	r0, r3
 8009a94:	f002 fa9b 	bl	800bfce <SDMMC_GetResponse>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2104      	movs	r1, #4
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f002 fa92 	bl	800bfce <SDMMC_GetResponse>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2108      	movs	r1, #8
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f002 fa89 	bl	800bfce <SDMMC_GetResponse>
 8009abc:	4602      	mov	r2, r0
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	210c      	movs	r1, #12
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f002 fa80 	bl	800bfce <SDMMC_GetResponse>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2104      	movs	r1, #4
 8009ada:	4618      	mov	r0, r3
 8009adc:	f002 fa77 	bl	800bfce <SDMMC_GetResponse>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	0d1a      	lsrs	r2, r3, #20
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009ae8:	f107 0310 	add.w	r3, r7, #16
 8009aec:	4619      	mov	r1, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff fd3e 	bl	8009570 <HAL_SD_GetCardCSD>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d002      	beq.n	8009b00 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009afa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009afe:	e020      	b.n	8009b42 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6819      	ldr	r1, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b08:	041b      	lsls	r3, r3, #16
 8009b0a:	f04f 0400 	mov.w	r4, #0
 8009b0e:	461a      	mov	r2, r3
 8009b10:	4623      	mov	r3, r4
 8009b12:	4608      	mov	r0, r1
 8009b14:	f002 fabc 	bl	800c090 <SDMMC_CmdSelDesel>
 8009b18:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d001      	beq.n	8009b24 <SD_InitCard+0x174>
  {
    return errorstate;
 8009b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b22:	e00e      	b.n	8009b42 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681d      	ldr	r5, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	466c      	mov	r4, sp
 8009b2c:	f103 0210 	add.w	r2, r3, #16
 8009b30:	ca07      	ldmia	r2, {r0, r1, r2}
 8009b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009b36:	3304      	adds	r3, #4
 8009b38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	f002 f9ba 	bl	800beb4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3740      	adds	r7, #64	; 0x40
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009b4c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f002 fab6 	bl	800c0d6 <SDMMC_CmdGoIdleState>
 8009b6a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	e072      	b.n	8009c5c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f002 fac9 	bl	800c112 <SDMMC_CmdOperCond>
 8009b80:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00d      	beq.n	8009ba4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f002 fa9f 	bl	800c0d6 <SDMMC_CmdGoIdleState>
 8009b98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d004      	beq.n	8009baa <SD_PowerON+0x5e>
    {
      return errorstate;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	e05b      	b.n	8009c5c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d137      	bne.n	8009c22 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f002 fac9 	bl	800c150 <SDMMC_CmdAppCommand>
 8009bbe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d02d      	beq.n	8009c22 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009bca:	e047      	b.n	8009c5c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f002 fabc 	bl	800c150 <SDMMC_CmdAppCommand>
 8009bd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d001      	beq.n	8009be4 <SD_PowerON+0x98>
    {
      return errorstate;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	e03b      	b.n	8009c5c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	491e      	ldr	r1, [pc, #120]	; (8009c64 <SD_PowerON+0x118>)
 8009bea:	4618      	mov	r0, r3
 8009bec:	f002 fad2 	bl	800c194 <SDMMC_CmdAppOperCommand>
 8009bf0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009bfc:	e02e      	b.n	8009c5c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2100      	movs	r1, #0
 8009c04:	4618      	mov	r0, r3
 8009c06:	f002 f9e2 	bl	800bfce <SDMMC_GetResponse>
 8009c0a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	0fdb      	lsrs	r3, r3, #31
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d101      	bne.n	8009c18 <SD_PowerON+0xcc>
 8009c14:	2301      	movs	r3, #1
 8009c16:	e000      	b.n	8009c1a <SD_PowerON+0xce>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	613b      	str	r3, [r7, #16]

    count++;
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d802      	bhi.n	8009c32 <SD_PowerON+0xe6>
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d0cc      	beq.n	8009bcc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d902      	bls.n	8009c42 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c40:	e00c      	b.n	8009c5c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	645a      	str	r2, [r3, #68]	; 0x44
 8009c52:	e002      	b.n	8009c5a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	c1100000 	.word	0xc1100000

08009c68 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	2300      	movs	r3, #0
 8009c76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f002 f9a5 	bl	800bfce <SDMMC_GetResponse>
 8009c84:	4603      	mov	r3, r0
 8009c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c8e:	d102      	bne.n	8009c96 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c94:	e02f      	b.n	8009cf6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c96:	f107 030c 	add.w	r3, r7, #12
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f879 	bl	8009d94 <SD_FindSCR>
 8009ca2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	e023      	b.n	8009cf6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d01c      	beq.n	8009cf2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc0:	041b      	lsls	r3, r3, #16
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4610      	mov	r0, r2
 8009cc6:	f002 fa43 	bl	800c150 <SDMMC_CmdAppCommand>
 8009cca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	e00f      	b.n	8009cf6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2102      	movs	r1, #2
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f002 fa7d 	bl	800c1dc <SDMMC_CmdBusWidth>
 8009ce2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	e003      	b.n	8009cf6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e001      	b.n	8009cf6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009cf2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b086      	sub	sp, #24
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009d06:	2300      	movs	r3, #0
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2100      	movs	r1, #0
 8009d14:	4618      	mov	r0, r3
 8009d16:	f002 f95a 	bl	800bfce <SDMMC_GetResponse>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d24:	d102      	bne.n	8009d2c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d2a:	e02f      	b.n	8009d8c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009d2c:	f107 030c 	add.w	r3, r7, #12
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f82e 	bl	8009d94 <SD_FindSCR>
 8009d38:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	e023      	b.n	8009d8c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d01c      	beq.n	8009d88 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d56:	041b      	lsls	r3, r3, #16
 8009d58:	4619      	mov	r1, r3
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	f002 f9f8 	bl	800c150 <SDMMC_CmdAppCommand>
 8009d60:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	e00f      	b.n	8009d8c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2100      	movs	r1, #0
 8009d72:	4618      	mov	r0, r3
 8009d74:	f002 fa32 	bl	800c1dc <SDMMC_CmdBusWidth>
 8009d78:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	e003      	b.n	8009d8c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009d84:	2300      	movs	r3, #0
 8009d86:	e001      	b.n	8009d8c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009d94:	b590      	push	{r4, r7, lr}
 8009d96:	b08f      	sub	sp, #60	; 0x3c
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d9e:	f7fa fd99 	bl	80048d4 <HAL_GetTick>
 8009da2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009da8:	2300      	movs	r3, #0
 8009daa:	60bb      	str	r3, [r7, #8]
 8009dac:	2300      	movs	r3, #0
 8009dae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2108      	movs	r1, #8
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f002 f946 	bl	800c04c <SDMMC_CmdBlockLength>
 8009dc0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <SD_FindSCR+0x38>
  {
    return errorstate;
 8009dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dca:	e0a9      	b.n	8009f20 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd4:	041b      	lsls	r3, r3, #16
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4610      	mov	r0, r2
 8009dda:	f002 f9b9 	bl	800c150 <SDMMC_CmdAppCommand>
 8009dde:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <SD_FindSCR+0x56>
  {
    return errorstate;
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	e09a      	b.n	8009f20 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009dea:	f04f 33ff 	mov.w	r3, #4294967295
 8009dee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009df0:	2308      	movs	r3, #8
 8009df2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009df4:	2330      	movs	r3, #48	; 0x30
 8009df6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009df8:	2302      	movs	r3, #2
 8009dfa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009e00:	2301      	movs	r3, #1
 8009e02:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f107 0210 	add.w	r2, r7, #16
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f002 f8f0 	bl	800bff4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f002 fa01 	bl	800c220 <SDMMC_CmdSendSCR>
 8009e1e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d022      	beq.n	8009e6c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	e07a      	b.n	8009f20 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00e      	beq.n	8009e56 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6819      	ldr	r1, [r3, #0]
 8009e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	f107 0208 	add.w	r2, r7, #8
 8009e44:	18d4      	adds	r4, r2, r3
 8009e46:	4608      	mov	r0, r1
 8009e48:	f002 f860 	bl	800bf0c <SDMMC_ReadFIFO>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	6023      	str	r3, [r4, #0]
      index++;
 8009e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e52:	3301      	adds	r3, #1
 8009e54:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e56:	f7fa fd3d 	bl	80048d4 <HAL_GetTick>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5e:	1ad3      	subs	r3, r2, r3
 8009e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e64:	d102      	bne.n	8009e6c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e6a:	e059      	b.n	8009f20 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e72:	f240 432a 	movw	r3, #1066	; 0x42a
 8009e76:	4013      	ands	r3, r2
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d0d6      	beq.n	8009e2a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e82:	f003 0308 	and.w	r3, r3, #8
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d005      	beq.n	8009e96 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2208      	movs	r2, #8
 8009e90:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e92:	2308      	movs	r3, #8
 8009e94:	e044      	b.n	8009f20 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e9c:	f003 0302 	and.w	r3, r3, #2
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d005      	beq.n	8009eb0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009eac:	2302      	movs	r3, #2
 8009eae:	e037      	b.n	8009f20 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d005      	beq.n	8009eca <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009ec6:	2320      	movs	r3, #32
 8009ec8:	e02a      	b.n	8009f20 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ed2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	061a      	lsls	r2, r3, #24
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	021b      	lsls	r3, r3, #8
 8009edc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ee0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	0a1b      	lsrs	r3, r3, #8
 8009ee6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009eea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	0e1b      	lsrs	r3, r3, #24
 8009ef0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef4:	601a      	str	r2, [r3, #0]
    scr++;
 8009ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef8:	3304      	adds	r3, #4
 8009efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	061a      	lsls	r2, r3, #24
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	021b      	lsls	r3, r3, #8
 8009f04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f08:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	0a1b      	lsrs	r3, r3, #8
 8009f0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009f12:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	0e1b      	lsrs	r3, r3, #24
 8009f18:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	373c      	adds	r7, #60	; 0x3c
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd90      	pop	{r4, r7, pc}

08009f28 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e025      	b.n	8009f88 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d106      	bne.n	8009f56 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7f8 fd4f 	bl	80029f4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2202      	movs	r2, #2
 8009f5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3304      	adds	r3, #4
 8009f66:	4619      	mov	r1, r3
 8009f68:	4610      	mov	r0, r2
 8009f6a:	f001 fe7d 	bl	800bc68 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	461a      	mov	r2, r3
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	f001 fee7 	bl	800bd4c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d101      	bne.n	8009fac <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009fa8:	2302      	movs	r3, #2
 8009faa:	e018      	b.n	8009fde <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2202      	movs	r2, #2
 8009fb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	68b9      	ldr	r1, [r7, #8]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f001 ff45 	bl	800be4c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d104      	bne.n	8009fd4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2205      	movs	r2, #5
 8009fce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009fd2:	e003      	b.n	8009fdc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b02      	cmp	r3, #2
 8009ffa:	d101      	bne.n	800a000 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e00e      	b.n	800a01e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	4618      	mov	r0, r3
 800a010:	f001 ff3d 	bl	800be8e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a01c:	2300      	movs	r3, #0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e04c      	b.n	800a0d4 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a040:	b2db      	uxtb	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	d106      	bne.n	800a054 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f7f8 f9ac 	bl	80023ac <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2202      	movs	r2, #2
 800a058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 0203 	bic.w	r2, r2, #3
 800a06a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	4b19      	ldr	r3, [pc, #100]	; (800a0dc <HAL_SPDIFRX_Init+0xb4>)
 800a078:	4013      	ands	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800a084:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800a08a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800a090:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800a096:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800a09c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800a0a2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800a0a8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800a0ae:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800a0b4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	fff88407 	.word	0xfff88407

0800a0e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d101      	bne.n	800a0f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e084      	b.n	800a1fc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	2b00      	cmp	r3, #0
 800a102:	d106      	bne.n	800a112 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7f8 f98f 	bl	8002430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2202      	movs	r2, #2
 800a116:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a128:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a132:	d902      	bls.n	800a13a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a134:	2300      	movs	r3, #0
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	e002      	b.n	800a140 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a13a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a13e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a148:	d007      	beq.n	800a15a <HAL_SPI_Init+0x7a>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a152:	d002      	beq.n	800a15a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10b      	bne.n	800a17a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a16a:	d903      	bls.n	800a174 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2202      	movs	r2, #2
 800a170:	631a      	str	r2, [r3, #48]	; 0x30
 800a172:	e002      	b.n	800a17a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	685a      	ldr	r2, [r3, #4]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	431a      	orrs	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	431a      	orrs	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	431a      	orrs	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a198:	431a      	orrs	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	ea42 0103 	orr.w	r1, r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	0c1b      	lsrs	r3, r3, #16
 800a1ba:	f003 0204 	and.w	r2, r3, #4
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	ea42 0103 	orr.w	r1, r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	430a      	orrs	r2, r1
 800a1da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	69da      	ldr	r2, [r3, #28]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d101      	bne.n	800a216 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e01d      	b.n	800a252 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d106      	bne.n	800a230 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7f8 f962 	bl	80024f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3304      	adds	r3, #4
 800a240:	4619      	mov	r1, r3
 800a242:	4610      	mov	r0, r2
 800a244:	f000 fb78 	bl	800a938 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
	...

0800a25c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b085      	sub	sp, #20
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68da      	ldr	r2, [r3, #12]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f042 0201 	orr.w	r2, r2, #1
 800a272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689a      	ldr	r2, [r3, #8]
 800a27a:	4b0c      	ldr	r3, [pc, #48]	; (800a2ac <HAL_TIM_Base_Start_IT+0x50>)
 800a27c:	4013      	ands	r3, r2
 800a27e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2b06      	cmp	r3, #6
 800a284:	d00b      	beq.n	800a29e <HAL_TIM_Base_Start_IT+0x42>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a28c:	d007      	beq.n	800a29e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f042 0201 	orr.w	r2, r2, #1
 800a29c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	00010007 	.word	0x00010007

0800a2b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e01d      	b.n	800a2fe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7f8 f97a 	bl	80025d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	f000 fb22 	bl	800a938 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b082      	sub	sp, #8
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d122      	bne.n	800a362 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	f003 0302 	and.w	r3, r3, #2
 800a326:	2b02      	cmp	r3, #2
 800a328:	d11b      	bne.n	800a362 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f06f 0202 	mvn.w	r2, #2
 800a332:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	f003 0303 	and.w	r3, r3, #3
 800a344:	2b00      	cmp	r3, #0
 800a346:	d003      	beq.n	800a350 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 fad7 	bl	800a8fc <HAL_TIM_IC_CaptureCallback>
 800a34e:	e005      	b.n	800a35c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fac9 	bl	800a8e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fada 	bl	800a910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	f003 0304 	and.w	r3, r3, #4
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	d122      	bne.n	800a3b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f003 0304 	and.w	r3, r3, #4
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	d11b      	bne.n	800a3b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f06f 0204 	mvn.w	r2, #4
 800a386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2202      	movs	r2, #2
 800a38c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	699b      	ldr	r3, [r3, #24]
 800a394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d003      	beq.n	800a3a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 faad 	bl	800a8fc <HAL_TIM_IC_CaptureCallback>
 800a3a2:	e005      	b.n	800a3b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fa9f 	bl	800a8e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fab0 	bl	800a910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	f003 0308 	and.w	r3, r3, #8
 800a3c0:	2b08      	cmp	r3, #8
 800a3c2:	d122      	bne.n	800a40a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	f003 0308 	and.w	r3, r3, #8
 800a3ce:	2b08      	cmp	r3, #8
 800a3d0:	d11b      	bne.n	800a40a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f06f 0208 	mvn.w	r2, #8
 800a3da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2204      	movs	r2, #4
 800a3e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	f003 0303 	and.w	r3, r3, #3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d003      	beq.n	800a3f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 fa83 	bl	800a8fc <HAL_TIM_IC_CaptureCallback>
 800a3f6:	e005      	b.n	800a404 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fa75 	bl	800a8e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fa86 	bl	800a910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	f003 0310 	and.w	r3, r3, #16
 800a414:	2b10      	cmp	r3, #16
 800a416:	d122      	bne.n	800a45e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	f003 0310 	and.w	r3, r3, #16
 800a422:	2b10      	cmp	r3, #16
 800a424:	d11b      	bne.n	800a45e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f06f 0210 	mvn.w	r2, #16
 800a42e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2208      	movs	r2, #8
 800a434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	69db      	ldr	r3, [r3, #28]
 800a43c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a440:	2b00      	cmp	r3, #0
 800a442:	d003      	beq.n	800a44c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fa59 	bl	800a8fc <HAL_TIM_IC_CaptureCallback>
 800a44a:	e005      	b.n	800a458 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fa4b 	bl	800a8e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa5c 	bl	800a910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d10e      	bne.n	800a48a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b01      	cmp	r3, #1
 800a478:	d107      	bne.n	800a48a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f06f 0201 	mvn.w	r2, #1
 800a482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f7f7 fb89 	bl	8001b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a494:	2b80      	cmp	r3, #128	; 0x80
 800a496:	d10e      	bne.n	800a4b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4a2:	2b80      	cmp	r3, #128	; 0x80
 800a4a4:	d107      	bne.n	800a4b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f000 feef 	bl	800b294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4c4:	d10e      	bne.n	800a4e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d0:	2b80      	cmp	r3, #128	; 0x80
 800a4d2:	d107      	bne.n	800a4e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a4dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fee2 	bl	800b2a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ee:	2b40      	cmp	r3, #64	; 0x40
 800a4f0:	d10e      	bne.n	800a510 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fc:	2b40      	cmp	r3, #64	; 0x40
 800a4fe:	d107      	bne.n	800a510 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 fa0a 	bl	800a924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	f003 0320 	and.w	r3, r3, #32
 800a51a:	2b20      	cmp	r3, #32
 800a51c:	d10e      	bne.n	800a53c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f003 0320 	and.w	r3, r3, #32
 800a528:	2b20      	cmp	r3, #32
 800a52a:	d107      	bne.n	800a53c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f06f 0220 	mvn.w	r2, #32
 800a534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fea2 	bl	800b280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a53c:	bf00      	nop
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a556:	2b01      	cmp	r3, #1
 800a558:	d101      	bne.n	800a55e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a55a:	2302      	movs	r3, #2
 800a55c:	e105      	b.n	800a76a <HAL_TIM_PWM_ConfigChannel+0x226>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2202      	movs	r2, #2
 800a56a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b14      	cmp	r3, #20
 800a572:	f200 80f0 	bhi.w	800a756 <HAL_TIM_PWM_ConfigChannel+0x212>
 800a576:	a201      	add	r2, pc, #4	; (adr r2, 800a57c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57c:	0800a5d1 	.word	0x0800a5d1
 800a580:	0800a757 	.word	0x0800a757
 800a584:	0800a757 	.word	0x0800a757
 800a588:	0800a757 	.word	0x0800a757
 800a58c:	0800a611 	.word	0x0800a611
 800a590:	0800a757 	.word	0x0800a757
 800a594:	0800a757 	.word	0x0800a757
 800a598:	0800a757 	.word	0x0800a757
 800a59c:	0800a653 	.word	0x0800a653
 800a5a0:	0800a757 	.word	0x0800a757
 800a5a4:	0800a757 	.word	0x0800a757
 800a5a8:	0800a757 	.word	0x0800a757
 800a5ac:	0800a693 	.word	0x0800a693
 800a5b0:	0800a757 	.word	0x0800a757
 800a5b4:	0800a757 	.word	0x0800a757
 800a5b8:	0800a757 	.word	0x0800a757
 800a5bc:	0800a6d5 	.word	0x0800a6d5
 800a5c0:	0800a757 	.word	0x0800a757
 800a5c4:	0800a757 	.word	0x0800a757
 800a5c8:	0800a757 	.word	0x0800a757
 800a5cc:	0800a715 	.word	0x0800a715
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68b9      	ldr	r1, [r7, #8]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f000 fa4e 	bl	800aa78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	699a      	ldr	r2, [r3, #24]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f042 0208 	orr.w	r2, r2, #8
 800a5ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	699a      	ldr	r2, [r3, #24]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0204 	bic.w	r2, r2, #4
 800a5fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6999      	ldr	r1, [r3, #24]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	691a      	ldr	r2, [r3, #16]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	619a      	str	r2, [r3, #24]
      break;
 800a60e:	e0a3      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68b9      	ldr	r1, [r7, #8]
 800a616:	4618      	mov	r0, r3
 800a618:	f000 faa0 	bl	800ab5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	699a      	ldr	r2, [r3, #24]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a62a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	699a      	ldr	r2, [r3, #24]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a63a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	6999      	ldr	r1, [r3, #24]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	021a      	lsls	r2, r3, #8
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	430a      	orrs	r2, r1
 800a64e:	619a      	str	r2, [r3, #24]
      break;
 800a650:	e082      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68b9      	ldr	r1, [r7, #8]
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 faf7 	bl	800ac4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69da      	ldr	r2, [r3, #28]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f042 0208 	orr.w	r2, r2, #8
 800a66c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69da      	ldr	r2, [r3, #28]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f022 0204 	bic.w	r2, r2, #4
 800a67c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69d9      	ldr	r1, [r3, #28]
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	691a      	ldr	r2, [r3, #16]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	61da      	str	r2, [r3, #28]
      break;
 800a690:	e062      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68b9      	ldr	r1, [r7, #8]
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fb4d 	bl	800ad38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69da      	ldr	r2, [r3, #28]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69da      	ldr	r2, [r3, #28]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	69d9      	ldr	r1, [r3, #28]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	021a      	lsls	r2, r3, #8
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	61da      	str	r2, [r3, #28]
      break;
 800a6d2:	e041      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fb84 	bl	800ade8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f042 0208 	orr.w	r2, r2, #8
 800a6ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f022 0204 	bic.w	r2, r2, #4
 800a6fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	691a      	ldr	r2, [r3, #16]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a712:	e021      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68b9      	ldr	r1, [r7, #8]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fbb6 	bl	800ae8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a72e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a73e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	021a      	lsls	r2, r3, #8
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	430a      	orrs	r2, r1
 800a752:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a754:	e000      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a756:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop

0800a774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a784:	2b01      	cmp	r3, #1
 800a786:	d101      	bne.n	800a78c <HAL_TIM_ConfigClockSource+0x18>
 800a788:	2302      	movs	r3, #2
 800a78a:	e0a6      	b.n	800a8da <HAL_TIM_ConfigClockSource+0x166>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	4b4f      	ldr	r3, [pc, #316]	; (800a8e4 <HAL_TIM_ConfigClockSource+0x170>)
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a7b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b40      	cmp	r3, #64	; 0x40
 800a7c2:	d067      	beq.n	800a894 <HAL_TIM_ConfigClockSource+0x120>
 800a7c4:	2b40      	cmp	r3, #64	; 0x40
 800a7c6:	d80b      	bhi.n	800a7e0 <HAL_TIM_ConfigClockSource+0x6c>
 800a7c8:	2b10      	cmp	r3, #16
 800a7ca:	d073      	beq.n	800a8b4 <HAL_TIM_ConfigClockSource+0x140>
 800a7cc:	2b10      	cmp	r3, #16
 800a7ce:	d802      	bhi.n	800a7d6 <HAL_TIM_ConfigClockSource+0x62>
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d06f      	beq.n	800a8b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a7d4:	e078      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	d06c      	beq.n	800a8b4 <HAL_TIM_ConfigClockSource+0x140>
 800a7da:	2b30      	cmp	r3, #48	; 0x30
 800a7dc:	d06a      	beq.n	800a8b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a7de:	e073      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a7e0:	2b70      	cmp	r3, #112	; 0x70
 800a7e2:	d00d      	beq.n	800a800 <HAL_TIM_ConfigClockSource+0x8c>
 800a7e4:	2b70      	cmp	r3, #112	; 0x70
 800a7e6:	d804      	bhi.n	800a7f2 <HAL_TIM_ConfigClockSource+0x7e>
 800a7e8:	2b50      	cmp	r3, #80	; 0x50
 800a7ea:	d033      	beq.n	800a854 <HAL_TIM_ConfigClockSource+0xe0>
 800a7ec:	2b60      	cmp	r3, #96	; 0x60
 800a7ee:	d041      	beq.n	800a874 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a7f0:	e06a      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a7f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7f6:	d066      	beq.n	800a8c6 <HAL_TIM_ConfigClockSource+0x152>
 800a7f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7fc:	d017      	beq.n	800a82e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a7fe:	e063      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6818      	ldr	r0, [r3, #0]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	6899      	ldr	r1, [r3, #8]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	f000 fc0a 	bl	800b028 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a822:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	609a      	str	r2, [r3, #8]
      break;
 800a82c:	e04c      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6818      	ldr	r0, [r3, #0]
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	6899      	ldr	r1, [r3, #8]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	f000 fbf3 	bl	800b028 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	689a      	ldr	r2, [r3, #8]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a850:	609a      	str	r2, [r3, #8]
      break;
 800a852:	e039      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6818      	ldr	r0, [r3, #0]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	6859      	ldr	r1, [r3, #4]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	461a      	mov	r2, r3
 800a862:	f000 fb67 	bl	800af34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2150      	movs	r1, #80	; 0x50
 800a86c:	4618      	mov	r0, r3
 800a86e:	f000 fbc0 	bl	800aff2 <TIM_ITRx_SetConfig>
      break;
 800a872:	e029      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6818      	ldr	r0, [r3, #0]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	6859      	ldr	r1, [r3, #4]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	461a      	mov	r2, r3
 800a882:	f000 fb86 	bl	800af92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2160      	movs	r1, #96	; 0x60
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 fbb0 	bl	800aff2 <TIM_ITRx_SetConfig>
      break;
 800a892:	e019      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	6859      	ldr	r1, [r3, #4]
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	f000 fb47 	bl	800af34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2140      	movs	r1, #64	; 0x40
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 fba0 	bl	800aff2 <TIM_ITRx_SetConfig>
      break;
 800a8b2:	e009      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4610      	mov	r0, r2
 800a8c0:	f000 fb97 	bl	800aff2 <TIM_ITRx_SetConfig>
      break;
 800a8c4:	e000      	b.n	800a8c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a8c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2201      	movs	r2, #1
 800a8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	fffeff88 	.word	0xfffeff88

0800a8e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8f0:	bf00      	nop
 800a8f2:	370c      	adds	r7, #12
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a904:	bf00      	nop
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a40      	ldr	r2, [pc, #256]	; (800aa4c <TIM_Base_SetConfig+0x114>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d013      	beq.n	800a978 <TIM_Base_SetConfig+0x40>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a956:	d00f      	beq.n	800a978 <TIM_Base_SetConfig+0x40>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a3d      	ldr	r2, [pc, #244]	; (800aa50 <TIM_Base_SetConfig+0x118>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d00b      	beq.n	800a978 <TIM_Base_SetConfig+0x40>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a3c      	ldr	r2, [pc, #240]	; (800aa54 <TIM_Base_SetConfig+0x11c>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d007      	beq.n	800a978 <TIM_Base_SetConfig+0x40>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a3b      	ldr	r2, [pc, #236]	; (800aa58 <TIM_Base_SetConfig+0x120>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d003      	beq.n	800a978 <TIM_Base_SetConfig+0x40>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a3a      	ldr	r2, [pc, #232]	; (800aa5c <TIM_Base_SetConfig+0x124>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d108      	bne.n	800a98a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a97e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	4313      	orrs	r3, r2
 800a988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a2f      	ldr	r2, [pc, #188]	; (800aa4c <TIM_Base_SetConfig+0x114>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d02b      	beq.n	800a9ea <TIM_Base_SetConfig+0xb2>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a998:	d027      	beq.n	800a9ea <TIM_Base_SetConfig+0xb2>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4a2c      	ldr	r2, [pc, #176]	; (800aa50 <TIM_Base_SetConfig+0x118>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d023      	beq.n	800a9ea <TIM_Base_SetConfig+0xb2>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a2b      	ldr	r2, [pc, #172]	; (800aa54 <TIM_Base_SetConfig+0x11c>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d01f      	beq.n	800a9ea <TIM_Base_SetConfig+0xb2>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a2a      	ldr	r2, [pc, #168]	; (800aa58 <TIM_Base_SetConfig+0x120>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d01b      	beq.n	800a9ea <TIM_Base_SetConfig+0xb2>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a29      	ldr	r2, [pc, #164]	; (800aa5c <TIM_Base_SetConfig+0x124>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d017      	beq.n	800a9ea <TIM_Base_SetConfig+0xb2>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a28      	ldr	r2, [pc, #160]	; (800aa60 <TIM_Base_SetConfig+0x128>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d013      	beq.n	800a9ea <TIM_Base_SetConfig+0xb2>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a27      	ldr	r2, [pc, #156]	; (800aa64 <TIM_Base_SetConfig+0x12c>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d00f      	beq.n	800a9ea <TIM_Base_SetConfig+0xb2>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a26      	ldr	r2, [pc, #152]	; (800aa68 <TIM_Base_SetConfig+0x130>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d00b      	beq.n	800a9ea <TIM_Base_SetConfig+0xb2>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a25      	ldr	r2, [pc, #148]	; (800aa6c <TIM_Base_SetConfig+0x134>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d007      	beq.n	800a9ea <TIM_Base_SetConfig+0xb2>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a24      	ldr	r2, [pc, #144]	; (800aa70 <TIM_Base_SetConfig+0x138>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d003      	beq.n	800a9ea <TIM_Base_SetConfig+0xb2>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a23      	ldr	r2, [pc, #140]	; (800aa74 <TIM_Base_SetConfig+0x13c>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d108      	bne.n	800a9fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4a0a      	ldr	r2, [pc, #40]	; (800aa4c <TIM_Base_SetConfig+0x114>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d003      	beq.n	800aa30 <TIM_Base_SetConfig+0xf8>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a0c      	ldr	r2, [pc, #48]	; (800aa5c <TIM_Base_SetConfig+0x124>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d103      	bne.n	800aa38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	691a      	ldr	r2, [r3, #16]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	615a      	str	r2, [r3, #20]
}
 800aa3e:	bf00      	nop
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	40010000 	.word	0x40010000
 800aa50:	40000400 	.word	0x40000400
 800aa54:	40000800 	.word	0x40000800
 800aa58:	40000c00 	.word	0x40000c00
 800aa5c:	40010400 	.word	0x40010400
 800aa60:	40014000 	.word	0x40014000
 800aa64:	40014400 	.word	0x40014400
 800aa68:	40014800 	.word	0x40014800
 800aa6c:	40001800 	.word	0x40001800
 800aa70:	40001c00 	.word	0x40001c00
 800aa74:	40002000 	.word	0x40002000

0800aa78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	f023 0201 	bic.w	r2, r3, #1
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	4b2b      	ldr	r3, [pc, #172]	; (800ab50 <TIM_OC1_SetConfig+0xd8>)
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f023 0303 	bic.w	r3, r3, #3
 800aaae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	f023 0302 	bic.w	r3, r3, #2
 800aac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a21      	ldr	r2, [pc, #132]	; (800ab54 <TIM_OC1_SetConfig+0xdc>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d003      	beq.n	800aadc <TIM_OC1_SetConfig+0x64>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a20      	ldr	r2, [pc, #128]	; (800ab58 <TIM_OC1_SetConfig+0xe0>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d10c      	bne.n	800aaf6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f023 0308 	bic.w	r3, r3, #8
 800aae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	697a      	ldr	r2, [r7, #20]
 800aaea:	4313      	orrs	r3, r2
 800aaec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f023 0304 	bic.w	r3, r3, #4
 800aaf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a16      	ldr	r2, [pc, #88]	; (800ab54 <TIM_OC1_SetConfig+0xdc>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d003      	beq.n	800ab06 <TIM_OC1_SetConfig+0x8e>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a15      	ldr	r2, [pc, #84]	; (800ab58 <TIM_OC1_SetConfig+0xe0>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d111      	bne.n	800ab2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	695b      	ldr	r3, [r3, #20]
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	621a      	str	r2, [r3, #32]
}
 800ab44:	bf00      	nop
 800ab46:	371c      	adds	r7, #28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	fffeff8f 	.word	0xfffeff8f
 800ab54:	40010000 	.word	0x40010000
 800ab58:	40010400 	.word	0x40010400

0800ab5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b087      	sub	sp, #28
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	f023 0210 	bic.w	r2, r3, #16
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	4b2e      	ldr	r3, [pc, #184]	; (800ac40 <TIM_OC2_SetConfig+0xe4>)
 800ab88:	4013      	ands	r3, r2
 800ab8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	021b      	lsls	r3, r3, #8
 800ab9a:	68fa      	ldr	r2, [r7, #12]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	f023 0320 	bic.w	r3, r3, #32
 800aba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	011b      	lsls	r3, r3, #4
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a23      	ldr	r2, [pc, #140]	; (800ac44 <TIM_OC2_SetConfig+0xe8>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d003      	beq.n	800abc4 <TIM_OC2_SetConfig+0x68>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a22      	ldr	r2, [pc, #136]	; (800ac48 <TIM_OC2_SetConfig+0xec>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d10d      	bne.n	800abe0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a18      	ldr	r2, [pc, #96]	; (800ac44 <TIM_OC2_SetConfig+0xe8>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d003      	beq.n	800abf0 <TIM_OC2_SetConfig+0x94>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a17      	ldr	r2, [pc, #92]	; (800ac48 <TIM_OC2_SetConfig+0xec>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d113      	bne.n	800ac18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	695b      	ldr	r3, [r3, #20]
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	699b      	ldr	r3, [r3, #24]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	685a      	ldr	r2, [r3, #4]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	621a      	str	r2, [r3, #32]
}
 800ac32:	bf00      	nop
 800ac34:	371c      	adds	r7, #28
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	feff8fff 	.word	0xfeff8fff
 800ac44:	40010000 	.word	0x40010000
 800ac48:	40010400 	.word	0x40010400

0800ac4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a1b      	ldr	r3, [r3, #32]
 800ac5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	69db      	ldr	r3, [r3, #28]
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	4b2d      	ldr	r3, [pc, #180]	; (800ad2c <TIM_OC3_SetConfig+0xe0>)
 800ac78:	4013      	ands	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f023 0303 	bic.w	r3, r3, #3
 800ac82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	021b      	lsls	r3, r3, #8
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	4a22      	ldr	r2, [pc, #136]	; (800ad30 <TIM_OC3_SetConfig+0xe4>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d003      	beq.n	800acb2 <TIM_OC3_SetConfig+0x66>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a21      	ldr	r2, [pc, #132]	; (800ad34 <TIM_OC3_SetConfig+0xe8>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d10d      	bne.n	800acce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	021b      	lsls	r3, r3, #8
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800accc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a17      	ldr	r2, [pc, #92]	; (800ad30 <TIM_OC3_SetConfig+0xe4>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d003      	beq.n	800acde <TIM_OC3_SetConfig+0x92>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a16      	ldr	r2, [pc, #88]	; (800ad34 <TIM_OC3_SetConfig+0xe8>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d113      	bne.n	800ad06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ace4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	011b      	lsls	r3, r3, #4
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	699b      	ldr	r3, [r3, #24]
 800acfe:	011b      	lsls	r3, r3, #4
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	685a      	ldr	r2, [r3, #4]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	621a      	str	r2, [r3, #32]
}
 800ad20:	bf00      	nop
 800ad22:	371c      	adds	r7, #28
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr
 800ad2c:	fffeff8f 	.word	0xfffeff8f
 800ad30:	40010000 	.word	0x40010000
 800ad34:	40010400 	.word	0x40010400

0800ad38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a1b      	ldr	r3, [r3, #32]
 800ad52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	69db      	ldr	r3, [r3, #28]
 800ad5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	4b1e      	ldr	r3, [pc, #120]	; (800addc <TIM_OC4_SetConfig+0xa4>)
 800ad64:	4013      	ands	r3, r2
 800ad66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	021b      	lsls	r3, r3, #8
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	031b      	lsls	r3, r3, #12
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a13      	ldr	r2, [pc, #76]	; (800ade0 <TIM_OC4_SetConfig+0xa8>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d003      	beq.n	800ada0 <TIM_OC4_SetConfig+0x68>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a12      	ldr	r2, [pc, #72]	; (800ade4 <TIM_OC4_SetConfig+0xac>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d109      	bne.n	800adb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ada6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	695b      	ldr	r3, [r3, #20]
 800adac:	019b      	lsls	r3, r3, #6
 800adae:	697a      	ldr	r2, [r7, #20]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	697a      	ldr	r2, [r7, #20]
 800adb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	621a      	str	r2, [r3, #32]
}
 800adce:	bf00      	nop
 800add0:	371c      	adds	r7, #28
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	feff8fff 	.word	0xfeff8fff
 800ade0:	40010000 	.word	0x40010000
 800ade4:	40010400 	.word	0x40010400

0800ade8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ade8:	b480      	push	{r7}
 800adea:	b087      	sub	sp, #28
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a1b      	ldr	r3, [r3, #32]
 800adf6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	4b1b      	ldr	r3, [pc, #108]	; (800ae80 <TIM_OC5_SetConfig+0x98>)
 800ae14:	4013      	ands	r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ae28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	041b      	lsls	r3, r3, #16
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a12      	ldr	r2, [pc, #72]	; (800ae84 <TIM_OC5_SetConfig+0x9c>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d003      	beq.n	800ae46 <TIM_OC5_SetConfig+0x5e>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a11      	ldr	r2, [pc, #68]	; (800ae88 <TIM_OC5_SetConfig+0xa0>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d109      	bne.n	800ae5a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	021b      	lsls	r3, r3, #8
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	693a      	ldr	r2, [r7, #16]
 800ae72:	621a      	str	r2, [r3, #32]
}
 800ae74:	bf00      	nop
 800ae76:	371c      	adds	r7, #28
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	fffeff8f 	.word	0xfffeff8f
 800ae84:	40010000 	.word	0x40010000
 800ae88:	40010400 	.word	0x40010400

0800ae8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b087      	sub	sp, #28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	4b1c      	ldr	r3, [pc, #112]	; (800af28 <TIM_OC6_SetConfig+0x9c>)
 800aeb8:	4013      	ands	r3, r2
 800aeba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	021b      	lsls	r3, r3, #8
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	051b      	lsls	r3, r3, #20
 800aed6:	693a      	ldr	r2, [r7, #16]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a13      	ldr	r2, [pc, #76]	; (800af2c <TIM_OC6_SetConfig+0xa0>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d003      	beq.n	800aeec <TIM_OC6_SetConfig+0x60>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a12      	ldr	r2, [pc, #72]	; (800af30 <TIM_OC6_SetConfig+0xa4>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d109      	bne.n	800af00 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aef2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	029b      	lsls	r3, r3, #10
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	697a      	ldr	r2, [r7, #20]
 800af04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	685a      	ldr	r2, [r3, #4]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	621a      	str	r2, [r3, #32]
}
 800af1a:	bf00      	nop
 800af1c:	371c      	adds	r7, #28
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	feff8fff 	.word	0xfeff8fff
 800af2c:	40010000 	.word	0x40010000
 800af30:	40010400 	.word	0x40010400

0800af34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6a1b      	ldr	r3, [r3, #32]
 800af44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	f023 0201 	bic.w	r2, r3, #1
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	699b      	ldr	r3, [r3, #24]
 800af56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	011b      	lsls	r3, r3, #4
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	4313      	orrs	r3, r2
 800af68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f023 030a 	bic.w	r3, r3, #10
 800af70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af72:	697a      	ldr	r2, [r7, #20]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	4313      	orrs	r3, r2
 800af78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	621a      	str	r2, [r3, #32]
}
 800af86:	bf00      	nop
 800af88:	371c      	adds	r7, #28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af92:	b480      	push	{r7}
 800af94:	b087      	sub	sp, #28
 800af96:	af00      	add	r7, sp, #0
 800af98:	60f8      	str	r0, [r7, #12]
 800af9a:	60b9      	str	r1, [r7, #8]
 800af9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6a1b      	ldr	r3, [r3, #32]
 800afa2:	f023 0210 	bic.w	r2, r3, #16
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6a1b      	ldr	r3, [r3, #32]
 800afb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800afbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	031b      	lsls	r3, r3, #12
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	4313      	orrs	r3, r2
 800afc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800afce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	011b      	lsls	r3, r3, #4
 800afd4:	693a      	ldr	r2, [r7, #16]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	621a      	str	r2, [r3, #32]
}
 800afe6:	bf00      	nop
 800afe8:	371c      	adds	r7, #28
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aff2:	b480      	push	{r7}
 800aff4:	b085      	sub	sp, #20
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4313      	orrs	r3, r2
 800b010:	f043 0307 	orr.w	r3, r3, #7
 800b014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	609a      	str	r2, [r3, #8]
}
 800b01c:	bf00      	nop
 800b01e:	3714      	adds	r7, #20
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b028:	b480      	push	{r7}
 800b02a:	b087      	sub	sp, #28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	607a      	str	r2, [r7, #4]
 800b034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	021a      	lsls	r2, r3, #8
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	431a      	orrs	r2, r3
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	4313      	orrs	r3, r2
 800b050:	697a      	ldr	r2, [r7, #20]
 800b052:	4313      	orrs	r3, r2
 800b054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	609a      	str	r2, [r3, #8]
}
 800b05c:	bf00      	nop
 800b05e:	371c      	adds	r7, #28
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d101      	bne.n	800b080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b07c:	2302      	movs	r3, #2
 800b07e:	e06d      	b.n	800b15c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a30      	ldr	r2, [pc, #192]	; (800b168 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d004      	beq.n	800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a2f      	ldr	r2, [pc, #188]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d108      	bne.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a20      	ldr	r2, [pc, #128]	; (800b168 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d022      	beq.n	800b130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0f2:	d01d      	beq.n	800b130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a1d      	ldr	r2, [pc, #116]	; (800b170 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d018      	beq.n	800b130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a1c      	ldr	r2, [pc, #112]	; (800b174 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d013      	beq.n	800b130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a1a      	ldr	r2, [pc, #104]	; (800b178 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d00e      	beq.n	800b130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a15      	ldr	r2, [pc, #84]	; (800b16c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d009      	beq.n	800b130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a16      	ldr	r2, [pc, #88]	; (800b17c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d004      	beq.n	800b130 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a15      	ldr	r2, [pc, #84]	; (800b180 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d10c      	bne.n	800b14a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b136:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	4313      	orrs	r3, r2
 800b140:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	40010000 	.word	0x40010000
 800b16c:	40010400 	.word	0x40010400
 800b170:	40000400 	.word	0x40000400
 800b174:	40000800 	.word	0x40000800
 800b178:	40000c00 	.word	0x40000c00
 800b17c:	40014000 	.word	0x40014000
 800b180:	40001800 	.word	0x40001800

0800b184 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b18e:	2300      	movs	r3, #0
 800b190:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d101      	bne.n	800b1a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b19c:	2302      	movs	r3, #2
 800b19e:	e065      	b.n	800b26c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	691b      	ldr	r3, [r3, #16]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b206:	4313      	orrs	r3, r2
 800b208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	041b      	lsls	r3, r3, #16
 800b216:	4313      	orrs	r3, r2
 800b218:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a16      	ldr	r2, [pc, #88]	; (800b278 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d004      	beq.n	800b22e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a14      	ldr	r2, [pc, #80]	; (800b27c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d115      	bne.n	800b25a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b238:	051b      	lsls	r3, r3, #20
 800b23a:	4313      	orrs	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	69db      	ldr	r3, [r3, #28]
 800b248:	4313      	orrs	r3, r2
 800b24a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	6a1b      	ldr	r3, [r3, #32]
 800b256:	4313      	orrs	r3, r2
 800b258:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	40010000 	.word	0x40010000
 800b27c:	40010400 	.word	0x40010400

0800b280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b288:	bf00      	nop
 800b28a:	370c      	adds	r7, #12
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr

0800b2bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e040      	b.n	800b350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d106      	bne.n	800b2e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7f7 fa64 	bl	80027ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2224      	movs	r2, #36	; 0x24
 800b2e8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681a      	ldr	r2, [r3, #0]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f022 0201 	bic.w	r2, r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f8be 	bl	800b47c <UART_SetConfig>
 800b300:	4603      	mov	r3, r0
 800b302:	2b01      	cmp	r3, #1
 800b304:	d101      	bne.n	800b30a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e022      	b.n	800b350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 fb5c 	bl	800b9d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	685a      	ldr	r2, [r3, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	689a      	ldr	r2, [r3, #8]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f042 0201 	orr.w	r2, r2, #1
 800b346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 fbe3 	bl	800bb14 <UART_CheckIdleState>
 800b34e:	4603      	mov	r3, r0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3708      	adds	r7, #8
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08a      	sub	sp, #40	; 0x28
 800b35c:	af02      	add	r7, sp, #8
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	603b      	str	r3, [r7, #0]
 800b364:	4613      	mov	r3, r2
 800b366:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b36c:	2b20      	cmp	r3, #32
 800b36e:	d17f      	bne.n	800b470 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d002      	beq.n	800b37c <HAL_UART_Transmit+0x24>
 800b376:	88fb      	ldrh	r3, [r7, #6]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d101      	bne.n	800b380 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e078      	b.n	800b472 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b386:	2b01      	cmp	r3, #1
 800b388:	d101      	bne.n	800b38e <HAL_UART_Transmit+0x36>
 800b38a:	2302      	movs	r3, #2
 800b38c:	e071      	b.n	800b472 <HAL_UART_Transmit+0x11a>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2221      	movs	r2, #33	; 0x21
 800b3a0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b3a2:	f7f9 fa97 	bl	80048d4 <HAL_GetTick>
 800b3a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	88fa      	ldrh	r2, [r7, #6]
 800b3ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	88fa      	ldrh	r2, [r7, #6]
 800b3b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3c0:	d108      	bne.n	800b3d4 <HAL_UART_Transmit+0x7c>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d104      	bne.n	800b3d4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	61bb      	str	r3, [r7, #24]
 800b3d2:	e003      	b.n	800b3dc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800b3e4:	e02c      	b.n	800b440 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2180      	movs	r1, #128	; 0x80
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f000 fbbe 	bl	800bb72 <UART_WaitOnFlagUntilTimeout>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	e038      	b.n	800b472 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10b      	bne.n	800b41e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	881b      	ldrh	r3, [r3, #0]
 800b40a:	461a      	mov	r2, r3
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b414:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	3302      	adds	r3, #2
 800b41a:	61bb      	str	r3, [r7, #24]
 800b41c:	e007      	b.n	800b42e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	781a      	ldrb	r2, [r3, #0]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	3301      	adds	r3, #1
 800b42c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b434:	b29b      	uxth	r3, r3
 800b436:	3b01      	subs	r3, #1
 800b438:	b29a      	uxth	r2, r3
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b446:	b29b      	uxth	r3, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1cc      	bne.n	800b3e6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	2200      	movs	r2, #0
 800b454:	2140      	movs	r1, #64	; 0x40
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f000 fb8b 	bl	800bb72 <UART_WaitOnFlagUntilTimeout>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d001      	beq.n	800b466 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b462:	2303      	movs	r3, #3
 800b464:	e005      	b.n	800b472 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2220      	movs	r2, #32
 800b46a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	e000      	b.n	800b472 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800b470:	2302      	movs	r3, #2
  }
}
 800b472:	4618      	mov	r0, r3
 800b474:	3720      	adds	r7, #32
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
	...

0800b47c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b088      	sub	sp, #32
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b484:	2300      	movs	r3, #0
 800b486:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	689a      	ldr	r2, [r3, #8]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	431a      	orrs	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	695b      	ldr	r3, [r3, #20]
 800b49a:	431a      	orrs	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	69db      	ldr	r3, [r3, #28]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681a      	ldr	r2, [r3, #0]
 800b4aa:	4bb1      	ldr	r3, [pc, #708]	; (800b770 <UART_SetConfig+0x2f4>)
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	6812      	ldr	r2, [r2, #0]
 800b4b2:	6939      	ldr	r1, [r7, #16]
 800b4b4:	430b      	orrs	r3, r1
 800b4b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	68da      	ldr	r2, [r3, #12]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6a1b      	ldr	r3, [r3, #32]
 800b4d8:	693a      	ldr	r2, [r7, #16]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	430a      	orrs	r2, r1
 800b4f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a9f      	ldr	r2, [pc, #636]	; (800b774 <UART_SetConfig+0x2f8>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d121      	bne.n	800b540 <UART_SetConfig+0xc4>
 800b4fc:	4b9e      	ldr	r3, [pc, #632]	; (800b778 <UART_SetConfig+0x2fc>)
 800b4fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b502:	f003 0303 	and.w	r3, r3, #3
 800b506:	2b03      	cmp	r3, #3
 800b508:	d816      	bhi.n	800b538 <UART_SetConfig+0xbc>
 800b50a:	a201      	add	r2, pc, #4	; (adr r2, 800b510 <UART_SetConfig+0x94>)
 800b50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b510:	0800b521 	.word	0x0800b521
 800b514:	0800b52d 	.word	0x0800b52d
 800b518:	0800b527 	.word	0x0800b527
 800b51c:	0800b533 	.word	0x0800b533
 800b520:	2301      	movs	r3, #1
 800b522:	77fb      	strb	r3, [r7, #31]
 800b524:	e151      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b526:	2302      	movs	r3, #2
 800b528:	77fb      	strb	r3, [r7, #31]
 800b52a:	e14e      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b52c:	2304      	movs	r3, #4
 800b52e:	77fb      	strb	r3, [r7, #31]
 800b530:	e14b      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b532:	2308      	movs	r3, #8
 800b534:	77fb      	strb	r3, [r7, #31]
 800b536:	e148      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b538:	2310      	movs	r3, #16
 800b53a:	77fb      	strb	r3, [r7, #31]
 800b53c:	bf00      	nop
 800b53e:	e144      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a8d      	ldr	r2, [pc, #564]	; (800b77c <UART_SetConfig+0x300>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d134      	bne.n	800b5b4 <UART_SetConfig+0x138>
 800b54a:	4b8b      	ldr	r3, [pc, #556]	; (800b778 <UART_SetConfig+0x2fc>)
 800b54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b550:	f003 030c 	and.w	r3, r3, #12
 800b554:	2b0c      	cmp	r3, #12
 800b556:	d829      	bhi.n	800b5ac <UART_SetConfig+0x130>
 800b558:	a201      	add	r2, pc, #4	; (adr r2, 800b560 <UART_SetConfig+0xe4>)
 800b55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b55e:	bf00      	nop
 800b560:	0800b595 	.word	0x0800b595
 800b564:	0800b5ad 	.word	0x0800b5ad
 800b568:	0800b5ad 	.word	0x0800b5ad
 800b56c:	0800b5ad 	.word	0x0800b5ad
 800b570:	0800b5a1 	.word	0x0800b5a1
 800b574:	0800b5ad 	.word	0x0800b5ad
 800b578:	0800b5ad 	.word	0x0800b5ad
 800b57c:	0800b5ad 	.word	0x0800b5ad
 800b580:	0800b59b 	.word	0x0800b59b
 800b584:	0800b5ad 	.word	0x0800b5ad
 800b588:	0800b5ad 	.word	0x0800b5ad
 800b58c:	0800b5ad 	.word	0x0800b5ad
 800b590:	0800b5a7 	.word	0x0800b5a7
 800b594:	2300      	movs	r3, #0
 800b596:	77fb      	strb	r3, [r7, #31]
 800b598:	e117      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b59a:	2302      	movs	r3, #2
 800b59c:	77fb      	strb	r3, [r7, #31]
 800b59e:	e114      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b5a0:	2304      	movs	r3, #4
 800b5a2:	77fb      	strb	r3, [r7, #31]
 800b5a4:	e111      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b5a6:	2308      	movs	r3, #8
 800b5a8:	77fb      	strb	r3, [r7, #31]
 800b5aa:	e10e      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b5ac:	2310      	movs	r3, #16
 800b5ae:	77fb      	strb	r3, [r7, #31]
 800b5b0:	bf00      	nop
 800b5b2:	e10a      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a71      	ldr	r2, [pc, #452]	; (800b780 <UART_SetConfig+0x304>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d120      	bne.n	800b600 <UART_SetConfig+0x184>
 800b5be:	4b6e      	ldr	r3, [pc, #440]	; (800b778 <UART_SetConfig+0x2fc>)
 800b5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b5c8:	2b10      	cmp	r3, #16
 800b5ca:	d00f      	beq.n	800b5ec <UART_SetConfig+0x170>
 800b5cc:	2b10      	cmp	r3, #16
 800b5ce:	d802      	bhi.n	800b5d6 <UART_SetConfig+0x15a>
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d005      	beq.n	800b5e0 <UART_SetConfig+0x164>
 800b5d4:	e010      	b.n	800b5f8 <UART_SetConfig+0x17c>
 800b5d6:	2b20      	cmp	r3, #32
 800b5d8:	d005      	beq.n	800b5e6 <UART_SetConfig+0x16a>
 800b5da:	2b30      	cmp	r3, #48	; 0x30
 800b5dc:	d009      	beq.n	800b5f2 <UART_SetConfig+0x176>
 800b5de:	e00b      	b.n	800b5f8 <UART_SetConfig+0x17c>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	77fb      	strb	r3, [r7, #31]
 800b5e4:	e0f1      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	77fb      	strb	r3, [r7, #31]
 800b5ea:	e0ee      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b5ec:	2304      	movs	r3, #4
 800b5ee:	77fb      	strb	r3, [r7, #31]
 800b5f0:	e0eb      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b5f2:	2308      	movs	r3, #8
 800b5f4:	77fb      	strb	r3, [r7, #31]
 800b5f6:	e0e8      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b5f8:	2310      	movs	r3, #16
 800b5fa:	77fb      	strb	r3, [r7, #31]
 800b5fc:	bf00      	nop
 800b5fe:	e0e4      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a5f      	ldr	r2, [pc, #380]	; (800b784 <UART_SetConfig+0x308>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d120      	bne.n	800b64c <UART_SetConfig+0x1d0>
 800b60a:	4b5b      	ldr	r3, [pc, #364]	; (800b778 <UART_SetConfig+0x2fc>)
 800b60c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b610:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b614:	2b40      	cmp	r3, #64	; 0x40
 800b616:	d00f      	beq.n	800b638 <UART_SetConfig+0x1bc>
 800b618:	2b40      	cmp	r3, #64	; 0x40
 800b61a:	d802      	bhi.n	800b622 <UART_SetConfig+0x1a6>
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d005      	beq.n	800b62c <UART_SetConfig+0x1b0>
 800b620:	e010      	b.n	800b644 <UART_SetConfig+0x1c8>
 800b622:	2b80      	cmp	r3, #128	; 0x80
 800b624:	d005      	beq.n	800b632 <UART_SetConfig+0x1b6>
 800b626:	2bc0      	cmp	r3, #192	; 0xc0
 800b628:	d009      	beq.n	800b63e <UART_SetConfig+0x1c2>
 800b62a:	e00b      	b.n	800b644 <UART_SetConfig+0x1c8>
 800b62c:	2300      	movs	r3, #0
 800b62e:	77fb      	strb	r3, [r7, #31]
 800b630:	e0cb      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b632:	2302      	movs	r3, #2
 800b634:	77fb      	strb	r3, [r7, #31]
 800b636:	e0c8      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b638:	2304      	movs	r3, #4
 800b63a:	77fb      	strb	r3, [r7, #31]
 800b63c:	e0c5      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b63e:	2308      	movs	r3, #8
 800b640:	77fb      	strb	r3, [r7, #31]
 800b642:	e0c2      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b644:	2310      	movs	r3, #16
 800b646:	77fb      	strb	r3, [r7, #31]
 800b648:	bf00      	nop
 800b64a:	e0be      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a4d      	ldr	r2, [pc, #308]	; (800b788 <UART_SetConfig+0x30c>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d124      	bne.n	800b6a0 <UART_SetConfig+0x224>
 800b656:	4b48      	ldr	r3, [pc, #288]	; (800b778 <UART_SetConfig+0x2fc>)
 800b658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b65c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b664:	d012      	beq.n	800b68c <UART_SetConfig+0x210>
 800b666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b66a:	d802      	bhi.n	800b672 <UART_SetConfig+0x1f6>
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d007      	beq.n	800b680 <UART_SetConfig+0x204>
 800b670:	e012      	b.n	800b698 <UART_SetConfig+0x21c>
 800b672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b676:	d006      	beq.n	800b686 <UART_SetConfig+0x20a>
 800b678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b67c:	d009      	beq.n	800b692 <UART_SetConfig+0x216>
 800b67e:	e00b      	b.n	800b698 <UART_SetConfig+0x21c>
 800b680:	2300      	movs	r3, #0
 800b682:	77fb      	strb	r3, [r7, #31]
 800b684:	e0a1      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b686:	2302      	movs	r3, #2
 800b688:	77fb      	strb	r3, [r7, #31]
 800b68a:	e09e      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b68c:	2304      	movs	r3, #4
 800b68e:	77fb      	strb	r3, [r7, #31]
 800b690:	e09b      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b692:	2308      	movs	r3, #8
 800b694:	77fb      	strb	r3, [r7, #31]
 800b696:	e098      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b698:	2310      	movs	r3, #16
 800b69a:	77fb      	strb	r3, [r7, #31]
 800b69c:	bf00      	nop
 800b69e:	e094      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a39      	ldr	r2, [pc, #228]	; (800b78c <UART_SetConfig+0x310>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d124      	bne.n	800b6f4 <UART_SetConfig+0x278>
 800b6aa:	4b33      	ldr	r3, [pc, #204]	; (800b778 <UART_SetConfig+0x2fc>)
 800b6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b6b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6b8:	d012      	beq.n	800b6e0 <UART_SetConfig+0x264>
 800b6ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6be:	d802      	bhi.n	800b6c6 <UART_SetConfig+0x24a>
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d007      	beq.n	800b6d4 <UART_SetConfig+0x258>
 800b6c4:	e012      	b.n	800b6ec <UART_SetConfig+0x270>
 800b6c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6ca:	d006      	beq.n	800b6da <UART_SetConfig+0x25e>
 800b6cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6d0:	d009      	beq.n	800b6e6 <UART_SetConfig+0x26a>
 800b6d2:	e00b      	b.n	800b6ec <UART_SetConfig+0x270>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	77fb      	strb	r3, [r7, #31]
 800b6d8:	e077      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b6da:	2302      	movs	r3, #2
 800b6dc:	77fb      	strb	r3, [r7, #31]
 800b6de:	e074      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b6e0:	2304      	movs	r3, #4
 800b6e2:	77fb      	strb	r3, [r7, #31]
 800b6e4:	e071      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b6e6:	2308      	movs	r3, #8
 800b6e8:	77fb      	strb	r3, [r7, #31]
 800b6ea:	e06e      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b6ec:	2310      	movs	r3, #16
 800b6ee:	77fb      	strb	r3, [r7, #31]
 800b6f0:	bf00      	nop
 800b6f2:	e06a      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a25      	ldr	r2, [pc, #148]	; (800b790 <UART_SetConfig+0x314>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d124      	bne.n	800b748 <UART_SetConfig+0x2cc>
 800b6fe:	4b1e      	ldr	r3, [pc, #120]	; (800b778 <UART_SetConfig+0x2fc>)
 800b700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b704:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b70c:	d012      	beq.n	800b734 <UART_SetConfig+0x2b8>
 800b70e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b712:	d802      	bhi.n	800b71a <UART_SetConfig+0x29e>
 800b714:	2b00      	cmp	r3, #0
 800b716:	d007      	beq.n	800b728 <UART_SetConfig+0x2ac>
 800b718:	e012      	b.n	800b740 <UART_SetConfig+0x2c4>
 800b71a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b71e:	d006      	beq.n	800b72e <UART_SetConfig+0x2b2>
 800b720:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b724:	d009      	beq.n	800b73a <UART_SetConfig+0x2be>
 800b726:	e00b      	b.n	800b740 <UART_SetConfig+0x2c4>
 800b728:	2300      	movs	r3, #0
 800b72a:	77fb      	strb	r3, [r7, #31]
 800b72c:	e04d      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b72e:	2302      	movs	r3, #2
 800b730:	77fb      	strb	r3, [r7, #31]
 800b732:	e04a      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b734:	2304      	movs	r3, #4
 800b736:	77fb      	strb	r3, [r7, #31]
 800b738:	e047      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b73a:	2308      	movs	r3, #8
 800b73c:	77fb      	strb	r3, [r7, #31]
 800b73e:	e044      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b740:	2310      	movs	r3, #16
 800b742:	77fb      	strb	r3, [r7, #31]
 800b744:	bf00      	nop
 800b746:	e040      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a11      	ldr	r2, [pc, #68]	; (800b794 <UART_SetConfig+0x318>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d139      	bne.n	800b7c6 <UART_SetConfig+0x34a>
 800b752:	4b09      	ldr	r3, [pc, #36]	; (800b778 <UART_SetConfig+0x2fc>)
 800b754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b75c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b760:	d027      	beq.n	800b7b2 <UART_SetConfig+0x336>
 800b762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b766:	d817      	bhi.n	800b798 <UART_SetConfig+0x31c>
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d01c      	beq.n	800b7a6 <UART_SetConfig+0x32a>
 800b76c:	e027      	b.n	800b7be <UART_SetConfig+0x342>
 800b76e:	bf00      	nop
 800b770:	efff69f3 	.word	0xefff69f3
 800b774:	40011000 	.word	0x40011000
 800b778:	40023800 	.word	0x40023800
 800b77c:	40004400 	.word	0x40004400
 800b780:	40004800 	.word	0x40004800
 800b784:	40004c00 	.word	0x40004c00
 800b788:	40005000 	.word	0x40005000
 800b78c:	40011400 	.word	0x40011400
 800b790:	40007800 	.word	0x40007800
 800b794:	40007c00 	.word	0x40007c00
 800b798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b79c:	d006      	beq.n	800b7ac <UART_SetConfig+0x330>
 800b79e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b7a2:	d009      	beq.n	800b7b8 <UART_SetConfig+0x33c>
 800b7a4:	e00b      	b.n	800b7be <UART_SetConfig+0x342>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	77fb      	strb	r3, [r7, #31]
 800b7aa:	e00e      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	77fb      	strb	r3, [r7, #31]
 800b7b0:	e00b      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b7b2:	2304      	movs	r3, #4
 800b7b4:	77fb      	strb	r3, [r7, #31]
 800b7b6:	e008      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b7b8:	2308      	movs	r3, #8
 800b7ba:	77fb      	strb	r3, [r7, #31]
 800b7bc:	e005      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b7be:	2310      	movs	r3, #16
 800b7c0:	77fb      	strb	r3, [r7, #31]
 800b7c2:	bf00      	nop
 800b7c4:	e001      	b.n	800b7ca <UART_SetConfig+0x34e>
 800b7c6:	2310      	movs	r3, #16
 800b7c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	69db      	ldr	r3, [r3, #28]
 800b7ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7d2:	d17f      	bne.n	800b8d4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b7d4:	7ffb      	ldrb	r3, [r7, #31]
 800b7d6:	2b08      	cmp	r3, #8
 800b7d8:	d85c      	bhi.n	800b894 <UART_SetConfig+0x418>
 800b7da:	a201      	add	r2, pc, #4	; (adr r2, 800b7e0 <UART_SetConfig+0x364>)
 800b7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e0:	0800b805 	.word	0x0800b805
 800b7e4:	0800b825 	.word	0x0800b825
 800b7e8:	0800b845 	.word	0x0800b845
 800b7ec:	0800b895 	.word	0x0800b895
 800b7f0:	0800b85d 	.word	0x0800b85d
 800b7f4:	0800b895 	.word	0x0800b895
 800b7f8:	0800b895 	.word	0x0800b895
 800b7fc:	0800b895 	.word	0x0800b895
 800b800:	0800b87d 	.word	0x0800b87d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b804:	f7fc fb36 	bl	8007e74 <HAL_RCC_GetPCLK1Freq>
 800b808:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	005a      	lsls	r2, r3, #1
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	085b      	lsrs	r3, r3, #1
 800b814:	441a      	add	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b81e:	b29b      	uxth	r3, r3
 800b820:	61bb      	str	r3, [r7, #24]
        break;
 800b822:	e03a      	b.n	800b89a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b824:	f7fc fb3a 	bl	8007e9c <HAL_RCC_GetPCLK2Freq>
 800b828:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	005a      	lsls	r2, r3, #1
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	085b      	lsrs	r3, r3, #1
 800b834:	441a      	add	r2, r3
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b83e:	b29b      	uxth	r3, r3
 800b840:	61bb      	str	r3, [r7, #24]
        break;
 800b842:	e02a      	b.n	800b89a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	085a      	lsrs	r2, r3, #1
 800b84a:	4b5f      	ldr	r3, [pc, #380]	; (800b9c8 <UART_SetConfig+0x54c>)
 800b84c:	4413      	add	r3, r2
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	6852      	ldr	r2, [r2, #4]
 800b852:	fbb3 f3f2 	udiv	r3, r3, r2
 800b856:	b29b      	uxth	r3, r3
 800b858:	61bb      	str	r3, [r7, #24]
        break;
 800b85a:	e01e      	b.n	800b89a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b85c:	f7fc fa4c 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 800b860:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	005a      	lsls	r2, r3, #1
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	085b      	lsrs	r3, r3, #1
 800b86c:	441a      	add	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	fbb2 f3f3 	udiv	r3, r2, r3
 800b876:	b29b      	uxth	r3, r3
 800b878:	61bb      	str	r3, [r7, #24]
        break;
 800b87a:	e00e      	b.n	800b89a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	085b      	lsrs	r3, r3, #1
 800b882:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88e:	b29b      	uxth	r3, r3
 800b890:	61bb      	str	r3, [r7, #24]
        break;
 800b892:	e002      	b.n	800b89a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	75fb      	strb	r3, [r7, #23]
        break;
 800b898:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	2b0f      	cmp	r3, #15
 800b89e:	d916      	bls.n	800b8ce <UART_SetConfig+0x452>
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8a6:	d212      	bcs.n	800b8ce <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	f023 030f 	bic.w	r3, r3, #15
 800b8b0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	085b      	lsrs	r3, r3, #1
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	f003 0307 	and.w	r3, r3, #7
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	897b      	ldrh	r3, [r7, #10]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	897a      	ldrh	r2, [r7, #10]
 800b8ca:	60da      	str	r2, [r3, #12]
 800b8cc:	e070      	b.n	800b9b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	75fb      	strb	r3, [r7, #23]
 800b8d2:	e06d      	b.n	800b9b0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b8d4:	7ffb      	ldrb	r3, [r7, #31]
 800b8d6:	2b08      	cmp	r3, #8
 800b8d8:	d859      	bhi.n	800b98e <UART_SetConfig+0x512>
 800b8da:	a201      	add	r2, pc, #4	; (adr r2, 800b8e0 <UART_SetConfig+0x464>)
 800b8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e0:	0800b905 	.word	0x0800b905
 800b8e4:	0800b923 	.word	0x0800b923
 800b8e8:	0800b941 	.word	0x0800b941
 800b8ec:	0800b98f 	.word	0x0800b98f
 800b8f0:	0800b959 	.word	0x0800b959
 800b8f4:	0800b98f 	.word	0x0800b98f
 800b8f8:	0800b98f 	.word	0x0800b98f
 800b8fc:	0800b98f 	.word	0x0800b98f
 800b900:	0800b977 	.word	0x0800b977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b904:	f7fc fab6 	bl	8007e74 <HAL_RCC_GetPCLK1Freq>
 800b908:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	085a      	lsrs	r2, r3, #1
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	441a      	add	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	fbb2 f3f3 	udiv	r3, r2, r3
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	61bb      	str	r3, [r7, #24]
        break;
 800b920:	e038      	b.n	800b994 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b922:	f7fc fabb 	bl	8007e9c <HAL_RCC_GetPCLK2Freq>
 800b926:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	085a      	lsrs	r2, r3, #1
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	441a      	add	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	fbb2 f3f3 	udiv	r3, r2, r3
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	61bb      	str	r3, [r7, #24]
        break;
 800b93e:	e029      	b.n	800b994 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	085a      	lsrs	r2, r3, #1
 800b946:	4b21      	ldr	r3, [pc, #132]	; (800b9cc <UART_SetConfig+0x550>)
 800b948:	4413      	add	r3, r2
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	6852      	ldr	r2, [r2, #4]
 800b94e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b952:	b29b      	uxth	r3, r3
 800b954:	61bb      	str	r3, [r7, #24]
        break;
 800b956:	e01d      	b.n	800b994 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b958:	f7fc f9ce 	bl	8007cf8 <HAL_RCC_GetSysClockFreq>
 800b95c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	085a      	lsrs	r2, r3, #1
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	441a      	add	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b970:	b29b      	uxth	r3, r3
 800b972:	61bb      	str	r3, [r7, #24]
        break;
 800b974:	e00e      	b.n	800b994 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	085b      	lsrs	r3, r3, #1
 800b97c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	fbb2 f3f3 	udiv	r3, r2, r3
 800b988:	b29b      	uxth	r3, r3
 800b98a:	61bb      	str	r3, [r7, #24]
        break;
 800b98c:	e002      	b.n	800b994 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	75fb      	strb	r3, [r7, #23]
        break;
 800b992:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	2b0f      	cmp	r3, #15
 800b998:	d908      	bls.n	800b9ac <UART_SetConfig+0x530>
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9a0:	d204      	bcs.n	800b9ac <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	69ba      	ldr	r2, [r7, #24]
 800b9a8:	60da      	str	r2, [r3, #12]
 800b9aa:	e001      	b.n	800b9b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3720      	adds	r7, #32
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	01e84800 	.word	0x01e84800
 800b9cc:	00f42400 	.word	0x00f42400

0800b9d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00a      	beq.n	800b9fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	430a      	orrs	r2, r1
 800b9f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fe:	f003 0302 	and.w	r3, r3, #2
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00a      	beq.n	800ba1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	430a      	orrs	r2, r1
 800ba1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba20:	f003 0304 	and.w	r3, r3, #4
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00a      	beq.n	800ba3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba42:	f003 0308 	and.w	r3, r3, #8
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00a      	beq.n	800ba60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	430a      	orrs	r2, r1
 800ba5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba64:	f003 0310 	and.w	r3, r3, #16
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00a      	beq.n	800ba82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba86:	f003 0320 	and.w	r3, r3, #32
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00a      	beq.n	800baa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	430a      	orrs	r2, r1
 800baa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baac:	2b00      	cmp	r3, #0
 800baae:	d01a      	beq.n	800bae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	430a      	orrs	r2, r1
 800bac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bace:	d10a      	bne.n	800bae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	430a      	orrs	r2, r1
 800bae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00a      	beq.n	800bb08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	430a      	orrs	r2, r1
 800bb06:	605a      	str	r2, [r3, #4]
  }
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af02      	add	r7, sp, #8
 800bb1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bb22:	f7f8 fed7 	bl	80048d4 <HAL_GetTick>
 800bb26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 0308 	and.w	r3, r3, #8
 800bb32:	2b08      	cmp	r3, #8
 800bb34:	d10e      	bne.n	800bb54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f814 	bl	800bb72 <UART_WaitOnFlagUntilTimeout>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb50:	2303      	movs	r3, #3
 800bb52:	e00a      	b.n	800bb6a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2220      	movs	r2, #32
 800bb58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2220      	movs	r2, #32
 800bb5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b084      	sub	sp, #16
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	60f8      	str	r0, [r7, #12]
 800bb7a:	60b9      	str	r1, [r7, #8]
 800bb7c:	603b      	str	r3, [r7, #0]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb82:	e05d      	b.n	800bc40 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8a:	d059      	beq.n	800bc40 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb8c:	f7f8 fea2 	bl	80048d4 <HAL_GetTick>
 800bb90:	4602      	mov	r2, r0
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	1ad3      	subs	r3, r2, r3
 800bb96:	69ba      	ldr	r2, [r7, #24]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d302      	bcc.n	800bba2 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d11b      	bne.n	800bbda <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bbb0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f022 0201 	bic.w	r2, r2, #1
 800bbc0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2220      	movs	r2, #32
 800bbc6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2220      	movs	r2, #32
 800bbcc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	e042      	b.n	800bc60 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 0304 	and.w	r3, r3, #4
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d02b      	beq.n	800bc40 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	69db      	ldr	r3, [r3, #28]
 800bbee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbf6:	d123      	bne.n	800bc40 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc00:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f022 0201 	bic.w	r2, r2, #1
 800bc20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2220      	movs	r2, #32
 800bc26:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2220      	movs	r2, #32
 800bc2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2220      	movs	r2, #32
 800bc32:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800bc3c:	2303      	movs	r3, #3
 800bc3e:	e00f      	b.n	800bc60 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	69da      	ldr	r2, [r3, #28]
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	4013      	ands	r3, r2
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	bf0c      	ite	eq
 800bc50:	2301      	moveq	r3, #1
 800bc52:	2300      	movne	r3, #0
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	461a      	mov	r2, r3
 800bc58:	79fb      	ldrb	r3, [r7, #7]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d092      	beq.n	800bb84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d027      	beq.n	800bcd2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	4b2f      	ldr	r3, [pc, #188]	; (800bd48 <FMC_SDRAM_Init+0xe0>)
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bc98:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800bc9e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800bca4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800bcaa:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800bcb0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800bcb6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800bcbc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bcc2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	601a      	str	r2, [r3, #0]
 800bcd0:	e032      	b.n	800bd38 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bcde:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bce8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800bcee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	4b12      	ldr	r3, [pc, #72]	; (800bd48 <FMC_SDRAM_Init+0xe0>)
 800bd00:	4013      	ands	r3, r2
 800bd02:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bd0c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800bd12:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800bd18:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800bd1e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800bd24:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3714      	adds	r7, #20
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	ffff8000 	.word	0xffff8000

0800bd4c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d02e      	beq.n	800bdc4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bd72:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bd82:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800bd8c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800bd96:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	691b      	ldr	r3, [r3, #16]
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800bda0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	695b      	ldr	r3, [r3, #20]
 800bda6:	3b01      	subs	r3, #1
 800bda8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800bdaa:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	699b      	ldr	r3, [r3, #24]
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	697a      	ldr	r2, [r7, #20]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	697a      	ldr	r2, [r7, #20]
 800bdc0:	609a      	str	r2, [r3, #8]
 800bdc2:	e039      	b.n	800be38 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800bdca:	697a      	ldr	r2, [r7, #20]
 800bdcc:	4b1e      	ldr	r3, [pc, #120]	; (800be48 <FMC_SDRAM_Timing_Init+0xfc>)
 800bdce:	4013      	ands	r3, r2
 800bdd0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	3b01      	subs	r3, #1
 800bdd8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800bde2:	4313      	orrs	r3, r2
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	68db      	ldr	r3, [r3, #12]
 800bdee:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bdf6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	3b01      	subs	r3, #1
 800be04:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800be06:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800be10:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	3b01      	subs	r3, #1
 800be18:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800be1a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	699b      	ldr	r3, [r3, #24]
 800be20:	3b01      	subs	r3, #1
 800be22:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800be24:	4313      	orrs	r3, r2
 800be26:	693a      	ldr	r2, [r7, #16]
 800be28:	4313      	orrs	r3, r2
 800be2a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	693a      	ldr	r2, [r7, #16]
 800be36:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	371c      	adds	r7, #28
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	ff0f0fff 	.word	0xff0f0fff

0800be4c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b087      	sub	sp, #28
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	60b9      	str	r1, [r7, #8]
 800be56:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800be58:	2300      	movs	r3, #0
 800be5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800be64:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	3b01      	subs	r3, #1
 800be6c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800be6e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800be76:	4313      	orrs	r3, r2
 800be78:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800be7a:	697a      	ldr	r2, [r7, #20]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	371c      	adds	r7, #28
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800be8e:	b480      	push	{r7}
 800be90:	b083      	sub	sp, #12
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
 800be96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	695a      	ldr	r2, [r3, #20]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	005b      	lsls	r3, r3, #1
 800bea0:	431a      	orrs	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800beb4:	b084      	sub	sp, #16
 800beb6:	b480      	push	{r7}
 800beb8:	b085      	sub	sp, #20
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	f107 001c 	add.w	r0, r7, #28
 800bec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800beca:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800becc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bece:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bed2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bed6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800beda:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bede:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	685a      	ldr	r2, [r3, #4]
 800beea:	4b07      	ldr	r3, [pc, #28]	; (800bf08 <SDMMC_Init+0x54>)
 800beec:	4013      	ands	r3, r2
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	431a      	orrs	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3714      	adds	r7, #20
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	b004      	add	sp, #16
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	ffff8100 	.word	0xffff8100

0800bf0c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	370c      	adds	r7, #12
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b082      	sub	sp, #8
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2203      	movs	r2, #3
 800bf32:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800bf34:	2002      	movs	r0, #2
 800bf36:	f7f8 fcd9 	bl	80048ec <HAL_Delay>
  
  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3708      	adds	r7, #8
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f003 0303 	and.w	r3, r3, #3
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bf7e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bf84:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bf8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68da      	ldr	r2, [r3, #12]
 800bf96:	4b06      	ldr	r3, [pc, #24]	; (800bfb0 <SDMMC_SendCommand+0x50>)
 800bf98:	4013      	ands	r3, r2
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	431a      	orrs	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3714      	adds	r7, #20
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr
 800bfb0:	fffff000 	.word	0xfffff000

0800bfb4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	b2db      	uxtb	r3, r3
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	370c      	adds	r7, #12
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b085      	sub	sp, #20
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
 800bfd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	3314      	adds	r3, #20
 800bfdc:	461a      	mov	r2, r3
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
}  
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	685a      	ldr	r2, [r3, #4]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c01a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c020:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c026:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c032:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	431a      	orrs	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c03e:	2300      	movs	r3, #0

}
 800c040:	4618      	mov	r0, r3
 800c042:	3714      	adds	r7, #20
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b088      	sub	sp, #32
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c05a:	2310      	movs	r3, #16
 800c05c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c05e:	2340      	movs	r3, #64	; 0x40
 800c060:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c062:	2300      	movs	r3, #0
 800c064:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c06a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c06c:	f107 0308 	add.w	r3, r7, #8
 800c070:	4619      	mov	r1, r3
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f7ff ff74 	bl	800bf60 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c078:	f241 3288 	movw	r2, #5000	; 0x1388
 800c07c:	2110      	movs	r1, #16
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 f976 	bl	800c370 <SDMMC_GetCmdResp1>
 800c084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c086:	69fb      	ldr	r3, [r7, #28]
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3720      	adds	r7, #32
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b08a      	sub	sp, #40	; 0x28
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c0a0:	2307      	movs	r3, #7
 800c0a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0a4:	2340      	movs	r3, #64	; 0x40
 800c0a6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0b0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0b2:	f107 0310 	add.w	r3, r7, #16
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f7ff ff51 	bl	800bf60 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c0be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0c2:	2107      	movs	r1, #7
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f000 f953 	bl	800c370 <SDMMC_GetCmdResp1>
 800c0ca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3728      	adds	r7, #40	; 0x28
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b088      	sub	sp, #32
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0f4:	f107 0308 	add.w	r3, r7, #8
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f7ff ff30 	bl	800bf60 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f000 f90d 	bl	800c320 <SDMMC_GetCmdError>
 800c106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c108:	69fb      	ldr	r3, [r7, #28]
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3720      	adds	r7, #32
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}

0800c112 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b088      	sub	sp, #32
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c11a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c11e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c120:	2308      	movs	r3, #8
 800c122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c124:	2340      	movs	r3, #64	; 0x40
 800c126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c128:	2300      	movs	r3, #0
 800c12a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c12c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c132:	f107 0308 	add.w	r3, r7, #8
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f7ff ff11 	bl	800bf60 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 faf6 	bl	800c730 <SDMMC_GetCmdResp7>
 800c144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c146:	69fb      	ldr	r3, [r7, #28]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3720      	adds	r7, #32
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b088      	sub	sp, #32
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c15e:	2337      	movs	r3, #55	; 0x37
 800c160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c162:	2340      	movs	r3, #64	; 0x40
 800c164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c166:	2300      	movs	r3, #0
 800c168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c16a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c16e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c170:	f107 0308 	add.w	r3, r7, #8
 800c174:	4619      	mov	r1, r3
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7ff fef2 	bl	800bf60 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c17c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c180:	2137      	movs	r1, #55	; 0x37
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 f8f4 	bl	800c370 <SDMMC_GetCmdResp1>
 800c188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c18a:	69fb      	ldr	r3, [r7, #28]
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3720      	adds	r7, #32
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	4b0d      	ldr	r3, [pc, #52]	; (800c1d8 <SDMMC_CmdAppOperCommand+0x44>)
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c1a6:	2329      	movs	r3, #41	; 0x29
 800c1a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1aa:	2340      	movs	r3, #64	; 0x40
 800c1ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1b8:	f107 0308 	add.w	r3, r7, #8
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f7ff fece 	bl	800bf60 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 fa05 	bl	800c5d4 <SDMMC_GetCmdResp3>
 800c1ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1cc:	69fb      	ldr	r3, [r7, #28]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3720      	adds	r7, #32
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	80100000 	.word	0x80100000

0800c1dc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b088      	sub	sp, #32
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c1ea:	2306      	movs	r3, #6
 800c1ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1ee:	2340      	movs	r3, #64	; 0x40
 800c1f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1fc:	f107 0308 	add.w	r3, r7, #8
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f7ff feac 	bl	800bf60 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c208:	f241 3288 	movw	r2, #5000	; 0x1388
 800c20c:	2106      	movs	r1, #6
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f8ae 	bl	800c370 <SDMMC_GetCmdResp1>
 800c214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c216:	69fb      	ldr	r3, [r7, #28]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3720      	adds	r7, #32
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b088      	sub	sp, #32
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c228:	2300      	movs	r3, #0
 800c22a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c22c:	2333      	movs	r3, #51	; 0x33
 800c22e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c230:	2340      	movs	r3, #64	; 0x40
 800c232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c234:	2300      	movs	r3, #0
 800c236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c238:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c23c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c23e:	f107 0308 	add.w	r3, r7, #8
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f7ff fe8b 	bl	800bf60 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c24a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c24e:	2133      	movs	r1, #51	; 0x33
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f88d 	bl	800c370 <SDMMC_GetCmdResp1>
 800c256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c258:	69fb      	ldr	r3, [r7, #28]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3720      	adds	r7, #32
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b088      	sub	sp, #32
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c26a:	2300      	movs	r3, #0
 800c26c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c26e:	2302      	movs	r3, #2
 800c270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c272:	23c0      	movs	r3, #192	; 0xc0
 800c274:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c276:	2300      	movs	r3, #0
 800c278:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c27a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c27e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c280:	f107 0308 	add.w	r3, r7, #8
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7ff fe6a 	bl	800bf60 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 f95b 	bl	800c548 <SDMMC_GetCmdResp2>
 800c292:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c294:	69fb      	ldr	r3, [r7, #28]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3720      	adds	r7, #32
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c29e:	b580      	push	{r7, lr}
 800c2a0:	b088      	sub	sp, #32
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c2ac:	2309      	movs	r3, #9
 800c2ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c2b0:	23c0      	movs	r3, #192	; 0xc0
 800c2b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2be:	f107 0308 	add.w	r3, r7, #8
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f7ff fe4b 	bl	800bf60 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f93c 	bl	800c548 <SDMMC_GetCmdResp2>
 800c2d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2d2:	69fb      	ldr	r3, [r7, #28]
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3720      	adds	r7, #32
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b088      	sub	sp, #32
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2ee:	2340      	movs	r3, #64	; 0x40
 800c2f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2fc:	f107 0308 	add.w	r3, r7, #8
 800c300:	4619      	mov	r1, r3
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7ff fe2c 	bl	800bf60 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	2103      	movs	r1, #3
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f99b 	bl	800c648 <SDMMC_GetCmdResp6>
 800c312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c314:	69fb      	ldr	r3, [r7, #28]
}
 800c316:	4618      	mov	r0, r3
 800c318:	3720      	adds	r7, #32
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
	...

0800c320 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c320:	b490      	push	{r4, r7}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c328:	4b0f      	ldr	r3, [pc, #60]	; (800c368 <SDMMC_GetCmdError+0x48>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a0f      	ldr	r2, [pc, #60]	; (800c36c <SDMMC_GetCmdError+0x4c>)
 800c32e:	fba2 2303 	umull	r2, r3, r2, r3
 800c332:	0a5b      	lsrs	r3, r3, #9
 800c334:	f241 3288 	movw	r2, #5000	; 0x1388
 800c338:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c33c:	4623      	mov	r3, r4
 800c33e:	1e5c      	subs	r4, r3, #1
 800c340:	2b00      	cmp	r3, #0
 800c342:	d102      	bne.n	800c34a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c344:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c348:	e009      	b.n	800c35e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c34e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c352:	2b00      	cmp	r3, #0
 800c354:	d0f2      	beq.n	800c33c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	22c5      	movs	r2, #197	; 0xc5
 800c35a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c35c:	2300      	movs	r3, #0
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bc90      	pop	{r4, r7}
 800c366:	4770      	bx	lr
 800c368:	20000000 	.word	0x20000000
 800c36c:	10624dd3 	.word	0x10624dd3

0800c370 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c370:	b590      	push	{r4, r7, lr}
 800c372:	b087      	sub	sp, #28
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	460b      	mov	r3, r1
 800c37a:	607a      	str	r2, [r7, #4]
 800c37c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c37e:	4b6f      	ldr	r3, [pc, #444]	; (800c53c <SDMMC_GetCmdResp1+0x1cc>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	4a6f      	ldr	r2, [pc, #444]	; (800c540 <SDMMC_GetCmdResp1+0x1d0>)
 800c384:	fba2 2303 	umull	r2, r3, r2, r3
 800c388:	0a5b      	lsrs	r3, r3, #9
 800c38a:	687a      	ldr	r2, [r7, #4]
 800c38c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c390:	4623      	mov	r3, r4
 800c392:	1e5c      	subs	r4, r3, #1
 800c394:	2b00      	cmp	r3, #0
 800c396:	d102      	bne.n	800c39e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c39c:	e0c9      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3a2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d0f0      	beq.n	800c390 <SDMMC_GetCmdResp1+0x20>
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1eb      	bne.n	800c390 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3bc:	f003 0304 	and.w	r3, r3, #4
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d004      	beq.n	800c3ce <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2204      	movs	r2, #4
 800c3c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c3ca:	2304      	movs	r3, #4
 800c3cc:	e0b1      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d004      	beq.n	800c3e4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e0a6      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	22c5      	movs	r2, #197	; 0xc5
 800c3e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f7ff fde2 	bl	800bfb4 <SDMMC_GetCommandResponse>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	7afb      	ldrb	r3, [r7, #11]
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d001      	beq.n	800c3fe <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e099      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c3fe:	2100      	movs	r1, #0
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f7ff fde4 	bl	800bfce <SDMMC_GetResponse>
 800c406:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	4b4e      	ldr	r3, [pc, #312]	; (800c544 <SDMMC_GetCmdResp1+0x1d4>)
 800c40c:	4013      	ands	r3, r2
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d101      	bne.n	800c416 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c412:	2300      	movs	r3, #0
 800c414:	e08d      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	da02      	bge.n	800c422 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c41c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c420:	e087      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d001      	beq.n	800c430 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c42c:	2340      	movs	r3, #64	; 0x40
 800c42e:	e080      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c43a:	2380      	movs	r3, #128	; 0x80
 800c43c:	e079      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c44c:	e071      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c458:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c45c:	e069      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c46c:	e061      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c47c:	e059      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c48c:	e051      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c49c:	e049      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c4a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c4ac:	e041      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d002      	beq.n	800c4be <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c4b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4bc:	e039      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c4c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c4cc:	e031      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c4d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c4dc:	e029      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c4e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4ec:	e021      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c4f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c4fc:	e019      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c504:	2b00      	cmp	r3, #0
 800c506:	d002      	beq.n	800c50e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c508:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c50c:	e011      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c514:	2b00      	cmp	r3, #0
 800c516:	d002      	beq.n	800c51e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c518:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c51c:	e009      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	f003 0308 	and.w	r3, r3, #8
 800c524:	2b00      	cmp	r3, #0
 800c526:	d002      	beq.n	800c52e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c528:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c52c:	e001      	b.n	800c532 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c52e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c532:	4618      	mov	r0, r3
 800c534:	371c      	adds	r7, #28
 800c536:	46bd      	mov	sp, r7
 800c538:	bd90      	pop	{r4, r7, pc}
 800c53a:	bf00      	nop
 800c53c:	20000000 	.word	0x20000000
 800c540:	10624dd3 	.word	0x10624dd3
 800c544:	fdffe008 	.word	0xfdffe008

0800c548 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c548:	b490      	push	{r4, r7}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c550:	4b1e      	ldr	r3, [pc, #120]	; (800c5cc <SDMMC_GetCmdResp2+0x84>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a1e      	ldr	r2, [pc, #120]	; (800c5d0 <SDMMC_GetCmdResp2+0x88>)
 800c556:	fba2 2303 	umull	r2, r3, r2, r3
 800c55a:	0a5b      	lsrs	r3, r3, #9
 800c55c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c560:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c564:	4623      	mov	r3, r4
 800c566:	1e5c      	subs	r4, r3, #1
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d102      	bne.n	800c572 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c56c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c570:	e026      	b.n	800c5c0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c576:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0f0      	beq.n	800c564 <SDMMC_GetCmdResp2+0x1c>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1eb      	bne.n	800c564 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c590:	f003 0304 	and.w	r3, r3, #4
 800c594:	2b00      	cmp	r3, #0
 800c596:	d004      	beq.n	800c5a2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2204      	movs	r2, #4
 800c59c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c59e:	2304      	movs	r3, #4
 800c5a0:	e00e      	b.n	800c5c0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a6:	f003 0301 	and.w	r3, r3, #1
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d004      	beq.n	800c5b8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e003      	b.n	800c5c0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	22c5      	movs	r2, #197	; 0xc5
 800c5bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bc90      	pop	{r4, r7}
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop
 800c5cc:	20000000 	.word	0x20000000
 800c5d0:	10624dd3 	.word	0x10624dd3

0800c5d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c5d4:	b490      	push	{r4, r7}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c5dc:	4b18      	ldr	r3, [pc, #96]	; (800c640 <SDMMC_GetCmdResp3+0x6c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a18      	ldr	r2, [pc, #96]	; (800c644 <SDMMC_GetCmdResp3+0x70>)
 800c5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5e6:	0a5b      	lsrs	r3, r3, #9
 800c5e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c5f0:	4623      	mov	r3, r4
 800c5f2:	1e5c      	subs	r4, r3, #1
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d102      	bne.n	800c5fe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c5f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c5fc:	e01b      	b.n	800c636 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c602:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d0f0      	beq.n	800c5f0 <SDMMC_GetCmdResp3+0x1c>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1eb      	bne.n	800c5f0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c61c:	f003 0304 	and.w	r3, r3, #4
 800c620:	2b00      	cmp	r3, #0
 800c622:	d004      	beq.n	800c62e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2204      	movs	r2, #4
 800c628:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c62a:	2304      	movs	r3, #4
 800c62c:	e003      	b.n	800c636 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	22c5      	movs	r2, #197	; 0xc5
 800c632:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bc90      	pop	{r4, r7}
 800c63e:	4770      	bx	lr
 800c640:	20000000 	.word	0x20000000
 800c644:	10624dd3 	.word	0x10624dd3

0800c648 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c648:	b590      	push	{r4, r7, lr}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	460b      	mov	r3, r1
 800c652:	607a      	str	r2, [r7, #4]
 800c654:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c656:	4b34      	ldr	r3, [pc, #208]	; (800c728 <SDMMC_GetCmdResp6+0xe0>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a34      	ldr	r2, [pc, #208]	; (800c72c <SDMMC_GetCmdResp6+0xe4>)
 800c65c:	fba2 2303 	umull	r2, r3, r2, r3
 800c660:	0a5b      	lsrs	r3, r3, #9
 800c662:	f241 3288 	movw	r2, #5000	; 0x1388
 800c666:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c66a:	4623      	mov	r3, r4
 800c66c:	1e5c      	subs	r4, r3, #1
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d102      	bne.n	800c678 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c672:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c676:	e052      	b.n	800c71e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c67c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c684:	2b00      	cmp	r3, #0
 800c686:	d0f0      	beq.n	800c66a <SDMMC_GetCmdResp6+0x22>
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1eb      	bne.n	800c66a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c696:	f003 0304 	and.w	r3, r3, #4
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d004      	beq.n	800c6a8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2204      	movs	r2, #4
 800c6a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6a4:	2304      	movs	r3, #4
 800c6a6:	e03a      	b.n	800c71e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ac:	f003 0301 	and.w	r3, r3, #1
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d004      	beq.n	800c6be <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e02f      	b.n	800c71e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7ff fc78 	bl	800bfb4 <SDMMC_GetCommandResponse>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	7afb      	ldrb	r3, [r7, #11]
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d001      	beq.n	800c6d2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e025      	b.n	800c71e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	22c5      	movs	r2, #197	; 0xc5
 800c6d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c6d8:	2100      	movs	r1, #0
 800c6da:	68f8      	ldr	r0, [r7, #12]
 800c6dc:	f7ff fc77 	bl	800bfce <SDMMC_GetResponse>
 800c6e0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d106      	bne.n	800c6fa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	0c1b      	lsrs	r3, r3, #16
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	e011      	b.n	800c71e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c708:	e009      	b.n	800c71e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c710:	2b00      	cmp	r3, #0
 800c712:	d002      	beq.n	800c71a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c718:	e001      	b.n	800c71e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c71a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c71e:	4618      	mov	r0, r3
 800c720:	371c      	adds	r7, #28
 800c722:	46bd      	mov	sp, r7
 800c724:	bd90      	pop	{r4, r7, pc}
 800c726:	bf00      	nop
 800c728:	20000000 	.word	0x20000000
 800c72c:	10624dd3 	.word	0x10624dd3

0800c730 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c730:	b490      	push	{r4, r7}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c738:	4b21      	ldr	r3, [pc, #132]	; (800c7c0 <SDMMC_GetCmdResp7+0x90>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a21      	ldr	r2, [pc, #132]	; (800c7c4 <SDMMC_GetCmdResp7+0x94>)
 800c73e:	fba2 2303 	umull	r2, r3, r2, r3
 800c742:	0a5b      	lsrs	r3, r3, #9
 800c744:	f241 3288 	movw	r2, #5000	; 0x1388
 800c748:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c74c:	4623      	mov	r3, r4
 800c74e:	1e5c      	subs	r4, r3, #1
 800c750:	2b00      	cmp	r3, #0
 800c752:	d102      	bne.n	800c75a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c754:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c758:	e02c      	b.n	800c7b4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c75e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c766:	2b00      	cmp	r3, #0
 800c768:	d0f0      	beq.n	800c74c <SDMMC_GetCmdResp7+0x1c>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1eb      	bne.n	800c74c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c778:	f003 0304 	and.w	r3, r3, #4
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d004      	beq.n	800c78a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2204      	movs	r2, #4
 800c784:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c786:	2304      	movs	r3, #4
 800c788:	e014      	b.n	800c7b4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c78e:	f003 0301 	and.w	r3, r3, #1
 800c792:	2b00      	cmp	r3, #0
 800c794:	d004      	beq.n	800c7a0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c79c:	2301      	movs	r3, #1
 800c79e:	e009      	b.n	800c7b4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2240      	movs	r2, #64	; 0x40
 800c7b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c7b2:	2300      	movs	r3, #0
  
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bc90      	pop	{r4, r7}
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	20000000 	.word	0x20000000
 800c7c4:	10624dd3 	.word	0x10624dd3

0800c7c8 <__errno>:
 800c7c8:	4b01      	ldr	r3, [pc, #4]	; (800c7d0 <__errno+0x8>)
 800c7ca:	6818      	ldr	r0, [r3, #0]
 800c7cc:	4770      	bx	lr
 800c7ce:	bf00      	nop
 800c7d0:	20000048 	.word	0x20000048

0800c7d4 <__libc_init_array>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	4e0d      	ldr	r6, [pc, #52]	; (800c80c <__libc_init_array+0x38>)
 800c7d8:	4c0d      	ldr	r4, [pc, #52]	; (800c810 <__libc_init_array+0x3c>)
 800c7da:	1ba4      	subs	r4, r4, r6
 800c7dc:	10a4      	asrs	r4, r4, #2
 800c7de:	2500      	movs	r5, #0
 800c7e0:	42a5      	cmp	r5, r4
 800c7e2:	d109      	bne.n	800c7f8 <__libc_init_array+0x24>
 800c7e4:	4e0b      	ldr	r6, [pc, #44]	; (800c814 <__libc_init_array+0x40>)
 800c7e6:	4c0c      	ldr	r4, [pc, #48]	; (800c818 <__libc_init_array+0x44>)
 800c7e8:	f000 ffd4 	bl	800d794 <_init>
 800c7ec:	1ba4      	subs	r4, r4, r6
 800c7ee:	10a4      	asrs	r4, r4, #2
 800c7f0:	2500      	movs	r5, #0
 800c7f2:	42a5      	cmp	r5, r4
 800c7f4:	d105      	bne.n	800c802 <__libc_init_array+0x2e>
 800c7f6:	bd70      	pop	{r4, r5, r6, pc}
 800c7f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c7fc:	4798      	blx	r3
 800c7fe:	3501      	adds	r5, #1
 800c800:	e7ee      	b.n	800c7e0 <__libc_init_array+0xc>
 800c802:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c806:	4798      	blx	r3
 800c808:	3501      	adds	r5, #1
 800c80a:	e7f2      	b.n	800c7f2 <__libc_init_array+0x1e>
 800c80c:	0800f7c0 	.word	0x0800f7c0
 800c810:	0800f7c0 	.word	0x0800f7c0
 800c814:	0800f7c0 	.word	0x0800f7c0
 800c818:	0800f7c4 	.word	0x0800f7c4

0800c81c <memset>:
 800c81c:	4402      	add	r2, r0
 800c81e:	4603      	mov	r3, r0
 800c820:	4293      	cmp	r3, r2
 800c822:	d100      	bne.n	800c826 <memset+0xa>
 800c824:	4770      	bx	lr
 800c826:	f803 1b01 	strb.w	r1, [r3], #1
 800c82a:	e7f9      	b.n	800c820 <memset+0x4>

0800c82c <_puts_r>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	460e      	mov	r6, r1
 800c830:	4605      	mov	r5, r0
 800c832:	b118      	cbz	r0, 800c83c <_puts_r+0x10>
 800c834:	6983      	ldr	r3, [r0, #24]
 800c836:	b90b      	cbnz	r3, 800c83c <_puts_r+0x10>
 800c838:	f000 fa2c 	bl	800cc94 <__sinit>
 800c83c:	69ab      	ldr	r3, [r5, #24]
 800c83e:	68ac      	ldr	r4, [r5, #8]
 800c840:	b913      	cbnz	r3, 800c848 <_puts_r+0x1c>
 800c842:	4628      	mov	r0, r5
 800c844:	f000 fa26 	bl	800cc94 <__sinit>
 800c848:	4b23      	ldr	r3, [pc, #140]	; (800c8d8 <_puts_r+0xac>)
 800c84a:	429c      	cmp	r4, r3
 800c84c:	d117      	bne.n	800c87e <_puts_r+0x52>
 800c84e:	686c      	ldr	r4, [r5, #4]
 800c850:	89a3      	ldrh	r3, [r4, #12]
 800c852:	071b      	lsls	r3, r3, #28
 800c854:	d51d      	bpl.n	800c892 <_puts_r+0x66>
 800c856:	6923      	ldr	r3, [r4, #16]
 800c858:	b1db      	cbz	r3, 800c892 <_puts_r+0x66>
 800c85a:	3e01      	subs	r6, #1
 800c85c:	68a3      	ldr	r3, [r4, #8]
 800c85e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c862:	3b01      	subs	r3, #1
 800c864:	60a3      	str	r3, [r4, #8]
 800c866:	b9e9      	cbnz	r1, 800c8a4 <_puts_r+0x78>
 800c868:	2b00      	cmp	r3, #0
 800c86a:	da2e      	bge.n	800c8ca <_puts_r+0x9e>
 800c86c:	4622      	mov	r2, r4
 800c86e:	210a      	movs	r1, #10
 800c870:	4628      	mov	r0, r5
 800c872:	f000 f85f 	bl	800c934 <__swbuf_r>
 800c876:	3001      	adds	r0, #1
 800c878:	d011      	beq.n	800c89e <_puts_r+0x72>
 800c87a:	200a      	movs	r0, #10
 800c87c:	e011      	b.n	800c8a2 <_puts_r+0x76>
 800c87e:	4b17      	ldr	r3, [pc, #92]	; (800c8dc <_puts_r+0xb0>)
 800c880:	429c      	cmp	r4, r3
 800c882:	d101      	bne.n	800c888 <_puts_r+0x5c>
 800c884:	68ac      	ldr	r4, [r5, #8]
 800c886:	e7e3      	b.n	800c850 <_puts_r+0x24>
 800c888:	4b15      	ldr	r3, [pc, #84]	; (800c8e0 <_puts_r+0xb4>)
 800c88a:	429c      	cmp	r4, r3
 800c88c:	bf08      	it	eq
 800c88e:	68ec      	ldreq	r4, [r5, #12]
 800c890:	e7de      	b.n	800c850 <_puts_r+0x24>
 800c892:	4621      	mov	r1, r4
 800c894:	4628      	mov	r0, r5
 800c896:	f000 f89f 	bl	800c9d8 <__swsetup_r>
 800c89a:	2800      	cmp	r0, #0
 800c89c:	d0dd      	beq.n	800c85a <_puts_r+0x2e>
 800c89e:	f04f 30ff 	mov.w	r0, #4294967295
 800c8a2:	bd70      	pop	{r4, r5, r6, pc}
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	da04      	bge.n	800c8b2 <_puts_r+0x86>
 800c8a8:	69a2      	ldr	r2, [r4, #24]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	dc06      	bgt.n	800c8bc <_puts_r+0x90>
 800c8ae:	290a      	cmp	r1, #10
 800c8b0:	d004      	beq.n	800c8bc <_puts_r+0x90>
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	1c5a      	adds	r2, r3, #1
 800c8b6:	6022      	str	r2, [r4, #0]
 800c8b8:	7019      	strb	r1, [r3, #0]
 800c8ba:	e7cf      	b.n	800c85c <_puts_r+0x30>
 800c8bc:	4622      	mov	r2, r4
 800c8be:	4628      	mov	r0, r5
 800c8c0:	f000 f838 	bl	800c934 <__swbuf_r>
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	d1c9      	bne.n	800c85c <_puts_r+0x30>
 800c8c8:	e7e9      	b.n	800c89e <_puts_r+0x72>
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	200a      	movs	r0, #10
 800c8ce:	1c5a      	adds	r2, r3, #1
 800c8d0:	6022      	str	r2, [r4, #0]
 800c8d2:	7018      	strb	r0, [r3, #0]
 800c8d4:	e7e5      	b.n	800c8a2 <_puts_r+0x76>
 800c8d6:	bf00      	nop
 800c8d8:	0800f744 	.word	0x0800f744
 800c8dc:	0800f764 	.word	0x0800f764
 800c8e0:	0800f724 	.word	0x0800f724

0800c8e4 <puts>:
 800c8e4:	4b02      	ldr	r3, [pc, #8]	; (800c8f0 <puts+0xc>)
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	6818      	ldr	r0, [r3, #0]
 800c8ea:	f7ff bf9f 	b.w	800c82c <_puts_r>
 800c8ee:	bf00      	nop
 800c8f0:	20000048 	.word	0x20000048

0800c8f4 <siprintf>:
 800c8f4:	b40e      	push	{r1, r2, r3}
 800c8f6:	b500      	push	{lr}
 800c8f8:	b09c      	sub	sp, #112	; 0x70
 800c8fa:	ab1d      	add	r3, sp, #116	; 0x74
 800c8fc:	9002      	str	r0, [sp, #8]
 800c8fe:	9006      	str	r0, [sp, #24]
 800c900:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c904:	4809      	ldr	r0, [pc, #36]	; (800c92c <siprintf+0x38>)
 800c906:	9107      	str	r1, [sp, #28]
 800c908:	9104      	str	r1, [sp, #16]
 800c90a:	4909      	ldr	r1, [pc, #36]	; (800c930 <siprintf+0x3c>)
 800c90c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c910:	9105      	str	r1, [sp, #20]
 800c912:	6800      	ldr	r0, [r0, #0]
 800c914:	9301      	str	r3, [sp, #4]
 800c916:	a902      	add	r1, sp, #8
 800c918:	f000 fbac 	bl	800d074 <_svfiprintf_r>
 800c91c:	9b02      	ldr	r3, [sp, #8]
 800c91e:	2200      	movs	r2, #0
 800c920:	701a      	strb	r2, [r3, #0]
 800c922:	b01c      	add	sp, #112	; 0x70
 800c924:	f85d eb04 	ldr.w	lr, [sp], #4
 800c928:	b003      	add	sp, #12
 800c92a:	4770      	bx	lr
 800c92c:	20000048 	.word	0x20000048
 800c930:	ffff0208 	.word	0xffff0208

0800c934 <__swbuf_r>:
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	460e      	mov	r6, r1
 800c938:	4614      	mov	r4, r2
 800c93a:	4605      	mov	r5, r0
 800c93c:	b118      	cbz	r0, 800c946 <__swbuf_r+0x12>
 800c93e:	6983      	ldr	r3, [r0, #24]
 800c940:	b90b      	cbnz	r3, 800c946 <__swbuf_r+0x12>
 800c942:	f000 f9a7 	bl	800cc94 <__sinit>
 800c946:	4b21      	ldr	r3, [pc, #132]	; (800c9cc <__swbuf_r+0x98>)
 800c948:	429c      	cmp	r4, r3
 800c94a:	d12a      	bne.n	800c9a2 <__swbuf_r+0x6e>
 800c94c:	686c      	ldr	r4, [r5, #4]
 800c94e:	69a3      	ldr	r3, [r4, #24]
 800c950:	60a3      	str	r3, [r4, #8]
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	071a      	lsls	r2, r3, #28
 800c956:	d52e      	bpl.n	800c9b6 <__swbuf_r+0x82>
 800c958:	6923      	ldr	r3, [r4, #16]
 800c95a:	b363      	cbz	r3, 800c9b6 <__swbuf_r+0x82>
 800c95c:	6923      	ldr	r3, [r4, #16]
 800c95e:	6820      	ldr	r0, [r4, #0]
 800c960:	1ac0      	subs	r0, r0, r3
 800c962:	6963      	ldr	r3, [r4, #20]
 800c964:	b2f6      	uxtb	r6, r6
 800c966:	4283      	cmp	r3, r0
 800c968:	4637      	mov	r7, r6
 800c96a:	dc04      	bgt.n	800c976 <__swbuf_r+0x42>
 800c96c:	4621      	mov	r1, r4
 800c96e:	4628      	mov	r0, r5
 800c970:	f000 f926 	bl	800cbc0 <_fflush_r>
 800c974:	bb28      	cbnz	r0, 800c9c2 <__swbuf_r+0x8e>
 800c976:	68a3      	ldr	r3, [r4, #8]
 800c978:	3b01      	subs	r3, #1
 800c97a:	60a3      	str	r3, [r4, #8]
 800c97c:	6823      	ldr	r3, [r4, #0]
 800c97e:	1c5a      	adds	r2, r3, #1
 800c980:	6022      	str	r2, [r4, #0]
 800c982:	701e      	strb	r6, [r3, #0]
 800c984:	6963      	ldr	r3, [r4, #20]
 800c986:	3001      	adds	r0, #1
 800c988:	4283      	cmp	r3, r0
 800c98a:	d004      	beq.n	800c996 <__swbuf_r+0x62>
 800c98c:	89a3      	ldrh	r3, [r4, #12]
 800c98e:	07db      	lsls	r3, r3, #31
 800c990:	d519      	bpl.n	800c9c6 <__swbuf_r+0x92>
 800c992:	2e0a      	cmp	r6, #10
 800c994:	d117      	bne.n	800c9c6 <__swbuf_r+0x92>
 800c996:	4621      	mov	r1, r4
 800c998:	4628      	mov	r0, r5
 800c99a:	f000 f911 	bl	800cbc0 <_fflush_r>
 800c99e:	b190      	cbz	r0, 800c9c6 <__swbuf_r+0x92>
 800c9a0:	e00f      	b.n	800c9c2 <__swbuf_r+0x8e>
 800c9a2:	4b0b      	ldr	r3, [pc, #44]	; (800c9d0 <__swbuf_r+0x9c>)
 800c9a4:	429c      	cmp	r4, r3
 800c9a6:	d101      	bne.n	800c9ac <__swbuf_r+0x78>
 800c9a8:	68ac      	ldr	r4, [r5, #8]
 800c9aa:	e7d0      	b.n	800c94e <__swbuf_r+0x1a>
 800c9ac:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <__swbuf_r+0xa0>)
 800c9ae:	429c      	cmp	r4, r3
 800c9b0:	bf08      	it	eq
 800c9b2:	68ec      	ldreq	r4, [r5, #12]
 800c9b4:	e7cb      	b.n	800c94e <__swbuf_r+0x1a>
 800c9b6:	4621      	mov	r1, r4
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	f000 f80d 	bl	800c9d8 <__swsetup_r>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d0cc      	beq.n	800c95c <__swbuf_r+0x28>
 800c9c2:	f04f 37ff 	mov.w	r7, #4294967295
 800c9c6:	4638      	mov	r0, r7
 800c9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	0800f744 	.word	0x0800f744
 800c9d0:	0800f764 	.word	0x0800f764
 800c9d4:	0800f724 	.word	0x0800f724

0800c9d8 <__swsetup_r>:
 800c9d8:	4b32      	ldr	r3, [pc, #200]	; (800caa4 <__swsetup_r+0xcc>)
 800c9da:	b570      	push	{r4, r5, r6, lr}
 800c9dc:	681d      	ldr	r5, [r3, #0]
 800c9de:	4606      	mov	r6, r0
 800c9e0:	460c      	mov	r4, r1
 800c9e2:	b125      	cbz	r5, 800c9ee <__swsetup_r+0x16>
 800c9e4:	69ab      	ldr	r3, [r5, #24]
 800c9e6:	b913      	cbnz	r3, 800c9ee <__swsetup_r+0x16>
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f000 f953 	bl	800cc94 <__sinit>
 800c9ee:	4b2e      	ldr	r3, [pc, #184]	; (800caa8 <__swsetup_r+0xd0>)
 800c9f0:	429c      	cmp	r4, r3
 800c9f2:	d10f      	bne.n	800ca14 <__swsetup_r+0x3c>
 800c9f4:	686c      	ldr	r4, [r5, #4]
 800c9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	0715      	lsls	r5, r2, #28
 800c9fe:	d42c      	bmi.n	800ca5a <__swsetup_r+0x82>
 800ca00:	06d0      	lsls	r0, r2, #27
 800ca02:	d411      	bmi.n	800ca28 <__swsetup_r+0x50>
 800ca04:	2209      	movs	r2, #9
 800ca06:	6032      	str	r2, [r6, #0]
 800ca08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca0c:	81a3      	strh	r3, [r4, #12]
 800ca0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca12:	e03e      	b.n	800ca92 <__swsetup_r+0xba>
 800ca14:	4b25      	ldr	r3, [pc, #148]	; (800caac <__swsetup_r+0xd4>)
 800ca16:	429c      	cmp	r4, r3
 800ca18:	d101      	bne.n	800ca1e <__swsetup_r+0x46>
 800ca1a:	68ac      	ldr	r4, [r5, #8]
 800ca1c:	e7eb      	b.n	800c9f6 <__swsetup_r+0x1e>
 800ca1e:	4b24      	ldr	r3, [pc, #144]	; (800cab0 <__swsetup_r+0xd8>)
 800ca20:	429c      	cmp	r4, r3
 800ca22:	bf08      	it	eq
 800ca24:	68ec      	ldreq	r4, [r5, #12]
 800ca26:	e7e6      	b.n	800c9f6 <__swsetup_r+0x1e>
 800ca28:	0751      	lsls	r1, r2, #29
 800ca2a:	d512      	bpl.n	800ca52 <__swsetup_r+0x7a>
 800ca2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca2e:	b141      	cbz	r1, 800ca42 <__swsetup_r+0x6a>
 800ca30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca34:	4299      	cmp	r1, r3
 800ca36:	d002      	beq.n	800ca3e <__swsetup_r+0x66>
 800ca38:	4630      	mov	r0, r6
 800ca3a:	f000 fa19 	bl	800ce70 <_free_r>
 800ca3e:	2300      	movs	r3, #0
 800ca40:	6363      	str	r3, [r4, #52]	; 0x34
 800ca42:	89a3      	ldrh	r3, [r4, #12]
 800ca44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca48:	81a3      	strh	r3, [r4, #12]
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	6063      	str	r3, [r4, #4]
 800ca4e:	6923      	ldr	r3, [r4, #16]
 800ca50:	6023      	str	r3, [r4, #0]
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	f043 0308 	orr.w	r3, r3, #8
 800ca58:	81a3      	strh	r3, [r4, #12]
 800ca5a:	6923      	ldr	r3, [r4, #16]
 800ca5c:	b94b      	cbnz	r3, 800ca72 <__swsetup_r+0x9a>
 800ca5e:	89a3      	ldrh	r3, [r4, #12]
 800ca60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca68:	d003      	beq.n	800ca72 <__swsetup_r+0x9a>
 800ca6a:	4621      	mov	r1, r4
 800ca6c:	4630      	mov	r0, r6
 800ca6e:	f000 f9bf 	bl	800cdf0 <__smakebuf_r>
 800ca72:	89a2      	ldrh	r2, [r4, #12]
 800ca74:	f012 0301 	ands.w	r3, r2, #1
 800ca78:	d00c      	beq.n	800ca94 <__swsetup_r+0xbc>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	60a3      	str	r3, [r4, #8]
 800ca7e:	6963      	ldr	r3, [r4, #20]
 800ca80:	425b      	negs	r3, r3
 800ca82:	61a3      	str	r3, [r4, #24]
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	b953      	cbnz	r3, 800ca9e <__swsetup_r+0xc6>
 800ca88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ca90:	d1ba      	bne.n	800ca08 <__swsetup_r+0x30>
 800ca92:	bd70      	pop	{r4, r5, r6, pc}
 800ca94:	0792      	lsls	r2, r2, #30
 800ca96:	bf58      	it	pl
 800ca98:	6963      	ldrpl	r3, [r4, #20]
 800ca9a:	60a3      	str	r3, [r4, #8]
 800ca9c:	e7f2      	b.n	800ca84 <__swsetup_r+0xac>
 800ca9e:	2000      	movs	r0, #0
 800caa0:	e7f7      	b.n	800ca92 <__swsetup_r+0xba>
 800caa2:	bf00      	nop
 800caa4:	20000048 	.word	0x20000048
 800caa8:	0800f744 	.word	0x0800f744
 800caac:	0800f764 	.word	0x0800f764
 800cab0:	0800f724 	.word	0x0800f724

0800cab4 <__sflush_r>:
 800cab4:	898a      	ldrh	r2, [r1, #12]
 800cab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caba:	4605      	mov	r5, r0
 800cabc:	0710      	lsls	r0, r2, #28
 800cabe:	460c      	mov	r4, r1
 800cac0:	d458      	bmi.n	800cb74 <__sflush_r+0xc0>
 800cac2:	684b      	ldr	r3, [r1, #4]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	dc05      	bgt.n	800cad4 <__sflush_r+0x20>
 800cac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800caca:	2b00      	cmp	r3, #0
 800cacc:	dc02      	bgt.n	800cad4 <__sflush_r+0x20>
 800cace:	2000      	movs	r0, #0
 800cad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cad6:	2e00      	cmp	r6, #0
 800cad8:	d0f9      	beq.n	800cace <__sflush_r+0x1a>
 800cada:	2300      	movs	r3, #0
 800cadc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cae0:	682f      	ldr	r7, [r5, #0]
 800cae2:	6a21      	ldr	r1, [r4, #32]
 800cae4:	602b      	str	r3, [r5, #0]
 800cae6:	d032      	beq.n	800cb4e <__sflush_r+0x9a>
 800cae8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800caea:	89a3      	ldrh	r3, [r4, #12]
 800caec:	075a      	lsls	r2, r3, #29
 800caee:	d505      	bpl.n	800cafc <__sflush_r+0x48>
 800caf0:	6863      	ldr	r3, [r4, #4]
 800caf2:	1ac0      	subs	r0, r0, r3
 800caf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800caf6:	b10b      	cbz	r3, 800cafc <__sflush_r+0x48>
 800caf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cafa:	1ac0      	subs	r0, r0, r3
 800cafc:	2300      	movs	r3, #0
 800cafe:	4602      	mov	r2, r0
 800cb00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb02:	6a21      	ldr	r1, [r4, #32]
 800cb04:	4628      	mov	r0, r5
 800cb06:	47b0      	blx	r6
 800cb08:	1c43      	adds	r3, r0, #1
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	d106      	bne.n	800cb1c <__sflush_r+0x68>
 800cb0e:	6829      	ldr	r1, [r5, #0]
 800cb10:	291d      	cmp	r1, #29
 800cb12:	d848      	bhi.n	800cba6 <__sflush_r+0xf2>
 800cb14:	4a29      	ldr	r2, [pc, #164]	; (800cbbc <__sflush_r+0x108>)
 800cb16:	40ca      	lsrs	r2, r1
 800cb18:	07d6      	lsls	r6, r2, #31
 800cb1a:	d544      	bpl.n	800cba6 <__sflush_r+0xf2>
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	6062      	str	r2, [r4, #4]
 800cb20:	04d9      	lsls	r1, r3, #19
 800cb22:	6922      	ldr	r2, [r4, #16]
 800cb24:	6022      	str	r2, [r4, #0]
 800cb26:	d504      	bpl.n	800cb32 <__sflush_r+0x7e>
 800cb28:	1c42      	adds	r2, r0, #1
 800cb2a:	d101      	bne.n	800cb30 <__sflush_r+0x7c>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	b903      	cbnz	r3, 800cb32 <__sflush_r+0x7e>
 800cb30:	6560      	str	r0, [r4, #84]	; 0x54
 800cb32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb34:	602f      	str	r7, [r5, #0]
 800cb36:	2900      	cmp	r1, #0
 800cb38:	d0c9      	beq.n	800cace <__sflush_r+0x1a>
 800cb3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb3e:	4299      	cmp	r1, r3
 800cb40:	d002      	beq.n	800cb48 <__sflush_r+0x94>
 800cb42:	4628      	mov	r0, r5
 800cb44:	f000 f994 	bl	800ce70 <_free_r>
 800cb48:	2000      	movs	r0, #0
 800cb4a:	6360      	str	r0, [r4, #52]	; 0x34
 800cb4c:	e7c0      	b.n	800cad0 <__sflush_r+0x1c>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	4628      	mov	r0, r5
 800cb52:	47b0      	blx	r6
 800cb54:	1c41      	adds	r1, r0, #1
 800cb56:	d1c8      	bne.n	800caea <__sflush_r+0x36>
 800cb58:	682b      	ldr	r3, [r5, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d0c5      	beq.n	800caea <__sflush_r+0x36>
 800cb5e:	2b1d      	cmp	r3, #29
 800cb60:	d001      	beq.n	800cb66 <__sflush_r+0xb2>
 800cb62:	2b16      	cmp	r3, #22
 800cb64:	d101      	bne.n	800cb6a <__sflush_r+0xb6>
 800cb66:	602f      	str	r7, [r5, #0]
 800cb68:	e7b1      	b.n	800cace <__sflush_r+0x1a>
 800cb6a:	89a3      	ldrh	r3, [r4, #12]
 800cb6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb70:	81a3      	strh	r3, [r4, #12]
 800cb72:	e7ad      	b.n	800cad0 <__sflush_r+0x1c>
 800cb74:	690f      	ldr	r7, [r1, #16]
 800cb76:	2f00      	cmp	r7, #0
 800cb78:	d0a9      	beq.n	800cace <__sflush_r+0x1a>
 800cb7a:	0793      	lsls	r3, r2, #30
 800cb7c:	680e      	ldr	r6, [r1, #0]
 800cb7e:	bf08      	it	eq
 800cb80:	694b      	ldreq	r3, [r1, #20]
 800cb82:	600f      	str	r7, [r1, #0]
 800cb84:	bf18      	it	ne
 800cb86:	2300      	movne	r3, #0
 800cb88:	eba6 0807 	sub.w	r8, r6, r7
 800cb8c:	608b      	str	r3, [r1, #8]
 800cb8e:	f1b8 0f00 	cmp.w	r8, #0
 800cb92:	dd9c      	ble.n	800cace <__sflush_r+0x1a>
 800cb94:	4643      	mov	r3, r8
 800cb96:	463a      	mov	r2, r7
 800cb98:	6a21      	ldr	r1, [r4, #32]
 800cb9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	47b0      	blx	r6
 800cba0:	2800      	cmp	r0, #0
 800cba2:	dc06      	bgt.n	800cbb2 <__sflush_r+0xfe>
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbaa:	81a3      	strh	r3, [r4, #12]
 800cbac:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb0:	e78e      	b.n	800cad0 <__sflush_r+0x1c>
 800cbb2:	4407      	add	r7, r0
 800cbb4:	eba8 0800 	sub.w	r8, r8, r0
 800cbb8:	e7e9      	b.n	800cb8e <__sflush_r+0xda>
 800cbba:	bf00      	nop
 800cbbc:	20400001 	.word	0x20400001

0800cbc0 <_fflush_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	690b      	ldr	r3, [r1, #16]
 800cbc4:	4605      	mov	r5, r0
 800cbc6:	460c      	mov	r4, r1
 800cbc8:	b1db      	cbz	r3, 800cc02 <_fflush_r+0x42>
 800cbca:	b118      	cbz	r0, 800cbd4 <_fflush_r+0x14>
 800cbcc:	6983      	ldr	r3, [r0, #24]
 800cbce:	b90b      	cbnz	r3, 800cbd4 <_fflush_r+0x14>
 800cbd0:	f000 f860 	bl	800cc94 <__sinit>
 800cbd4:	4b0c      	ldr	r3, [pc, #48]	; (800cc08 <_fflush_r+0x48>)
 800cbd6:	429c      	cmp	r4, r3
 800cbd8:	d109      	bne.n	800cbee <_fflush_r+0x2e>
 800cbda:	686c      	ldr	r4, [r5, #4]
 800cbdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbe0:	b17b      	cbz	r3, 800cc02 <_fflush_r+0x42>
 800cbe2:	4621      	mov	r1, r4
 800cbe4:	4628      	mov	r0, r5
 800cbe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbea:	f7ff bf63 	b.w	800cab4 <__sflush_r>
 800cbee:	4b07      	ldr	r3, [pc, #28]	; (800cc0c <_fflush_r+0x4c>)
 800cbf0:	429c      	cmp	r4, r3
 800cbf2:	d101      	bne.n	800cbf8 <_fflush_r+0x38>
 800cbf4:	68ac      	ldr	r4, [r5, #8]
 800cbf6:	e7f1      	b.n	800cbdc <_fflush_r+0x1c>
 800cbf8:	4b05      	ldr	r3, [pc, #20]	; (800cc10 <_fflush_r+0x50>)
 800cbfa:	429c      	cmp	r4, r3
 800cbfc:	bf08      	it	eq
 800cbfe:	68ec      	ldreq	r4, [r5, #12]
 800cc00:	e7ec      	b.n	800cbdc <_fflush_r+0x1c>
 800cc02:	2000      	movs	r0, #0
 800cc04:	bd38      	pop	{r3, r4, r5, pc}
 800cc06:	bf00      	nop
 800cc08:	0800f744 	.word	0x0800f744
 800cc0c:	0800f764 	.word	0x0800f764
 800cc10:	0800f724 	.word	0x0800f724

0800cc14 <std>:
 800cc14:	2300      	movs	r3, #0
 800cc16:	b510      	push	{r4, lr}
 800cc18:	4604      	mov	r4, r0
 800cc1a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc1e:	6083      	str	r3, [r0, #8]
 800cc20:	8181      	strh	r1, [r0, #12]
 800cc22:	6643      	str	r3, [r0, #100]	; 0x64
 800cc24:	81c2      	strh	r2, [r0, #14]
 800cc26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc2a:	6183      	str	r3, [r0, #24]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	2208      	movs	r2, #8
 800cc30:	305c      	adds	r0, #92	; 0x5c
 800cc32:	f7ff fdf3 	bl	800c81c <memset>
 800cc36:	4b05      	ldr	r3, [pc, #20]	; (800cc4c <std+0x38>)
 800cc38:	6263      	str	r3, [r4, #36]	; 0x24
 800cc3a:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <std+0x3c>)
 800cc3c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc3e:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <std+0x40>)
 800cc40:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc42:	4b05      	ldr	r3, [pc, #20]	; (800cc58 <std+0x44>)
 800cc44:	6224      	str	r4, [r4, #32]
 800cc46:	6323      	str	r3, [r4, #48]	; 0x30
 800cc48:	bd10      	pop	{r4, pc}
 800cc4a:	bf00      	nop
 800cc4c:	0800d595 	.word	0x0800d595
 800cc50:	0800d5b7 	.word	0x0800d5b7
 800cc54:	0800d5ef 	.word	0x0800d5ef
 800cc58:	0800d613 	.word	0x0800d613

0800cc5c <_cleanup_r>:
 800cc5c:	4901      	ldr	r1, [pc, #4]	; (800cc64 <_cleanup_r+0x8>)
 800cc5e:	f000 b885 	b.w	800cd6c <_fwalk_reent>
 800cc62:	bf00      	nop
 800cc64:	0800cbc1 	.word	0x0800cbc1

0800cc68 <__sfmoreglue>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	1e4a      	subs	r2, r1, #1
 800cc6c:	2568      	movs	r5, #104	; 0x68
 800cc6e:	4355      	muls	r5, r2
 800cc70:	460e      	mov	r6, r1
 800cc72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc76:	f000 f949 	bl	800cf0c <_malloc_r>
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	b140      	cbz	r0, 800cc90 <__sfmoreglue+0x28>
 800cc7e:	2100      	movs	r1, #0
 800cc80:	e9c0 1600 	strd	r1, r6, [r0]
 800cc84:	300c      	adds	r0, #12
 800cc86:	60a0      	str	r0, [r4, #8]
 800cc88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc8c:	f7ff fdc6 	bl	800c81c <memset>
 800cc90:	4620      	mov	r0, r4
 800cc92:	bd70      	pop	{r4, r5, r6, pc}

0800cc94 <__sinit>:
 800cc94:	6983      	ldr	r3, [r0, #24]
 800cc96:	b510      	push	{r4, lr}
 800cc98:	4604      	mov	r4, r0
 800cc9a:	bb33      	cbnz	r3, 800ccea <__sinit+0x56>
 800cc9c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cca0:	6503      	str	r3, [r0, #80]	; 0x50
 800cca2:	4b12      	ldr	r3, [pc, #72]	; (800ccec <__sinit+0x58>)
 800cca4:	4a12      	ldr	r2, [pc, #72]	; (800ccf0 <__sinit+0x5c>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6282      	str	r2, [r0, #40]	; 0x28
 800ccaa:	4298      	cmp	r0, r3
 800ccac:	bf04      	itt	eq
 800ccae:	2301      	moveq	r3, #1
 800ccb0:	6183      	streq	r3, [r0, #24]
 800ccb2:	f000 f81f 	bl	800ccf4 <__sfp>
 800ccb6:	6060      	str	r0, [r4, #4]
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f000 f81b 	bl	800ccf4 <__sfp>
 800ccbe:	60a0      	str	r0, [r4, #8]
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f000 f817 	bl	800ccf4 <__sfp>
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	60e0      	str	r0, [r4, #12]
 800ccca:	2104      	movs	r1, #4
 800cccc:	6860      	ldr	r0, [r4, #4]
 800ccce:	f7ff ffa1 	bl	800cc14 <std>
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	2109      	movs	r1, #9
 800ccd6:	68a0      	ldr	r0, [r4, #8]
 800ccd8:	f7ff ff9c 	bl	800cc14 <std>
 800ccdc:	2202      	movs	r2, #2
 800ccde:	2112      	movs	r1, #18
 800cce0:	68e0      	ldr	r0, [r4, #12]
 800cce2:	f7ff ff97 	bl	800cc14 <std>
 800cce6:	2301      	movs	r3, #1
 800cce8:	61a3      	str	r3, [r4, #24]
 800ccea:	bd10      	pop	{r4, pc}
 800ccec:	0800f720 	.word	0x0800f720
 800ccf0:	0800cc5d 	.word	0x0800cc5d

0800ccf4 <__sfp>:
 800ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf6:	4b1b      	ldr	r3, [pc, #108]	; (800cd64 <__sfp+0x70>)
 800ccf8:	681e      	ldr	r6, [r3, #0]
 800ccfa:	69b3      	ldr	r3, [r6, #24]
 800ccfc:	4607      	mov	r7, r0
 800ccfe:	b913      	cbnz	r3, 800cd06 <__sfp+0x12>
 800cd00:	4630      	mov	r0, r6
 800cd02:	f7ff ffc7 	bl	800cc94 <__sinit>
 800cd06:	3648      	adds	r6, #72	; 0x48
 800cd08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	d503      	bpl.n	800cd18 <__sfp+0x24>
 800cd10:	6833      	ldr	r3, [r6, #0]
 800cd12:	b133      	cbz	r3, 800cd22 <__sfp+0x2e>
 800cd14:	6836      	ldr	r6, [r6, #0]
 800cd16:	e7f7      	b.n	800cd08 <__sfp+0x14>
 800cd18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd1c:	b16d      	cbz	r5, 800cd3a <__sfp+0x46>
 800cd1e:	3468      	adds	r4, #104	; 0x68
 800cd20:	e7f4      	b.n	800cd0c <__sfp+0x18>
 800cd22:	2104      	movs	r1, #4
 800cd24:	4638      	mov	r0, r7
 800cd26:	f7ff ff9f 	bl	800cc68 <__sfmoreglue>
 800cd2a:	6030      	str	r0, [r6, #0]
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d1f1      	bne.n	800cd14 <__sfp+0x20>
 800cd30:	230c      	movs	r3, #12
 800cd32:	603b      	str	r3, [r7, #0]
 800cd34:	4604      	mov	r4, r0
 800cd36:	4620      	mov	r0, r4
 800cd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd3a:	4b0b      	ldr	r3, [pc, #44]	; (800cd68 <__sfp+0x74>)
 800cd3c:	6665      	str	r5, [r4, #100]	; 0x64
 800cd3e:	e9c4 5500 	strd	r5, r5, [r4]
 800cd42:	60a5      	str	r5, [r4, #8]
 800cd44:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800cd48:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800cd4c:	2208      	movs	r2, #8
 800cd4e:	4629      	mov	r1, r5
 800cd50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd54:	f7ff fd62 	bl	800c81c <memset>
 800cd58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd60:	e7e9      	b.n	800cd36 <__sfp+0x42>
 800cd62:	bf00      	nop
 800cd64:	0800f720 	.word	0x0800f720
 800cd68:	ffff0001 	.word	0xffff0001

0800cd6c <_fwalk_reent>:
 800cd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd70:	4680      	mov	r8, r0
 800cd72:	4689      	mov	r9, r1
 800cd74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd78:	2600      	movs	r6, #0
 800cd7a:	b914      	cbnz	r4, 800cd82 <_fwalk_reent+0x16>
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd82:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cd86:	3f01      	subs	r7, #1
 800cd88:	d501      	bpl.n	800cd8e <_fwalk_reent+0x22>
 800cd8a:	6824      	ldr	r4, [r4, #0]
 800cd8c:	e7f5      	b.n	800cd7a <_fwalk_reent+0xe>
 800cd8e:	89ab      	ldrh	r3, [r5, #12]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d907      	bls.n	800cda4 <_fwalk_reent+0x38>
 800cd94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	d003      	beq.n	800cda4 <_fwalk_reent+0x38>
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	4640      	mov	r0, r8
 800cda0:	47c8      	blx	r9
 800cda2:	4306      	orrs	r6, r0
 800cda4:	3568      	adds	r5, #104	; 0x68
 800cda6:	e7ee      	b.n	800cd86 <_fwalk_reent+0x1a>

0800cda8 <__swhatbuf_r>:
 800cda8:	b570      	push	{r4, r5, r6, lr}
 800cdaa:	460e      	mov	r6, r1
 800cdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb0:	2900      	cmp	r1, #0
 800cdb2:	b096      	sub	sp, #88	; 0x58
 800cdb4:	4614      	mov	r4, r2
 800cdb6:	461d      	mov	r5, r3
 800cdb8:	da07      	bge.n	800cdca <__swhatbuf_r+0x22>
 800cdba:	2300      	movs	r3, #0
 800cdbc:	602b      	str	r3, [r5, #0]
 800cdbe:	89b3      	ldrh	r3, [r6, #12]
 800cdc0:	061a      	lsls	r2, r3, #24
 800cdc2:	d410      	bmi.n	800cde6 <__swhatbuf_r+0x3e>
 800cdc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdc8:	e00e      	b.n	800cde8 <__swhatbuf_r+0x40>
 800cdca:	466a      	mov	r2, sp
 800cdcc:	f000 fc48 	bl	800d660 <_fstat_r>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	dbf2      	blt.n	800cdba <__swhatbuf_r+0x12>
 800cdd4:	9a01      	ldr	r2, [sp, #4]
 800cdd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cdda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cdde:	425a      	negs	r2, r3
 800cde0:	415a      	adcs	r2, r3
 800cde2:	602a      	str	r2, [r5, #0]
 800cde4:	e7ee      	b.n	800cdc4 <__swhatbuf_r+0x1c>
 800cde6:	2340      	movs	r3, #64	; 0x40
 800cde8:	2000      	movs	r0, #0
 800cdea:	6023      	str	r3, [r4, #0]
 800cdec:	b016      	add	sp, #88	; 0x58
 800cdee:	bd70      	pop	{r4, r5, r6, pc}

0800cdf0 <__smakebuf_r>:
 800cdf0:	898b      	ldrh	r3, [r1, #12]
 800cdf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cdf4:	079d      	lsls	r5, r3, #30
 800cdf6:	4606      	mov	r6, r0
 800cdf8:	460c      	mov	r4, r1
 800cdfa:	d507      	bpl.n	800ce0c <__smakebuf_r+0x1c>
 800cdfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	6123      	str	r3, [r4, #16]
 800ce04:	2301      	movs	r3, #1
 800ce06:	6163      	str	r3, [r4, #20]
 800ce08:	b002      	add	sp, #8
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
 800ce0c:	ab01      	add	r3, sp, #4
 800ce0e:	466a      	mov	r2, sp
 800ce10:	f7ff ffca 	bl	800cda8 <__swhatbuf_r>
 800ce14:	9900      	ldr	r1, [sp, #0]
 800ce16:	4605      	mov	r5, r0
 800ce18:	4630      	mov	r0, r6
 800ce1a:	f000 f877 	bl	800cf0c <_malloc_r>
 800ce1e:	b948      	cbnz	r0, 800ce34 <__smakebuf_r+0x44>
 800ce20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce24:	059a      	lsls	r2, r3, #22
 800ce26:	d4ef      	bmi.n	800ce08 <__smakebuf_r+0x18>
 800ce28:	f023 0303 	bic.w	r3, r3, #3
 800ce2c:	f043 0302 	orr.w	r3, r3, #2
 800ce30:	81a3      	strh	r3, [r4, #12]
 800ce32:	e7e3      	b.n	800cdfc <__smakebuf_r+0xc>
 800ce34:	4b0d      	ldr	r3, [pc, #52]	; (800ce6c <__smakebuf_r+0x7c>)
 800ce36:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce38:	89a3      	ldrh	r3, [r4, #12]
 800ce3a:	6020      	str	r0, [r4, #0]
 800ce3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce40:	81a3      	strh	r3, [r4, #12]
 800ce42:	9b00      	ldr	r3, [sp, #0]
 800ce44:	6163      	str	r3, [r4, #20]
 800ce46:	9b01      	ldr	r3, [sp, #4]
 800ce48:	6120      	str	r0, [r4, #16]
 800ce4a:	b15b      	cbz	r3, 800ce64 <__smakebuf_r+0x74>
 800ce4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce50:	4630      	mov	r0, r6
 800ce52:	f000 fc17 	bl	800d684 <_isatty_r>
 800ce56:	b128      	cbz	r0, 800ce64 <__smakebuf_r+0x74>
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	f023 0303 	bic.w	r3, r3, #3
 800ce5e:	f043 0301 	orr.w	r3, r3, #1
 800ce62:	81a3      	strh	r3, [r4, #12]
 800ce64:	89a3      	ldrh	r3, [r4, #12]
 800ce66:	431d      	orrs	r5, r3
 800ce68:	81a5      	strh	r5, [r4, #12]
 800ce6a:	e7cd      	b.n	800ce08 <__smakebuf_r+0x18>
 800ce6c:	0800cc5d 	.word	0x0800cc5d

0800ce70 <_free_r>:
 800ce70:	b538      	push	{r3, r4, r5, lr}
 800ce72:	4605      	mov	r5, r0
 800ce74:	2900      	cmp	r1, #0
 800ce76:	d045      	beq.n	800cf04 <_free_r+0x94>
 800ce78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce7c:	1f0c      	subs	r4, r1, #4
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	bfb8      	it	lt
 800ce82:	18e4      	addlt	r4, r4, r3
 800ce84:	f000 fc44 	bl	800d710 <__malloc_lock>
 800ce88:	4a1f      	ldr	r2, [pc, #124]	; (800cf08 <_free_r+0x98>)
 800ce8a:	6813      	ldr	r3, [r2, #0]
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	b933      	cbnz	r3, 800ce9e <_free_r+0x2e>
 800ce90:	6063      	str	r3, [r4, #4]
 800ce92:	6014      	str	r4, [r2, #0]
 800ce94:	4628      	mov	r0, r5
 800ce96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce9a:	f000 bc3a 	b.w	800d712 <__malloc_unlock>
 800ce9e:	42a3      	cmp	r3, r4
 800cea0:	d90c      	bls.n	800cebc <_free_r+0x4c>
 800cea2:	6821      	ldr	r1, [r4, #0]
 800cea4:	1862      	adds	r2, r4, r1
 800cea6:	4293      	cmp	r3, r2
 800cea8:	bf04      	itt	eq
 800ceaa:	681a      	ldreq	r2, [r3, #0]
 800ceac:	685b      	ldreq	r3, [r3, #4]
 800ceae:	6063      	str	r3, [r4, #4]
 800ceb0:	bf04      	itt	eq
 800ceb2:	1852      	addeq	r2, r2, r1
 800ceb4:	6022      	streq	r2, [r4, #0]
 800ceb6:	6004      	str	r4, [r0, #0]
 800ceb8:	e7ec      	b.n	800ce94 <_free_r+0x24>
 800ceba:	4613      	mov	r3, r2
 800cebc:	685a      	ldr	r2, [r3, #4]
 800cebe:	b10a      	cbz	r2, 800cec4 <_free_r+0x54>
 800cec0:	42a2      	cmp	r2, r4
 800cec2:	d9fa      	bls.n	800ceba <_free_r+0x4a>
 800cec4:	6819      	ldr	r1, [r3, #0]
 800cec6:	1858      	adds	r0, r3, r1
 800cec8:	42a0      	cmp	r0, r4
 800ceca:	d10b      	bne.n	800cee4 <_free_r+0x74>
 800cecc:	6820      	ldr	r0, [r4, #0]
 800cece:	4401      	add	r1, r0
 800ced0:	1858      	adds	r0, r3, r1
 800ced2:	4282      	cmp	r2, r0
 800ced4:	6019      	str	r1, [r3, #0]
 800ced6:	d1dd      	bne.n	800ce94 <_free_r+0x24>
 800ced8:	6810      	ldr	r0, [r2, #0]
 800ceda:	6852      	ldr	r2, [r2, #4]
 800cedc:	605a      	str	r2, [r3, #4]
 800cede:	4401      	add	r1, r0
 800cee0:	6019      	str	r1, [r3, #0]
 800cee2:	e7d7      	b.n	800ce94 <_free_r+0x24>
 800cee4:	d902      	bls.n	800ceec <_free_r+0x7c>
 800cee6:	230c      	movs	r3, #12
 800cee8:	602b      	str	r3, [r5, #0]
 800ceea:	e7d3      	b.n	800ce94 <_free_r+0x24>
 800ceec:	6820      	ldr	r0, [r4, #0]
 800ceee:	1821      	adds	r1, r4, r0
 800cef0:	428a      	cmp	r2, r1
 800cef2:	bf04      	itt	eq
 800cef4:	6811      	ldreq	r1, [r2, #0]
 800cef6:	6852      	ldreq	r2, [r2, #4]
 800cef8:	6062      	str	r2, [r4, #4]
 800cefa:	bf04      	itt	eq
 800cefc:	1809      	addeq	r1, r1, r0
 800cefe:	6021      	streq	r1, [r4, #0]
 800cf00:	605c      	str	r4, [r3, #4]
 800cf02:	e7c7      	b.n	800ce94 <_free_r+0x24>
 800cf04:	bd38      	pop	{r3, r4, r5, pc}
 800cf06:	bf00      	nop
 800cf08:	200002c8 	.word	0x200002c8

0800cf0c <_malloc_r>:
 800cf0c:	b570      	push	{r4, r5, r6, lr}
 800cf0e:	1ccd      	adds	r5, r1, #3
 800cf10:	f025 0503 	bic.w	r5, r5, #3
 800cf14:	3508      	adds	r5, #8
 800cf16:	2d0c      	cmp	r5, #12
 800cf18:	bf38      	it	cc
 800cf1a:	250c      	movcc	r5, #12
 800cf1c:	2d00      	cmp	r5, #0
 800cf1e:	4606      	mov	r6, r0
 800cf20:	db01      	blt.n	800cf26 <_malloc_r+0x1a>
 800cf22:	42a9      	cmp	r1, r5
 800cf24:	d903      	bls.n	800cf2e <_malloc_r+0x22>
 800cf26:	230c      	movs	r3, #12
 800cf28:	6033      	str	r3, [r6, #0]
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	bd70      	pop	{r4, r5, r6, pc}
 800cf2e:	f000 fbef 	bl	800d710 <__malloc_lock>
 800cf32:	4a21      	ldr	r2, [pc, #132]	; (800cfb8 <_malloc_r+0xac>)
 800cf34:	6814      	ldr	r4, [r2, #0]
 800cf36:	4621      	mov	r1, r4
 800cf38:	b991      	cbnz	r1, 800cf60 <_malloc_r+0x54>
 800cf3a:	4c20      	ldr	r4, [pc, #128]	; (800cfbc <_malloc_r+0xb0>)
 800cf3c:	6823      	ldr	r3, [r4, #0]
 800cf3e:	b91b      	cbnz	r3, 800cf48 <_malloc_r+0x3c>
 800cf40:	4630      	mov	r0, r6
 800cf42:	f000 fb17 	bl	800d574 <_sbrk_r>
 800cf46:	6020      	str	r0, [r4, #0]
 800cf48:	4629      	mov	r1, r5
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	f000 fb12 	bl	800d574 <_sbrk_r>
 800cf50:	1c43      	adds	r3, r0, #1
 800cf52:	d124      	bne.n	800cf9e <_malloc_r+0x92>
 800cf54:	230c      	movs	r3, #12
 800cf56:	6033      	str	r3, [r6, #0]
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f000 fbda 	bl	800d712 <__malloc_unlock>
 800cf5e:	e7e4      	b.n	800cf2a <_malloc_r+0x1e>
 800cf60:	680b      	ldr	r3, [r1, #0]
 800cf62:	1b5b      	subs	r3, r3, r5
 800cf64:	d418      	bmi.n	800cf98 <_malloc_r+0x8c>
 800cf66:	2b0b      	cmp	r3, #11
 800cf68:	d90f      	bls.n	800cf8a <_malloc_r+0x7e>
 800cf6a:	600b      	str	r3, [r1, #0]
 800cf6c:	50cd      	str	r5, [r1, r3]
 800cf6e:	18cc      	adds	r4, r1, r3
 800cf70:	4630      	mov	r0, r6
 800cf72:	f000 fbce 	bl	800d712 <__malloc_unlock>
 800cf76:	f104 000b 	add.w	r0, r4, #11
 800cf7a:	1d23      	adds	r3, r4, #4
 800cf7c:	f020 0007 	bic.w	r0, r0, #7
 800cf80:	1ac3      	subs	r3, r0, r3
 800cf82:	d0d3      	beq.n	800cf2c <_malloc_r+0x20>
 800cf84:	425a      	negs	r2, r3
 800cf86:	50e2      	str	r2, [r4, r3]
 800cf88:	e7d0      	b.n	800cf2c <_malloc_r+0x20>
 800cf8a:	428c      	cmp	r4, r1
 800cf8c:	684b      	ldr	r3, [r1, #4]
 800cf8e:	bf16      	itet	ne
 800cf90:	6063      	strne	r3, [r4, #4]
 800cf92:	6013      	streq	r3, [r2, #0]
 800cf94:	460c      	movne	r4, r1
 800cf96:	e7eb      	b.n	800cf70 <_malloc_r+0x64>
 800cf98:	460c      	mov	r4, r1
 800cf9a:	6849      	ldr	r1, [r1, #4]
 800cf9c:	e7cc      	b.n	800cf38 <_malloc_r+0x2c>
 800cf9e:	1cc4      	adds	r4, r0, #3
 800cfa0:	f024 0403 	bic.w	r4, r4, #3
 800cfa4:	42a0      	cmp	r0, r4
 800cfa6:	d005      	beq.n	800cfb4 <_malloc_r+0xa8>
 800cfa8:	1a21      	subs	r1, r4, r0
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f000 fae2 	bl	800d574 <_sbrk_r>
 800cfb0:	3001      	adds	r0, #1
 800cfb2:	d0cf      	beq.n	800cf54 <_malloc_r+0x48>
 800cfb4:	6025      	str	r5, [r4, #0]
 800cfb6:	e7db      	b.n	800cf70 <_malloc_r+0x64>
 800cfb8:	200002c8 	.word	0x200002c8
 800cfbc:	200002cc 	.word	0x200002cc

0800cfc0 <__ssputs_r>:
 800cfc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc4:	688e      	ldr	r6, [r1, #8]
 800cfc6:	429e      	cmp	r6, r3
 800cfc8:	4682      	mov	sl, r0
 800cfca:	460c      	mov	r4, r1
 800cfcc:	4690      	mov	r8, r2
 800cfce:	4699      	mov	r9, r3
 800cfd0:	d837      	bhi.n	800d042 <__ssputs_r+0x82>
 800cfd2:	898a      	ldrh	r2, [r1, #12]
 800cfd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cfd8:	d031      	beq.n	800d03e <__ssputs_r+0x7e>
 800cfda:	6825      	ldr	r5, [r4, #0]
 800cfdc:	6909      	ldr	r1, [r1, #16]
 800cfde:	1a6f      	subs	r7, r5, r1
 800cfe0:	6965      	ldr	r5, [r4, #20]
 800cfe2:	2302      	movs	r3, #2
 800cfe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfe8:	fb95 f5f3 	sdiv	r5, r5, r3
 800cfec:	f109 0301 	add.w	r3, r9, #1
 800cff0:	443b      	add	r3, r7
 800cff2:	429d      	cmp	r5, r3
 800cff4:	bf38      	it	cc
 800cff6:	461d      	movcc	r5, r3
 800cff8:	0553      	lsls	r3, r2, #21
 800cffa:	d530      	bpl.n	800d05e <__ssputs_r+0x9e>
 800cffc:	4629      	mov	r1, r5
 800cffe:	f7ff ff85 	bl	800cf0c <_malloc_r>
 800d002:	4606      	mov	r6, r0
 800d004:	b950      	cbnz	r0, 800d01c <__ssputs_r+0x5c>
 800d006:	230c      	movs	r3, #12
 800d008:	f8ca 3000 	str.w	r3, [sl]
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d012:	81a3      	strh	r3, [r4, #12]
 800d014:	f04f 30ff 	mov.w	r0, #4294967295
 800d018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d01c:	463a      	mov	r2, r7
 800d01e:	6921      	ldr	r1, [r4, #16]
 800d020:	f000 fb52 	bl	800d6c8 <memcpy>
 800d024:	89a3      	ldrh	r3, [r4, #12]
 800d026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d02a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d02e:	81a3      	strh	r3, [r4, #12]
 800d030:	6126      	str	r6, [r4, #16]
 800d032:	6165      	str	r5, [r4, #20]
 800d034:	443e      	add	r6, r7
 800d036:	1bed      	subs	r5, r5, r7
 800d038:	6026      	str	r6, [r4, #0]
 800d03a:	60a5      	str	r5, [r4, #8]
 800d03c:	464e      	mov	r6, r9
 800d03e:	454e      	cmp	r6, r9
 800d040:	d900      	bls.n	800d044 <__ssputs_r+0x84>
 800d042:	464e      	mov	r6, r9
 800d044:	4632      	mov	r2, r6
 800d046:	4641      	mov	r1, r8
 800d048:	6820      	ldr	r0, [r4, #0]
 800d04a:	f000 fb48 	bl	800d6de <memmove>
 800d04e:	68a3      	ldr	r3, [r4, #8]
 800d050:	1b9b      	subs	r3, r3, r6
 800d052:	60a3      	str	r3, [r4, #8]
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	441e      	add	r6, r3
 800d058:	6026      	str	r6, [r4, #0]
 800d05a:	2000      	movs	r0, #0
 800d05c:	e7dc      	b.n	800d018 <__ssputs_r+0x58>
 800d05e:	462a      	mov	r2, r5
 800d060:	f000 fb58 	bl	800d714 <_realloc_r>
 800d064:	4606      	mov	r6, r0
 800d066:	2800      	cmp	r0, #0
 800d068:	d1e2      	bne.n	800d030 <__ssputs_r+0x70>
 800d06a:	6921      	ldr	r1, [r4, #16]
 800d06c:	4650      	mov	r0, sl
 800d06e:	f7ff feff 	bl	800ce70 <_free_r>
 800d072:	e7c8      	b.n	800d006 <__ssputs_r+0x46>

0800d074 <_svfiprintf_r>:
 800d074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d078:	461d      	mov	r5, r3
 800d07a:	898b      	ldrh	r3, [r1, #12]
 800d07c:	061f      	lsls	r7, r3, #24
 800d07e:	b09d      	sub	sp, #116	; 0x74
 800d080:	4680      	mov	r8, r0
 800d082:	460c      	mov	r4, r1
 800d084:	4616      	mov	r6, r2
 800d086:	d50f      	bpl.n	800d0a8 <_svfiprintf_r+0x34>
 800d088:	690b      	ldr	r3, [r1, #16]
 800d08a:	b96b      	cbnz	r3, 800d0a8 <_svfiprintf_r+0x34>
 800d08c:	2140      	movs	r1, #64	; 0x40
 800d08e:	f7ff ff3d 	bl	800cf0c <_malloc_r>
 800d092:	6020      	str	r0, [r4, #0]
 800d094:	6120      	str	r0, [r4, #16]
 800d096:	b928      	cbnz	r0, 800d0a4 <_svfiprintf_r+0x30>
 800d098:	230c      	movs	r3, #12
 800d09a:	f8c8 3000 	str.w	r3, [r8]
 800d09e:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a2:	e0c8      	b.n	800d236 <_svfiprintf_r+0x1c2>
 800d0a4:	2340      	movs	r3, #64	; 0x40
 800d0a6:	6163      	str	r3, [r4, #20]
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ac:	2320      	movs	r3, #32
 800d0ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0b2:	2330      	movs	r3, #48	; 0x30
 800d0b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0b8:	9503      	str	r5, [sp, #12]
 800d0ba:	f04f 0b01 	mov.w	fp, #1
 800d0be:	4637      	mov	r7, r6
 800d0c0:	463d      	mov	r5, r7
 800d0c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d0c6:	b10b      	cbz	r3, 800d0cc <_svfiprintf_r+0x58>
 800d0c8:	2b25      	cmp	r3, #37	; 0x25
 800d0ca:	d13e      	bne.n	800d14a <_svfiprintf_r+0xd6>
 800d0cc:	ebb7 0a06 	subs.w	sl, r7, r6
 800d0d0:	d00b      	beq.n	800d0ea <_svfiprintf_r+0x76>
 800d0d2:	4653      	mov	r3, sl
 800d0d4:	4632      	mov	r2, r6
 800d0d6:	4621      	mov	r1, r4
 800d0d8:	4640      	mov	r0, r8
 800d0da:	f7ff ff71 	bl	800cfc0 <__ssputs_r>
 800d0de:	3001      	adds	r0, #1
 800d0e0:	f000 80a4 	beq.w	800d22c <_svfiprintf_r+0x1b8>
 800d0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e6:	4453      	add	r3, sl
 800d0e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ea:	783b      	ldrb	r3, [r7, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f000 809d 	beq.w	800d22c <_svfiprintf_r+0x1b8>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0fc:	9304      	str	r3, [sp, #16]
 800d0fe:	9307      	str	r3, [sp, #28]
 800d100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d104:	931a      	str	r3, [sp, #104]	; 0x68
 800d106:	462f      	mov	r7, r5
 800d108:	2205      	movs	r2, #5
 800d10a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d10e:	4850      	ldr	r0, [pc, #320]	; (800d250 <_svfiprintf_r+0x1dc>)
 800d110:	f7f3 f87e 	bl	8000210 <memchr>
 800d114:	9b04      	ldr	r3, [sp, #16]
 800d116:	b9d0      	cbnz	r0, 800d14e <_svfiprintf_r+0xda>
 800d118:	06d9      	lsls	r1, r3, #27
 800d11a:	bf44      	itt	mi
 800d11c:	2220      	movmi	r2, #32
 800d11e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d122:	071a      	lsls	r2, r3, #28
 800d124:	bf44      	itt	mi
 800d126:	222b      	movmi	r2, #43	; 0x2b
 800d128:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d12c:	782a      	ldrb	r2, [r5, #0]
 800d12e:	2a2a      	cmp	r2, #42	; 0x2a
 800d130:	d015      	beq.n	800d15e <_svfiprintf_r+0xea>
 800d132:	9a07      	ldr	r2, [sp, #28]
 800d134:	462f      	mov	r7, r5
 800d136:	2000      	movs	r0, #0
 800d138:	250a      	movs	r5, #10
 800d13a:	4639      	mov	r1, r7
 800d13c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d140:	3b30      	subs	r3, #48	; 0x30
 800d142:	2b09      	cmp	r3, #9
 800d144:	d94d      	bls.n	800d1e2 <_svfiprintf_r+0x16e>
 800d146:	b1b8      	cbz	r0, 800d178 <_svfiprintf_r+0x104>
 800d148:	e00f      	b.n	800d16a <_svfiprintf_r+0xf6>
 800d14a:	462f      	mov	r7, r5
 800d14c:	e7b8      	b.n	800d0c0 <_svfiprintf_r+0x4c>
 800d14e:	4a40      	ldr	r2, [pc, #256]	; (800d250 <_svfiprintf_r+0x1dc>)
 800d150:	1a80      	subs	r0, r0, r2
 800d152:	fa0b f000 	lsl.w	r0, fp, r0
 800d156:	4318      	orrs	r0, r3
 800d158:	9004      	str	r0, [sp, #16]
 800d15a:	463d      	mov	r5, r7
 800d15c:	e7d3      	b.n	800d106 <_svfiprintf_r+0x92>
 800d15e:	9a03      	ldr	r2, [sp, #12]
 800d160:	1d11      	adds	r1, r2, #4
 800d162:	6812      	ldr	r2, [r2, #0]
 800d164:	9103      	str	r1, [sp, #12]
 800d166:	2a00      	cmp	r2, #0
 800d168:	db01      	blt.n	800d16e <_svfiprintf_r+0xfa>
 800d16a:	9207      	str	r2, [sp, #28]
 800d16c:	e004      	b.n	800d178 <_svfiprintf_r+0x104>
 800d16e:	4252      	negs	r2, r2
 800d170:	f043 0302 	orr.w	r3, r3, #2
 800d174:	9207      	str	r2, [sp, #28]
 800d176:	9304      	str	r3, [sp, #16]
 800d178:	783b      	ldrb	r3, [r7, #0]
 800d17a:	2b2e      	cmp	r3, #46	; 0x2e
 800d17c:	d10c      	bne.n	800d198 <_svfiprintf_r+0x124>
 800d17e:	787b      	ldrb	r3, [r7, #1]
 800d180:	2b2a      	cmp	r3, #42	; 0x2a
 800d182:	d133      	bne.n	800d1ec <_svfiprintf_r+0x178>
 800d184:	9b03      	ldr	r3, [sp, #12]
 800d186:	1d1a      	adds	r2, r3, #4
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	9203      	str	r2, [sp, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	bfb8      	it	lt
 800d190:	f04f 33ff 	movlt.w	r3, #4294967295
 800d194:	3702      	adds	r7, #2
 800d196:	9305      	str	r3, [sp, #20]
 800d198:	4d2e      	ldr	r5, [pc, #184]	; (800d254 <_svfiprintf_r+0x1e0>)
 800d19a:	7839      	ldrb	r1, [r7, #0]
 800d19c:	2203      	movs	r2, #3
 800d19e:	4628      	mov	r0, r5
 800d1a0:	f7f3 f836 	bl	8000210 <memchr>
 800d1a4:	b138      	cbz	r0, 800d1b6 <_svfiprintf_r+0x142>
 800d1a6:	2340      	movs	r3, #64	; 0x40
 800d1a8:	1b40      	subs	r0, r0, r5
 800d1aa:	fa03 f000 	lsl.w	r0, r3, r0
 800d1ae:	9b04      	ldr	r3, [sp, #16]
 800d1b0:	4303      	orrs	r3, r0
 800d1b2:	3701      	adds	r7, #1
 800d1b4:	9304      	str	r3, [sp, #16]
 800d1b6:	7839      	ldrb	r1, [r7, #0]
 800d1b8:	4827      	ldr	r0, [pc, #156]	; (800d258 <_svfiprintf_r+0x1e4>)
 800d1ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1be:	2206      	movs	r2, #6
 800d1c0:	1c7e      	adds	r6, r7, #1
 800d1c2:	f7f3 f825 	bl	8000210 <memchr>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d038      	beq.n	800d23c <_svfiprintf_r+0x1c8>
 800d1ca:	4b24      	ldr	r3, [pc, #144]	; (800d25c <_svfiprintf_r+0x1e8>)
 800d1cc:	bb13      	cbnz	r3, 800d214 <_svfiprintf_r+0x1a0>
 800d1ce:	9b03      	ldr	r3, [sp, #12]
 800d1d0:	3307      	adds	r3, #7
 800d1d2:	f023 0307 	bic.w	r3, r3, #7
 800d1d6:	3308      	adds	r3, #8
 800d1d8:	9303      	str	r3, [sp, #12]
 800d1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1dc:	444b      	add	r3, r9
 800d1de:	9309      	str	r3, [sp, #36]	; 0x24
 800d1e0:	e76d      	b.n	800d0be <_svfiprintf_r+0x4a>
 800d1e2:	fb05 3202 	mla	r2, r5, r2, r3
 800d1e6:	2001      	movs	r0, #1
 800d1e8:	460f      	mov	r7, r1
 800d1ea:	e7a6      	b.n	800d13a <_svfiprintf_r+0xc6>
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	3701      	adds	r7, #1
 800d1f0:	9305      	str	r3, [sp, #20]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	250a      	movs	r5, #10
 800d1f6:	4638      	mov	r0, r7
 800d1f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1fc:	3a30      	subs	r2, #48	; 0x30
 800d1fe:	2a09      	cmp	r2, #9
 800d200:	d903      	bls.n	800d20a <_svfiprintf_r+0x196>
 800d202:	2b00      	cmp	r3, #0
 800d204:	d0c8      	beq.n	800d198 <_svfiprintf_r+0x124>
 800d206:	9105      	str	r1, [sp, #20]
 800d208:	e7c6      	b.n	800d198 <_svfiprintf_r+0x124>
 800d20a:	fb05 2101 	mla	r1, r5, r1, r2
 800d20e:	2301      	movs	r3, #1
 800d210:	4607      	mov	r7, r0
 800d212:	e7f0      	b.n	800d1f6 <_svfiprintf_r+0x182>
 800d214:	ab03      	add	r3, sp, #12
 800d216:	9300      	str	r3, [sp, #0]
 800d218:	4622      	mov	r2, r4
 800d21a:	4b11      	ldr	r3, [pc, #68]	; (800d260 <_svfiprintf_r+0x1ec>)
 800d21c:	a904      	add	r1, sp, #16
 800d21e:	4640      	mov	r0, r8
 800d220:	f3af 8000 	nop.w
 800d224:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d228:	4681      	mov	r9, r0
 800d22a:	d1d6      	bne.n	800d1da <_svfiprintf_r+0x166>
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	065b      	lsls	r3, r3, #25
 800d230:	f53f af35 	bmi.w	800d09e <_svfiprintf_r+0x2a>
 800d234:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d236:	b01d      	add	sp, #116	; 0x74
 800d238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23c:	ab03      	add	r3, sp, #12
 800d23e:	9300      	str	r3, [sp, #0]
 800d240:	4622      	mov	r2, r4
 800d242:	4b07      	ldr	r3, [pc, #28]	; (800d260 <_svfiprintf_r+0x1ec>)
 800d244:	a904      	add	r1, sp, #16
 800d246:	4640      	mov	r0, r8
 800d248:	f000 f882 	bl	800d350 <_printf_i>
 800d24c:	e7ea      	b.n	800d224 <_svfiprintf_r+0x1b0>
 800d24e:	bf00      	nop
 800d250:	0800f784 	.word	0x0800f784
 800d254:	0800f78a 	.word	0x0800f78a
 800d258:	0800f78e 	.word	0x0800f78e
 800d25c:	00000000 	.word	0x00000000
 800d260:	0800cfc1 	.word	0x0800cfc1

0800d264 <_printf_common>:
 800d264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d268:	4691      	mov	r9, r2
 800d26a:	461f      	mov	r7, r3
 800d26c:	688a      	ldr	r2, [r1, #8]
 800d26e:	690b      	ldr	r3, [r1, #16]
 800d270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d274:	4293      	cmp	r3, r2
 800d276:	bfb8      	it	lt
 800d278:	4613      	movlt	r3, r2
 800d27a:	f8c9 3000 	str.w	r3, [r9]
 800d27e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d282:	4606      	mov	r6, r0
 800d284:	460c      	mov	r4, r1
 800d286:	b112      	cbz	r2, 800d28e <_printf_common+0x2a>
 800d288:	3301      	adds	r3, #1
 800d28a:	f8c9 3000 	str.w	r3, [r9]
 800d28e:	6823      	ldr	r3, [r4, #0]
 800d290:	0699      	lsls	r1, r3, #26
 800d292:	bf42      	ittt	mi
 800d294:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d298:	3302      	addmi	r3, #2
 800d29a:	f8c9 3000 	strmi.w	r3, [r9]
 800d29e:	6825      	ldr	r5, [r4, #0]
 800d2a0:	f015 0506 	ands.w	r5, r5, #6
 800d2a4:	d107      	bne.n	800d2b6 <_printf_common+0x52>
 800d2a6:	f104 0a19 	add.w	sl, r4, #25
 800d2aa:	68e3      	ldr	r3, [r4, #12]
 800d2ac:	f8d9 2000 	ldr.w	r2, [r9]
 800d2b0:	1a9b      	subs	r3, r3, r2
 800d2b2:	42ab      	cmp	r3, r5
 800d2b4:	dc28      	bgt.n	800d308 <_printf_common+0xa4>
 800d2b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d2ba:	6822      	ldr	r2, [r4, #0]
 800d2bc:	3300      	adds	r3, #0
 800d2be:	bf18      	it	ne
 800d2c0:	2301      	movne	r3, #1
 800d2c2:	0692      	lsls	r2, r2, #26
 800d2c4:	d42d      	bmi.n	800d322 <_printf_common+0xbe>
 800d2c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2ca:	4639      	mov	r1, r7
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	47c0      	blx	r8
 800d2d0:	3001      	adds	r0, #1
 800d2d2:	d020      	beq.n	800d316 <_printf_common+0xb2>
 800d2d4:	6823      	ldr	r3, [r4, #0]
 800d2d6:	68e5      	ldr	r5, [r4, #12]
 800d2d8:	f8d9 2000 	ldr.w	r2, [r9]
 800d2dc:	f003 0306 	and.w	r3, r3, #6
 800d2e0:	2b04      	cmp	r3, #4
 800d2e2:	bf08      	it	eq
 800d2e4:	1aad      	subeq	r5, r5, r2
 800d2e6:	68a3      	ldr	r3, [r4, #8]
 800d2e8:	6922      	ldr	r2, [r4, #16]
 800d2ea:	bf0c      	ite	eq
 800d2ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2f0:	2500      	movne	r5, #0
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	bfc4      	itt	gt
 800d2f6:	1a9b      	subgt	r3, r3, r2
 800d2f8:	18ed      	addgt	r5, r5, r3
 800d2fa:	f04f 0900 	mov.w	r9, #0
 800d2fe:	341a      	adds	r4, #26
 800d300:	454d      	cmp	r5, r9
 800d302:	d11a      	bne.n	800d33a <_printf_common+0xd6>
 800d304:	2000      	movs	r0, #0
 800d306:	e008      	b.n	800d31a <_printf_common+0xb6>
 800d308:	2301      	movs	r3, #1
 800d30a:	4652      	mov	r2, sl
 800d30c:	4639      	mov	r1, r7
 800d30e:	4630      	mov	r0, r6
 800d310:	47c0      	blx	r8
 800d312:	3001      	adds	r0, #1
 800d314:	d103      	bne.n	800d31e <_printf_common+0xba>
 800d316:	f04f 30ff 	mov.w	r0, #4294967295
 800d31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d31e:	3501      	adds	r5, #1
 800d320:	e7c3      	b.n	800d2aa <_printf_common+0x46>
 800d322:	18e1      	adds	r1, r4, r3
 800d324:	1c5a      	adds	r2, r3, #1
 800d326:	2030      	movs	r0, #48	; 0x30
 800d328:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d32c:	4422      	add	r2, r4
 800d32e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d332:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d336:	3302      	adds	r3, #2
 800d338:	e7c5      	b.n	800d2c6 <_printf_common+0x62>
 800d33a:	2301      	movs	r3, #1
 800d33c:	4622      	mov	r2, r4
 800d33e:	4639      	mov	r1, r7
 800d340:	4630      	mov	r0, r6
 800d342:	47c0      	blx	r8
 800d344:	3001      	adds	r0, #1
 800d346:	d0e6      	beq.n	800d316 <_printf_common+0xb2>
 800d348:	f109 0901 	add.w	r9, r9, #1
 800d34c:	e7d8      	b.n	800d300 <_printf_common+0x9c>
	...

0800d350 <_printf_i>:
 800d350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d354:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d358:	460c      	mov	r4, r1
 800d35a:	7e09      	ldrb	r1, [r1, #24]
 800d35c:	b085      	sub	sp, #20
 800d35e:	296e      	cmp	r1, #110	; 0x6e
 800d360:	4617      	mov	r7, r2
 800d362:	4606      	mov	r6, r0
 800d364:	4698      	mov	r8, r3
 800d366:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d368:	f000 80b3 	beq.w	800d4d2 <_printf_i+0x182>
 800d36c:	d822      	bhi.n	800d3b4 <_printf_i+0x64>
 800d36e:	2963      	cmp	r1, #99	; 0x63
 800d370:	d036      	beq.n	800d3e0 <_printf_i+0x90>
 800d372:	d80a      	bhi.n	800d38a <_printf_i+0x3a>
 800d374:	2900      	cmp	r1, #0
 800d376:	f000 80b9 	beq.w	800d4ec <_printf_i+0x19c>
 800d37a:	2958      	cmp	r1, #88	; 0x58
 800d37c:	f000 8083 	beq.w	800d486 <_printf_i+0x136>
 800d380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d384:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d388:	e032      	b.n	800d3f0 <_printf_i+0xa0>
 800d38a:	2964      	cmp	r1, #100	; 0x64
 800d38c:	d001      	beq.n	800d392 <_printf_i+0x42>
 800d38e:	2969      	cmp	r1, #105	; 0x69
 800d390:	d1f6      	bne.n	800d380 <_printf_i+0x30>
 800d392:	6820      	ldr	r0, [r4, #0]
 800d394:	6813      	ldr	r3, [r2, #0]
 800d396:	0605      	lsls	r5, r0, #24
 800d398:	f103 0104 	add.w	r1, r3, #4
 800d39c:	d52a      	bpl.n	800d3f4 <_printf_i+0xa4>
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	6011      	str	r1, [r2, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	da03      	bge.n	800d3ae <_printf_i+0x5e>
 800d3a6:	222d      	movs	r2, #45	; 0x2d
 800d3a8:	425b      	negs	r3, r3
 800d3aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d3ae:	486f      	ldr	r0, [pc, #444]	; (800d56c <_printf_i+0x21c>)
 800d3b0:	220a      	movs	r2, #10
 800d3b2:	e039      	b.n	800d428 <_printf_i+0xd8>
 800d3b4:	2973      	cmp	r1, #115	; 0x73
 800d3b6:	f000 809d 	beq.w	800d4f4 <_printf_i+0x1a4>
 800d3ba:	d808      	bhi.n	800d3ce <_printf_i+0x7e>
 800d3bc:	296f      	cmp	r1, #111	; 0x6f
 800d3be:	d020      	beq.n	800d402 <_printf_i+0xb2>
 800d3c0:	2970      	cmp	r1, #112	; 0x70
 800d3c2:	d1dd      	bne.n	800d380 <_printf_i+0x30>
 800d3c4:	6823      	ldr	r3, [r4, #0]
 800d3c6:	f043 0320 	orr.w	r3, r3, #32
 800d3ca:	6023      	str	r3, [r4, #0]
 800d3cc:	e003      	b.n	800d3d6 <_printf_i+0x86>
 800d3ce:	2975      	cmp	r1, #117	; 0x75
 800d3d0:	d017      	beq.n	800d402 <_printf_i+0xb2>
 800d3d2:	2978      	cmp	r1, #120	; 0x78
 800d3d4:	d1d4      	bne.n	800d380 <_printf_i+0x30>
 800d3d6:	2378      	movs	r3, #120	; 0x78
 800d3d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3dc:	4864      	ldr	r0, [pc, #400]	; (800d570 <_printf_i+0x220>)
 800d3de:	e055      	b.n	800d48c <_printf_i+0x13c>
 800d3e0:	6813      	ldr	r3, [r2, #0]
 800d3e2:	1d19      	adds	r1, r3, #4
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	6011      	str	r1, [r2, #0]
 800d3e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e08c      	b.n	800d50e <_printf_i+0x1be>
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	6011      	str	r1, [r2, #0]
 800d3f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d3fc:	bf18      	it	ne
 800d3fe:	b21b      	sxthne	r3, r3
 800d400:	e7cf      	b.n	800d3a2 <_printf_i+0x52>
 800d402:	6813      	ldr	r3, [r2, #0]
 800d404:	6825      	ldr	r5, [r4, #0]
 800d406:	1d18      	adds	r0, r3, #4
 800d408:	6010      	str	r0, [r2, #0]
 800d40a:	0628      	lsls	r0, r5, #24
 800d40c:	d501      	bpl.n	800d412 <_printf_i+0xc2>
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	e002      	b.n	800d418 <_printf_i+0xc8>
 800d412:	0668      	lsls	r0, r5, #25
 800d414:	d5fb      	bpl.n	800d40e <_printf_i+0xbe>
 800d416:	881b      	ldrh	r3, [r3, #0]
 800d418:	4854      	ldr	r0, [pc, #336]	; (800d56c <_printf_i+0x21c>)
 800d41a:	296f      	cmp	r1, #111	; 0x6f
 800d41c:	bf14      	ite	ne
 800d41e:	220a      	movne	r2, #10
 800d420:	2208      	moveq	r2, #8
 800d422:	2100      	movs	r1, #0
 800d424:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d428:	6865      	ldr	r5, [r4, #4]
 800d42a:	60a5      	str	r5, [r4, #8]
 800d42c:	2d00      	cmp	r5, #0
 800d42e:	f2c0 8095 	blt.w	800d55c <_printf_i+0x20c>
 800d432:	6821      	ldr	r1, [r4, #0]
 800d434:	f021 0104 	bic.w	r1, r1, #4
 800d438:	6021      	str	r1, [r4, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d13d      	bne.n	800d4ba <_printf_i+0x16a>
 800d43e:	2d00      	cmp	r5, #0
 800d440:	f040 808e 	bne.w	800d560 <_printf_i+0x210>
 800d444:	4665      	mov	r5, ip
 800d446:	2a08      	cmp	r2, #8
 800d448:	d10b      	bne.n	800d462 <_printf_i+0x112>
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	07db      	lsls	r3, r3, #31
 800d44e:	d508      	bpl.n	800d462 <_printf_i+0x112>
 800d450:	6923      	ldr	r3, [r4, #16]
 800d452:	6862      	ldr	r2, [r4, #4]
 800d454:	429a      	cmp	r2, r3
 800d456:	bfde      	ittt	le
 800d458:	2330      	movle	r3, #48	; 0x30
 800d45a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d45e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d462:	ebac 0305 	sub.w	r3, ip, r5
 800d466:	6123      	str	r3, [r4, #16]
 800d468:	f8cd 8000 	str.w	r8, [sp]
 800d46c:	463b      	mov	r3, r7
 800d46e:	aa03      	add	r2, sp, #12
 800d470:	4621      	mov	r1, r4
 800d472:	4630      	mov	r0, r6
 800d474:	f7ff fef6 	bl	800d264 <_printf_common>
 800d478:	3001      	adds	r0, #1
 800d47a:	d14d      	bne.n	800d518 <_printf_i+0x1c8>
 800d47c:	f04f 30ff 	mov.w	r0, #4294967295
 800d480:	b005      	add	sp, #20
 800d482:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d486:	4839      	ldr	r0, [pc, #228]	; (800d56c <_printf_i+0x21c>)
 800d488:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d48c:	6813      	ldr	r3, [r2, #0]
 800d48e:	6821      	ldr	r1, [r4, #0]
 800d490:	1d1d      	adds	r5, r3, #4
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	6015      	str	r5, [r2, #0]
 800d496:	060a      	lsls	r2, r1, #24
 800d498:	d50b      	bpl.n	800d4b2 <_printf_i+0x162>
 800d49a:	07ca      	lsls	r2, r1, #31
 800d49c:	bf44      	itt	mi
 800d49e:	f041 0120 	orrmi.w	r1, r1, #32
 800d4a2:	6021      	strmi	r1, [r4, #0]
 800d4a4:	b91b      	cbnz	r3, 800d4ae <_printf_i+0x15e>
 800d4a6:	6822      	ldr	r2, [r4, #0]
 800d4a8:	f022 0220 	bic.w	r2, r2, #32
 800d4ac:	6022      	str	r2, [r4, #0]
 800d4ae:	2210      	movs	r2, #16
 800d4b0:	e7b7      	b.n	800d422 <_printf_i+0xd2>
 800d4b2:	064d      	lsls	r5, r1, #25
 800d4b4:	bf48      	it	mi
 800d4b6:	b29b      	uxthmi	r3, r3
 800d4b8:	e7ef      	b.n	800d49a <_printf_i+0x14a>
 800d4ba:	4665      	mov	r5, ip
 800d4bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d4c0:	fb02 3311 	mls	r3, r2, r1, r3
 800d4c4:	5cc3      	ldrb	r3, [r0, r3]
 800d4c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	2900      	cmp	r1, #0
 800d4ce:	d1f5      	bne.n	800d4bc <_printf_i+0x16c>
 800d4d0:	e7b9      	b.n	800d446 <_printf_i+0xf6>
 800d4d2:	6813      	ldr	r3, [r2, #0]
 800d4d4:	6825      	ldr	r5, [r4, #0]
 800d4d6:	6961      	ldr	r1, [r4, #20]
 800d4d8:	1d18      	adds	r0, r3, #4
 800d4da:	6010      	str	r0, [r2, #0]
 800d4dc:	0628      	lsls	r0, r5, #24
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	d501      	bpl.n	800d4e6 <_printf_i+0x196>
 800d4e2:	6019      	str	r1, [r3, #0]
 800d4e4:	e002      	b.n	800d4ec <_printf_i+0x19c>
 800d4e6:	066a      	lsls	r2, r5, #25
 800d4e8:	d5fb      	bpl.n	800d4e2 <_printf_i+0x192>
 800d4ea:	8019      	strh	r1, [r3, #0]
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	6123      	str	r3, [r4, #16]
 800d4f0:	4665      	mov	r5, ip
 800d4f2:	e7b9      	b.n	800d468 <_printf_i+0x118>
 800d4f4:	6813      	ldr	r3, [r2, #0]
 800d4f6:	1d19      	adds	r1, r3, #4
 800d4f8:	6011      	str	r1, [r2, #0]
 800d4fa:	681d      	ldr	r5, [r3, #0]
 800d4fc:	6862      	ldr	r2, [r4, #4]
 800d4fe:	2100      	movs	r1, #0
 800d500:	4628      	mov	r0, r5
 800d502:	f7f2 fe85 	bl	8000210 <memchr>
 800d506:	b108      	cbz	r0, 800d50c <_printf_i+0x1bc>
 800d508:	1b40      	subs	r0, r0, r5
 800d50a:	6060      	str	r0, [r4, #4]
 800d50c:	6863      	ldr	r3, [r4, #4]
 800d50e:	6123      	str	r3, [r4, #16]
 800d510:	2300      	movs	r3, #0
 800d512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d516:	e7a7      	b.n	800d468 <_printf_i+0x118>
 800d518:	6923      	ldr	r3, [r4, #16]
 800d51a:	462a      	mov	r2, r5
 800d51c:	4639      	mov	r1, r7
 800d51e:	4630      	mov	r0, r6
 800d520:	47c0      	blx	r8
 800d522:	3001      	adds	r0, #1
 800d524:	d0aa      	beq.n	800d47c <_printf_i+0x12c>
 800d526:	6823      	ldr	r3, [r4, #0]
 800d528:	079b      	lsls	r3, r3, #30
 800d52a:	d413      	bmi.n	800d554 <_printf_i+0x204>
 800d52c:	68e0      	ldr	r0, [r4, #12]
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	4298      	cmp	r0, r3
 800d532:	bfb8      	it	lt
 800d534:	4618      	movlt	r0, r3
 800d536:	e7a3      	b.n	800d480 <_printf_i+0x130>
 800d538:	2301      	movs	r3, #1
 800d53a:	464a      	mov	r2, r9
 800d53c:	4639      	mov	r1, r7
 800d53e:	4630      	mov	r0, r6
 800d540:	47c0      	blx	r8
 800d542:	3001      	adds	r0, #1
 800d544:	d09a      	beq.n	800d47c <_printf_i+0x12c>
 800d546:	3501      	adds	r5, #1
 800d548:	68e3      	ldr	r3, [r4, #12]
 800d54a:	9a03      	ldr	r2, [sp, #12]
 800d54c:	1a9b      	subs	r3, r3, r2
 800d54e:	42ab      	cmp	r3, r5
 800d550:	dcf2      	bgt.n	800d538 <_printf_i+0x1e8>
 800d552:	e7eb      	b.n	800d52c <_printf_i+0x1dc>
 800d554:	2500      	movs	r5, #0
 800d556:	f104 0919 	add.w	r9, r4, #25
 800d55a:	e7f5      	b.n	800d548 <_printf_i+0x1f8>
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d1ac      	bne.n	800d4ba <_printf_i+0x16a>
 800d560:	7803      	ldrb	r3, [r0, #0]
 800d562:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d566:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d56a:	e76c      	b.n	800d446 <_printf_i+0xf6>
 800d56c:	0800f795 	.word	0x0800f795
 800d570:	0800f7a6 	.word	0x0800f7a6

0800d574 <_sbrk_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	4c06      	ldr	r4, [pc, #24]	; (800d590 <_sbrk_r+0x1c>)
 800d578:	2300      	movs	r3, #0
 800d57a:	4605      	mov	r5, r0
 800d57c:	4608      	mov	r0, r1
 800d57e:	6023      	str	r3, [r4, #0]
 800d580:	f7f5 fbc0 	bl	8002d04 <_sbrk>
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	d102      	bne.n	800d58e <_sbrk_r+0x1a>
 800d588:	6823      	ldr	r3, [r4, #0]
 800d58a:	b103      	cbz	r3, 800d58e <_sbrk_r+0x1a>
 800d58c:	602b      	str	r3, [r5, #0]
 800d58e:	bd38      	pop	{r3, r4, r5, pc}
 800d590:	20000b90 	.word	0x20000b90

0800d594 <__sread>:
 800d594:	b510      	push	{r4, lr}
 800d596:	460c      	mov	r4, r1
 800d598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d59c:	f000 f8e0 	bl	800d760 <_read_r>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	bfab      	itete	ge
 800d5a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5a6:	89a3      	ldrhlt	r3, [r4, #12]
 800d5a8:	181b      	addge	r3, r3, r0
 800d5aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5ae:	bfac      	ite	ge
 800d5b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5b2:	81a3      	strhlt	r3, [r4, #12]
 800d5b4:	bd10      	pop	{r4, pc}

0800d5b6 <__swrite>:
 800d5b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ba:	461f      	mov	r7, r3
 800d5bc:	898b      	ldrh	r3, [r1, #12]
 800d5be:	05db      	lsls	r3, r3, #23
 800d5c0:	4605      	mov	r5, r0
 800d5c2:	460c      	mov	r4, r1
 800d5c4:	4616      	mov	r6, r2
 800d5c6:	d505      	bpl.n	800d5d4 <__swrite+0x1e>
 800d5c8:	2302      	movs	r3, #2
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d0:	f000 f868 	bl	800d6a4 <_lseek_r>
 800d5d4:	89a3      	ldrh	r3, [r4, #12]
 800d5d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5de:	81a3      	strh	r3, [r4, #12]
 800d5e0:	4632      	mov	r2, r6
 800d5e2:	463b      	mov	r3, r7
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ea:	f000 b817 	b.w	800d61c <_write_r>

0800d5ee <__sseek>:
 800d5ee:	b510      	push	{r4, lr}
 800d5f0:	460c      	mov	r4, r1
 800d5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5f6:	f000 f855 	bl	800d6a4 <_lseek_r>
 800d5fa:	1c43      	adds	r3, r0, #1
 800d5fc:	89a3      	ldrh	r3, [r4, #12]
 800d5fe:	bf15      	itete	ne
 800d600:	6560      	strne	r0, [r4, #84]	; 0x54
 800d602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d60a:	81a3      	strheq	r3, [r4, #12]
 800d60c:	bf18      	it	ne
 800d60e:	81a3      	strhne	r3, [r4, #12]
 800d610:	bd10      	pop	{r4, pc}

0800d612 <__sclose>:
 800d612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d616:	f000 b813 	b.w	800d640 <_close_r>
	...

0800d61c <_write_r>:
 800d61c:	b538      	push	{r3, r4, r5, lr}
 800d61e:	4c07      	ldr	r4, [pc, #28]	; (800d63c <_write_r+0x20>)
 800d620:	4605      	mov	r5, r0
 800d622:	4608      	mov	r0, r1
 800d624:	4611      	mov	r1, r2
 800d626:	2200      	movs	r2, #0
 800d628:	6022      	str	r2, [r4, #0]
 800d62a:	461a      	mov	r2, r3
 800d62c:	f7f5 fb19 	bl	8002c62 <_write>
 800d630:	1c43      	adds	r3, r0, #1
 800d632:	d102      	bne.n	800d63a <_write_r+0x1e>
 800d634:	6823      	ldr	r3, [r4, #0]
 800d636:	b103      	cbz	r3, 800d63a <_write_r+0x1e>
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	bd38      	pop	{r3, r4, r5, pc}
 800d63c:	20000b90 	.word	0x20000b90

0800d640 <_close_r>:
 800d640:	b538      	push	{r3, r4, r5, lr}
 800d642:	4c06      	ldr	r4, [pc, #24]	; (800d65c <_close_r+0x1c>)
 800d644:	2300      	movs	r3, #0
 800d646:	4605      	mov	r5, r0
 800d648:	4608      	mov	r0, r1
 800d64a:	6023      	str	r3, [r4, #0]
 800d64c:	f7f5 fb25 	bl	8002c9a <_close>
 800d650:	1c43      	adds	r3, r0, #1
 800d652:	d102      	bne.n	800d65a <_close_r+0x1a>
 800d654:	6823      	ldr	r3, [r4, #0]
 800d656:	b103      	cbz	r3, 800d65a <_close_r+0x1a>
 800d658:	602b      	str	r3, [r5, #0]
 800d65a:	bd38      	pop	{r3, r4, r5, pc}
 800d65c:	20000b90 	.word	0x20000b90

0800d660 <_fstat_r>:
 800d660:	b538      	push	{r3, r4, r5, lr}
 800d662:	4c07      	ldr	r4, [pc, #28]	; (800d680 <_fstat_r+0x20>)
 800d664:	2300      	movs	r3, #0
 800d666:	4605      	mov	r5, r0
 800d668:	4608      	mov	r0, r1
 800d66a:	4611      	mov	r1, r2
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	f7f5 fb20 	bl	8002cb2 <_fstat>
 800d672:	1c43      	adds	r3, r0, #1
 800d674:	d102      	bne.n	800d67c <_fstat_r+0x1c>
 800d676:	6823      	ldr	r3, [r4, #0]
 800d678:	b103      	cbz	r3, 800d67c <_fstat_r+0x1c>
 800d67a:	602b      	str	r3, [r5, #0]
 800d67c:	bd38      	pop	{r3, r4, r5, pc}
 800d67e:	bf00      	nop
 800d680:	20000b90 	.word	0x20000b90

0800d684 <_isatty_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	4c06      	ldr	r4, [pc, #24]	; (800d6a0 <_isatty_r+0x1c>)
 800d688:	2300      	movs	r3, #0
 800d68a:	4605      	mov	r5, r0
 800d68c:	4608      	mov	r0, r1
 800d68e:	6023      	str	r3, [r4, #0]
 800d690:	f7f5 fb1f 	bl	8002cd2 <_isatty>
 800d694:	1c43      	adds	r3, r0, #1
 800d696:	d102      	bne.n	800d69e <_isatty_r+0x1a>
 800d698:	6823      	ldr	r3, [r4, #0]
 800d69a:	b103      	cbz	r3, 800d69e <_isatty_r+0x1a>
 800d69c:	602b      	str	r3, [r5, #0]
 800d69e:	bd38      	pop	{r3, r4, r5, pc}
 800d6a0:	20000b90 	.word	0x20000b90

0800d6a4 <_lseek_r>:
 800d6a4:	b538      	push	{r3, r4, r5, lr}
 800d6a6:	4c07      	ldr	r4, [pc, #28]	; (800d6c4 <_lseek_r+0x20>)
 800d6a8:	4605      	mov	r5, r0
 800d6aa:	4608      	mov	r0, r1
 800d6ac:	4611      	mov	r1, r2
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	6022      	str	r2, [r4, #0]
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	f7f5 fb18 	bl	8002ce8 <_lseek>
 800d6b8:	1c43      	adds	r3, r0, #1
 800d6ba:	d102      	bne.n	800d6c2 <_lseek_r+0x1e>
 800d6bc:	6823      	ldr	r3, [r4, #0]
 800d6be:	b103      	cbz	r3, 800d6c2 <_lseek_r+0x1e>
 800d6c0:	602b      	str	r3, [r5, #0]
 800d6c2:	bd38      	pop	{r3, r4, r5, pc}
 800d6c4:	20000b90 	.word	0x20000b90

0800d6c8 <memcpy>:
 800d6c8:	b510      	push	{r4, lr}
 800d6ca:	1e43      	subs	r3, r0, #1
 800d6cc:	440a      	add	r2, r1
 800d6ce:	4291      	cmp	r1, r2
 800d6d0:	d100      	bne.n	800d6d4 <memcpy+0xc>
 800d6d2:	bd10      	pop	{r4, pc}
 800d6d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d6dc:	e7f7      	b.n	800d6ce <memcpy+0x6>

0800d6de <memmove>:
 800d6de:	4288      	cmp	r0, r1
 800d6e0:	b510      	push	{r4, lr}
 800d6e2:	eb01 0302 	add.w	r3, r1, r2
 800d6e6:	d807      	bhi.n	800d6f8 <memmove+0x1a>
 800d6e8:	1e42      	subs	r2, r0, #1
 800d6ea:	4299      	cmp	r1, r3
 800d6ec:	d00a      	beq.n	800d704 <memmove+0x26>
 800d6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d6f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d6f6:	e7f8      	b.n	800d6ea <memmove+0xc>
 800d6f8:	4283      	cmp	r3, r0
 800d6fa:	d9f5      	bls.n	800d6e8 <memmove+0xa>
 800d6fc:	1881      	adds	r1, r0, r2
 800d6fe:	1ad2      	subs	r2, r2, r3
 800d700:	42d3      	cmn	r3, r2
 800d702:	d100      	bne.n	800d706 <memmove+0x28>
 800d704:	bd10      	pop	{r4, pc}
 800d706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d70a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d70e:	e7f7      	b.n	800d700 <memmove+0x22>

0800d710 <__malloc_lock>:
 800d710:	4770      	bx	lr

0800d712 <__malloc_unlock>:
 800d712:	4770      	bx	lr

0800d714 <_realloc_r>:
 800d714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d716:	4607      	mov	r7, r0
 800d718:	4614      	mov	r4, r2
 800d71a:	460e      	mov	r6, r1
 800d71c:	b921      	cbnz	r1, 800d728 <_realloc_r+0x14>
 800d71e:	4611      	mov	r1, r2
 800d720:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d724:	f7ff bbf2 	b.w	800cf0c <_malloc_r>
 800d728:	b922      	cbnz	r2, 800d734 <_realloc_r+0x20>
 800d72a:	f7ff fba1 	bl	800ce70 <_free_r>
 800d72e:	4625      	mov	r5, r4
 800d730:	4628      	mov	r0, r5
 800d732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d734:	f000 f826 	bl	800d784 <_malloc_usable_size_r>
 800d738:	42a0      	cmp	r0, r4
 800d73a:	d20f      	bcs.n	800d75c <_realloc_r+0x48>
 800d73c:	4621      	mov	r1, r4
 800d73e:	4638      	mov	r0, r7
 800d740:	f7ff fbe4 	bl	800cf0c <_malloc_r>
 800d744:	4605      	mov	r5, r0
 800d746:	2800      	cmp	r0, #0
 800d748:	d0f2      	beq.n	800d730 <_realloc_r+0x1c>
 800d74a:	4631      	mov	r1, r6
 800d74c:	4622      	mov	r2, r4
 800d74e:	f7ff ffbb 	bl	800d6c8 <memcpy>
 800d752:	4631      	mov	r1, r6
 800d754:	4638      	mov	r0, r7
 800d756:	f7ff fb8b 	bl	800ce70 <_free_r>
 800d75a:	e7e9      	b.n	800d730 <_realloc_r+0x1c>
 800d75c:	4635      	mov	r5, r6
 800d75e:	e7e7      	b.n	800d730 <_realloc_r+0x1c>

0800d760 <_read_r>:
 800d760:	b538      	push	{r3, r4, r5, lr}
 800d762:	4c07      	ldr	r4, [pc, #28]	; (800d780 <_read_r+0x20>)
 800d764:	4605      	mov	r5, r0
 800d766:	4608      	mov	r0, r1
 800d768:	4611      	mov	r1, r2
 800d76a:	2200      	movs	r2, #0
 800d76c:	6022      	str	r2, [r4, #0]
 800d76e:	461a      	mov	r2, r3
 800d770:	f7f5 fa5a 	bl	8002c28 <_read>
 800d774:	1c43      	adds	r3, r0, #1
 800d776:	d102      	bne.n	800d77e <_read_r+0x1e>
 800d778:	6823      	ldr	r3, [r4, #0]
 800d77a:	b103      	cbz	r3, 800d77e <_read_r+0x1e>
 800d77c:	602b      	str	r3, [r5, #0]
 800d77e:	bd38      	pop	{r3, r4, r5, pc}
 800d780:	20000b90 	.word	0x20000b90

0800d784 <_malloc_usable_size_r>:
 800d784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d788:	1f18      	subs	r0, r3, #4
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	bfbc      	itt	lt
 800d78e:	580b      	ldrlt	r3, [r1, r0]
 800d790:	18c0      	addlt	r0, r0, r3
 800d792:	4770      	bx	lr

0800d794 <_init>:
 800d794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d796:	bf00      	nop
 800d798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d79a:	bc08      	pop	{r3}
 800d79c:	469e      	mov	lr, r3
 800d79e:	4770      	bx	lr

0800d7a0 <_fini>:
 800d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a2:	bf00      	nop
 800d7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7a6:	bc08      	pop	{r3}
 800d7a8:	469e      	mov	lr, r3
 800d7aa:	4770      	bx	lr
